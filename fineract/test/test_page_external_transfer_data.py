# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.page_external_transfer_data import PageExternalTransferData

class TestPageExternalTransferData(unittest.TestCase):
    """PageExternalTransferData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PageExternalTransferData:
        """Test PageExternalTransferData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PageExternalTransferData`
        """
        model = PageExternalTransferData()
        if include_optional:
            return PageExternalTransferData(
                content = [
                    fineract_client.models.external_transfer_data.ExternalTransferData(
                        details = fineract_client.models.external_transfer_data_details.ExternalTransferDataDetails(
                            details_id = 56, 
                            total_fee_charges_outstanding = 1.337, 
                            total_interest_outstanding = 1.337, 
                            total_outstanding = 1.337, 
                            total_overpaid = 1.337, 
                            total_penalty_charges_outstanding = 1.337, 
                            total_principal_outstanding = 1.337, ), 
                        effective_from = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        effective_to = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        loan = fineract_client.models.external_transfer_loan_data.ExternalTransferLoanData(
                            external_id = '', 
                            loan_id = 56, ), 
                        owner = fineract_client.models.external_transfer_owner_data.ExternalTransferOwnerData(
                            external_id = '', ), 
                        purchase_price_ratio = '', 
                        settlement_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        status = 'ACTIVE', 
                        sub_status = 'BALANCE_ZERO', 
                        transfer_external_id = '', 
                        transfer_id = 56, )
                    ],
                empty = True,
                first = True,
                last = True,
                number = 56,
                number_of_elements = 56,
                pageable = fineract_client.models.pageable.Pageable(
                    offset = 56, 
                    page_number = 56, 
                    page_size = 56, 
                    paged = True, 
                    sort = fineract_client.models.sort.Sort(
                        empty = True, 
                        sorted = True, 
                        unsorted = True, ), 
                    unpaged = True, ),
                size = 56,
                sort = fineract_client.models.sort.Sort(
                    empty = True, 
                    sorted = True, 
                    unsorted = True, ),
                total_elements = 56,
                total_pages = 56
            )
        else:
            return PageExternalTransferData(
        )
        """

    def testPageExternalTransferData(self):
        """Test PageExternalTransferData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
