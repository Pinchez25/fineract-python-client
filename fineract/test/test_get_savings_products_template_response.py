# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_savings_products_template_response import GetSavingsProductsTemplateResponse

class TestGetSavingsProductsTemplateResponse(unittest.TestCase):
    """GetSavingsProductsTemplateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSavingsProductsTemplateResponse:
        """Test GetSavingsProductsTemplateResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSavingsProductsTemplateResponse`
        """
        model = GetSavingsProductsTemplateResponse()
        if include_optional:
            return GetSavingsProductsTemplateResponse(
                account_mapping = fineract_client.models.get_savings_currency.GetSavingsCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                accounting_mapping_options = fineract_client.models.get_savings_products_accounting_mapping_options.GetSavingsProductsAccountingMappingOptions(
                    asset_account_options = [
                        fineract_client.models.get_savings_products_asset_account_options.GetSavingsProductsAssetAccountOptions(
                            disabled = False, 
                            gl_code = '100001', 
                            id = 2, 
                            manual_entries_allowed = True, 
                            name = 'Cash', 
                            tag_id = fineract_client.models.get_savings_asset_tag_id.GetSavingsAssetTagId(), 
                            type = fineract_client.models.get_savings_asset_liability_type.GetSavingsAssetLiabilityType(
                                code = 'accountType.asset', 
                                description = 'ASSET', 
                                id = 1, ), 
                            usage = fineract_client.models.get_savings_products_liability_usage.GetSavingsProductsLiabilityUsage(
                                code = 'accountUsage.detail', 
                                description = 'DETAIL', 
                                id = 1, ), )
                        ], 
                    expense_account_options = [
                        fineract_client.models.get_savings_products_expense_account_options.GetSavingsProductsExpenseAccountOptions(
                            disabled = False, 
                            gl_code = '60001', 
                            id = 6, 
                            manual_entries_allowed = True, 
                            name = 'Write Off Expenses', 
                            tag_id = fineract_client.models.get_savings_asset_tag_id.GetSavingsAssetTagId(), )
                        ], 
                    income_account_options = [
                        fineract_client.models.get_savings_products_income_account_options.GetSavingsProductsIncomeAccountOptions(
                            disabled = False, 
                            gl_code = '40001', 
                            id = 3, 
                            manual_entries_allowed = True, 
                            name = 'income from interest', 
                            tag_id = fineract_client.models.get_savings_asset_tag_id.GetSavingsAssetTagId(), )
                        ], 
                    liability_account_options = [
                        fineract_client.models.get_savings_products_liability_account_options.GetSavingsProductsLiabilityAccountOptions(
                            disabled = False, 
                            gl_code = '50001', 
                            id = 15, 
                            manual_entries_allowed = True, 
                            name = 'Savings Control', 
                            name_decorated = 'Savings Control', 
                            tag_id = fineract_client.models.get_savings_products_liability_tag_id.GetSavingsProductsLiabilityTagId(
                                id = 0, ), )
                        ], ),
                accounting_rule = fineract_client.models.get_savings_products_template_accounting_rule.GetSavingsProductsTemplateAccountingRule(
                    code = 'accountingRuleType.none', 
                    id = 1, 
                    value = 'NONE', ),
                accounting_rule_options = [
                    fineract_client.models.get_savings_products_template_accounting_rule.GetSavingsProductsTemplateAccountingRule(
                        code = 'accountingRuleType.none', 
                        id = 1, 
                        value = 'NONE', )
                    ],
                charge_options = [
                    fineract_client.models.get_savings_products_charge_options.GetSavingsProductsChargeOptions(
                        active = True, 
                        amount = 200, 
                        charge_applies_to = fineract_client.models.get_savings_products_charge_applies_to.GetSavingsProductsChargeAppliesTo(
                            code = 'chargeAppliesTo.savings', 
                            description = 'Savings', 
                            id = 2, ), 
                        charge_calculation_type = fineract_client.models.get_savings_charge_calculation_type.GetSavingsChargeCalculationType(
                            code = 'chargeCalculationType.flat', 
                            description = 'Flat', 
                            id = 1, ), 
                        charge_payment_mode = fineract_client.models.get_savings_charge_payment_mode.GetSavingsChargePaymentMode(
                            code = 'chargepaymentmode.regular', 
                            description = 'chargepaymentmode.regular', 
                            id = 0, ), 
                        charge_time_type = fineract_client.models.get_savings_charge_time_type.GetSavingsChargeTimeType(
                            code = 'chargeTimeType.specifiedDueDate', 
                            description = 'Specified due date', 
                            id = 1, ), 
                        currency = fineract_client.models.get_savings_currency.GetSavingsCurrency(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        id = 4, 
                        name = 'Savings charge 1', 
                        penalty = False, )
                    ],
                currency = fineract_client.models.get_savings_currency.GetSavingsCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                currency_options = [
                    fineract_client.models.get_savings_currency.GetSavingsCurrency(
                        code = 'USD', 
                        decimal_places = 2, 
                        display_label = 'US Dollar ($)', 
                        display_symbol = '$', 
                        name = 'US Dollar', 
                        name_code = 'currency.USD', )
                    ],
                interest_calculation_days_in_year_type = fineract_client.models.get_savings_products_interest_calculation_days_in_year_type.GetSavingsProductsInterestCalculationDaysInYearType(
                    code = 'savingsInterestCalculationDaysInYearType.days365', 
                    id = 365, 
                    value = '365 Days', ),
                interest_calculation_days_in_year_type_options = [
                    fineract_client.models.get_savings_products_interest_calculation_days_in_year_type.GetSavingsProductsInterestCalculationDaysInYearType(
                        code = 'savingsInterestCalculationDaysInYearType.days365', 
                        id = 365, 
                        value = '365 Days', )
                    ],
                interest_calculation_type = fineract_client.models.get_savings_products_interest_calculation_type.GetSavingsProductsInterestCalculationType(
                    code = 'savingsInterestCalculationType.dailybalance', 
                    id = 1, 
                    value = 'Daily Balance', ),
                interest_calculation_type_options = [
                    fineract_client.models.get_savings_products_interest_calculation_type.GetSavingsProductsInterestCalculationType(
                        code = 'savingsInterestCalculationType.dailybalance', 
                        id = 1, 
                        value = 'Daily Balance', )
                    ],
                interest_compounding_period_type = fineract_client.models.get_savings_products_interest_compounding_period_type.GetSavingsProductsInterestCompoundingPeriodType(
                    code = 'savings.interest.period.savingsCompoundingInterestPeriodType.daily', 
                    id = 1, 
                    value = 'Daily', ),
                interest_compounding_period_type_options = [
                    fineract_client.models.get_savings_products_interest_compounding_period_type.GetSavingsProductsInterestCompoundingPeriodType(
                        code = 'savings.interest.period.savingsCompoundingInterestPeriodType.daily', 
                        id = 1, 
                        value = 'Daily', )
                    ],
                interest_posting_period_type = fineract_client.models.get_savings_products_interest_posting_period_type.GetSavingsProductsInterestPostingPeriodType(
                    code = 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly', 
                    id = 4, 
                    value = 'Monthly', ),
                interest_posting_period_type_options = [
                    fineract_client.models.get_savings_products_interest_posting_period_type.GetSavingsProductsInterestPostingPeriodType(
                        code = 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly', 
                        id = 4, 
                        value = 'Monthly', )
                    ],
                lockin_period_frequency_type_options = [
                    fineract_client.models.get_savings_products_lockin_period_frequency_type_options.GetSavingsProductsLockinPeriodFrequencyTypeOptions(
                        code = 'savings.lockin.savingsPeriodFrequencyType.days', 
                        id = 0, 
                        value = 'Days', )
                    ],
                payment_type_options = [
                    fineract_client.models.get_savings_products_payment_type_options.GetSavingsProductsPaymentTypeOptions(
                        description = 'Money Transfer', 
                        id = 14, 
                        is_cash_payment = True, 
                        name = 'Wire Transfer', 
                        position = 0, )
                    ],
                withdrawal_fee_type_options = [
                    fineract_client.models.get_savings_products_withdrawal_fee_type_options.GetSavingsProductsWithdrawalFeeTypeOptions(
                        code = 'savingsWithdrawalFeesType.flat', 
                        id = 1, 
                        value = 'Flat', )
                    ]
            )
        else:
            return GetSavingsProductsTemplateResponse(
        )
        """

    def testGetSavingsProductsTemplateResponse(self):
        """Test GetSavingsProductsTemplateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
