# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_products_type_product_id_response import GetProductsTypeProductIdResponse

class TestGetProductsTypeProductIdResponse(unittest.TestCase):
    """GetProductsTypeProductIdResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetProductsTypeProductIdResponse:
        """Test GetProductsTypeProductIdResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetProductsTypeProductIdResponse`
        """
        model = GetProductsTypeProductIdResponse()
        if include_optional:
            return GetProductsTypeProductIdResponse(
                accounting_mapping_options = fineract_client.models.get_products_accounting_mapping_options.GetProductsAccountingMappingOptions(
                    asset_account_options = [
                        fineract_client.models.get_products_asset_account_options.GetProductsAssetAccountOptions(
                            description = 'DEFAULT_DESCRIPTION', 
                            disabled = False, 
                            gl_code = 'ASSET_ED1461237837829', 
                            id = 1, 
                            manual_entries_allowed = True, 
                            name = 'ACCOUNT_NAME_1FJBQ', 
                            name_decorated = 'ACCOUNT_NAME_1FJBQ', 
                            tag_id = fineract_client.models.get_products_tag_id.GetProductsTagId(
                                id = 0, 
                                is_active = False, ), 
                            type = fineract_client.models.get_asset_type.GetAssetType(
                                code = 'accountType.asset', 
                                description = 'ASSET', 
                                id = 1, ), 
                            usage = fineract_client.models.get_products_liability_usage.GetProductsLiabilityUsage(
                                code = 'accountUsage.detail', 
                                description = 'DETAIL', 
                                id = 1, ), )
                        ], 
                    equity_account_options = [
                        fineract_client.models.get_products_equity_account_options.GetProductsEquityAccountOptions(
                            disabled = False, 
                            gl_code = 'EQUITY1', 
                            id = 66, 
                            manual_entries_allowed = True, 
                            name = 'Equity Account', 
                            name_decorated = 'Equity Account', )
                        ], 
                    income_account_options = [
                        fineract_client.models.get_products_income_account_options.GetProductsIncomeAccountOptions(
                            description = 'DEFAULT_DESCRIPTION', 
                            disabled = False, 
                            gl_code = 'INCOME_9O1461237838422', 
                            id = 2, 
                            manual_entries_allowed = True, 
                            name = 'ACCOUNT_NAME_1FJBQ', 
                            name_decorated = 'ACCOUNT_NAME_1FJBQ', )
                        ], 
                    liability_account_options = [
                        fineract_client.models.get_products_liability_account_options.GetProductsLiabilityAccountOptions(
                            description = 'DEFAULT_DESCRIPTION', 
                            disabled = False, 
                            gl_code = 'LIABILITY_2T1461237838897', 
                            id = 4, 
                            manual_entries_allowed = True, 
                            name = 'ACCOUNT_NAME_1FJBQ', 
                            name_decorated = 'ACCOUNT_NAME_1FJBQ', )
                        ], ),
                accounting_mappings = fineract_client.models.get_products_accounting_mappings.GetProductsAccountingMappings(
                    income_from_fee_account_id = fineract_client.models.get_income_from_fee_account_id.GetIncomeFromFeeAccountId(
                        gl_code = 'INCOME_OY1461237869836', 
                        id = 14, 
                        name = 'ACCOUNT_NAME_1FJBQ', ), 
                    share_equity_id = fineract_client.models.get_share_equity_id.GetShareEquityId(
                        gl_code = 'EQUITY1', 
                        id = 66, 
                        name = 'Equity Account', ), 
                    share_reference_id = fineract_client.models.get_share_reference_id.GetShareReferenceId(
                        gl_code = 'ASSET_ED1461237837829', 
                        id = 1, 
                        name = 'ACCOUNT_NAME_1FJBQ', ), 
                    share_suspense_id = fineract_client.models.get_share_suspense_id.GetShareSuspenseId(
                        gl_code = 'LIABILITY_MA1461237860198', 
                        id = 8, 
                        name = 'ACCOUNT_NAME_1FJBQ', ), ),
                accounting_rule = fineract_client.models.get_products_accounting_rule.GetProductsAccountingRule(
                    code = 'accountingRuleType.cash', 
                    description = 'CASH BASED', 
                    id = 2, ),
                allow_dividend_calculation_for_inactive_clients = True,
                charge_options = [
                    fineract_client.models.get_products_charges.GetProductsCharges(
                        active = True, 
                        amount = 1, 
                        charge_applies_to = fineract_client.models.get_charge_applies_to.GetChargeAppliesTo(
                            code = 'chargeAppliesTo.shares', 
                            description = 'Shares', 
                            id = 4, ), 
                        charge_calculation_type = fineract_client.models.get_charge_calculation_type.GetChargeCalculationType(
                            code = 'chargeCalculationType.flat', 
                            description = 'Flat', 
                            id = 1, ), 
                        charge_payment_mode = fineract_client.models.get_charge_payment_mode.GetChargePaymentMode(
                            code = 'chargepaymentmode.regular', 
                            description = 'Regular', 
                            id = 0, ), 
                        charge_time_type = fineract_client.models.get_charge_time_type.GetChargeTimeType(
                            code = 'chargeTimeType.activation', 
                            description = 'Share Account Activate', 
                            id = 13, ), 
                        currency = fineract_client.models.get_charges_currency.GetChargesCurrency(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        id = 20, 
                        name = 'Share Account Activation Flat', 
                        penalty = False, )
                    ],
                charges = [
                    fineract_client.models.get_products_charges.GetProductsCharges(
                        active = True, 
                        amount = 1, 
                        charge_applies_to = fineract_client.models.get_charge_applies_to.GetChargeAppliesTo(
                            code = 'chargeAppliesTo.shares', 
                            description = 'Shares', 
                            id = 4, ), 
                        charge_calculation_type = fineract_client.models.get_charge_calculation_type.GetChargeCalculationType(
                            code = 'chargeCalculationType.flat', 
                            description = 'Flat', 
                            id = 1, ), 
                        charge_payment_mode = fineract_client.models.get_charge_payment_mode.GetChargePaymentMode(
                            code = 'chargepaymentmode.regular', 
                            description = 'Regular', 
                            id = 0, ), 
                        charge_time_type = fineract_client.models.get_charge_time_type.GetChargeTimeType(
                            code = 'chargeTimeType.activation', 
                            description = 'Share Account Activate', 
                            id = 13, ), 
                        currency = fineract_client.models.get_charges_currency.GetChargesCurrency(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        id = 20, 
                        name = 'Share Account Activation Flat', 
                        penalty = False, )
                    ],
                currency = fineract_client.models.get_products_currency.GetProductsCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    in_multiples_of = 100, 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                currency_options = [
                    fineract_client.models.get_charges_currency.GetChargesCurrency(
                        code = 'USD', 
                        decimal_places = 2, 
                        display_label = 'US Dollar ($)', 
                        display_symbol = '$', 
                        name = 'US Dollar', 
                        name_code = 'currency.USD', )
                    ],
                description = 'SP',
                id = 1,
                lock_period_type_enum = fineract_client.models.get_lock_period_type_enum.GetLockPeriodTypeEnum(
                    description = 'Days', 
                    id = 0, ),
                lockin_period = 1,
                lockin_period_frequency_type_options = [
                    fineract_client.models.get_products_minimum_active_period_frequency_type_options.GetProductsMinimumActivePeriodFrequencyTypeOptions(
                        code = 'savings.lockin.sharePeriodFrequencyType.days', 
                        description = 'Days', 
                        id = 0, )
                    ],
                market_price = [
                    fineract_client.models.get_products_market_price.GetProductsMarketPrice(
                        from_date = 'Feb 1, 2016', 
                        id = 4, 
                        share_value = 1, )
                    ],
                maximum_shares = 50,
                minimum_active_period = 1,
                minimum_active_period_for_dividends_type_enum = fineract_client.models.get_lock_period_type_enum.GetLockPeriodTypeEnum(
                    description = 'Days', 
                    id = 0, ),
                minimum_active_period_frequency_type_options = [
                    fineract_client.models.get_products_minimum_active_period_frequency_type_options.GetProductsMinimumActivePeriodFrequencyTypeOptions(
                        code = 'savings.lockin.sharePeriodFrequencyType.days', 
                        description = 'Days', 
                        id = 0, )
                    ],
                minimum_shares = 1,
                name = 'Share Product',
                nominal_shares = 10,
                share_capital = 50,
                short_name = 'SP',
                total_shares = 100,
                total_shares_issued = 50,
                unit_price = 1
            )
        else:
            return GetProductsTypeProductIdResponse(
        )
        """

    def testGetProductsTypeProductIdResponse(self):
        """Test GetProductsTypeProductIdResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
