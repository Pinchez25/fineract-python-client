# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.post_recurring_deposit_products_request import PostRecurringDepositProductsRequest

class TestPostRecurringDepositProductsRequest(unittest.TestCase):
    """PostRecurringDepositProductsRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostRecurringDepositProductsRequest:
        """Test PostRecurringDepositProductsRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostRecurringDepositProductsRequest`
        """
        model = PostRecurringDepositProductsRequest()
        if include_optional:
            return PostRecurringDepositProductsRequest(
                accounting_rule = 1,
                charts = [
                    fineract_client.models.post_recurring_deposit_products_charts.PostRecurringDepositProductsCharts(
                        chart_slabs = [
                            fineract_client.models.post_recurring_deposit_products_chart_slabs.PostRecurringDepositProductsChartSlabs(
                                annual_interest_rate = 4.5, 
                                description = 'from 0 to 90 days', 
                                from_period = 0, 
                                period_type = 1, 
                                to_period = 90, )
                            ], 
                        date_format = 'dd MMMM yyyy', 
                        from_date = '01 Jan 2014', 
                        locale = 'en', )
                    ],
                currency_code = 'USD',
                deposit_amount = 10000,
                description = 'Daily compounding using Daily Balance, 5% per year, 365 days in year',
                digits_after_decimal = 2,
                in_multiples_of = 0,
                interest_calculation_days_in_year_type = 365,
                interest_calculation_type = 1,
                interest_compounding_period_type = 1,
                interest_posting_period_type = 4,
                locale = 'en',
                max_deposit_amount = 1000000,
                max_deposit_term = 5,
                max_deposit_term_type_id = 3,
                min_deposit_amount = 100,
                min_deposit_term = 1,
                min_deposit_term_type_id = 1,
                name = 'Recurring deposit product',
                pre_closure_penal_applicable = True,
                pre_closure_penal_interest = 1.75,
                pre_closure_penal_interest_on_type_id = 1,
                recurring_deposit_frequency = 1,
                recurring_deposit_frequency_type_id = 2,
                short_name = 'RD01'
            )
        else:
            return PostRecurringDepositProductsRequest(
        )
        """

    def testPostRecurringDepositProductsRequest(self):
        """Test PostRecurringDepositProductsRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
