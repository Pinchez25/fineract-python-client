# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.put_loans_loan_id_request import PutLoansLoanIdRequest

class TestPutLoansLoanIdRequest(unittest.TestCase):
    """PutLoansLoanIdRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PutLoansLoanIdRequest:
        """Test PutLoansLoanIdRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PutLoansLoanIdRequest`
        """
        model = PutLoansLoanIdRequest()
        if include_optional:
            return PutLoansLoanIdRequest(
                amortization_type = 1,
                charges = [
                    fineract_client.models.put_loans_loan_id_changes.PutLoansLoanIdChanges(
                        fraud = False, 
                        locale = 'en', 
                        principal = 5000, )
                    ],
                client_id = 1,
                collateral = [
                    fineract_client.models.put_loans_loan_id_collateral.PutLoansLoanIdCollateral(
                        client_collateral_id = 1, 
                        quantity = 1, )
                    ],
                create_standing_instruction_at_disbursement = True,
                date_format = 'dd MMMM yyyy',
                disbursed_amount_percentage_for_down_payment = 0,
                disbursement_data = [
                    fineract_client.models.put_loans_loan_id_disbursement_data.PutLoansLoanIdDisbursementData(
                        date_format = 'dd MMMM yyyy', 
                        expected_disbursement_date = '', 
                        interest_type = 1, 
                        is_equal_amortization = True, 
                        locale = 'en', 
                        net_disbursal_amount = 1, 
                        principal = 1, )
                    ],
                enable_auto_repayment_for_down_payment = False,
                enable_down_payment = False,
                enable_installment_level_delinquency = False,
                expected_disbursement_date = '04 March 2014',
                fixed_length = 1,
                fixed_principal_percentage_per_installment = 5.5,
                fraud = True,
                grace_on_arrears_ageing = 1,
                interest_calculation_period_type = 0,
                interest_charged_from_date = '',
                interest_rate_per_period = 2,
                interest_type = 0,
                is_equal_amortization = True,
                is_topup = True,
                link_account_id = 1,
                loan_id_to_close = 1,
                loan_schedule_processing_type = 'HORIZONTAL',
                loan_term_frequency = 10,
                loan_term_frequency_type = 0,
                loan_type = 'individual',
                locale = 'en',
                max_outstanding_loan_balance = 1,
                number_of_repayments = 10,
                principal = 5000,
                product_id = 1,
                repayment_every = 1,
                repayment_frequency_day_of_week_type = 1,
                repayment_frequency_nth_day_type = 1,
                repayment_frequency_type = 0,
                repayments_starting_from_date = '',
                submitted_on_date = '',
                transaction_processing_strategy_code = 'mifos-standard-strategy'
            )
        else:
            return PutLoansLoanIdRequest(
        )
        """

    def testPutLoansLoanIdRequest(self):
        """Test PutLoansLoanIdRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
