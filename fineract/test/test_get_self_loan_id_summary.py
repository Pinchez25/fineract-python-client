# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_self_loan_id_summary import GetSelfLoanIdSummary

class TestGetSelfLoanIdSummary(unittest.TestCase):
    """GetSelfLoanIdSummary unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSelfLoanIdSummary:
        """Test GetSelfLoanIdSummary
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSelfLoanIdSummary`
        """
        model = GetSelfLoanIdSummary()
        if include_optional:
            return GetSelfLoanIdSummary(
                can_disburse = False,
                currency = fineract_client.models.get_loans_loan_id_currency.GetLoansLoanIdCurrency(
                    code = 'UGX', 
                    decimal_places = 2, 
                    display_label = 'Uganda Shilling (USh)', 
                    display_symbol = 'USh', 
                    name = 'Uganda Shilling', 
                    name_code = 'currency.UGX', ),
                disbursement_details = [
                    fineract_client.models.get_loans_loan_id_disbursement_details.GetLoansLoanIdDisbursementDetails(
                        actual_disbursement_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        approved_principal = 22000, 
                        charge_amount = 22000, 
                        date_format = 'dd MMMM yyyy', 
                        expected_disbursement_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        id = 71, 
                        loan_charge_id = '1', 
                        locale = 'de_DE', 
                        net_disbursal_amount = 22000, 
                        note = 'some note', 
                        principal = 22000, 
                        waived_charge_amount = 22000, )
                    ],
                emi_amount_variations = [
                    fineract_client.models.get_loans_loan_id_emi_variations.GetLoansLoanIdEmiVariations()
                    ],
                fee_charges_charged = 18000,
                fee_charges_due_at_disbursement_charged = 0,
                fee_charges_outstanding = 18000,
                fee_charges_overdue = 15000,
                fee_charges_paid = 0,
                fee_charges_waived = 0,
                fee_charges_written_off = 0,
                fixed_emi_amount = 1100,
                in_arrears = True,
                interest_charged = 240000,
                interest_outstanding = 240000,
                interest_overdue = 200000,
                interest_paid = 0,
                interest_waived = 0,
                interest_written_off = 0,
                is_npa = False,
                linked_account = fineract_client.models.get_loans_loan_id_linked_account.GetLoansLoanIdLinkedAccount(
                    account_no = 1, 
                    id = 1, ),
                max_outstanding_loan_balance = 35000,
                overdue_charges = [
                    fineract_client.models.get_loans_loan_id_overdue_charges.GetLoansLoanIdOverdueCharges(
                        active = True, 
                        amount = 3, 
                        charge_applies_to = fineract_client.models.get_loan_charge_template_charge_applies_to.GetLoanChargeTemplateChargeAppliesTo(
                            code = 'chargeAppliesTo.loan', 
                            description = 'Loan', 
                            id = 1, ), 
                        charge_calculation_type = fineract_client.models.get_loans_loan_id_charge_calculation_type.GetLoansLoanIdChargeCalculationType(
                            code = 'chargeCalculationType.percent.of.amount', 
                            description = '% Amount', 
                            id = 2, ), 
                        charge_payment_mode = fineract_client.models.get_loans_loan_id_charge_payment_mode.GetLoansLoanIdChargePaymentMode(
                            code = 'chargepaymentmode.regular', 
                            description = 'Regular', 
                            id = 0, ), 
                        charge_time_type = fineract_client.models.get_loans_loan_id_charge_time_type.GetLoansLoanIdChargeTimeType(
                            code = 'chargeTimeType.overdueInstallment', 
                            description = 'overdue fees', 
                            id = 9, ), 
                        currency = fineract_client.models.get_loan_currency.GetLoanCurrency(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        fee_frequency = fineract_client.models.get_loans_loan_id_fee_frequency.GetLoansLoanIdFeeFrequency(
                            code = 'feeFrequencyperiodFrequencyType.weeks', 
                            description = 'Weeks', 
                            id = 1, ), 
                        fee_interval = 2, 
                        id = 20, 
                        name = 'overdraft penality', 
                        penalty = True, )
                    ],
                overdue_since_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                penalty_charges_charged = 0,
                penalty_charges_outstanding = 0,
                penalty_charges_overdue = 0,
                penalty_charges_paid = 0,
                penalty_charges_waived = 0,
                penalty_charges_written_off = 0,
                principal_adjustments = 0,
                principal_disbursed = 1000000,
                principal_outstanding = 1000000,
                principal_overdue = 833333.3,
                principal_paid = 0,
                principal_written_off = 0,
                total_charge_adjustment = 0,
                total_charge_adjustment_reversed = 0,
                total_chargeback = 0,
                total_cost_of_loan = 0,
                total_credit_balance_refund = 0,
                total_credit_balance_refund_reversed = 0,
                total_expected_cost_of_loan = 258000,
                total_expected_repayment = 1258000,
                total_goodwill_credit = 0,
                total_goodwill_credit_reversed = 0,
                total_merchant_refund = 0,
                total_merchant_refund_reversed = 0,
                total_outstanding = 1258000,
                total_overdue = 1048333.3,
                total_payout_refund = 0,
                total_payout_refund_reversed = 0,
                total_repayment = 0,
                total_repayment_transaction = 0,
                total_repayment_transaction_reversed = 0,
                total_waived = 0,
                total_written_off = 0
            )
        else:
            return GetSelfLoanIdSummary(
        )
        """

    def testGetSelfLoanIdSummary(self):
        """Test GetSelfLoanIdSummary"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
