# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loans_loan_id_transactions import GetLoansLoanIdTransactions

class TestGetLoansLoanIdTransactions(unittest.TestCase):
    """GetLoansLoanIdTransactions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoansLoanIdTransactions:
        """Test GetLoansLoanIdTransactions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoansLoanIdTransactions`
        """
        model = GetLoansLoanIdTransactions()
        if include_optional:
            return GetLoansLoanIdTransactions(
                account_id = 7327,
                account_number = 'acct123',
                amount = 100,
                bank_number = 34645568,
                check_number = 10001,
                currency = fineract_client.models.get_loans_loan_id_currency.GetLoansLoanIdCurrency(
                    code = 'UGX', 
                    decimal_places = 2, 
                    display_label = 'Uganda Shilling (USh)', 
                    display_symbol = 'USh', 
                    name = 'Uganda Shilling', 
                    name_code = 'currency.UGX', ),
                var_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                date_format = 'dd MMMM yyyy',
                external_id = '3',
                fee_charges_portion = 100,
                fixed_emi_amount = 100,
                id = 1,
                interest_portion = 100,
                loan_charge_paid_by_list = [
                    fineract_client.models.get_loans_loan_id_loan_charge_paid_by_data.GetLoansLoanIdLoanChargePaidByData(
                        amount = 100, 
                        charge_id = 1, 
                        id = 11, 
                        installment_number = 9679, 
                        name = 'name', 
                        transaction_id = 636, )
                    ],
                loan_repayment_schedule_installments = [
                    fineract_client.models.get_loans_loan_id_loan_repayment_schedule_installment_data.GetLoansLoanIdLoanRepaymentScheduleInstallmentData(
                        amount = 100, 
                        date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        id = 1, 
                        installment_id = 11, )
                    ],
                locale = 'de_DE',
                manually_reversed = True,
                net_disbursal_amount = 100,
                number_of_repayments = 4,
                office_id = 1,
                office_name = 'Head Office',
                outstanding_loan_balance = 100,
                overpayment_portion = 100,
                payment_detail_data = fineract_client.models.get_loans_loan_id_payment_detail_data.GetLoansLoanIdPaymentDetailData(
                    account_number = 'acc123', 
                    bank_number = 'ban123', 
                    check_number = 'che123', 
                    id = 62, 
                    payment_type = fineract_client.models.get_loans_loan_id_payment_type.GetLoansLoanIdPaymentType(
                        description = 'Cash Payment', 
                        id = 11, 
                        is_cash_payment = True, 
                        name = 'Cash', 
                        position = 0, ), 
                    receipt_number = 'rec123', 
                    routing_code = 'rou123', ),
                payment_type_id = 101,
                payment_type_options = [
                    fineract_client.models.get_loans_loan_id_payment_type.GetLoansLoanIdPaymentType(
                        description = 'Cash Payment', 
                        id = 11, 
                        is_cash_payment = True, 
                        name = 'Cash', 
                        position = 0, )
                    ],
                penalty_charges_portion = 100,
                possible_next_repayment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                principal_portion = 100,
                receipt_number = 67863,
                reversal_external_id = '95174ff9-1a75-4d72-a413-6f9b1cb988b7',
                reversed_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                routing_code = 6337,
                submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                transaction_amount = 100,
                transaction_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                transaction_relations = [
                    fineract_client.models.get_loans_loan_id_loan_transaction_relation.GetLoansLoanIdLoanTransactionRelation(
                        amount = 100, 
                        from_loan_transaction = 1, 
                        payment_type = 'Repayment Adjustment Chargeback', 
                        relation_type = 'CHARGEBACK', 
                        to_loan_charge = 10, 
                        to_loan_transaction = 10, )
                    ],
                transaction_type = 'repayment',
                type = fineract_client.models.get_loans_loan_id_loan_transaction_enum_data.GetLoansLoanIdLoanTransactionEnumData(
                    accrual = False, 
                    approve_transfer = False, 
                    charge_adjustment = False, 
                    charge_payment = False, 
                    chargeoff = False, 
                    code = 'loanTransactionType.repayment', 
                    contra = False, 
                    credit_balance_refund = False, 
                    disbursement = False, 
                    goodwill_credit = False, 
                    id = 1, 
                    initiate_transfer = False, 
                    merchant_issued_refund = False, 
                    payout_refund = False, 
                    recovery_repayment = False, 
                    refund = False, 
                    refund_for_active_loans = False, 
                    reject_transfer = False, 
                    repayment = True, 
                    repayment_at_disbursement = False, 
                    value = '2', 
                    waive_charges = False, 
                    waive_interest = False, 
                    withdraw_transfer = False, 
                    write_off = False, ),
                unrecognized_income_portion = 100,
                write_off_reason_options = [
                    fineract_client.models.get_loans_loan_id_code_value_data.GetLoansLoanIdCodeValueData(
                        active = True, 
                        description = 'code description', 
                        id = 1, 
                        mandatory = False, 
                        name = 'code name', 
                        position = 0, )
                    ]
            )
        else:
            return GetLoansLoanIdTransactions(
        )
        """

    def testGetLoansLoanIdTransactions(self):
        """Test GetLoansLoanIdTransactions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
