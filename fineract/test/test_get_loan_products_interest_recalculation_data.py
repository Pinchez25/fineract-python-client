# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loan_products_interest_recalculation_data import GetLoanProductsInterestRecalculationData

class TestGetLoanProductsInterestRecalculationData(unittest.TestCase):
    """GetLoanProductsInterestRecalculationData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoanProductsInterestRecalculationData:
        """Test GetLoanProductsInterestRecalculationData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoanProductsInterestRecalculationData`
        """
        model = GetLoanProductsInterestRecalculationData()
        if include_optional:
            return GetLoanProductsInterestRecalculationData(
                allow_compounding_on_eod = True,
                id = 3,
                interest_recalculation_compounding_frequency_type = fineract_client.models.get_loan_products_interest_recalculation_compounding_frequency_type.GetLoanProductsInterestRecalculationCompoundingFrequencyType(
                    code = 'interestRecalculationFrequencyType.same.as.repayment.period', 
                    description = 'Same as repayment period', 
                    id = 1, ),
                interest_recalculation_compounding_type = fineract_client.models.get_loan_products_interest_recalculation_compounding_type.GetLoanProductsInterestRecalculationCompoundingType(
                    code = 'interestRecalculationCompoundingMethod.fee', 
                    description = 'Fee', 
                    id = 2, ),
                is_arrears_based_on_original_schedule = True,
                is_compounding_to_be_posted_as_transaction = True,
                pre_closure_interest_calculation_strategy = fineract_client.models.get_loan_products_pre_closure_interest_calculation_strategy.GetLoanProductsPreClosureInterestCalculationStrategy(
                    code = 'loanPreClosureInterestCalculationStrategy.tillPreClosureDate', 
                    description = 'Till preclose Date', 
                    id = 1, ),
                product_id = 1,
                recalculation_compounding_frequency_interval = 1,
                recalculation_compounding_frequency_on_day_type = 1,
                recalculation_rest_frequency_interval = 1,
                recalculation_rest_frequency_type = fineract_client.models.get_loan_products_interest_recalculation_compounding_frequency_type.GetLoanProductsInterestRecalculationCompoundingFrequencyType(
                    code = 'interestRecalculationFrequencyType.same.as.repayment.period', 
                    description = 'Same as repayment period', 
                    id = 1, ),
                reschedule_strategy_type = fineract_client.models.get_loan_products_reschedule_strategy_type.GetLoanProductsRescheduleStrategyType(
                    code = 'loanRescheduleStrategyMethod.reduce.number.of.installments', 
                    description = 'Reduce number of installments', 
                    id = 2, )
            )
        else:
            return GetLoanProductsInterestRecalculationData(
        )
        """

    def testGetLoanProductsInterestRecalculationData(self):
        """Test GetLoanProductsInterestRecalculationData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
