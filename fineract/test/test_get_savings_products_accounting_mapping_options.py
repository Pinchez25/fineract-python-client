# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_savings_products_accounting_mapping_options import GetSavingsProductsAccountingMappingOptions

class TestGetSavingsProductsAccountingMappingOptions(unittest.TestCase):
    """GetSavingsProductsAccountingMappingOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSavingsProductsAccountingMappingOptions:
        """Test GetSavingsProductsAccountingMappingOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSavingsProductsAccountingMappingOptions`
        """
        model = GetSavingsProductsAccountingMappingOptions()
        if include_optional:
            return GetSavingsProductsAccountingMappingOptions(
                asset_account_options = [
                    fineract_client.models.get_savings_products_asset_account_options.GetSavingsProductsAssetAccountOptions(
                        disabled = False, 
                        gl_code = '100001', 
                        id = 2, 
                        manual_entries_allowed = True, 
                        name = 'Cash', 
                        tag_id = fineract_client.models.get_savings_asset_tag_id.GetSavingsAssetTagId(), 
                        type = fineract_client.models.get_savings_asset_liability_type.GetSavingsAssetLiabilityType(
                            code = 'accountType.asset', 
                            description = 'ASSET', 
                            id = 1, ), 
                        usage = fineract_client.models.get_savings_products_liability_usage.GetSavingsProductsLiabilityUsage(
                            code = 'accountUsage.detail', 
                            description = 'DETAIL', 
                            id = 1, ), )
                    ],
                expense_account_options = [
                    fineract_client.models.get_savings_products_expense_account_options.GetSavingsProductsExpenseAccountOptions(
                        disabled = False, 
                        gl_code = '60001', 
                        id = 6, 
                        manual_entries_allowed = True, 
                        name = 'Write Off Expenses', 
                        tag_id = fineract_client.models.get_savings_asset_tag_id.GetSavingsAssetTagId(), 
                        type = fineract_client.models.get_savings_products_expense_type.GetSavingsProductsExpenseType(
                            code = 'accountType.expense', 
                            description = 'EXPENSE', 
                            id = 5, ), 
                        usage = fineract_client.models.get_savings_products_liability_usage.GetSavingsProductsLiabilityUsage(
                            code = 'accountUsage.detail', 
                            description = 'DETAIL', 
                            id = 1, ), )
                    ],
                income_account_options = [
                    fineract_client.models.get_savings_products_income_account_options.GetSavingsProductsIncomeAccountOptions(
                        disabled = False, 
                        gl_code = '40001', 
                        id = 3, 
                        manual_entries_allowed = True, 
                        name = 'income from interest', 
                        tag_id = fineract_client.models.get_savings_asset_tag_id.GetSavingsAssetTagId(), 
                        type = fineract_client.models.get_savings_products_income_type.GetSavingsProductsIncomeType(
                            code = 'accountType.income', 
                            description = 'INCOME', 
                            id = 4, ), 
                        usage = fineract_client.models.get_savings_products_liability_usage.GetSavingsProductsLiabilityUsage(
                            code = 'accountUsage.detail', 
                            description = 'DETAIL', 
                            id = 1, ), )
                    ],
                liability_account_options = [
                    fineract_client.models.get_savings_products_liability_account_options.GetSavingsProductsLiabilityAccountOptions(
                        disabled = False, 
                        gl_code = '50001', 
                        id = 15, 
                        manual_entries_allowed = True, 
                        name = 'Savings Control', 
                        name_decorated = 'Savings Control', 
                        tag_id = fineract_client.models.get_savings_products_liability_tag_id.GetSavingsProductsLiabilityTagId(
                            id = 0, ), 
                        type = fineract_client.models.get_savings_products_liability_type.GetSavingsProductsLiabilityType(
                            code = 'accountType.liability', 
                            description = 'LIABILITY', 
                            id = 2, ), 
                        usage = fineract_client.models.get_savings_products_liability_usage.GetSavingsProductsLiabilityUsage(
                            code = 'accountUsage.detail', 
                            description = 'DETAIL', 
                            id = 1, ), )
                    ]
            )
        else:
            return GetSavingsProductsAccountingMappingOptions(
        )
        """

    def testGetSavingsProductsAccountingMappingOptions(self):
        """Test GetSavingsProductsAccountingMappingOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
