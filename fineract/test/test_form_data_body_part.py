# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.form_data_body_part import FormDataBodyPart

class TestFormDataBodyPart(unittest.TestCase):
    """FormDataBodyPart unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FormDataBodyPart:
        """Test FormDataBodyPart
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FormDataBodyPart`
        """
        model = FormDataBodyPart()
        if include_optional:
            return FormDataBodyPart(
                content = None,
                content_disposition = fineract_client.models.content_disposition.ContentDisposition(
                    creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    file_name = '', 
                    modification_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    parameters = {
                        'key' : ''
                        }, 
                    read_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    size = 56, 
                    type = '', ),
                entity = None,
                file_name = '',
                form_data_content_disposition = fineract_client.models.form_data_content_disposition.FormDataContentDisposition(
                    creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    file_name = '', 
                    modification_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    name = '', 
                    parameters = {
                        'key' : ''
                        }, 
                    read_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    size = 56, 
                    type = '', ),
                headers = {
                    'key' : [
                        ''
                        ]
                    },
                media_type = fineract_client.models.media_type.MediaType(
                    parameters = {
                        'key' : ''
                        }, 
                    subtype = '', 
                    type = '', 
                    wildcard_subtype = True, 
                    wildcard_type = True, ),
                message_body_workers = fineract_client.models.message_body_workers.messageBodyWorkers(),
                name = '',
                parameterized_headers = {
                    'key' : [
                        fineract_client.models.parameterized_header.ParameterizedHeader(
                            parameters = {
                                'key' : ''
                                }, 
                            value = '', )
                        ]
                    },
                parent = fineract_client.models.multi_part.MultiPart(
                    body_parts = [
                        fineract_client.models.body_part.BodyPart(
                            content_disposition = fineract_client.models.content_disposition.ContentDisposition(
                                creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                file_name = '', 
                                modification_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                parameters = {
                                    'key' : ''
                                    }, 
                                read_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                size = 56, 
                                type = '', ), 
                            entity = fineract_client.models.entity.entity(), 
                            headers = {
                                'key' : [
                                    ''
                                    ]
                                }, 
                            media_type = fineract_client.models.media_type.MediaType(
                                subtype = '', 
                                type = '', 
                                wildcard_subtype = True, 
                                wildcard_type = True, ), 
                            message_body_workers = fineract_client.models.message_body_workers.messageBodyWorkers(), 
                            parameterized_headers = {
                                'key' : [
                                    fineract_client.models.parameterized_header.ParameterizedHeader(
                                        value = '', )
                                    ]
                                }, 
                            parent = fineract_client.models.multi_part.MultiPart(
                                entity = fineract_client.models.entity.entity(), 
                                message_body_workers = fineract_client.models.message_body_workers.messageBodyWorkers(), 
                                providers = fineract_client.models.providers.Providers(), ), 
                            providers = fineract_client.models.providers.Providers(), )
                        ], 
                    content_disposition = fineract_client.models.content_disposition.ContentDisposition(
                        creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        file_name = '', 
                        modification_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        read_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        size = 56, 
                        type = '', ), 
                    entity = fineract_client.models.entity.entity(), 
                    headers = {
                        'key' : [
                            ''
                            ]
                        }, 
                    media_type = fineract_client.models.media_type.MediaType(
                        subtype = '', 
                        type = '', 
                        wildcard_subtype = True, 
                        wildcard_type = True, ), 
                    message_body_workers = fineract_client.models.message_body_workers.messageBodyWorkers(), 
                    parameterized_headers = {
                        'key' : [
                            fineract_client.models.parameterized_header.ParameterizedHeader(
                                value = '', )
                            ]
                        }, 
                    parent = , 
                    providers = fineract_client.models.providers.Providers(), ),
                providers = fineract_client.models.providers.Providers(),
                simple = True,
                value = ''
            )
        else:
            return FormDataBodyPart(
        )
        """

    def testFormDataBodyPart(self):
        """Test FormDataBodyPart"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
