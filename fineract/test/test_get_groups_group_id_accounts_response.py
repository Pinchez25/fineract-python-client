# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_groups_group_id_accounts_response import GetGroupsGroupIdAccountsResponse

class TestGetGroupsGroupIdAccountsResponse(unittest.TestCase):
    """GetGroupsGroupIdAccountsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetGroupsGroupIdAccountsResponse:
        """Test GetGroupsGroupIdAccountsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetGroupsGroupIdAccountsResponse`
        """
        model = GetGroupsGroupIdAccountsResponse()
        if include_optional:
            return GetGroupsGroupIdAccountsResponse(
                loan_accounts = [
                    fineract_client.models.get_groups_group_id_accounts_loan_accounts.GetGroupsGroupIdAccountsLoanAccounts(
                        account_no = 3, 
                        id = 3, 
                        loan_type = fineract_client.models.get_groups_group_id_accounts_loan_type.GetGroupsGroupIdAccountsLoanType(
                            code = 'accountType.group', 
                            description = 'Group', 
                            id = 2, ), 
                        product_id = 3, 
                        product_name = 'daily product', 
                        status = fineract_client.models.get_groups_group_id_accounts_status.GetGroupsGroupIdAccountsStatus(
                            active = False, 
                            closed = False, 
                            closed_obligations_met = False, 
                            closed_rescheduled = False, 
                            closed_written_off = False, 
                            code = 'loanStatusType.submitted.and.pending.approval', 
                            description = 'Submitted and pending approval', 
                            id = 100, 
                            overpaid = False, 
                            pending_approval = True, 
                            waiting_for_disbursal = False, ), )
                    ],
                member_loan_accounts = [
                    fineract_client.models.get_groups_group_id_accounts_member_loan_accounts.GetGroupsGroupIdAccountsMemberLoanAccounts(
                        account_no = 4, 
                        id = 4, 
                        loan_type = fineract_client.models.get_groups_group_id_accounts_member_loan_type.GetGroupsGroupIdAccountsMemberLoanType(
                            code = 'accountType.jlg', 
                            description = 'JLG', 
                            id = 3, ), 
                        product_id = 1, 
                        product_name = 'testLoan', 
                        status = fineract_client.models.get_groups_group_id_accounts_member_loan_status.GetGroupsGroupIdAccountsMemberLoanStatus(
                            active = False, 
                            closed = False, 
                            closed_obligations_met = False, 
                            closed_rescheduled = False, 
                            closed_written_off = False, 
                            code = 'loanStatusType.approved', 
                            description = 'Approved', 
                            id = 200, 
                            overpaid = False, 
                            pending_approval = False, 
                            waiting_for_disbursal = True, ), )
                    ],
                member_savings_accounts = [
                    fineract_client.models.get_groups_group_id_accounts_member_savings_accounts.GetGroupsGroupIdAccountsMemberSavingsAccounts(
                        account_no = 3, 
                        account_type = fineract_client.models.get_groups_group_id_accounts_member_loan_type.GetGroupsGroupIdAccountsMemberLoanType(
                            code = 'accountType.jlg', 
                            description = 'JLG', 
                            id = 3, ), 
                        currency = fineract_client.models.get_groups_group_id_accounts_saving_currency.GetGroupsGroupIdAccountsSavingCurrency(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        id = 3, 
                        product_id = 1, 
                        product_name = 'p_sav', 
                        status = fineract_client.models.get_groups_group_id_accounts_saving_status.GetGroupsGroupIdAccountsSavingStatus(
                            active = False, 
                            approved = False, 
                            closed = False, 
                            code = 'savingsAccountStatusType.submitted.and.pending.approval', 
                            description = 'Submitted and pending approval', 
                            id = 100, 
                            rejected = False, 
                            submitted_and_pending_approval = True, 
                            withdrawn_by_applicant = False, ), )
                    ],
                savings_accounts = [
                    fineract_client.models.get_groups_group_id_accounts_saving_accounts.GetGroupsGroupIdAccountsSavingAccounts(
                        account_no = 9, 
                        account_type = fineract_client.models.get_groups_group_id_accounts_saving_account_type.GetGroupsGroupIdAccountsSavingAccountType(
                            code = 'accountType.group', 
                            description = 'Group', 
                            id = 2, ), 
                        currency = fineract_client.models.get_groups_group_id_accounts_saving_currency.GetGroupsGroupIdAccountsSavingCurrency(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        id = 9, 
                        product_id = 1, 
                        product_name = 'p_sav', 
                        status = fineract_client.models.get_groups_group_id_accounts_saving_status.GetGroupsGroupIdAccountsSavingStatus(
                            active = False, 
                            approved = False, 
                            closed = False, 
                            code = 'savingsAccountStatusType.submitted.and.pending.approval', 
                            description = 'Submitted and pending approval', 
                            id = 100, 
                            rejected = False, 
                            submitted_and_pending_approval = True, 
                            withdrawn_by_applicant = False, ), )
                    ]
            )
        else:
            return GetGroupsGroupIdAccountsResponse(
        )
        """

    def testGetGroupsGroupIdAccountsResponse(self):
        """Test GetGroupsGroupIdAccountsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
