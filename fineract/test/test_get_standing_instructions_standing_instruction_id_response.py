# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_standing_instructions_standing_instruction_id_response import GetStandingInstructionsStandingInstructionIdResponse

class TestGetStandingInstructionsStandingInstructionIdResponse(unittest.TestCase):
    """GetStandingInstructionsStandingInstructionIdResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetStandingInstructionsStandingInstructionIdResponse:
        """Test GetStandingInstructionsStandingInstructionIdResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetStandingInstructionsStandingInstructionIdResponse`
        """
        model = GetStandingInstructionsStandingInstructionIdResponse()
        if include_optional:
            return GetStandingInstructionsStandingInstructionIdResponse(
                account_detail_id = 6,
                amount = 150,
                from_account = fineract_client.models.get_from_account_standing_instruction_swagger.GetFromAccountStandingInstructionSwagger(
                    account_no = 14, 
                    id = 14, 
                    product_id = 1, 
                    product_name = 'savings old', ),
                from_account_type = fineract_client.models.get_from_account_type_standing_instruction_swagger.GetFromAccountTypeStandingInstructionSwagger(
                    code = 'accountType.savings', 
                    description = 'Savings Account', 
                    id = 2, ),
                from_client = fineract_client.models.get_from_client_standing_instruction_swagger.GetFromClientStandingInstructionSwagger(
                    display_name = 'Test test', 
                    id = 1, 
                    office_id = 1, 
                    office_name = 'Head Office', ),
                from_office = fineract_client.models.get_from_office_standing_instruction_swagger.GetFromOfficeStandingInstructionSwagger(
                    id = 1, 
                    name = 'Head Office', ),
                id = 1,
                instruction_type = fineract_client.models.get_instruction_type_standing_instruction_swagger.GetInstructionTypeStandingInstructionSwagger(
                    code = 'standingInstructionType.fixed', 
                    description = 'Fixed', 
                    id = 1, ),
                name = 'test standing',
                priority = fineract_client.models.get_priority_standing_instruction_swagger.GetPriorityStandingInstructionSwagger(
                    code = 'standingInstructionPriority.medium', 
                    description = 'Medium Priority', 
                    id = 3, ),
                recurrence_frequency = fineract_client.models.get_recurrence_frequency_standing_instruction_swagger.GetRecurrenceFrequencyStandingInstructionSwagger(
                    code = 'frequencyperiodFrequencyType.months', 
                    description = 'Months', 
                    id = 2, ),
                recurrence_interval = 1,
                recurrence_on_month_day = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                recurrence_type = fineract_client.models.get_recurrence_type_standing_instruction_swagger.GetRecurrenceTypeStandingInstructionSwagger(
                    code = 'accountTransferRecurrenceType.periodic', 
                    description = 'Periodic Recurrence', 
                    id = 1, ),
                status = fineract_client.models.get_status_standing_instruction_swagger.GetStatusStandingInstructionSwagger(
                    code = 'standingInstructionStatus.deleted', 
                    description = 'Deleted', 
                    id = 1, ),
                to_account = fineract_client.models.get_to_account_standing_instruction_swagger.GetToAccountStandingInstructionSwagger(
                    account_no = 3, 
                    id = 3, 
                    product_id = 4, 
                    product_name = 'account overdraft', ),
                to_account_type = fineract_client.models.get_to_account_type_standing_instruction_swagger.GetToAccountTypeStandingInstructionSwagger(
                    code = 'accountType.savings', 
                    description = 'Savings Account', 
                    id = 2, ),
                to_client = fineract_client.models.get_to_client_standing_instruction_swagger.GetToClientStandingInstructionSwagger(
                    display_name = 'Test test', 
                    id = 1, 
                    office_id = 1, 
                    office_name = 'Head Office', ),
                to_office = fineract_client.models.get_to_office_standing_instruction_swagger.GetToOfficeStandingInstructionSwagger(
                    id = 1, 
                    name = 'Head Office', ),
                transfer_type = fineract_client.models.get_transfer_type_standing_instruction_swagger.GetTransferTypeStandingInstructionSwagger(
                    code = 'accountTransferType.account.transfer', 
                    description = 'Account Transfer', 
                    id = 1, ),
                valid_from = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
            )
        else:
            return GetStandingInstructionsStandingInstructionIdResponse(
        )
        """

    def testGetStandingInstructionsStandingInstructionIdResponse(self):
        """Test GetStandingInstructionsStandingInstructionIdResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
