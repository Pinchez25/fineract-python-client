# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_accounts_type_account_id_response import GetAccountsTypeAccountIdResponse

class TestGetAccountsTypeAccountIdResponse(unittest.TestCase):
    """GetAccountsTypeAccountIdResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetAccountsTypeAccountIdResponse:
        """Test GetAccountsTypeAccountIdResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetAccountsTypeAccountIdResponse`
        """
        model = GetAccountsTypeAccountIdResponse()
        if include_optional:
            return GetAccountsTypeAccountIdResponse(
                account_no = 2,
                allow_dividend_calculation_for_inactive_clients = True,
                charges = [
                    fineract_client.models.get_accounts_charges.GetAccountsCharges(
                        account_id = 2, 
                        amount = 1, 
                        amount_or_percentage = 1, 
                        amount_outstanding = 0, 
                        amount_paid = 1, 
                        amount_percentage_applied_to = 0, 
                        amount_waived = 0, 
                        amount_written_off = 0, 
                        charge_calculation_type = fineract_client.models.get_accounts_charge_calculation_type.GetAccountsChargeCalculationType(
                            code = 'chargeCalculationType.flat', 
                            description = 'Flat', 
                            id = 1, ), 
                        charge_id = 20, 
                        charge_time_type = fineract_client.models.get_accounts_charge_time_type.GetAccountsChargeTimeType(
                            code = 'chargeTimeType.activation', 
                            description = 'Share Account Activate', 
                            id = 13, ), 
                        currency = fineract_client.models.get_accounts_charges_currency.GetAccountsChargesCurrency(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        id = 9, 
                        is_active = True, 
                        name = 'Share Account Activation Flat', 
                        percentage = 0, )
                    ],
                client_id = 7,
                client_name = 'Client_FirstName_2KX8C Client_LastName_NWNG',
                currency = fineract_client.models.get_accounts_currency.GetAccountsCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    in_multiples_of = 100, 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                current_market_price = 5,
                dividends = [
                    ''
                    ],
                id = 2,
                lock_period_type_enum = fineract_client.models.get_accounts_lock_period_type_enum.GetAccountsLockPeriodTypeEnum(
                    code = 'savings.lockin.sharePeriodFrequencyType.days', 
                    description = 'Days', 
                    id = 0, ),
                lockin_period = 1,
                minimum_active_period = 1,
                minimum_active_period_type_enum = fineract_client.models.get_accounts_lock_period_type_enum.GetAccountsLockPeriodTypeEnum(
                    code = 'savings.lockin.sharePeriodFrequencyType.days', 
                    description = 'Days', 
                    id = 0, ),
                product_id = 1,
                product_name = 'Share Product',
                purchased_shares = [
                    fineract_client.models.get_accounts_purchased_shares.GetAccountsPurchasedShares(
                        account_id = 2, 
                        amount = 5.05, 
                        amount_paid = 5.05, 
                        charge_amount = 0.05, 
                        id = 6, 
                        number_of_shares = 10, 
                        purchased_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        purchased_price = 0.5, 
                        status = fineract_client.models.get_accounts_purchased_shares_status.GetAccountsPurchasedSharesStatus(
                            code = 'purchasedSharesStatusType.approved', 
                            description = 'Approved', 
                            id = 300, ), 
                        type = fineract_client.models.get_accounts_purchased_shares_type.GetAccountsPurchasedSharesType(
                            code = 'purchasedSharesType.purchased', 
                            description = 'Purchase', 
                            id = 500, ), )
                    ],
                savings_account_id = 13,
                savings_account_number = 13,
                status = fineract_client.models.get_accounts_status.GetAccountsStatus(
                    active = True, 
                    approved = False, 
                    closed = False, 
                    code = 'shareAccountStatusType.active', 
                    description = 'Active', 
                    id = 300, 
                    rejected = False, 
                    submitted_and_pending_approval = False, ),
                summary = fineract_client.models.get_accounts_summary.GetAccountsSummary(
                    account_no = 2, 
                    currency = fineract_client.models.get_accounts_currency.GetAccountsCurrency(
                        code = 'USD', 
                        decimal_places = 2, 
                        display_label = 'US Dollar ($)', 
                        display_symbol = '$', 
                        in_multiples_of = 100, 
                        name = 'US Dollar', 
                        name_code = 'currency.USD', ), 
                    id = 2, 
                    product_id = 1, 
                    product_name = 'Conflux Share Product', 
                    status = fineract_client.models.get_accounts_status.GetAccountsStatus(
                        active = True, 
                        approved = False, 
                        closed = False, 
                        code = 'shareAccountStatusType.active', 
                        description = 'Active', 
                        id = 300, 
                        rejected = False, 
                        submitted_and_pending_approval = False, ), 
                    timeline = fineract_client.models.get_accounts_timeline.GetAccountsTimeline(
                        activated_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        approved_by_firstname = 'App', 
                        approved_by_lastname = 'Administrator', 
                        approved_by_username = 'mifos', 
                        approved_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        submitted_by_firstname = 'App', 
                        submitted_by_lastname = 'Administrator', 
                        submitted_by_username = 'mifos', 
                        submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                    total_approved_shares = 1, 
                    total_pending_for_approval_shares = 0, ),
                timeline = fineract_client.models.get_accounts_timeline.GetAccountsTimeline(
                    activated_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    approved_by_firstname = 'App', 
                    approved_by_lastname = 'Administrator', 
                    approved_by_username = 'mifos', 
                    approved_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    submitted_by_firstname = 'App', 
                    submitted_by_lastname = 'Administrator', 
                    submitted_by_username = 'mifos', 
                    submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
            )
        else:
            return GetAccountsTypeAccountIdResponse(
        )
        """

    def testGetAccountsTypeAccountIdResponse(self):
        """Test GetAccountsTypeAccountIdResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
