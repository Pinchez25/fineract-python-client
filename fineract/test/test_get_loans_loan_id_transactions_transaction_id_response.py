# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loans_loan_id_transactions_transaction_id_response import GetLoansLoanIdTransactionsTransactionIdResponse

class TestGetLoansLoanIdTransactionsTransactionIdResponse(unittest.TestCase):
    """GetLoansLoanIdTransactionsTransactionIdResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoansLoanIdTransactionsTransactionIdResponse:
        """Test GetLoansLoanIdTransactionsTransactionIdResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoansLoanIdTransactionsTransactionIdResponse`
        """
        model = GetLoansLoanIdTransactionsTransactionIdResponse()
        if include_optional:
            return GetLoansLoanIdTransactionsTransactionIdResponse(
                amount = 559.88,
                currency = fineract_client.models.get_loans_currency.GetLoansCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                var_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                external_id = '20120514',
                fee_charges_portion = 23.9,
                id = 3,
                interest_portion = 559.88,
                loan_charge_paid_by_list = [
                    fineract_client.models.get_loans_loan_id_loan_charge_paid_by_data.GetLoansLoanIdLoanChargePaidByData(
                        amount = 100, 
                        charge_id = 1, 
                        id = 11, 
                        installment_number = 9679, 
                        name = 'name', 
                        transaction_id = 636, )
                    ],
                manually_reversed = False,
                net_disbursal_amount = 1000,
                outstanding_loan_balance = 100,
                overpayment_portion = 33,
                payment_detail_data = fineract_client.models.payment_detail_data.PaymentDetailData(
                    account_number = 'acc123', 
                    bank_number = 'ban123', 
                    check_number = 'che123', 
                    id = 62, 
                    payment_type = fineract_client.models.payment_type.PaymentType(
                        id = 11, 
                        is_system_defined = True, 
                        name = 'DOWN_PAYMENT', ), 
                    receipt_number = 'rec123', 
                    routing_code = 'rou123', ),
                penalty_charges_portion = 12.8,
                possible_next_repayment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                principal_portion = 240,
                reversal_external_id = '20120514',
                reversed_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                transaction_relations = [
                    fineract_client.models.get_loan_transaction_relation.GetLoanTransactionRelation(
                        amount = 100, 
                        from_loan_transaction = 1, 
                        payment_type = 'Repayment Adjustment Chargeback', 
                        relation_type = 'CHARGEBACK', 
                        to_loan_charge = 10, 
                        to_loan_transaction = 10, )
                    ],
                type = fineract_client.models.get_loans_type.GetLoansType(
                    code = 'loanTransactionType.repayment', 
                    contra = False, 
                    description = 'Repayment', 
                    disbursement = False, 
                    external_id = '3e7791ce-aa10-11ec-b909-0242ac120002', 
                    external_loan_id = '3e7791ce-aa10-11ec-b909-0242ac120002', 
                    id = 2, 
                    loan_id = 2, 
                    recovery_repayment = False, 
                    repayment = True, 
                    repayment_at_disbursement = False, 
                    waive_charges = False, 
                    waive_interest = False, 
                    write_off = False, ),
                unrecognized_income_portion = 55.5
            )
        else:
            return GetLoansLoanIdTransactionsTransactionIdResponse(
        )
        """

    def testGetLoansLoanIdTransactionsTransactionIdResponse(self):
        """Test GetLoansLoanIdTransactionsTransactionIdResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
