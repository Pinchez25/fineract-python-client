# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_accounts_type_response import GetAccountsTypeResponse

class TestGetAccountsTypeResponse(unittest.TestCase):
    """GetAccountsTypeResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetAccountsTypeResponse:
        """Test GetAccountsTypeResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetAccountsTypeResponse`
        """
        model = GetAccountsTypeResponse()
        if include_optional:
            return GetAccountsTypeResponse(
                page_items = [
                    fineract_client.models.get_accounts_page_items.GetAccountsPageItems(
                        account_no = 1, 
                        client_id = 1, 
                        client_name = 'Client Name', 
                        currency = fineract_client.models.get_accounts_charges_currency.GetAccountsChargesCurrency(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        id = 1, 
                        product_id = 1, 
                        product_name = 'Share Product Name', 
                        purchased_shares = [
                            fineract_client.models.get_accounts_type_purchased_shares.GetAccountsTypePurchasedShares(
                                id = 1, 
                                number_of_shares = 10, 
                                purchased_date = '01 May 2013', 
                                purchased_price = 5, )
                            ], 
                        status = fineract_client.models.get_accounts_type_status.GetAccountsTypeStatus(
                            active = False, 
                            approved = False, 
                            closed = False, 
                            code = 'shareAccountStatusType.submitted.and.pending.approval', 
                            description = 'Submitted and pending approval', 
                            id = 100, 
                            rejected = False, 
                            submitted_and_pending_approval = True, ), 
                        summary = fineract_client.models.get_accounts_type_summary.GetAccountsTypeSummary(), 
                        timeline = fineract_client.models.get_accounts_type_timeline.GetAccountsTypeTimeline(
                            submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), )
                    ],
                total_filtered_records = 1
            )
        else:
            return GetAccountsTypeResponse(
        )
        """

    def testGetAccountsTypeResponse(self):
        """Test GetAccountsTypeResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
