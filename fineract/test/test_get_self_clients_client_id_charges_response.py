# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_self_clients_client_id_charges_response import GetSelfClientsClientIdChargesResponse

class TestGetSelfClientsClientIdChargesResponse(unittest.TestCase):
    """GetSelfClientsClientIdChargesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSelfClientsClientIdChargesResponse:
        """Test GetSelfClientsClientIdChargesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSelfClientsClientIdChargesResponse`
        """
        model = GetSelfClientsClientIdChargesResponse()
        if include_optional:
            return GetSelfClientsClientIdChargesResponse(
                page_items = [
                    fineract_client.models.get_self_clients_charges_page_items.GetSelfClientsChargesPageItems(
                        amount = 550, 
                        amount_outstanding = 550, 
                        amount_paid = 0, 
                        amount_waived = 0, 
                        amount_written_off = 0, 
                        charge_calculation_type = fineract_client.models.get_self_clients_charge_calculation_type.GetSelfClientsChargeCalculationType(
                            code = 'chargeCalculationType.flat', 
                            description = 'Flat', 
                            id = 1, ), 
                        charge_id = 6, 
                        charge_time_type = fineract_client.models.get_self_clients_charge_time_type.GetSelfClientsChargeTimeType(
                            code = 'chargeTimeType.specifiedDueDate', 
                            description = 'Specified due date', 
                            id = 2, ), 
                        client_id = 1, 
                        currency = fineract_client.models.get_self_clients_savings_accounts_currency.GetSelfClientsSavingsAccountsCurrency(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        id = 5, 
                        is_active = True, 
                        is_paid = False, 
                        is_waived = False, 
                        name = 'Client Fees 2', 
                        penalty = False, )
                    ],
                total_filtered_records = 4
            )
        else:
            return GetSelfClientsClientIdChargesResponse(
        )
        """

    def testGetSelfClientsClientIdChargesResponse(self):
        """Test GetSelfClientsClientIdChargesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
