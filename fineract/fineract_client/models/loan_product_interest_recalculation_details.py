# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LoanProductInterestRecalculationDetails(BaseModel):
    """
    LoanProductInterestRecalculationDetails
    """ # noqa: E501
    arrears_based_on_original_schedule: Optional[StrictBool] = Field(default=None, alias="arrearsBasedOnOriginalSchedule")
    compounding_frequency_nth_day: Optional[StrictInt] = Field(default=None, alias="compoundingFrequencyNthDay")
    compounding_frequency_on_day: Optional[StrictInt] = Field(default=None, alias="compoundingFrequencyOnDay")
    compounding_frequency_type: Optional[StrictStr] = Field(default=None, alias="compoundingFrequencyType")
    compounding_frequency_weekday: Optional[StrictInt] = Field(default=None, alias="compoundingFrequencyWeekday")
    compounding_interval: Optional[StrictInt] = Field(default=None, alias="compoundingInterval")
    id: Optional[StrictInt] = None
    interest_recalculation_compounding_method: Optional[StrictInt] = Field(default=None, alias="interestRecalculationCompoundingMethod")
    is_compounding_to_be_posted_as_transaction: Optional[StrictBool] = Field(default=None, alias="isCompoundingToBePostedAsTransaction")
    new: Optional[StrictBool] = None
    reschedule_strategy_method: Optional[StrictInt] = Field(default=None, alias="rescheduleStrategyMethod")
    rest_frequency_nth_day: Optional[StrictInt] = Field(default=None, alias="restFrequencyNthDay")
    rest_frequency_on_day: Optional[StrictInt] = Field(default=None, alias="restFrequencyOnDay")
    rest_frequency_type: Optional[StrictStr] = Field(default=None, alias="restFrequencyType")
    rest_frequency_weekday: Optional[StrictInt] = Field(default=None, alias="restFrequencyWeekday")
    rest_interval: Optional[StrictInt] = Field(default=None, alias="restInterval")
    __properties: ClassVar[List[str]] = ["arrearsBasedOnOriginalSchedule", "compoundingFrequencyNthDay", "compoundingFrequencyOnDay", "compoundingFrequencyType", "compoundingFrequencyWeekday", "compoundingInterval", "id", "interestRecalculationCompoundingMethod", "isCompoundingToBePostedAsTransaction", "new", "rescheduleStrategyMethod", "restFrequencyNthDay", "restFrequencyOnDay", "restFrequencyType", "restFrequencyWeekday", "restInterval"]

    @field_validator('compounding_frequency_type')
    def compounding_frequency_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVALID', 'SAME_AS_REPAYMENT_PERIOD', 'DAILY', 'WEEKLY', 'MONTHLY']):
            raise ValueError("must be one of enum values ('INVALID', 'SAME_AS_REPAYMENT_PERIOD', 'DAILY', 'WEEKLY', 'MONTHLY')")
        return value

    @field_validator('rest_frequency_type')
    def rest_frequency_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVALID', 'SAME_AS_REPAYMENT_PERIOD', 'DAILY', 'WEEKLY', 'MONTHLY']):
            raise ValueError("must be one of enum values ('INVALID', 'SAME_AS_REPAYMENT_PERIOD', 'DAILY', 'WEEKLY', 'MONTHLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoanProductInterestRecalculationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoanProductInterestRecalculationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrearsBasedOnOriginalSchedule": obj.get("arrearsBasedOnOriginalSchedule"),
            "compoundingFrequencyNthDay": obj.get("compoundingFrequencyNthDay"),
            "compoundingFrequencyOnDay": obj.get("compoundingFrequencyOnDay"),
            "compoundingFrequencyType": obj.get("compoundingFrequencyType"),
            "compoundingFrequencyWeekday": obj.get("compoundingFrequencyWeekday"),
            "compoundingInterval": obj.get("compoundingInterval"),
            "id": obj.get("id"),
            "interestRecalculationCompoundingMethod": obj.get("interestRecalculationCompoundingMethod"),
            "isCompoundingToBePostedAsTransaction": obj.get("isCompoundingToBePostedAsTransaction"),
            "new": obj.get("new"),
            "rescheduleStrategyMethod": obj.get("rescheduleStrategyMethod"),
            "restFrequencyNthDay": obj.get("restFrequencyNthDay"),
            "restFrequencyOnDay": obj.get("restFrequencyOnDay"),
            "restFrequencyType": obj.get("restFrequencyType"),
            "restFrequencyWeekday": obj.get("restFrequencyWeekday"),
            "restInterval": obj.get("restInterval")
        })
        return _obj


