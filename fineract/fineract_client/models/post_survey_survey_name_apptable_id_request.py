# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PostSurveySurveyNameApptableIdRequest(BaseModel):
    """
    PostSurveySurveyNameApptableIdRequest
    """ # noqa: E501
    var_date: Optional[datetime] = Field(default=None, alias="date")
    date_format: Optional[datetime] = Field(default=None, alias="dateFormat")
    locale: Optional[StrictStr] = None
    ppi_businessoccupation_cd_q3_businessoccupation: Optional[StrictInt] = None
    ppi_floortype_cd_q5_floortype: Optional[StrictInt] = None
    ppi_fryingpans_cd_q10_fryingpans: Optional[StrictInt] = None
    ppi_habitablerooms_cd_q4_habitablerooms: Optional[StrictInt] = None
    ppi_highestschool_cd_q2_highestschool: Optional[StrictInt] = None
    ppi_household_members_cd_q1_householdmembers: Optional[StrictInt] = None
    ppi_irons_cd_q7_irons: Optional[StrictInt] = None
    ppi_lightingsource_cd_q6_lightingsource: Optional[StrictInt] = None
    ppi_mosquitonets_cd_q8_mosquitonets: Optional[StrictInt] = None
    ppi_towels_cd_q9_towels: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["date", "dateFormat", "locale", "ppi_businessoccupation_cd_q3_businessoccupation", "ppi_floortype_cd_q5_floortype", "ppi_fryingpans_cd_q10_fryingpans", "ppi_habitablerooms_cd_q4_habitablerooms", "ppi_highestschool_cd_q2_highestschool", "ppi_household_members_cd_q1_householdmembers", "ppi_irons_cd_q7_irons", "ppi_lightingsource_cd_q6_lightingsource", "ppi_mosquitonets_cd_q8_mosquitonets", "ppi_towels_cd_q9_towels"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostSurveySurveyNameApptableIdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostSurveySurveyNameApptableIdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "dateFormat": obj.get("dateFormat"),
            "locale": obj.get("locale"),
            "ppi_businessoccupation_cd_q3_businessoccupation": obj.get("ppi_businessoccupation_cd_q3_businessoccupation"),
            "ppi_floortype_cd_q5_floortype": obj.get("ppi_floortype_cd_q5_floortype"),
            "ppi_fryingpans_cd_q10_fryingpans": obj.get("ppi_fryingpans_cd_q10_fryingpans"),
            "ppi_habitablerooms_cd_q4_habitablerooms": obj.get("ppi_habitablerooms_cd_q4_habitablerooms"),
            "ppi_highestschool_cd_q2_highestschool": obj.get("ppi_highestschool_cd_q2_highestschool"),
            "ppi_household_members_cd_q1_householdmembers": obj.get("ppi_household_members_cd_q1_householdmembers"),
            "ppi_irons_cd_q7_irons": obj.get("ppi_irons_cd_q7_irons"),
            "ppi_lightingsource_cd_q6_lightingsource": obj.get("ppi_lightingsource_cd_q6_lightingsource"),
            "ppi_mosquitonets_cd_q8_mosquitonets": obj.get("ppi_mosquitonets_cd_q8_mosquitonets"),
            "ppi_towels_cd_q9_towels": obj.get("ppi_towels_cd_q9_towels")
        })
        return _obj


