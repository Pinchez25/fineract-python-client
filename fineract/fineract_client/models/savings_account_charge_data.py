# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.charge_data import ChargeData
from fineract_client.models.charge_fee_on_month_day import ChargeFeeOnMonthDay
from fineract_client.models.currency_data import CurrencyData
from fineract_client.models.enum_option_data import EnumOptionData
from typing import Optional, Set
from typing_extensions import Self

class SavingsAccountChargeData(BaseModel):
    """
    SavingsAccountChargeData
    """ # noqa: E501
    account_id: Optional[StrictInt] = Field(default=None, alias="accountId")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    amount_or_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="amountOrPercentage")
    amount_outstanding: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="amountOutstanding")
    amount_paid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="amountPaid")
    amount_percentage_applied_to: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="amountPercentageAppliedTo")
    amount_waived: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="amountWaived")
    amount_written_off: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="amountWrittenOff")
    annual_fee: Optional[StrictBool] = Field(default=None, alias="annualFee")
    charge_calculation_type: Optional[EnumOptionData] = Field(default=None, alias="chargeCalculationType")
    charge_data: Optional[ChargeData] = Field(default=None, alias="chargeData")
    charge_id: Optional[StrictInt] = Field(default=None, alias="chargeId")
    charge_options: Optional[List[ChargeData]] = Field(default=None, alias="chargeOptions")
    charge_time_type: Optional[EnumOptionData] = Field(default=None, alias="chargeTimeType")
    currency: Optional[CurrencyData] = None
    due_date: Optional[date] = Field(default=None, alias="dueDate")
    fee_charge: Optional[StrictBool] = Field(default=None, alias="feeCharge")
    fee_interval: Optional[StrictInt] = Field(default=None, alias="feeInterval")
    fee_on_month_day: Optional[ChargeFeeOnMonthDay] = Field(default=None, alias="feeOnMonthDay")
    free_withdrawal_charge_frequency: Optional[StrictInt] = Field(default=None, alias="freeWithdrawalChargeFrequency")
    id: Optional[StrictInt] = None
    inactivation_date: Optional[date] = Field(default=None, alias="inactivationDate")
    is_active: Optional[StrictBool] = Field(default=None, alias="isActive")
    is_free_withdrawal: Optional[StrictBool] = Field(default=None, alias="isFreeWithdrawal")
    name: Optional[StrictStr] = None
    penalty: Optional[StrictBool] = None
    percentage: Optional[Union[StrictFloat, StrictInt]] = None
    restart_frequency: Optional[StrictInt] = Field(default=None, alias="restartFrequency")
    restart_frequency_enum: Optional[StrictInt] = Field(default=None, alias="restartFrequencyEnum")
    savings_activation: Optional[StrictBool] = Field(default=None, alias="savingsActivation")
    withdrawal_fee: Optional[StrictBool] = Field(default=None, alias="withdrawalFee")
    __properties: ClassVar[List[str]] = ["accountId", "amount", "amountOrPercentage", "amountOutstanding", "amountPaid", "amountPercentageAppliedTo", "amountWaived", "amountWrittenOff", "annualFee", "chargeCalculationType", "chargeData", "chargeId", "chargeOptions", "chargeTimeType", "currency", "dueDate", "feeCharge", "feeInterval", "feeOnMonthDay", "freeWithdrawalChargeFrequency", "id", "inactivationDate", "isActive", "isFreeWithdrawal", "name", "penalty", "percentage", "restartFrequency", "restartFrequencyEnum", "savingsActivation", "withdrawalFee"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SavingsAccountChargeData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of charge_calculation_type
        if self.charge_calculation_type:
            _dict['chargeCalculationType'] = self.charge_calculation_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_data
        if self.charge_data:
            _dict['chargeData'] = self.charge_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charge_options (list)
        _items = []
        if self.charge_options:
            for _item in self.charge_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of charge_time_type
        if self.charge_time_type:
            _dict['chargeTimeType'] = self.charge_time_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee_on_month_day
        if self.fee_on_month_day:
            _dict['feeOnMonthDay'] = self.fee_on_month_day.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SavingsAccountChargeData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "amount": obj.get("amount"),
            "amountOrPercentage": obj.get("amountOrPercentage"),
            "amountOutstanding": obj.get("amountOutstanding"),
            "amountPaid": obj.get("amountPaid"),
            "amountPercentageAppliedTo": obj.get("amountPercentageAppliedTo"),
            "amountWaived": obj.get("amountWaived"),
            "amountWrittenOff": obj.get("amountWrittenOff"),
            "annualFee": obj.get("annualFee"),
            "chargeCalculationType": EnumOptionData.from_dict(obj["chargeCalculationType"]) if obj.get("chargeCalculationType") is not None else None,
            "chargeData": ChargeData.from_dict(obj["chargeData"]) if obj.get("chargeData") is not None else None,
            "chargeId": obj.get("chargeId"),
            "chargeOptions": [ChargeData.from_dict(_item) for _item in obj["chargeOptions"]] if obj.get("chargeOptions") is not None else None,
            "chargeTimeType": EnumOptionData.from_dict(obj["chargeTimeType"]) if obj.get("chargeTimeType") is not None else None,
            "currency": CurrencyData.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "dueDate": obj.get("dueDate"),
            "feeCharge": obj.get("feeCharge"),
            "feeInterval": obj.get("feeInterval"),
            "feeOnMonthDay": ChargeFeeOnMonthDay.from_dict(obj["feeOnMonthDay"]) if obj.get("feeOnMonthDay") is not None else None,
            "freeWithdrawalChargeFrequency": obj.get("freeWithdrawalChargeFrequency"),
            "id": obj.get("id"),
            "inactivationDate": obj.get("inactivationDate"),
            "isActive": obj.get("isActive"),
            "isFreeWithdrawal": obj.get("isFreeWithdrawal"),
            "name": obj.get("name"),
            "penalty": obj.get("penalty"),
            "percentage": obj.get("percentage"),
            "restartFrequency": obj.get("restartFrequency"),
            "restartFrequencyEnum": obj.get("restartFrequencyEnum"),
            "savingsActivation": obj.get("savingsActivation"),
            "withdrawalFee": obj.get("withdrawalFee")
        })
        return _obj


