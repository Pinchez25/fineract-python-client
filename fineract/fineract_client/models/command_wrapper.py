# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CommandWrapper(BaseModel):
    """
    CommandWrapper
    """ # noqa: E501
    action_name: Optional[StrictStr] = Field(default=None, alias="actionName")
    cache_resource: Optional[StrictBool] = Field(default=None, alias="cacheResource")
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    command_id: Optional[StrictInt] = Field(default=None, alias="commandId")
    create: Optional[StrictBool] = None
    create_datatable: Optional[StrictBool] = Field(default=None, alias="createDatatable")
    credit_bureau_id: Optional[StrictInt] = Field(default=None, alias="creditBureauId")
    currency_resource: Optional[StrictBool] = Field(default=None, alias="currencyResource")
    datatable_resource: Optional[StrictBool] = Field(default=None, alias="datatableResource")
    delete: Optional[StrictBool] = None
    delete_datatable: Optional[StrictBool] = Field(default=None, alias="deleteDatatable")
    delete_multiple: Optional[StrictBool] = Field(default=None, alias="deleteMultiple")
    delete_one_to_one: Optional[StrictBool] = Field(default=None, alias="deleteOneToOne")
    delete_operation: Optional[StrictBool] = Field(default=None, alias="deleteOperation")
    entity_id: Optional[StrictInt] = Field(default=None, alias="entityId")
    entity_name: Optional[StrictStr] = Field(default=None, alias="entityName")
    full_fil_survey: Optional[StrictBool] = Field(default=None, alias="fullFilSurvey")
    group_id: Optional[StrictInt] = Field(default=None, alias="groupId")
    href: Optional[StrictStr] = None
    idempotency_key: Optional[StrictStr] = Field(default=None, alias="idempotencyKey")
    job_name: Optional[StrictStr] = Field(default=None, alias="jobName")
    var_json: Optional[StrictStr] = Field(default=None, alias="json")
    loan_disburse_detail_resource: Optional[StrictBool] = Field(default=None, alias="loanDisburseDetailResource")
    loan_id: Optional[StrictInt] = Field(default=None, alias="loanId")
    note_resource: Optional[StrictBool] = Field(default=None, alias="noteResource")
    office_id: Optional[StrictInt] = Field(default=None, alias="officeId")
    organisation_credit_bureau_id: Optional[StrictInt] = Field(default=None, alias="organisationCreditBureauId")
    password_preferences_resource: Optional[StrictBool] = Field(default=None, alias="passwordPreferencesResource")
    permission_resource: Optional[StrictBool] = Field(default=None, alias="permissionResource")
    product_id: Optional[StrictInt] = Field(default=None, alias="productId")
    register_datatable: Optional[StrictBool] = Field(default=None, alias="registerDatatable")
    register_survey: Optional[StrictBool] = Field(default=None, alias="registerSurvey")
    savings_id: Optional[StrictInt] = Field(default=None, alias="savingsId")
    subentity_id: Optional[StrictInt] = Field(default=None, alias="subentityId")
    survey_resource: Optional[StrictBool] = Field(default=None, alias="surveyResource")
    task_permission_name: Optional[StrictStr] = Field(default=None, alias="taskPermissionName")
    template_id: Optional[StrictInt] = Field(default=None, alias="templateId")
    transaction_id: Optional[StrictStr] = Field(default=None, alias="transactionId")
    update: Optional[StrictBool] = None
    update_datatable: Optional[StrictBool] = Field(default=None, alias="updateDatatable")
    update_disbursement_date: Optional[StrictBool] = Field(default=None, alias="updateDisbursementDate")
    update_multiple: Optional[StrictBool] = Field(default=None, alias="updateMultiple")
    update_one_to_one: Optional[StrictBool] = Field(default=None, alias="updateOneToOne")
    update_operation: Optional[StrictBool] = Field(default=None, alias="updateOperation")
    user_resource: Optional[StrictBool] = Field(default=None, alias="userResource")
    working_days_resource: Optional[StrictBool] = Field(default=None, alias="workingDaysResource")
    __properties: ClassVar[List[str]] = ["actionName", "cacheResource", "clientId", "commandId", "create", "createDatatable", "creditBureauId", "currencyResource", "datatableResource", "delete", "deleteDatatable", "deleteMultiple", "deleteOneToOne", "deleteOperation", "entityId", "entityName", "fullFilSurvey", "groupId", "href", "idempotencyKey", "jobName", "json", "loanDisburseDetailResource", "loanId", "noteResource", "officeId", "organisationCreditBureauId", "passwordPreferencesResource", "permissionResource", "productId", "registerDatatable", "registerSurvey", "savingsId", "subentityId", "surveyResource", "taskPermissionName", "templateId", "transactionId", "update", "updateDatatable", "updateDisbursementDate", "updateMultiple", "updateOneToOne", "updateOperation", "userResource", "workingDaysResource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommandWrapper from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommandWrapper from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionName": obj.get("actionName"),
            "cacheResource": obj.get("cacheResource"),
            "clientId": obj.get("clientId"),
            "commandId": obj.get("commandId"),
            "create": obj.get("create"),
            "createDatatable": obj.get("createDatatable"),
            "creditBureauId": obj.get("creditBureauId"),
            "currencyResource": obj.get("currencyResource"),
            "datatableResource": obj.get("datatableResource"),
            "delete": obj.get("delete"),
            "deleteDatatable": obj.get("deleteDatatable"),
            "deleteMultiple": obj.get("deleteMultiple"),
            "deleteOneToOne": obj.get("deleteOneToOne"),
            "deleteOperation": obj.get("deleteOperation"),
            "entityId": obj.get("entityId"),
            "entityName": obj.get("entityName"),
            "fullFilSurvey": obj.get("fullFilSurvey"),
            "groupId": obj.get("groupId"),
            "href": obj.get("href"),
            "idempotencyKey": obj.get("idempotencyKey"),
            "jobName": obj.get("jobName"),
            "json": obj.get("json"),
            "loanDisburseDetailResource": obj.get("loanDisburseDetailResource"),
            "loanId": obj.get("loanId"),
            "noteResource": obj.get("noteResource"),
            "officeId": obj.get("officeId"),
            "organisationCreditBureauId": obj.get("organisationCreditBureauId"),
            "passwordPreferencesResource": obj.get("passwordPreferencesResource"),
            "permissionResource": obj.get("permissionResource"),
            "productId": obj.get("productId"),
            "registerDatatable": obj.get("registerDatatable"),
            "registerSurvey": obj.get("registerSurvey"),
            "savingsId": obj.get("savingsId"),
            "subentityId": obj.get("subentityId"),
            "surveyResource": obj.get("surveyResource"),
            "taskPermissionName": obj.get("taskPermissionName"),
            "templateId": obj.get("templateId"),
            "transactionId": obj.get("transactionId"),
            "update": obj.get("update"),
            "updateDatatable": obj.get("updateDatatable"),
            "updateDisbursementDate": obj.get("updateDisbursementDate"),
            "updateMultiple": obj.get("updateMultiple"),
            "updateOneToOne": obj.get("updateOneToOne"),
            "updateOperation": obj.get("updateOperation"),
            "userResource": obj.get("userResource"),
            "workingDaysResource": obj.get("workingDaysResource")
        })
        return _obj


