# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.body_part_headers import BodyPartHeaders
from fineract_client.models.body_part_parameterized_headers import BodyPartParameterizedHeaders
from fineract_client.models.content_disposition import ContentDisposition
from fineract_client.models.form_data_content_disposition import FormDataContentDisposition
from fineract_client.models.media_type import MediaType
from fineract_client.models.multi_part import MultiPart
from typing import Optional, Set
from typing_extensions import Self

class FormDataBodyPart(BaseModel):
    """
    FormDataBodyPart
    """ # noqa: E501
    content: Optional[Dict[str, Any]] = None
    content_disposition: Optional[ContentDisposition] = Field(default=None, alias="contentDisposition")
    entity: Optional[Dict[str, Any]] = None
    file_name: Optional[StrictStr] = Field(default=None, alias="fileName")
    form_data_content_disposition: Optional[FormDataContentDisposition] = Field(default=None, alias="formDataContentDisposition")
    headers: Optional[BodyPartHeaders] = None
    media_type: Optional[MediaType] = Field(default=None, alias="mediaType")
    message_body_workers: Optional[Dict[str, Any]] = Field(default=None, alias="messageBodyWorkers")
    name: Optional[StrictStr] = None
    parameterized_headers: Optional[BodyPartParameterizedHeaders] = Field(default=None, alias="parameterizedHeaders")
    parent: Optional[MultiPart] = None
    providers: Optional[Dict[str, Any]] = None
    simple: Optional[StrictBool] = None
    value: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["content", "contentDisposition", "entity", "fileName", "formDataContentDisposition", "headers", "mediaType", "messageBodyWorkers", "name", "parameterizedHeaders", "parent", "providers", "simple", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormDataBodyPart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content_disposition
        if self.content_disposition:
            _dict['contentDisposition'] = self.content_disposition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of form_data_content_disposition
        if self.form_data_content_disposition:
            _dict['formDataContentDisposition'] = self.form_data_content_disposition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of headers
        if self.headers:
            _dict['headers'] = self.headers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media_type
        if self.media_type:
            _dict['mediaType'] = self.media_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameterized_headers
        if self.parameterized_headers:
            _dict['parameterizedHeaders'] = self.parameterized_headers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormDataBodyPart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "contentDisposition": ContentDisposition.from_dict(obj["contentDisposition"]) if obj.get("contentDisposition") is not None else None,
            "entity": obj.get("entity"),
            "fileName": obj.get("fileName"),
            "formDataContentDisposition": FormDataContentDisposition.from_dict(obj["formDataContentDisposition"]) if obj.get("formDataContentDisposition") is not None else None,
            "headers": BodyPartHeaders.from_dict(obj["headers"]) if obj.get("headers") is not None else None,
            "mediaType": MediaType.from_dict(obj["mediaType"]) if obj.get("mediaType") is not None else None,
            "messageBodyWorkers": obj.get("messageBodyWorkers"),
            "name": obj.get("name"),
            "parameterizedHeaders": BodyPartParameterizedHeaders.from_dict(obj["parameterizedHeaders"]) if obj.get("parameterizedHeaders") is not None else None,
            "parent": MultiPart.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "providers": obj.get("providers"),
            "simple": obj.get("simple"),
            "value": obj.get("value")
        })
        return _obj


