# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_charges_currency import GetChargesCurrency
from fineract_client.models.get_lock_period_type_enum import GetLockPeriodTypeEnum
from fineract_client.models.get_products_accounting_mapping_options import GetProductsAccountingMappingOptions
from fineract_client.models.get_products_accounting_mappings import GetProductsAccountingMappings
from fineract_client.models.get_products_accounting_rule import GetProductsAccountingRule
from fineract_client.models.get_products_charges import GetProductsCharges
from fineract_client.models.get_products_currency import GetProductsCurrency
from fineract_client.models.get_products_market_price import GetProductsMarketPrice
from fineract_client.models.get_products_minimum_active_period_frequency_type_options import GetProductsMinimumActivePeriodFrequencyTypeOptions
from typing import Optional, Set
from typing_extensions import Self

class GetProductsTypeProductIdResponse(BaseModel):
    """
    GetProductsTypeProductIdResponse
    """ # noqa: E501
    accounting_mapping_options: Optional[GetProductsAccountingMappingOptions] = Field(default=None, alias="accountingMappingOptions")
    accounting_mappings: Optional[GetProductsAccountingMappings] = Field(default=None, alias="accountingMappings")
    accounting_rule: Optional[GetProductsAccountingRule] = Field(default=None, alias="accountingRule")
    allow_dividend_calculation_for_inactive_clients: Optional[StrictBool] = Field(default=None, alias="allowDividendCalculationForInactiveClients")
    charge_options: Optional[List[GetProductsCharges]] = Field(default=None, alias="chargeOptions")
    charges: Optional[List[GetProductsCharges]] = None
    currency: Optional[GetProductsCurrency] = None
    currency_options: Optional[List[GetChargesCurrency]] = Field(default=None, alias="currencyOptions")
    description: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    lock_period_type_enum: Optional[GetLockPeriodTypeEnum] = Field(default=None, alias="lockPeriodTypeEnum")
    lockin_period: Optional[StrictInt] = Field(default=None, alias="lockinPeriod")
    lockin_period_frequency_type_options: Optional[List[GetProductsMinimumActivePeriodFrequencyTypeOptions]] = Field(default=None, alias="lockinPeriodFrequencyTypeOptions")
    market_price: Optional[List[GetProductsMarketPrice]] = Field(default=None, alias="marketPrice")
    maximum_shares: Optional[StrictInt] = Field(default=None, alias="maximumShares")
    minimum_active_period: Optional[StrictInt] = Field(default=None, alias="minimumActivePeriod")
    minimum_active_period_for_dividends_type_enum: Optional[GetLockPeriodTypeEnum] = Field(default=None, alias="minimumActivePeriodForDividendsTypeEnum")
    minimum_active_period_frequency_type_options: Optional[List[GetProductsMinimumActivePeriodFrequencyTypeOptions]] = Field(default=None, alias="minimumActivePeriodFrequencyTypeOptions")
    minimum_shares: Optional[StrictInt] = Field(default=None, alias="minimumShares")
    name: Optional[StrictStr] = None
    nominal_shares: Optional[StrictInt] = Field(default=None, alias="nominalShares")
    share_capital: Optional[StrictInt] = Field(default=None, alias="shareCapital")
    short_name: Optional[StrictStr] = Field(default=None, alias="shortName")
    total_shares: Optional[StrictInt] = Field(default=None, alias="totalShares")
    total_shares_issued: Optional[StrictInt] = Field(default=None, alias="totalSharesIssued")
    unit_price: Optional[StrictInt] = Field(default=None, alias="unitPrice")
    __properties: ClassVar[List[str]] = ["accountingMappingOptions", "accountingMappings", "accountingRule", "allowDividendCalculationForInactiveClients", "chargeOptions", "charges", "currency", "currencyOptions", "description", "id", "lockPeriodTypeEnum", "lockinPeriod", "lockinPeriodFrequencyTypeOptions", "marketPrice", "maximumShares", "minimumActivePeriod", "minimumActivePeriodForDividendsTypeEnum", "minimumActivePeriodFrequencyTypeOptions", "minimumShares", "name", "nominalShares", "shareCapital", "shortName", "totalShares", "totalSharesIssued", "unitPrice"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetProductsTypeProductIdResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accounting_mapping_options
        if self.accounting_mapping_options:
            _dict['accountingMappingOptions'] = self.accounting_mapping_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accounting_mappings
        if self.accounting_mappings:
            _dict['accountingMappings'] = self.accounting_mappings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accounting_rule
        if self.accounting_rule:
            _dict['accountingRule'] = self.accounting_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charge_options (list)
        _items = []
        if self.charge_options:
            for _item in self.charge_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in currency_options (list)
        _items = []
        if self.currency_options:
            for _item in self.currency_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['currencyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of lock_period_type_enum
        if self.lock_period_type_enum:
            _dict['lockPeriodTypeEnum'] = self.lock_period_type_enum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lockin_period_frequency_type_options (list)
        _items = []
        if self.lockin_period_frequency_type_options:
            for _item in self.lockin_period_frequency_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lockinPeriodFrequencyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in market_price (list)
        _items = []
        if self.market_price:
            for _item in self.market_price:
                if _item:
                    _items.append(_item.to_dict())
            _dict['marketPrice'] = _items
        # override the default output from pydantic by calling `to_dict()` of minimum_active_period_for_dividends_type_enum
        if self.minimum_active_period_for_dividends_type_enum:
            _dict['minimumActivePeriodForDividendsTypeEnum'] = self.minimum_active_period_for_dividends_type_enum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in minimum_active_period_frequency_type_options (list)
        _items = []
        if self.minimum_active_period_frequency_type_options:
            for _item in self.minimum_active_period_frequency_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['minimumActivePeriodFrequencyTypeOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetProductsTypeProductIdResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountingMappingOptions": GetProductsAccountingMappingOptions.from_dict(obj["accountingMappingOptions"]) if obj.get("accountingMappingOptions") is not None else None,
            "accountingMappings": GetProductsAccountingMappings.from_dict(obj["accountingMappings"]) if obj.get("accountingMappings") is not None else None,
            "accountingRule": GetProductsAccountingRule.from_dict(obj["accountingRule"]) if obj.get("accountingRule") is not None else None,
            "allowDividendCalculationForInactiveClients": obj.get("allowDividendCalculationForInactiveClients"),
            "chargeOptions": [GetProductsCharges.from_dict(_item) for _item in obj["chargeOptions"]] if obj.get("chargeOptions") is not None else None,
            "charges": [GetProductsCharges.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "currency": GetProductsCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "currencyOptions": [GetChargesCurrency.from_dict(_item) for _item in obj["currencyOptions"]] if obj.get("currencyOptions") is not None else None,
            "description": obj.get("description"),
            "id": obj.get("id"),
            "lockPeriodTypeEnum": GetLockPeriodTypeEnum.from_dict(obj["lockPeriodTypeEnum"]) if obj.get("lockPeriodTypeEnum") is not None else None,
            "lockinPeriod": obj.get("lockinPeriod"),
            "lockinPeriodFrequencyTypeOptions": [GetProductsMinimumActivePeriodFrequencyTypeOptions.from_dict(_item) for _item in obj["lockinPeriodFrequencyTypeOptions"]] if obj.get("lockinPeriodFrequencyTypeOptions") is not None else None,
            "marketPrice": [GetProductsMarketPrice.from_dict(_item) for _item in obj["marketPrice"]] if obj.get("marketPrice") is not None else None,
            "maximumShares": obj.get("maximumShares"),
            "minimumActivePeriod": obj.get("minimumActivePeriod"),
            "minimumActivePeriodForDividendsTypeEnum": GetLockPeriodTypeEnum.from_dict(obj["minimumActivePeriodForDividendsTypeEnum"]) if obj.get("minimumActivePeriodForDividendsTypeEnum") is not None else None,
            "minimumActivePeriodFrequencyTypeOptions": [GetProductsMinimumActivePeriodFrequencyTypeOptions.from_dict(_item) for _item in obj["minimumActivePeriodFrequencyTypeOptions"]] if obj.get("minimumActivePeriodFrequencyTypeOptions") is not None else None,
            "minimumShares": obj.get("minimumShares"),
            "name": obj.get("name"),
            "nominalShares": obj.get("nominalShares"),
            "shareCapital": obj.get("shareCapital"),
            "shortName": obj.get("shortName"),
            "totalShares": obj.get("totalShares"),
            "totalSharesIssued": obj.get("totalSharesIssued"),
            "unitPrice": obj.get("unitPrice")
        })
        return _obj


