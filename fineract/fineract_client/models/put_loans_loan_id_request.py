# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.put_loans_loan_id_changes import PutLoansLoanIdChanges
from fineract_client.models.put_loans_loan_id_collateral import PutLoansLoanIdCollateral
from fineract_client.models.put_loans_loan_id_disbursement_data import PutLoansLoanIdDisbursementData
from typing import Optional, Set
from typing_extensions import Self

class PutLoansLoanIdRequest(BaseModel):
    """
    PutLoansLoanIdRequest
    """ # noqa: E501
    amortization_type: Optional[StrictInt] = Field(default=None, alias="amortizationType")
    charges: Optional[List[PutLoansLoanIdChanges]] = None
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    collateral: Optional[List[PutLoansLoanIdCollateral]] = None
    create_standing_instruction_at_disbursement: Optional[StrictBool] = Field(default=None, alias="createStandingInstructionAtDisbursement")
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    disbursed_amount_percentage_for_down_payment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="disbursedAmountPercentageForDownPayment")
    disbursement_data: Optional[List[PutLoansLoanIdDisbursementData]] = Field(default=None, alias="disbursementData")
    enable_auto_repayment_for_down_payment: Optional[StrictBool] = Field(default=None, alias="enableAutoRepaymentForDownPayment")
    enable_down_payment: Optional[StrictBool] = Field(default=None, alias="enableDownPayment")
    enable_installment_level_delinquency: Optional[StrictBool] = Field(default=None, alias="enableInstallmentLevelDelinquency")
    expected_disbursement_date: Optional[StrictStr] = Field(default=None, alias="expectedDisbursementDate")
    fixed_length: Optional[StrictInt] = Field(default=None, alias="fixedLength")
    fixed_principal_percentage_per_installment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fixedPrincipalPercentagePerInstallment")
    fraud: Optional[StrictBool] = None
    grace_on_arrears_ageing: Optional[StrictInt] = Field(default=None, alias="graceOnArrearsAgeing")
    interest_calculation_period_type: Optional[StrictInt] = Field(default=None, alias="interestCalculationPeriodType")
    interest_charged_from_date: Optional[StrictStr] = Field(default=None, alias="interestChargedFromDate")
    interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestRatePerPeriod")
    interest_type: Optional[StrictInt] = Field(default=None, alias="interestType")
    is_equal_amortization: Optional[StrictBool] = Field(default=None, alias="isEqualAmortization")
    is_topup: Optional[StrictBool] = Field(default=None, alias="isTopup")
    link_account_id: Optional[StrictInt] = Field(default=None, alias="linkAccountId")
    loan_id_to_close: Optional[StrictInt] = Field(default=None, alias="loanIdToClose")
    loan_schedule_processing_type: Optional[StrictStr] = Field(default=None, alias="loanScheduleProcessingType")
    loan_term_frequency: Optional[StrictInt] = Field(default=None, alias="loanTermFrequency")
    loan_term_frequency_type: Optional[StrictInt] = Field(default=None, alias="loanTermFrequencyType")
    loan_type: Optional[StrictStr] = Field(default=None, alias="loanType")
    locale: Optional[StrictStr] = None
    max_outstanding_loan_balance: Optional[StrictInt] = Field(default=None, alias="maxOutstandingLoanBalance")
    number_of_repayments: Optional[StrictInt] = Field(default=None, alias="numberOfRepayments")
    principal: Optional[StrictInt] = None
    product_id: Optional[StrictInt] = Field(default=None, alias="productId")
    repayment_every: Optional[StrictInt] = Field(default=None, alias="repaymentEvery")
    repayment_frequency_day_of_week_type: Optional[StrictInt] = Field(default=None, alias="repaymentFrequencyDayOfWeekType")
    repayment_frequency_nth_day_type: Optional[StrictInt] = Field(default=None, alias="repaymentFrequencyNthDayType")
    repayment_frequency_type: Optional[StrictInt] = Field(default=None, alias="repaymentFrequencyType")
    repayments_starting_from_date: Optional[StrictStr] = Field(default=None, alias="repaymentsStartingFromDate")
    submitted_on_date: Optional[StrictStr] = Field(default=None, alias="submittedOnDate")
    transaction_processing_strategy_code: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategyCode")
    __properties: ClassVar[List[str]] = ["amortizationType", "charges", "clientId", "collateral", "createStandingInstructionAtDisbursement", "dateFormat", "disbursedAmountPercentageForDownPayment", "disbursementData", "enableAutoRepaymentForDownPayment", "enableDownPayment", "enableInstallmentLevelDelinquency", "expectedDisbursementDate", "fixedLength", "fixedPrincipalPercentagePerInstallment", "fraud", "graceOnArrearsAgeing", "interestCalculationPeriodType", "interestChargedFromDate", "interestRatePerPeriod", "interestType", "isEqualAmortization", "isTopup", "linkAccountId", "loanIdToClose", "loanScheduleProcessingType", "loanTermFrequency", "loanTermFrequencyType", "loanType", "locale", "maxOutstandingLoanBalance", "numberOfRepayments", "principal", "productId", "repaymentEvery", "repaymentFrequencyDayOfWeekType", "repaymentFrequencyNthDayType", "repaymentFrequencyType", "repaymentsStartingFromDate", "submittedOnDate", "transactionProcessingStrategyCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutLoansLoanIdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item_charges in self.charges:
                if _item_charges:
                    _items.append(_item_charges.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in collateral (list)
        _items = []
        if self.collateral:
            for _item_collateral in self.collateral:
                if _item_collateral:
                    _items.append(_item_collateral.to_dict())
            _dict['collateral'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in disbursement_data (list)
        _items = []
        if self.disbursement_data:
            for _item_disbursement_data in self.disbursement_data:
                if _item_disbursement_data:
                    _items.append(_item_disbursement_data.to_dict())
            _dict['disbursementData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutLoansLoanIdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amortizationType": obj.get("amortizationType"),
            "charges": [PutLoansLoanIdChanges.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "clientId": obj.get("clientId"),
            "collateral": [PutLoansLoanIdCollateral.from_dict(_item) for _item in obj["collateral"]] if obj.get("collateral") is not None else None,
            "createStandingInstructionAtDisbursement": obj.get("createStandingInstructionAtDisbursement"),
            "dateFormat": obj.get("dateFormat"),
            "disbursedAmountPercentageForDownPayment": obj.get("disbursedAmountPercentageForDownPayment"),
            "disbursementData": [PutLoansLoanIdDisbursementData.from_dict(_item) for _item in obj["disbursementData"]] if obj.get("disbursementData") is not None else None,
            "enableAutoRepaymentForDownPayment": obj.get("enableAutoRepaymentForDownPayment"),
            "enableDownPayment": obj.get("enableDownPayment"),
            "enableInstallmentLevelDelinquency": obj.get("enableInstallmentLevelDelinquency"),
            "expectedDisbursementDate": obj.get("expectedDisbursementDate"),
            "fixedLength": obj.get("fixedLength"),
            "fixedPrincipalPercentagePerInstallment": obj.get("fixedPrincipalPercentagePerInstallment"),
            "fraud": obj.get("fraud"),
            "graceOnArrearsAgeing": obj.get("graceOnArrearsAgeing"),
            "interestCalculationPeriodType": obj.get("interestCalculationPeriodType"),
            "interestChargedFromDate": obj.get("interestChargedFromDate"),
            "interestRatePerPeriod": obj.get("interestRatePerPeriod"),
            "interestType": obj.get("interestType"),
            "isEqualAmortization": obj.get("isEqualAmortization"),
            "isTopup": obj.get("isTopup"),
            "linkAccountId": obj.get("linkAccountId"),
            "loanIdToClose": obj.get("loanIdToClose"),
            "loanScheduleProcessingType": obj.get("loanScheduleProcessingType"),
            "loanTermFrequency": obj.get("loanTermFrequency"),
            "loanTermFrequencyType": obj.get("loanTermFrequencyType"),
            "loanType": obj.get("loanType"),
            "locale": obj.get("locale"),
            "maxOutstandingLoanBalance": obj.get("maxOutstandingLoanBalance"),
            "numberOfRepayments": obj.get("numberOfRepayments"),
            "principal": obj.get("principal"),
            "productId": obj.get("productId"),
            "repaymentEvery": obj.get("repaymentEvery"),
            "repaymentFrequencyDayOfWeekType": obj.get("repaymentFrequencyDayOfWeekType"),
            "repaymentFrequencyNthDayType": obj.get("repaymentFrequencyNthDayType"),
            "repaymentFrequencyType": obj.get("repaymentFrequencyType"),
            "repaymentsStartingFromDate": obj.get("repaymentsStartingFromDate"),
            "submittedOnDate": obj.get("submittedOnDate"),
            "transactionProcessingStrategyCode": obj.get("transactionProcessingStrategyCode")
        })
        return _obj


