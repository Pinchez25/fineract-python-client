# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PostStandingInstructionsRequest(BaseModel):
    """
    PostStandingInstructionsRequest
    """ # noqa: E501
    amount: Optional[StrictInt] = None
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    from_account_id: Optional[StrictInt] = Field(default=None, alias="fromAccountId")
    from_account_type: Optional[StrictInt] = Field(default=None, alias="fromAccountType")
    from_client_id: Optional[StrictInt] = Field(default=None, alias="fromClientId")
    from_office_id: Optional[StrictInt] = Field(default=None, alias="fromOfficeId")
    instruction_type: Optional[StrictInt] = Field(default=None, alias="instructionType")
    locale: Optional[StrictStr] = Field(default=None, description="en")
    month_day_format: Optional[StrictStr] = Field(default=None, alias="monthDayFormat")
    name: Optional[StrictStr] = None
    priority: Optional[StrictInt] = None
    recurrence_frequency: Optional[StrictInt] = Field(default=None, alias="recurrenceFrequency")
    recurrence_interval: Optional[StrictInt] = Field(default=None, alias="recurrenceInterval")
    recurrence_on_month_day: Optional[StrictStr] = Field(default=None, alias="recurrenceOnMonthDay")
    recurrence_type: Optional[StrictInt] = Field(default=None, alias="recurrenceType")
    status: Optional[StrictInt] = None
    to_account_id: Optional[StrictInt] = Field(default=None, alias="toAccountId")
    to_account_type: Optional[StrictInt] = Field(default=None, alias="toAccountType")
    to_client_id: Optional[StrictInt] = Field(default=None, alias="toClientId")
    to_office_id: Optional[StrictInt] = Field(default=None, alias="toOfficeId")
    transfer_type: Optional[StrictInt] = Field(default=None, alias="transferType")
    valid_from: Optional[StrictStr] = Field(default=None, alias="validFrom")
    __properties: ClassVar[List[str]] = ["amount", "dateFormat", "fromAccountId", "fromAccountType", "fromClientId", "fromOfficeId", "instructionType", "locale", "monthDayFormat", "name", "priority", "recurrenceFrequency", "recurrenceInterval", "recurrenceOnMonthDay", "recurrenceType", "status", "toAccountId", "toAccountType", "toClientId", "toOfficeId", "transferType", "validFrom"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostStandingInstructionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostStandingInstructionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "dateFormat": obj.get("dateFormat"),
            "fromAccountId": obj.get("fromAccountId"),
            "fromAccountType": obj.get("fromAccountType"),
            "fromClientId": obj.get("fromClientId"),
            "fromOfficeId": obj.get("fromOfficeId"),
            "instructionType": obj.get("instructionType"),
            "locale": obj.get("locale"),
            "monthDayFormat": obj.get("monthDayFormat"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "recurrenceFrequency": obj.get("recurrenceFrequency"),
            "recurrenceInterval": obj.get("recurrenceInterval"),
            "recurrenceOnMonthDay": obj.get("recurrenceOnMonthDay"),
            "recurrenceType": obj.get("recurrenceType"),
            "status": obj.get("status"),
            "toAccountId": obj.get("toAccountId"),
            "toAccountType": obj.get("toAccountType"),
            "toClientId": obj.get("toClientId"),
            "toOfficeId": obj.get("toOfficeId"),
            "transferType": obj.get("transferType"),
            "validFrom": obj.get("validFrom")
        })
        return _obj


