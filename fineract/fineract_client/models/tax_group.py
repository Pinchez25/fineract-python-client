# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TaxGroup(BaseModel):
    """
    TaxGroup
    """ # noqa: E501
    created_by: Optional[StrictInt] = Field(default=None, alias="createdBy")
    created_date: Optional[datetime] = Field(default=None, alias="createdDate")
    id: Optional[StrictInt] = None
    last_modified_by: Optional[StrictInt] = Field(default=None, alias="lastModifiedBy")
    last_modified_date: Optional[datetime] = Field(default=None, alias="lastModifiedDate")
    name: Optional[StrictStr] = None
    new: Optional[StrictBool] = None
    tax_group_mappings: Optional[List[TaxGroupMappings]] = Field(default=None, alias="taxGroupMappings")
    __properties: ClassVar[List[str]] = ["createdBy", "createdDate", "id", "lastModifiedBy", "lastModifiedDate", "name", "new", "taxGroupMappings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaxGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tax_group_mappings (list)
        _items = []
        if self.tax_group_mappings:
            for _item_tax_group_mappings in self.tax_group_mappings:
                if _item_tax_group_mappings:
                    _items.append(_item_tax_group_mappings.to_dict())
            _dict['taxGroupMappings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaxGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdBy": obj.get("createdBy"),
            "createdDate": obj.get("createdDate"),
            "id": obj.get("id"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "name": obj.get("name"),
            "new": obj.get("new"),
            "taxGroupMappings": [TaxGroupMappings.from_dict(_item) for _item in obj["taxGroupMappings"]] if obj.get("taxGroupMappings") is not None else None
        })
        return _obj

from fineract_client.models.tax_group_mappings import TaxGroupMappings
# TODO: Rewrite to not use raise_errors
TaxGroup.model_rebuild(raise_errors=False)

