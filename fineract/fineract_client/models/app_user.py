# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.granted_authority import GrantedAuthority
from fineract_client.models.office import Office
from fineract_client.models.role import Role
from fineract_client.models.staff import Staff
from typing import Optional, Set
from typing_extensions import Self

class AppUser(BaseModel):
    """
    AppUser
    """ # noqa: E501
    account_non_expired: Optional[StrictBool] = Field(default=None, alias="accountNonExpired")
    account_non_locked: Optional[StrictBool] = Field(default=None, alias="accountNonLocked")
    app_user_client_mappings: Optional[List[AppUserClientMapping]] = Field(default=None, alias="appUserClientMappings")
    authorities: Optional[List[GrantedAuthority]] = None
    bypass_user: Optional[StrictBool] = Field(default=None, alias="bypassUser")
    checker_super_user: Optional[StrictBool] = Field(default=None, alias="checkerSuperUser")
    credentials_non_expired: Optional[StrictBool] = Field(default=None, alias="credentialsNonExpired")
    deleted: Optional[StrictBool] = None
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    email: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    firstname: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    last_time_password_updated: Optional[date] = Field(default=None, alias="lastTimePasswordUpdated")
    lastname: Optional[StrictStr] = None
    new: Optional[StrictBool] = None
    not_enabled: Optional[StrictBool] = Field(default=None, alias="notEnabled")
    office: Optional[Office] = None
    password: Optional[StrictStr] = None
    password_never_expires: Optional[StrictBool] = Field(default=None, alias="passwordNeverExpires")
    roles: Optional[List[Role]] = None
    self_service_user: Optional[StrictBool] = Field(default=None, alias="selfServiceUser")
    staff: Optional[Staff] = None
    staff_display_name: Optional[StrictStr] = Field(default=None, alias="staffDisplayName")
    staff_id: Optional[StrictInt] = Field(default=None, alias="staffId")
    system_user: Optional[StrictBool] = Field(default=None, alias="systemUser")
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["accountNonExpired", "accountNonLocked", "appUserClientMappings", "authorities", "bypassUser", "checkerSuperUser", "credentialsNonExpired", "deleted", "displayName", "email", "enabled", "firstname", "id", "lastTimePasswordUpdated", "lastname", "new", "notEnabled", "office", "password", "passwordNeverExpires", "roles", "selfServiceUser", "staff", "staffDisplayName", "staffId", "systemUser", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in app_user_client_mappings (list)
        _items = []
        if self.app_user_client_mappings:
            for _item_app_user_client_mappings in self.app_user_client_mappings:
                if _item_app_user_client_mappings:
                    _items.append(_item_app_user_client_mappings.to_dict())
            _dict['appUserClientMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authorities (list)
        _items = []
        if self.authorities:
            for _item_authorities in self.authorities:
                if _item_authorities:
                    _items.append(_item_authorities.to_dict())
            _dict['authorities'] = _items
        # override the default output from pydantic by calling `to_dict()` of office
        if self.office:
            _dict['office'] = self.office.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of staff
        if self.staff:
            _dict['staff'] = self.staff.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNonExpired": obj.get("accountNonExpired"),
            "accountNonLocked": obj.get("accountNonLocked"),
            "appUserClientMappings": [AppUserClientMapping.from_dict(_item) for _item in obj["appUserClientMappings"]] if obj.get("appUserClientMappings") is not None else None,
            "authorities": [GrantedAuthority.from_dict(_item) for _item in obj["authorities"]] if obj.get("authorities") is not None else None,
            "bypassUser": obj.get("bypassUser"),
            "checkerSuperUser": obj.get("checkerSuperUser"),
            "credentialsNonExpired": obj.get("credentialsNonExpired"),
            "deleted": obj.get("deleted"),
            "displayName": obj.get("displayName"),
            "email": obj.get("email"),
            "enabled": obj.get("enabled"),
            "firstname": obj.get("firstname"),
            "id": obj.get("id"),
            "lastTimePasswordUpdated": obj.get("lastTimePasswordUpdated"),
            "lastname": obj.get("lastname"),
            "new": obj.get("new"),
            "notEnabled": obj.get("notEnabled"),
            "office": Office.from_dict(obj["office"]) if obj.get("office") is not None else None,
            "password": obj.get("password"),
            "passwordNeverExpires": obj.get("passwordNeverExpires"),
            "roles": [Role.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "selfServiceUser": obj.get("selfServiceUser"),
            "staff": Staff.from_dict(obj["staff"]) if obj.get("staff") is not None else None,
            "staffDisplayName": obj.get("staffDisplayName"),
            "staffId": obj.get("staffId"),
            "systemUser": obj.get("systemUser"),
            "username": obj.get("username")
        })
        return _obj

from fineract_client.models.app_user_client_mapping import AppUserClientMapping
# TODO: Rewrite to not use raise_errors
AppUser.model_rebuild(raise_errors=False)

