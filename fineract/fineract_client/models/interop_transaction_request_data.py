# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.extension_data import ExtensionData
from fineract_client.models.geo_code_data import GeoCodeData
from fineract_client.models.interop_transaction_type_data import InteropTransactionTypeData
from fineract_client.models.money_data import MoneyData
from typing import Optional, Set
from typing_extensions import Self

class InteropTransactionRequestData(BaseModel):
    """
    InteropTransactionRequestData
    """ # noqa: E501
    account_id: StrictStr = Field(alias="accountId")
    amount: MoneyData
    expiration: Optional[datetime] = None
    expiration_local_date: Optional[date] = Field(default=None, alias="expirationLocalDate")
    extension_list: Optional[List[ExtensionData]] = Field(default=None, alias="extensionList")
    geo_code: Optional[GeoCodeData] = Field(default=None, alias="geoCode")
    note: Optional[StrictStr] = None
    request_code: Optional[StrictStr] = Field(default=None, alias="requestCode")
    transaction_code: StrictStr = Field(alias="transactionCode")
    transaction_role: StrictStr = Field(alias="transactionRole")
    transaction_type: Optional[InteropTransactionTypeData] = Field(default=None, alias="transactionType")
    __properties: ClassVar[List[str]] = ["accountId", "amount", "expiration", "expirationLocalDate", "extensionList", "geoCode", "note", "requestCode", "transactionCode", "transactionRole", "transactionType"]

    @field_validator('transaction_role')
    def transaction_role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PAYER', 'PAYEE']):
            raise ValueError("must be one of enum values ('PAYER', 'PAYEE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InteropTransactionRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in extension_list (list)
        _items = []
        if self.extension_list:
            for _item_extension_list in self.extension_list:
                if _item_extension_list:
                    _items.append(_item_extension_list.to_dict())
            _dict['extensionList'] = _items
        # override the default output from pydantic by calling `to_dict()` of geo_code
        if self.geo_code:
            _dict['geoCode'] = self.geo_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_type
        if self.transaction_type:
            _dict['transactionType'] = self.transaction_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InteropTransactionRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "amount": MoneyData.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "expiration": obj.get("expiration"),
            "expirationLocalDate": obj.get("expirationLocalDate"),
            "extensionList": [ExtensionData.from_dict(_item) for _item in obj["extensionList"]] if obj.get("extensionList") is not None else None,
            "geoCode": GeoCodeData.from_dict(obj["geoCode"]) if obj.get("geoCode") is not None else None,
            "note": obj.get("note"),
            "requestCode": obj.get("requestCode"),
            "transactionCode": obj.get("transactionCode"),
            "transactionRole": obj.get("transactionRole"),
            "transactionType": InteropTransactionTypeData.from_dict(obj["transactionType"]) if obj.get("transactionType") is not None else None
        })
        return _obj


