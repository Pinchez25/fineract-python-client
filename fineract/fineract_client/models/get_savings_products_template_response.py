# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_savings_currency import GetSavingsCurrency
from fineract_client.models.get_savings_products_accounting_mapping_options import GetSavingsProductsAccountingMappingOptions
from fineract_client.models.get_savings_products_charge_options import GetSavingsProductsChargeOptions
from fineract_client.models.get_savings_products_interest_calculation_days_in_year_type import GetSavingsProductsInterestCalculationDaysInYearType
from fineract_client.models.get_savings_products_interest_calculation_type import GetSavingsProductsInterestCalculationType
from fineract_client.models.get_savings_products_interest_compounding_period_type import GetSavingsProductsInterestCompoundingPeriodType
from fineract_client.models.get_savings_products_interest_posting_period_type import GetSavingsProductsInterestPostingPeriodType
from fineract_client.models.get_savings_products_lockin_period_frequency_type_options import GetSavingsProductsLockinPeriodFrequencyTypeOptions
from fineract_client.models.get_savings_products_payment_type_options import GetSavingsProductsPaymentTypeOptions
from fineract_client.models.get_savings_products_template_accounting_rule import GetSavingsProductsTemplateAccountingRule
from fineract_client.models.get_savings_products_withdrawal_fee_type_options import GetSavingsProductsWithdrawalFeeTypeOptions
from typing import Optional, Set
from typing_extensions import Self

class GetSavingsProductsTemplateResponse(BaseModel):
    """
    GetSavingsProductsTemplateResponse
    """ # noqa: E501
    account_mapping: Optional[GetSavingsCurrency] = Field(default=None, alias="accountMapping")
    accounting_mapping_options: Optional[GetSavingsProductsAccountingMappingOptions] = Field(default=None, alias="accountingMappingOptions")
    accounting_rule: Optional[GetSavingsProductsTemplateAccountingRule] = Field(default=None, alias="accountingRule")
    accounting_rule_options: Optional[List[GetSavingsProductsTemplateAccountingRule]] = Field(default=None, alias="accountingRuleOptions")
    charge_options: Optional[List[GetSavingsProductsChargeOptions]] = Field(default=None, alias="chargeOptions")
    currency: Optional[GetSavingsCurrency] = None
    currency_options: Optional[List[GetSavingsCurrency]] = Field(default=None, alias="currencyOptions")
    interest_calculation_days_in_year_type: Optional[GetSavingsProductsInterestCalculationDaysInYearType] = Field(default=None, alias="interestCalculationDaysInYearType")
    interest_calculation_days_in_year_type_options: Optional[List[GetSavingsProductsInterestCalculationDaysInYearType]] = Field(default=None, alias="interestCalculationDaysInYearTypeOptions")
    interest_calculation_type: Optional[GetSavingsProductsInterestCalculationType] = Field(default=None, alias="interestCalculationType")
    interest_calculation_type_options: Optional[List[GetSavingsProductsInterestCalculationType]] = Field(default=None, alias="interestCalculationTypeOptions")
    interest_compounding_period_type: Optional[GetSavingsProductsInterestCompoundingPeriodType] = Field(default=None, alias="interestCompoundingPeriodType")
    interest_compounding_period_type_options: Optional[List[GetSavingsProductsInterestCompoundingPeriodType]] = Field(default=None, alias="interestCompoundingPeriodTypeOptions")
    interest_posting_period_type: Optional[GetSavingsProductsInterestPostingPeriodType] = Field(default=None, alias="interestPostingPeriodType")
    interest_posting_period_type_options: Optional[List[GetSavingsProductsInterestPostingPeriodType]] = Field(default=None, alias="interestPostingPeriodTypeOptions")
    lockin_period_frequency_type_options: Optional[List[GetSavingsProductsLockinPeriodFrequencyTypeOptions]] = Field(default=None, alias="lockinPeriodFrequencyTypeOptions")
    payment_type_options: Optional[List[GetSavingsProductsPaymentTypeOptions]] = Field(default=None, alias="paymentTypeOptions")
    withdrawal_fee_type_options: Optional[List[GetSavingsProductsWithdrawalFeeTypeOptions]] = Field(default=None, alias="withdrawalFeeTypeOptions")
    __properties: ClassVar[List[str]] = ["accountMapping", "accountingMappingOptions", "accountingRule", "accountingRuleOptions", "chargeOptions", "currency", "currencyOptions", "interestCalculationDaysInYearType", "interestCalculationDaysInYearTypeOptions", "interestCalculationType", "interestCalculationTypeOptions", "interestCompoundingPeriodType", "interestCompoundingPeriodTypeOptions", "interestPostingPeriodType", "interestPostingPeriodTypeOptions", "lockinPeriodFrequencyTypeOptions", "paymentTypeOptions", "withdrawalFeeTypeOptions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSavingsProductsTemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_mapping
        if self.account_mapping:
            _dict['accountMapping'] = self.account_mapping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accounting_mapping_options
        if self.accounting_mapping_options:
            _dict['accountingMappingOptions'] = self.accounting_mapping_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accounting_rule
        if self.accounting_rule:
            _dict['accountingRule'] = self.accounting_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in accounting_rule_options (list)
        _items = []
        if self.accounting_rule_options:
            for _item in self.accounting_rule_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountingRuleOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charge_options (list)
        _items = []
        if self.charge_options:
            for _item in self.charge_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in currency_options (list)
        _items = []
        if self.currency_options:
            for _item in self.currency_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['currencyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_days_in_year_type
        if self.interest_calculation_days_in_year_type:
            _dict['interestCalculationDaysInYearType'] = self.interest_calculation_days_in_year_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_calculation_days_in_year_type_options (list)
        _items = []
        if self.interest_calculation_days_in_year_type_options:
            for _item in self.interest_calculation_days_in_year_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestCalculationDaysInYearTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_type
        if self.interest_calculation_type:
            _dict['interestCalculationType'] = self.interest_calculation_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_calculation_type_options (list)
        _items = []
        if self.interest_calculation_type_options:
            for _item in self.interest_calculation_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestCalculationTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_compounding_period_type
        if self.interest_compounding_period_type:
            _dict['interestCompoundingPeriodType'] = self.interest_compounding_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_compounding_period_type_options (list)
        _items = []
        if self.interest_compounding_period_type_options:
            for _item in self.interest_compounding_period_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestCompoundingPeriodTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_posting_period_type
        if self.interest_posting_period_type:
            _dict['interestPostingPeriodType'] = self.interest_posting_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_posting_period_type_options (list)
        _items = []
        if self.interest_posting_period_type_options:
            for _item in self.interest_posting_period_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestPostingPeriodTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lockin_period_frequency_type_options (list)
        _items = []
        if self.lockin_period_frequency_type_options:
            for _item in self.lockin_period_frequency_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lockinPeriodFrequencyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_type_options (list)
        _items = []
        if self.payment_type_options:
            for _item in self.payment_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in withdrawal_fee_type_options (list)
        _items = []
        if self.withdrawal_fee_type_options:
            for _item in self.withdrawal_fee_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['withdrawalFeeTypeOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSavingsProductsTemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountMapping": GetSavingsCurrency.from_dict(obj["accountMapping"]) if obj.get("accountMapping") is not None else None,
            "accountingMappingOptions": GetSavingsProductsAccountingMappingOptions.from_dict(obj["accountingMappingOptions"]) if obj.get("accountingMappingOptions") is not None else None,
            "accountingRule": GetSavingsProductsTemplateAccountingRule.from_dict(obj["accountingRule"]) if obj.get("accountingRule") is not None else None,
            "accountingRuleOptions": [GetSavingsProductsTemplateAccountingRule.from_dict(_item) for _item in obj["accountingRuleOptions"]] if obj.get("accountingRuleOptions") is not None else None,
            "chargeOptions": [GetSavingsProductsChargeOptions.from_dict(_item) for _item in obj["chargeOptions"]] if obj.get("chargeOptions") is not None else None,
            "currency": GetSavingsCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "currencyOptions": [GetSavingsCurrency.from_dict(_item) for _item in obj["currencyOptions"]] if obj.get("currencyOptions") is not None else None,
            "interestCalculationDaysInYearType": GetSavingsProductsInterestCalculationDaysInYearType.from_dict(obj["interestCalculationDaysInYearType"]) if obj.get("interestCalculationDaysInYearType") is not None else None,
            "interestCalculationDaysInYearTypeOptions": [GetSavingsProductsInterestCalculationDaysInYearType.from_dict(_item) for _item in obj["interestCalculationDaysInYearTypeOptions"]] if obj.get("interestCalculationDaysInYearTypeOptions") is not None else None,
            "interestCalculationType": GetSavingsProductsInterestCalculationType.from_dict(obj["interestCalculationType"]) if obj.get("interestCalculationType") is not None else None,
            "interestCalculationTypeOptions": [GetSavingsProductsInterestCalculationType.from_dict(_item) for _item in obj["interestCalculationTypeOptions"]] if obj.get("interestCalculationTypeOptions") is not None else None,
            "interestCompoundingPeriodType": GetSavingsProductsInterestCompoundingPeriodType.from_dict(obj["interestCompoundingPeriodType"]) if obj.get("interestCompoundingPeriodType") is not None else None,
            "interestCompoundingPeriodTypeOptions": [GetSavingsProductsInterestCompoundingPeriodType.from_dict(_item) for _item in obj["interestCompoundingPeriodTypeOptions"]] if obj.get("interestCompoundingPeriodTypeOptions") is not None else None,
            "interestPostingPeriodType": GetSavingsProductsInterestPostingPeriodType.from_dict(obj["interestPostingPeriodType"]) if obj.get("interestPostingPeriodType") is not None else None,
            "interestPostingPeriodTypeOptions": [GetSavingsProductsInterestPostingPeriodType.from_dict(_item) for _item in obj["interestPostingPeriodTypeOptions"]] if obj.get("interestPostingPeriodTypeOptions") is not None else None,
            "lockinPeriodFrequencyTypeOptions": [GetSavingsProductsLockinPeriodFrequencyTypeOptions.from_dict(_item) for _item in obj["lockinPeriodFrequencyTypeOptions"]] if obj.get("lockinPeriodFrequencyTypeOptions") is not None else None,
            "paymentTypeOptions": [GetSavingsProductsPaymentTypeOptions.from_dict(_item) for _item in obj["paymentTypeOptions"]] if obj.get("paymentTypeOptions") is not None else None,
            "withdrawalFeeTypeOptions": [GetSavingsProductsWithdrawalFeeTypeOptions.from_dict(_item) for _item in obj["withdrawalFeeTypeOptions"]] if obj.get("withdrawalFeeTypeOptions") is not None else None
        })
        return _obj


