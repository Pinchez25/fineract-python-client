# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.get_loan_charge_template_charge_applies_to import GetLoanChargeTemplateChargeAppliesTo
from fineract_client.models.get_loan_currency import GetLoanCurrency
from fineract_client.models.get_loans_loan_id_charge_calculation_type import GetLoansLoanIdChargeCalculationType
from fineract_client.models.get_loans_loan_id_charge_payment_mode import GetLoansLoanIdChargePaymentMode
from fineract_client.models.get_loans_loan_id_charge_time_type import GetLoansLoanIdChargeTimeType
from fineract_client.models.get_loans_loan_id_fee_frequency import GetLoansLoanIdFeeFrequency
from typing import Optional, Set
from typing_extensions import Self

class GetLoansLoanIdOverdueCharges(BaseModel):
    """
    GetLoansLoanIdOverdueCharges
    """ # noqa: E501
    active: Optional[StrictBool] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    charge_applies_to: Optional[GetLoanChargeTemplateChargeAppliesTo] = Field(default=None, alias="chargeAppliesTo")
    charge_calculation_type: Optional[GetLoansLoanIdChargeCalculationType] = Field(default=None, alias="chargeCalculationType")
    charge_payment_mode: Optional[GetLoansLoanIdChargePaymentMode] = Field(default=None, alias="chargePaymentMode")
    charge_time_type: Optional[GetLoansLoanIdChargeTimeType] = Field(default=None, alias="chargeTimeType")
    currency: Optional[GetLoanCurrency] = None
    fee_frequency: Optional[GetLoansLoanIdFeeFrequency] = Field(default=None, alias="feeFrequency")
    fee_interval: Optional[StrictInt] = Field(default=None, alias="feeInterval")
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    penalty: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["active", "amount", "chargeAppliesTo", "chargeCalculationType", "chargePaymentMode", "chargeTimeType", "currency", "feeFrequency", "feeInterval", "id", "name", "penalty"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoansLoanIdOverdueCharges from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of charge_applies_to
        if self.charge_applies_to:
            _dict['chargeAppliesTo'] = self.charge_applies_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_calculation_type
        if self.charge_calculation_type:
            _dict['chargeCalculationType'] = self.charge_calculation_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_payment_mode
        if self.charge_payment_mode:
            _dict['chargePaymentMode'] = self.charge_payment_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_time_type
        if self.charge_time_type:
            _dict['chargeTimeType'] = self.charge_time_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee_frequency
        if self.fee_frequency:
            _dict['feeFrequency'] = self.fee_frequency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoansLoanIdOverdueCharges from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "amount": obj.get("amount"),
            "chargeAppliesTo": GetLoanChargeTemplateChargeAppliesTo.from_dict(obj["chargeAppliesTo"]) if obj.get("chargeAppliesTo") is not None else None,
            "chargeCalculationType": GetLoansLoanIdChargeCalculationType.from_dict(obj["chargeCalculationType"]) if obj.get("chargeCalculationType") is not None else None,
            "chargePaymentMode": GetLoansLoanIdChargePaymentMode.from_dict(obj["chargePaymentMode"]) if obj.get("chargePaymentMode") is not None else None,
            "chargeTimeType": GetLoansLoanIdChargeTimeType.from_dict(obj["chargeTimeType"]) if obj.get("chargeTimeType") is not None else None,
            "currency": GetLoanCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "feeFrequency": GetLoansLoanIdFeeFrequency.from_dict(obj["feeFrequency"]) if obj.get("feeFrequency") is not None else None,
            "feeInterval": obj.get("feeInterval"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "penalty": obj.get("penalty")
        })
        return _obj


