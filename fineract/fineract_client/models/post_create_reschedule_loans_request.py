# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PostCreateRescheduleLoansRequest(BaseModel):
    """
    PostCreateRescheduleLoansRequest
    """ # noqa: E501
    adjusted_due_date: Optional[StrictStr] = Field(default=None, alias="adjustedDueDate")
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    extra_terms: Optional[StrictInt] = Field(default=None, alias="extraTerms")
    grace_on_interest: Optional[StrictInt] = Field(default=None, alias="graceOnInterest")
    grace_on_principal: Optional[StrictInt] = Field(default=None, alias="graceOnPrincipal")
    loan_id: Optional[StrictInt] = Field(default=None, alias="loanId")
    locale: Optional[StrictStr] = None
    new_interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="newInterestRate")
    reschedule_from_date: Optional[StrictStr] = Field(default=None, alias="rescheduleFromDate")
    reschedule_reason_comment: Optional[StrictStr] = Field(default=None, alias="rescheduleReasonComment")
    reschedule_reason_id: Optional[StrictInt] = Field(default=None, alias="rescheduleReasonId")
    submitted_on_date: Optional[StrictStr] = Field(default=None, alias="submittedOnDate")
    __properties: ClassVar[List[str]] = ["adjustedDueDate", "dateFormat", "extraTerms", "graceOnInterest", "graceOnPrincipal", "loanId", "locale", "newInterestRate", "rescheduleFromDate", "rescheduleReasonComment", "rescheduleReasonId", "submittedOnDate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostCreateRescheduleLoansRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostCreateRescheduleLoansRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjustedDueDate": obj.get("adjustedDueDate"),
            "dateFormat": obj.get("dateFormat"),
            "extraTerms": obj.get("extraTerms"),
            "graceOnInterest": obj.get("graceOnInterest"),
            "graceOnPrincipal": obj.get("graceOnPrincipal"),
            "loanId": obj.get("loanId"),
            "locale": obj.get("locale"),
            "newInterestRate": obj.get("newInterestRate"),
            "rescheduleFromDate": obj.get("rescheduleFromDate"),
            "rescheduleReasonComment": obj.get("rescheduleReasonComment"),
            "rescheduleReasonId": obj.get("rescheduleReasonId"),
            "submittedOnDate": obj.get("submittedOnDate")
        })
        return _obj


