# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.get_loans_loan_id_currency import GetLoansLoanIdCurrency
from fineract_client.models.get_loans_loan_id_disbursement_details import GetLoansLoanIdDisbursementDetails
from fineract_client.models.get_loans_loan_id_linked_account import GetLoansLoanIdLinkedAccount
from fineract_client.models.get_loans_loan_id_overdue_charges import GetLoansLoanIdOverdueCharges
from typing import Optional, Set
from typing_extensions import Self

class GetLoansLoanIdSummary(BaseModel):
    """
    GetLoansLoanIdSummary
    """ # noqa: E501
    can_disburse: Optional[StrictBool] = Field(default=None, alias="canDisburse")
    charge_off_reason: Optional[StrictStr] = Field(default=None, alias="chargeOffReason")
    charge_off_reason_id: Optional[StrictInt] = Field(default=None, alias="chargeOffReasonId")
    currency: Optional[GetLoansLoanIdCurrency] = None
    disbursement_details: Optional[List[GetLoansLoanIdDisbursementDetails]] = Field(default=None, alias="disbursementDetails")
    emi_amount_variations: Optional[List[Dict[str, Any]]] = Field(default=None, alias="emiAmountVariations")
    fee_adjustments: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="feeAdjustments")
    fee_charges_charged: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="feeChargesCharged")
    fee_charges_due_at_disbursement_charged: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="feeChargesDueAtDisbursementCharged")
    fee_charges_outstanding: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="feeChargesOutstanding")
    fee_charges_overdue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="feeChargesOverdue")
    fee_charges_paid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="feeChargesPaid")
    fee_charges_waived: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="feeChargesWaived")
    fee_charges_written_off: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="feeChargesWrittenOff")
    fixed_emi_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fixedEmiAmount")
    in_arrears: Optional[StrictBool] = Field(default=None, alias="inArrears")
    interest_charged: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestCharged")
    interest_outstanding: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestOutstanding")
    interest_overdue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestOverdue")
    interest_paid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestPaid")
    interest_waived: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestWaived")
    interest_written_off: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestWrittenOff")
    is_npa: Optional[StrictBool] = Field(default=None, alias="isNPA")
    linked_account: Optional[GetLoansLoanIdLinkedAccount] = Field(default=None, alias="linkedAccount")
    max_outstanding_loan_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxOutstandingLoanBalance")
    overdue_charges: Optional[List[GetLoansLoanIdOverdueCharges]] = Field(default=None, alias="overdueCharges")
    overdue_since_date: Optional[date] = Field(default=None, alias="overdueSinceDate")
    penalty_adjustments: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="penaltyAdjustments")
    penalty_charges_charged: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="penaltyChargesCharged")
    penalty_charges_outstanding: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="penaltyChargesOutstanding")
    penalty_charges_overdue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="penaltyChargesOverdue")
    penalty_charges_paid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="penaltyChargesPaid")
    penalty_charges_waived: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="penaltyChargesWaived")
    penalty_charges_written_off: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="penaltyChargesWrittenOff")
    principal_adjustments: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="principalAdjustments")
    principal_disbursed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="principalDisbursed")
    principal_outstanding: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="principalOutstanding")
    principal_overdue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="principalOverdue")
    principal_paid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="principalPaid")
    principal_written_off: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="principalWrittenOff")
    total_charge_adjustment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalChargeAdjustment")
    total_charge_adjustment_reversed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalChargeAdjustmentReversed")
    total_chargeback: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalChargeback")
    total_cost_of_loan: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalCostOfLoan")
    total_credit_balance_refund: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalCreditBalanceRefund")
    total_credit_balance_refund_reversed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalCreditBalanceRefundReversed")
    total_expected_cost_of_loan: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalExpectedCostOfLoan")
    total_expected_repayment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalExpectedRepayment")
    total_goodwill_credit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalGoodwillCredit")
    total_goodwill_credit_reversed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalGoodwillCreditReversed")
    total_interest_payment_waiver: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalInterestPaymentWaiver")
    total_interest_refund: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalInterestRefund")
    total_merchant_refund: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalMerchantRefund")
    total_merchant_refund_reversed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalMerchantRefundReversed")
    total_outstanding: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalOutstanding")
    total_overdue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalOverdue")
    total_payout_refund: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalPayoutRefund")
    total_payout_refund_reversed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalPayoutRefundReversed")
    total_recovered: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalRecovered")
    total_repayment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalRepayment")
    total_repayment_transaction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalRepaymentTransaction")
    total_repayment_transaction_reversed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalRepaymentTransactionReversed")
    total_unpaid_payable_due_interest: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalUnpaidPayableDueInterest")
    total_unpaid_payable_not_due_interest: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalUnpaidPayableNotDueInterest")
    total_waived: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalWaived")
    total_written_off: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalWrittenOff")
    writeoff_reason: Optional[StrictStr] = Field(default=None, alias="writeoffReason")
    writeoff_reason_id: Optional[StrictInt] = Field(default=None, alias="writeoffReasonId")
    __properties: ClassVar[List[str]] = ["canDisburse", "chargeOffReason", "chargeOffReasonId", "currency", "disbursementDetails", "emiAmountVariations", "feeAdjustments", "feeChargesCharged", "feeChargesDueAtDisbursementCharged", "feeChargesOutstanding", "feeChargesOverdue", "feeChargesPaid", "feeChargesWaived", "feeChargesWrittenOff", "fixedEmiAmount", "inArrears", "interestCharged", "interestOutstanding", "interestOverdue", "interestPaid", "interestWaived", "interestWrittenOff", "isNPA", "linkedAccount", "maxOutstandingLoanBalance", "overdueCharges", "overdueSinceDate", "penaltyAdjustments", "penaltyChargesCharged", "penaltyChargesOutstanding", "penaltyChargesOverdue", "penaltyChargesPaid", "penaltyChargesWaived", "penaltyChargesWrittenOff", "principalAdjustments", "principalDisbursed", "principalOutstanding", "principalOverdue", "principalPaid", "principalWrittenOff", "totalChargeAdjustment", "totalChargeAdjustmentReversed", "totalChargeback", "totalCostOfLoan", "totalCreditBalanceRefund", "totalCreditBalanceRefundReversed", "totalExpectedCostOfLoan", "totalExpectedRepayment", "totalGoodwillCredit", "totalGoodwillCreditReversed", "totalInterestPaymentWaiver", "totalInterestRefund", "totalMerchantRefund", "totalMerchantRefundReversed", "totalOutstanding", "totalOverdue", "totalPayoutRefund", "totalPayoutRefundReversed", "totalRecovered", "totalRepayment", "totalRepaymentTransaction", "totalRepaymentTransactionReversed", "totalUnpaidPayableDueInterest", "totalUnpaidPayableNotDueInterest", "totalWaived", "totalWrittenOff", "writeoffReason", "writeoffReasonId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoansLoanIdSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in disbursement_details (list)
        _items = []
        if self.disbursement_details:
            for _item in self.disbursement_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['disbursementDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of linked_account
        if self.linked_account:
            _dict['linkedAccount'] = self.linked_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in overdue_charges (list)
        _items = []
        if self.overdue_charges:
            for _item in self.overdue_charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['overdueCharges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoansLoanIdSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canDisburse": obj.get("canDisburse"),
            "chargeOffReason": obj.get("chargeOffReason"),
            "chargeOffReasonId": obj.get("chargeOffReasonId"),
            "currency": GetLoansLoanIdCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "disbursementDetails": [GetLoansLoanIdDisbursementDetails.from_dict(_item) for _item in obj["disbursementDetails"]] if obj.get("disbursementDetails") is not None else None,
            "emiAmountVariations": obj.get("emiAmountVariations"),
            "feeAdjustments": obj.get("feeAdjustments"),
            "feeChargesCharged": obj.get("feeChargesCharged"),
            "feeChargesDueAtDisbursementCharged": obj.get("feeChargesDueAtDisbursementCharged"),
            "feeChargesOutstanding": obj.get("feeChargesOutstanding"),
            "feeChargesOverdue": obj.get("feeChargesOverdue"),
            "feeChargesPaid": obj.get("feeChargesPaid"),
            "feeChargesWaived": obj.get("feeChargesWaived"),
            "feeChargesWrittenOff": obj.get("feeChargesWrittenOff"),
            "fixedEmiAmount": obj.get("fixedEmiAmount"),
            "inArrears": obj.get("inArrears"),
            "interestCharged": obj.get("interestCharged"),
            "interestOutstanding": obj.get("interestOutstanding"),
            "interestOverdue": obj.get("interestOverdue"),
            "interestPaid": obj.get("interestPaid"),
            "interestWaived": obj.get("interestWaived"),
            "interestWrittenOff": obj.get("interestWrittenOff"),
            "isNPA": obj.get("isNPA"),
            "linkedAccount": GetLoansLoanIdLinkedAccount.from_dict(obj["linkedAccount"]) if obj.get("linkedAccount") is not None else None,
            "maxOutstandingLoanBalance": obj.get("maxOutstandingLoanBalance"),
            "overdueCharges": [GetLoansLoanIdOverdueCharges.from_dict(_item) for _item in obj["overdueCharges"]] if obj.get("overdueCharges") is not None else None,
            "overdueSinceDate": obj.get("overdueSinceDate"),
            "penaltyAdjustments": obj.get("penaltyAdjustments"),
            "penaltyChargesCharged": obj.get("penaltyChargesCharged"),
            "penaltyChargesOutstanding": obj.get("penaltyChargesOutstanding"),
            "penaltyChargesOverdue": obj.get("penaltyChargesOverdue"),
            "penaltyChargesPaid": obj.get("penaltyChargesPaid"),
            "penaltyChargesWaived": obj.get("penaltyChargesWaived"),
            "penaltyChargesWrittenOff": obj.get("penaltyChargesWrittenOff"),
            "principalAdjustments": obj.get("principalAdjustments"),
            "principalDisbursed": obj.get("principalDisbursed"),
            "principalOutstanding": obj.get("principalOutstanding"),
            "principalOverdue": obj.get("principalOverdue"),
            "principalPaid": obj.get("principalPaid"),
            "principalWrittenOff": obj.get("principalWrittenOff"),
            "totalChargeAdjustment": obj.get("totalChargeAdjustment"),
            "totalChargeAdjustmentReversed": obj.get("totalChargeAdjustmentReversed"),
            "totalChargeback": obj.get("totalChargeback"),
            "totalCostOfLoan": obj.get("totalCostOfLoan"),
            "totalCreditBalanceRefund": obj.get("totalCreditBalanceRefund"),
            "totalCreditBalanceRefundReversed": obj.get("totalCreditBalanceRefundReversed"),
            "totalExpectedCostOfLoan": obj.get("totalExpectedCostOfLoan"),
            "totalExpectedRepayment": obj.get("totalExpectedRepayment"),
            "totalGoodwillCredit": obj.get("totalGoodwillCredit"),
            "totalGoodwillCreditReversed": obj.get("totalGoodwillCreditReversed"),
            "totalInterestPaymentWaiver": obj.get("totalInterestPaymentWaiver"),
            "totalInterestRefund": obj.get("totalInterestRefund"),
            "totalMerchantRefund": obj.get("totalMerchantRefund"),
            "totalMerchantRefundReversed": obj.get("totalMerchantRefundReversed"),
            "totalOutstanding": obj.get("totalOutstanding"),
            "totalOverdue": obj.get("totalOverdue"),
            "totalPayoutRefund": obj.get("totalPayoutRefund"),
            "totalPayoutRefundReversed": obj.get("totalPayoutRefundReversed"),
            "totalRecovered": obj.get("totalRecovered"),
            "totalRepayment": obj.get("totalRepayment"),
            "totalRepaymentTransaction": obj.get("totalRepaymentTransaction"),
            "totalRepaymentTransactionReversed": obj.get("totalRepaymentTransactionReversed"),
            "totalUnpaidPayableDueInterest": obj.get("totalUnpaidPayableDueInterest"),
            "totalUnpaidPayableNotDueInterest": obj.get("totalUnpaidPayableNotDueInterest"),
            "totalWaived": obj.get("totalWaived"),
            "totalWrittenOff": obj.get("totalWrittenOff"),
            "writeoffReason": obj.get("writeoffReason"),
            "writeoffReasonId": obj.get("writeoffReasonId")
        })
        return _obj


