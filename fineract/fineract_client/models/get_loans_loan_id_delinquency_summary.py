# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.get_loans_loan_id_delinquency_pause_period import GetLoansLoanIdDelinquencyPausePeriod
from fineract_client.models.get_loans_loan_id_loan_installment_level_delinquency import GetLoansLoanIdLoanInstallmentLevelDelinquency
from typing import Optional, Set
from typing_extensions import Self

class GetLoansLoanIdDelinquencySummary(BaseModel):
    """
    Delinquent data
    """ # noqa: E501
    available_disbursement_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="availableDisbursementAmount")
    delinquency_pause_periods: Optional[List[GetLoansLoanIdDelinquencyPausePeriod]] = Field(default=None, description="List of GetLoansLoanIdDelinquencyPausePeriod", alias="delinquencyPausePeriods")
    delinquent_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="delinquentAmount")
    delinquent_date: Optional[date] = Field(default=None, alias="delinquentDate")
    delinquent_days: Optional[StrictInt] = Field(default=None, alias="delinquentDays")
    delinquent_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="delinquentFee")
    delinquent_interest: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="delinquentInterest")
    delinquent_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="delinquentPenalty")
    delinquent_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="delinquentPrincipal")
    installment_level_delinquency: Optional[List[GetLoansLoanIdLoanInstallmentLevelDelinquency]] = Field(default=None, description="List of GetLoansLoanIdLoanInstallmentLevelDelinquency", alias="installmentLevelDelinquency")
    last_payment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lastPaymentAmount")
    last_payment_date: Optional[date] = Field(default=None, alias="lastPaymentDate")
    last_repayment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lastRepaymentAmount")
    last_repayment_date: Optional[date] = Field(default=None, alias="lastRepaymentDate")
    next_payment_due_date: Optional[date] = Field(default=None, alias="nextPaymentDueDate")
    past_due_days: Optional[StrictInt] = Field(default=None, alias="pastDueDays")
    __properties: ClassVar[List[str]] = ["availableDisbursementAmount", "delinquencyPausePeriods", "delinquentAmount", "delinquentDate", "delinquentDays", "delinquentFee", "delinquentInterest", "delinquentPenalty", "delinquentPrincipal", "installmentLevelDelinquency", "lastPaymentAmount", "lastPaymentDate", "lastRepaymentAmount", "lastRepaymentDate", "nextPaymentDueDate", "pastDueDays"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoansLoanIdDelinquencySummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in delinquency_pause_periods (list)
        _items = []
        if self.delinquency_pause_periods:
            for _item_delinquency_pause_periods in self.delinquency_pause_periods:
                if _item_delinquency_pause_periods:
                    _items.append(_item_delinquency_pause_periods.to_dict())
            _dict['delinquencyPausePeriods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in installment_level_delinquency (list)
        _items = []
        if self.installment_level_delinquency:
            for _item_installment_level_delinquency in self.installment_level_delinquency:
                if _item_installment_level_delinquency:
                    _items.append(_item_installment_level_delinquency.to_dict())
            _dict['installmentLevelDelinquency'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoansLoanIdDelinquencySummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableDisbursementAmount": obj.get("availableDisbursementAmount"),
            "delinquencyPausePeriods": [GetLoansLoanIdDelinquencyPausePeriod.from_dict(_item) for _item in obj["delinquencyPausePeriods"]] if obj.get("delinquencyPausePeriods") is not None else None,
            "delinquentAmount": obj.get("delinquentAmount"),
            "delinquentDate": obj.get("delinquentDate"),
            "delinquentDays": obj.get("delinquentDays"),
            "delinquentFee": obj.get("delinquentFee"),
            "delinquentInterest": obj.get("delinquentInterest"),
            "delinquentPenalty": obj.get("delinquentPenalty"),
            "delinquentPrincipal": obj.get("delinquentPrincipal"),
            "installmentLevelDelinquency": [GetLoansLoanIdLoanInstallmentLevelDelinquency.from_dict(_item) for _item in obj["installmentLevelDelinquency"]] if obj.get("installmentLevelDelinquency") is not None else None,
            "lastPaymentAmount": obj.get("lastPaymentAmount"),
            "lastPaymentDate": obj.get("lastPaymentDate"),
            "lastRepaymentAmount": obj.get("lastRepaymentAmount"),
            "lastRepaymentDate": obj.get("lastRepaymentDate"),
            "nextPaymentDueDate": obj.get("nextPaymentDueDate"),
            "pastDueDays": obj.get("pastDueDays")
        })
        return _obj


