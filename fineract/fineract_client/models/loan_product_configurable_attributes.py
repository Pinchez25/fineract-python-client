# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LoanProductConfigurableAttributes(BaseModel):
    """
    LoanProductConfigurableAttributes
    """ # noqa: E501
    amortization_boolean: Optional[StrictBool] = Field(default=None, alias="amortizationBoolean")
    amortization_type: Optional[StrictBool] = Field(default=None, alias="amortizationType")
    arrears_tolerance_boolean: Optional[StrictBool] = Field(default=None, alias="arrearsToleranceBoolean")
    grace_on_arrears_ageing: Optional[StrictBool] = Field(default=None, alias="graceOnArrearsAgeing")
    grace_on_arrears_aging_boolean: Optional[StrictBool] = Field(default=None, alias="graceOnArrearsAgingBoolean")
    grace_on_principal_and_interest_payment: Optional[StrictBool] = Field(default=None, alias="graceOnPrincipalAndInterestPayment")
    grace_on_principal_and_interest_payment_boolean: Optional[StrictBool] = Field(default=None, alias="graceOnPrincipalAndInterestPaymentBoolean")
    id: Optional[StrictInt] = None
    in_arrears_tolerance: Optional[StrictBool] = Field(default=None, alias="inArrearsTolerance")
    interest_calc_period_boolean: Optional[StrictBool] = Field(default=None, alias="interestCalcPeriodBoolean")
    interest_calculation_period_type: Optional[StrictBool] = Field(default=None, alias="interestCalculationPeriodType")
    interest_method_boolean: Optional[StrictBool] = Field(default=None, alias="interestMethodBoolean")
    interest_type: Optional[StrictBool] = Field(default=None, alias="interestType")
    loan_product: Optional[LoanProduct] = Field(default=None, alias="loanProduct")
    new: Optional[StrictBool] = None
    repayment_every: Optional[StrictBool] = Field(default=None, alias="repaymentEvery")
    repayment_every_boolean: Optional[StrictBool] = Field(default=None, alias="repaymentEveryBoolean")
    transaction_processing_strategy_boolean: Optional[StrictBool] = Field(default=None, alias="transactionProcessingStrategyBoolean")
    transaction_processing_strategy_code: Optional[StrictBool] = Field(default=None, alias="transactionProcessingStrategyCode")
    __properties: ClassVar[List[str]] = ["amortizationBoolean", "amortizationType", "arrearsToleranceBoolean", "graceOnArrearsAgeing", "graceOnArrearsAgingBoolean", "graceOnPrincipalAndInterestPayment", "graceOnPrincipalAndInterestPaymentBoolean", "id", "inArrearsTolerance", "interestCalcPeriodBoolean", "interestCalculationPeriodType", "interestMethodBoolean", "interestType", "loanProduct", "new", "repaymentEvery", "repaymentEveryBoolean", "transactionProcessingStrategyBoolean", "transactionProcessingStrategyCode"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoanProductConfigurableAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of loan_product
        if self.loan_product:
            _dict['loanProduct'] = self.loan_product.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoanProductConfigurableAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amortizationBoolean": obj.get("amortizationBoolean"),
            "amortizationType": obj.get("amortizationType"),
            "arrearsToleranceBoolean": obj.get("arrearsToleranceBoolean"),
            "graceOnArrearsAgeing": obj.get("graceOnArrearsAgeing"),
            "graceOnArrearsAgingBoolean": obj.get("graceOnArrearsAgingBoolean"),
            "graceOnPrincipalAndInterestPayment": obj.get("graceOnPrincipalAndInterestPayment"),
            "graceOnPrincipalAndInterestPaymentBoolean": obj.get("graceOnPrincipalAndInterestPaymentBoolean"),
            "id": obj.get("id"),
            "inArrearsTolerance": obj.get("inArrearsTolerance"),
            "interestCalcPeriodBoolean": obj.get("interestCalcPeriodBoolean"),
            "interestCalculationPeriodType": obj.get("interestCalculationPeriodType"),
            "interestMethodBoolean": obj.get("interestMethodBoolean"),
            "interestType": obj.get("interestType"),
            "loanProduct": LoanProduct.from_dict(obj["loanProduct"]) if obj.get("loanProduct") is not None else None,
            "new": obj.get("new"),
            "repaymentEvery": obj.get("repaymentEvery"),
            "repaymentEveryBoolean": obj.get("repaymentEveryBoolean"),
            "transactionProcessingStrategyBoolean": obj.get("transactionProcessingStrategyBoolean"),
            "transactionProcessingStrategyCode": obj.get("transactionProcessingStrategyCode")
        })
        return _obj

from fineract_client.models.loan_product import LoanProduct
# TODO: Rewrite to not use raise_errors
LoanProductConfigurableAttributes.model_rebuild(raise_errors=False)

