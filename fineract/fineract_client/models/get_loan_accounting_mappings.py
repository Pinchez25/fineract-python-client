# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_gl_account_mapping import GetGlAccountMapping
from typing import Optional, Set
from typing_extensions import Self

class GetLoanAccountingMappings(BaseModel):
    """
    GetLoanAccountingMappings
    """ # noqa: E501
    charge_off_expense_account: Optional[GetGlAccountMapping] = Field(default=None, alias="chargeOffExpenseAccount")
    charge_off_fraud_expense_account: Optional[GetGlAccountMapping] = Field(default=None, alias="chargeOffFraudExpenseAccount")
    fund_source_account: Optional[GetGlAccountMapping] = Field(default=None, alias="fundSourceAccount")
    goodwill_credit_account: Optional[GetGlAccountMapping] = Field(default=None, alias="goodwillCreditAccount")
    income_from_charge_off_fees_account: Optional[GetGlAccountMapping] = Field(default=None, alias="incomeFromChargeOffFeesAccount")
    income_from_charge_off_interest_account: Optional[GetGlAccountMapping] = Field(default=None, alias="incomeFromChargeOffInterestAccount")
    income_from_charge_off_penalty_account: Optional[GetGlAccountMapping] = Field(default=None, alias="incomeFromChargeOffPenaltyAccount")
    income_from_fee_account: Optional[GetGlAccountMapping] = Field(default=None, alias="incomeFromFeeAccount")
    income_from_goodwill_credit_fees_account: Optional[GetGlAccountMapping] = Field(default=None, alias="incomeFromGoodwillCreditFeesAccount")
    income_from_goodwill_credit_interest_account: Optional[GetGlAccountMapping] = Field(default=None, alias="incomeFromGoodwillCreditInterestAccount")
    income_from_goodwill_credit_penalty_account: Optional[GetGlAccountMapping] = Field(default=None, alias="incomeFromGoodwillCreditPenaltyAccount")
    income_from_penalty_account: Optional[GetGlAccountMapping] = Field(default=None, alias="incomeFromPenaltyAccount")
    income_from_recovery_account: Optional[GetGlAccountMapping] = Field(default=None, alias="incomeFromRecoveryAccount")
    interest_on_loan_account: Optional[GetGlAccountMapping] = Field(default=None, alias="interestOnLoanAccount")
    loan_portfolio_account: Optional[GetGlAccountMapping] = Field(default=None, alias="loanPortfolioAccount")
    overpayment_liability_account: Optional[GetGlAccountMapping] = Field(default=None, alias="overpaymentLiabilityAccount")
    receivable_fee_account: Optional[GetGlAccountMapping] = Field(default=None, alias="receivableFeeAccount")
    receivable_interest_account: Optional[GetGlAccountMapping] = Field(default=None, alias="receivableInterestAccount")
    receivable_penalty_account: Optional[GetGlAccountMapping] = Field(default=None, alias="receivablePenaltyAccount")
    transfers_in_suspense_account: Optional[GetGlAccountMapping] = Field(default=None, alias="transfersInSuspenseAccount")
    write_off_account: Optional[GetGlAccountMapping] = Field(default=None, alias="writeOffAccount")
    __properties: ClassVar[List[str]] = ["chargeOffExpenseAccount", "chargeOffFraudExpenseAccount", "fundSourceAccount", "goodwillCreditAccount", "incomeFromChargeOffFeesAccount", "incomeFromChargeOffInterestAccount", "incomeFromChargeOffPenaltyAccount", "incomeFromFeeAccount", "incomeFromGoodwillCreditFeesAccount", "incomeFromGoodwillCreditInterestAccount", "incomeFromGoodwillCreditPenaltyAccount", "incomeFromPenaltyAccount", "incomeFromRecoveryAccount", "interestOnLoanAccount", "loanPortfolioAccount", "overpaymentLiabilityAccount", "receivableFeeAccount", "receivableInterestAccount", "receivablePenaltyAccount", "transfersInSuspenseAccount", "writeOffAccount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoanAccountingMappings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of charge_off_expense_account
        if self.charge_off_expense_account:
            _dict['chargeOffExpenseAccount'] = self.charge_off_expense_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_off_fraud_expense_account
        if self.charge_off_fraud_expense_account:
            _dict['chargeOffFraudExpenseAccount'] = self.charge_off_fraud_expense_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fund_source_account
        if self.fund_source_account:
            _dict['fundSourceAccount'] = self.fund_source_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of goodwill_credit_account
        if self.goodwill_credit_account:
            _dict['goodwillCreditAccount'] = self.goodwill_credit_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_charge_off_fees_account
        if self.income_from_charge_off_fees_account:
            _dict['incomeFromChargeOffFeesAccount'] = self.income_from_charge_off_fees_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_charge_off_interest_account
        if self.income_from_charge_off_interest_account:
            _dict['incomeFromChargeOffInterestAccount'] = self.income_from_charge_off_interest_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_charge_off_penalty_account
        if self.income_from_charge_off_penalty_account:
            _dict['incomeFromChargeOffPenaltyAccount'] = self.income_from_charge_off_penalty_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_fee_account
        if self.income_from_fee_account:
            _dict['incomeFromFeeAccount'] = self.income_from_fee_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_goodwill_credit_fees_account
        if self.income_from_goodwill_credit_fees_account:
            _dict['incomeFromGoodwillCreditFeesAccount'] = self.income_from_goodwill_credit_fees_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_goodwill_credit_interest_account
        if self.income_from_goodwill_credit_interest_account:
            _dict['incomeFromGoodwillCreditInterestAccount'] = self.income_from_goodwill_credit_interest_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_goodwill_credit_penalty_account
        if self.income_from_goodwill_credit_penalty_account:
            _dict['incomeFromGoodwillCreditPenaltyAccount'] = self.income_from_goodwill_credit_penalty_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_penalty_account
        if self.income_from_penalty_account:
            _dict['incomeFromPenaltyAccount'] = self.income_from_penalty_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_recovery_account
        if self.income_from_recovery_account:
            _dict['incomeFromRecoveryAccount'] = self.income_from_recovery_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_on_loan_account
        if self.interest_on_loan_account:
            _dict['interestOnLoanAccount'] = self.interest_on_loan_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan_portfolio_account
        if self.loan_portfolio_account:
            _dict['loanPortfolioAccount'] = self.loan_portfolio_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of overpayment_liability_account
        if self.overpayment_liability_account:
            _dict['overpaymentLiabilityAccount'] = self.overpayment_liability_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receivable_fee_account
        if self.receivable_fee_account:
            _dict['receivableFeeAccount'] = self.receivable_fee_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receivable_interest_account
        if self.receivable_interest_account:
            _dict['receivableInterestAccount'] = self.receivable_interest_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receivable_penalty_account
        if self.receivable_penalty_account:
            _dict['receivablePenaltyAccount'] = self.receivable_penalty_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfers_in_suspense_account
        if self.transfers_in_suspense_account:
            _dict['transfersInSuspenseAccount'] = self.transfers_in_suspense_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of write_off_account
        if self.write_off_account:
            _dict['writeOffAccount'] = self.write_off_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoanAccountingMappings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chargeOffExpenseAccount": GetGlAccountMapping.from_dict(obj["chargeOffExpenseAccount"]) if obj.get("chargeOffExpenseAccount") is not None else None,
            "chargeOffFraudExpenseAccount": GetGlAccountMapping.from_dict(obj["chargeOffFraudExpenseAccount"]) if obj.get("chargeOffFraudExpenseAccount") is not None else None,
            "fundSourceAccount": GetGlAccountMapping.from_dict(obj["fundSourceAccount"]) if obj.get("fundSourceAccount") is not None else None,
            "goodwillCreditAccount": GetGlAccountMapping.from_dict(obj["goodwillCreditAccount"]) if obj.get("goodwillCreditAccount") is not None else None,
            "incomeFromChargeOffFeesAccount": GetGlAccountMapping.from_dict(obj["incomeFromChargeOffFeesAccount"]) if obj.get("incomeFromChargeOffFeesAccount") is not None else None,
            "incomeFromChargeOffInterestAccount": GetGlAccountMapping.from_dict(obj["incomeFromChargeOffInterestAccount"]) if obj.get("incomeFromChargeOffInterestAccount") is not None else None,
            "incomeFromChargeOffPenaltyAccount": GetGlAccountMapping.from_dict(obj["incomeFromChargeOffPenaltyAccount"]) if obj.get("incomeFromChargeOffPenaltyAccount") is not None else None,
            "incomeFromFeeAccount": GetGlAccountMapping.from_dict(obj["incomeFromFeeAccount"]) if obj.get("incomeFromFeeAccount") is not None else None,
            "incomeFromGoodwillCreditFeesAccount": GetGlAccountMapping.from_dict(obj["incomeFromGoodwillCreditFeesAccount"]) if obj.get("incomeFromGoodwillCreditFeesAccount") is not None else None,
            "incomeFromGoodwillCreditInterestAccount": GetGlAccountMapping.from_dict(obj["incomeFromGoodwillCreditInterestAccount"]) if obj.get("incomeFromGoodwillCreditInterestAccount") is not None else None,
            "incomeFromGoodwillCreditPenaltyAccount": GetGlAccountMapping.from_dict(obj["incomeFromGoodwillCreditPenaltyAccount"]) if obj.get("incomeFromGoodwillCreditPenaltyAccount") is not None else None,
            "incomeFromPenaltyAccount": GetGlAccountMapping.from_dict(obj["incomeFromPenaltyAccount"]) if obj.get("incomeFromPenaltyAccount") is not None else None,
            "incomeFromRecoveryAccount": GetGlAccountMapping.from_dict(obj["incomeFromRecoveryAccount"]) if obj.get("incomeFromRecoveryAccount") is not None else None,
            "interestOnLoanAccount": GetGlAccountMapping.from_dict(obj["interestOnLoanAccount"]) if obj.get("interestOnLoanAccount") is not None else None,
            "loanPortfolioAccount": GetGlAccountMapping.from_dict(obj["loanPortfolioAccount"]) if obj.get("loanPortfolioAccount") is not None else None,
            "overpaymentLiabilityAccount": GetGlAccountMapping.from_dict(obj["overpaymentLiabilityAccount"]) if obj.get("overpaymentLiabilityAccount") is not None else None,
            "receivableFeeAccount": GetGlAccountMapping.from_dict(obj["receivableFeeAccount"]) if obj.get("receivableFeeAccount") is not None else None,
            "receivableInterestAccount": GetGlAccountMapping.from_dict(obj["receivableInterestAccount"]) if obj.get("receivableInterestAccount") is not None else None,
            "receivablePenaltyAccount": GetGlAccountMapping.from_dict(obj["receivablePenaltyAccount"]) if obj.get("receivablePenaltyAccount") is not None else None,
            "transfersInSuspenseAccount": GetGlAccountMapping.from_dict(obj["transfersInSuspenseAccount"]) if obj.get("transfersInSuspenseAccount") is not None else None,
            "writeOffAccount": GetGlAccountMapping.from_dict(obj["writeOffAccount"]) if obj.get("writeOffAccount") is not None else None
        })
        return _obj


