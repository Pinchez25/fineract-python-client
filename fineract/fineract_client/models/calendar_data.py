# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.enum_option_data import EnumOptionData
from fineract_client.models.local_time import LocalTime
from typing import Optional, Set
from typing_extensions import Self

class CalendarData(BaseModel):
    """
    CalendarData
    """ # noqa: E501
    calendar_instance_id: Optional[StrictInt] = Field(default=None, alias="calendarInstanceId")
    calendar_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="calendarTypeOptions")
    center_id: Optional[StrictStr] = Field(default=None, alias="centerId")
    created_by_user_id: Optional[StrictInt] = Field(default=None, alias="createdByUserId")
    created_by_username: Optional[StrictStr] = Field(default=None, alias="createdByUsername")
    created_date: Optional[datetime] = Field(default=None, alias="createdDate")
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    description: Optional[StrictStr] = None
    duration: Optional[StrictInt] = None
    end_date: Optional[date] = Field(default=None, alias="endDate")
    entity_id: Optional[StrictInt] = Field(default=None, alias="entityId")
    entity_type: Optional[EnumOptionData] = Field(default=None, alias="entityType")
    entity_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="entityTypeOptions")
    first_reminder: Optional[StrictInt] = Field(default=None, alias="firstReminder")
    frequency: Optional[EnumOptionData] = None
    frequency_nth_day_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="frequencyNthDayTypeOptions")
    frequency_options: Optional[List[EnumOptionData]] = Field(default=None, alias="frequencyOptions")
    human_readable: Optional[StrictStr] = Field(default=None, alias="humanReadable")
    id: Optional[StrictInt] = None
    interval: Optional[StrictInt] = None
    last_updated_by_user_id: Optional[StrictInt] = Field(default=None, alias="lastUpdatedByUserId")
    last_updated_by_username: Optional[StrictStr] = Field(default=None, alias="lastUpdatedByUsername")
    last_updated_date: Optional[datetime] = Field(default=None, alias="lastUpdatedDate")
    locale: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    meeting_time: Optional[LocalTime] = Field(default=None, alias="meetingTime")
    next_ten_recurring_dates: Optional[List[date]] = Field(default=None, alias="nextTenRecurringDates")
    recent_eligible_meeting_date: Optional[date] = Field(default=None, alias="recentEligibleMeetingDate")
    recurrence: Optional[StrictStr] = None
    recurring_dates: Optional[List[date]] = Field(default=None, alias="recurringDates")
    remind_by: Optional[EnumOptionData] = Field(default=None, alias="remindBy")
    remind_by_options: Optional[List[EnumOptionData]] = Field(default=None, alias="remindByOptions")
    repeating: Optional[StrictBool] = None
    repeats_on_day: Optional[EnumOptionData] = Field(default=None, alias="repeatsOnDay")
    repeats_on_day_of_month: Optional[StrictInt] = Field(default=None, alias="repeatsOnDayOfMonth")
    repeats_on_day_options: Optional[List[EnumOptionData]] = Field(default=None, alias="repeatsOnDayOptions")
    repeats_on_nth_day_of_month: Optional[EnumOptionData] = Field(default=None, alias="repeatsOnNthDayOfMonth")
    row_index: Optional[StrictInt] = Field(default=None, alias="rowIndex")
    second_reminder: Optional[StrictInt] = Field(default=None, alias="secondReminder")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    title: Optional[StrictStr] = None
    type: Optional[EnumOptionData] = None
    type_id: Optional[StrictStr] = Field(default=None, alias="typeId")
    __properties: ClassVar[List[str]] = ["calendarInstanceId", "calendarTypeOptions", "centerId", "createdByUserId", "createdByUsername", "createdDate", "dateFormat", "description", "duration", "endDate", "entityId", "entityType", "entityTypeOptions", "firstReminder", "frequency", "frequencyNthDayTypeOptions", "frequencyOptions", "humanReadable", "id", "interval", "lastUpdatedByUserId", "lastUpdatedByUsername", "lastUpdatedDate", "locale", "location", "meetingTime", "nextTenRecurringDates", "recentEligibleMeetingDate", "recurrence", "recurringDates", "remindBy", "remindByOptions", "repeating", "repeatsOnDay", "repeatsOnDayOfMonth", "repeatsOnDayOptions", "repeatsOnNthDayOfMonth", "rowIndex", "secondReminder", "startDate", "title", "type", "typeId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalendarData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in calendar_type_options (list)
        _items = []
        if self.calendar_type_options:
            for _item in self.calendar_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['calendarTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of entity_type
        if self.entity_type:
            _dict['entityType'] = self.entity_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in entity_type_options (list)
        _items = []
        if self.entity_type_options:
            for _item in self.entity_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['entityTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of frequency
        if self.frequency:
            _dict['frequency'] = self.frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in frequency_nth_day_type_options (list)
        _items = []
        if self.frequency_nth_day_type_options:
            for _item in self.frequency_nth_day_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['frequencyNthDayTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in frequency_options (list)
        _items = []
        if self.frequency_options:
            for _item in self.frequency_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['frequencyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of meeting_time
        if self.meeting_time:
            _dict['meetingTime'] = self.meeting_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remind_by
        if self.remind_by:
            _dict['remindBy'] = self.remind_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in remind_by_options (list)
        _items = []
        if self.remind_by_options:
            for _item in self.remind_by_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['remindByOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of repeats_on_day
        if self.repeats_on_day:
            _dict['repeatsOnDay'] = self.repeats_on_day.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in repeats_on_day_options (list)
        _items = []
        if self.repeats_on_day_options:
            for _item in self.repeats_on_day_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['repeatsOnDayOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of repeats_on_nth_day_of_month
        if self.repeats_on_nth_day_of_month:
            _dict['repeatsOnNthDayOfMonth'] = self.repeats_on_nth_day_of_month.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalendarData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calendarInstanceId": obj.get("calendarInstanceId"),
            "calendarTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["calendarTypeOptions"]] if obj.get("calendarTypeOptions") is not None else None,
            "centerId": obj.get("centerId"),
            "createdByUserId": obj.get("createdByUserId"),
            "createdByUsername": obj.get("createdByUsername"),
            "createdDate": obj.get("createdDate"),
            "dateFormat": obj.get("dateFormat"),
            "description": obj.get("description"),
            "duration": obj.get("duration"),
            "endDate": obj.get("endDate"),
            "entityId": obj.get("entityId"),
            "entityType": EnumOptionData.from_dict(obj["entityType"]) if obj.get("entityType") is not None else None,
            "entityTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["entityTypeOptions"]] if obj.get("entityTypeOptions") is not None else None,
            "firstReminder": obj.get("firstReminder"),
            "frequency": EnumOptionData.from_dict(obj["frequency"]) if obj.get("frequency") is not None else None,
            "frequencyNthDayTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["frequencyNthDayTypeOptions"]] if obj.get("frequencyNthDayTypeOptions") is not None else None,
            "frequencyOptions": [EnumOptionData.from_dict(_item) for _item in obj["frequencyOptions"]] if obj.get("frequencyOptions") is not None else None,
            "humanReadable": obj.get("humanReadable"),
            "id": obj.get("id"),
            "interval": obj.get("interval"),
            "lastUpdatedByUserId": obj.get("lastUpdatedByUserId"),
            "lastUpdatedByUsername": obj.get("lastUpdatedByUsername"),
            "lastUpdatedDate": obj.get("lastUpdatedDate"),
            "locale": obj.get("locale"),
            "location": obj.get("location"),
            "meetingTime": LocalTime.from_dict(obj["meetingTime"]) if obj.get("meetingTime") is not None else None,
            "nextTenRecurringDates": obj.get("nextTenRecurringDates"),
            "recentEligibleMeetingDate": obj.get("recentEligibleMeetingDate"),
            "recurrence": obj.get("recurrence"),
            "recurringDates": obj.get("recurringDates"),
            "remindBy": EnumOptionData.from_dict(obj["remindBy"]) if obj.get("remindBy") is not None else None,
            "remindByOptions": [EnumOptionData.from_dict(_item) for _item in obj["remindByOptions"]] if obj.get("remindByOptions") is not None else None,
            "repeating": obj.get("repeating"),
            "repeatsOnDay": EnumOptionData.from_dict(obj["repeatsOnDay"]) if obj.get("repeatsOnDay") is not None else None,
            "repeatsOnDayOfMonth": obj.get("repeatsOnDayOfMonth"),
            "repeatsOnDayOptions": [EnumOptionData.from_dict(_item) for _item in obj["repeatsOnDayOptions"]] if obj.get("repeatsOnDayOptions") is not None else None,
            "repeatsOnNthDayOfMonth": EnumOptionData.from_dict(obj["repeatsOnNthDayOfMonth"]) if obj.get("repeatsOnNthDayOfMonth") is not None else None,
            "rowIndex": obj.get("rowIndex"),
            "secondReminder": obj.get("secondReminder"),
            "startDate": obj.get("startDate"),
            "title": obj.get("title"),
            "type": EnumOptionData.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "typeId": obj.get("typeId")
        })
        return _obj


