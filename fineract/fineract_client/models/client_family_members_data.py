# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.code_value_data import CodeValueData
from typing import Optional, Set
from typing_extensions import Self

class ClientFamilyMembersData(BaseModel):
    """
    ClientFamilyMembersData
    """ # noqa: E501
    age: Optional[StrictInt] = None
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    date_of_birth: Optional[date] = Field(default=None, alias="dateOfBirth")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    gender: Optional[StrictStr] = None
    gender_id: Optional[StrictInt] = Field(default=None, alias="genderId")
    gender_id_options: Optional[List[CodeValueData]] = Field(default=None, alias="genderIdOptions")
    id: Optional[StrictInt] = None
    is_dependent: Optional[StrictBool] = Field(default=None, alias="isDependent")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    marital_status: Optional[StrictStr] = Field(default=None, alias="maritalStatus")
    marital_status_id: Optional[StrictInt] = Field(default=None, alias="maritalStatusId")
    marital_status_id_options: Optional[List[CodeValueData]] = Field(default=None, alias="maritalStatusIdOptions")
    middle_name: Optional[StrictStr] = Field(default=None, alias="middleName")
    mobile_number: Optional[StrictStr] = Field(default=None, alias="mobileNumber")
    profession: Optional[StrictStr] = None
    profession_id: Optional[StrictInt] = Field(default=None, alias="professionId")
    profession_id_options: Optional[List[CodeValueData]] = Field(default=None, alias="professionIdOptions")
    qualification: Optional[StrictStr] = None
    relationship: Optional[StrictStr] = None
    relationship_id: Optional[StrictInt] = Field(default=None, alias="relationshipId")
    relationship_id_options: Optional[List[CodeValueData]] = Field(default=None, alias="relationshipIdOptions")
    __properties: ClassVar[List[str]] = ["age", "clientId", "dateOfBirth", "firstName", "gender", "genderId", "genderIdOptions", "id", "isDependent", "lastName", "maritalStatus", "maritalStatusId", "maritalStatusIdOptions", "middleName", "mobileNumber", "profession", "professionId", "professionIdOptions", "qualification", "relationship", "relationshipId", "relationshipIdOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientFamilyMembersData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in gender_id_options (list)
        _items = []
        if self.gender_id_options:
            for _item_gender_id_options in self.gender_id_options:
                if _item_gender_id_options:
                    _items.append(_item_gender_id_options.to_dict())
            _dict['genderIdOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in marital_status_id_options (list)
        _items = []
        if self.marital_status_id_options:
            for _item_marital_status_id_options in self.marital_status_id_options:
                if _item_marital_status_id_options:
                    _items.append(_item_marital_status_id_options.to_dict())
            _dict['maritalStatusIdOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in profession_id_options (list)
        _items = []
        if self.profession_id_options:
            for _item_profession_id_options in self.profession_id_options:
                if _item_profession_id_options:
                    _items.append(_item_profession_id_options.to_dict())
            _dict['professionIdOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relationship_id_options (list)
        _items = []
        if self.relationship_id_options:
            for _item_relationship_id_options in self.relationship_id_options:
                if _item_relationship_id_options:
                    _items.append(_item_relationship_id_options.to_dict())
            _dict['relationshipIdOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientFamilyMembersData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "age": obj.get("age"),
            "clientId": obj.get("clientId"),
            "dateOfBirth": obj.get("dateOfBirth"),
            "firstName": obj.get("firstName"),
            "gender": obj.get("gender"),
            "genderId": obj.get("genderId"),
            "genderIdOptions": [CodeValueData.from_dict(_item) for _item in obj["genderIdOptions"]] if obj.get("genderIdOptions") is not None else None,
            "id": obj.get("id"),
            "isDependent": obj.get("isDependent"),
            "lastName": obj.get("lastName"),
            "maritalStatus": obj.get("maritalStatus"),
            "maritalStatusId": obj.get("maritalStatusId"),
            "maritalStatusIdOptions": [CodeValueData.from_dict(_item) for _item in obj["maritalStatusIdOptions"]] if obj.get("maritalStatusIdOptions") is not None else None,
            "middleName": obj.get("middleName"),
            "mobileNumber": obj.get("mobileNumber"),
            "profession": obj.get("profession"),
            "professionId": obj.get("professionId"),
            "professionIdOptions": [CodeValueData.from_dict(_item) for _item in obj["professionIdOptions"]] if obj.get("professionIdOptions") is not None else None,
            "qualification": obj.get("qualification"),
            "relationship": obj.get("relationship"),
            "relationshipId": obj.get("relationshipId"),
            "relationshipIdOptions": [CodeValueData.from_dict(_item) for _item in obj["relationshipIdOptions"]] if obj.get("relationshipIdOptions") is not None else None
        })
        return _obj


