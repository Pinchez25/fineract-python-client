# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_loan_reschedule_request_status import GetLoanRescheduleRequestStatus
from fineract_client.models.loan_term_variations_data import LoanTermVariationsData
from fineract_client.models.reschedule_reasons_code_value import RescheduleReasonsCodeValue
from fineract_client.models.reschedule_reasons_timeline import RescheduleReasonsTimeline
from typing import Optional, Set
from typing_extensions import Self

class GetLoanRescheduleRequestResponse(BaseModel):
    """
    GetLoanRescheduleRequestResponse
    """ # noqa: E501
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    client_name: Optional[StrictStr] = Field(default=None, alias="clientName")
    id: Optional[StrictInt] = None
    loan_account_number: Optional[StrictStr] = Field(default=None, alias="loanAccountNumber")
    loan_id: Optional[StrictInt] = Field(default=None, alias="loanId")
    loan_term_variations_data: Optional[List[LoanTermVariationsData]] = Field(default=None, alias="loanTermVariationsData")
    recalculate_interest: Optional[StrictBool] = Field(default=None, alias="recalculateInterest")
    reschedule_from_date: Optional[date] = Field(default=None, alias="rescheduleFromDate")
    reschedule_from_installment: Optional[StrictInt] = Field(default=None, alias="rescheduleFromInstallment")
    reschedule_reason_code_value: Optional[RescheduleReasonsCodeValue] = Field(default=None, alias="rescheduleReasonCodeValue")
    reschedule_reason_comment: Optional[StrictStr] = Field(default=None, alias="rescheduleReasonComment")
    status_enum: Optional[GetLoanRescheduleRequestStatus] = Field(default=None, alias="statusEnum")
    timeline: Optional[RescheduleReasonsTimeline] = None
    __properties: ClassVar[List[str]] = ["clientId", "clientName", "id", "loanAccountNumber", "loanId", "loanTermVariationsData", "recalculateInterest", "rescheduleFromDate", "rescheduleFromInstallment", "rescheduleReasonCodeValue", "rescheduleReasonComment", "statusEnum", "timeline"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoanRescheduleRequestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in loan_term_variations_data (list)
        _items = []
        if self.loan_term_variations_data:
            for _item_loan_term_variations_data in self.loan_term_variations_data:
                if _item_loan_term_variations_data:
                    _items.append(_item_loan_term_variations_data.to_dict())
            _dict['loanTermVariationsData'] = _items
        # override the default output from pydantic by calling `to_dict()` of reschedule_reason_code_value
        if self.reschedule_reason_code_value:
            _dict['rescheduleReasonCodeValue'] = self.reschedule_reason_code_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status_enum
        if self.status_enum:
            _dict['statusEnum'] = self.status_enum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeline
        if self.timeline:
            _dict['timeline'] = self.timeline.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoanRescheduleRequestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "clientName": obj.get("clientName"),
            "id": obj.get("id"),
            "loanAccountNumber": obj.get("loanAccountNumber"),
            "loanId": obj.get("loanId"),
            "loanTermVariationsData": [LoanTermVariationsData.from_dict(_item) for _item in obj["loanTermVariationsData"]] if obj.get("loanTermVariationsData") is not None else None,
            "recalculateInterest": obj.get("recalculateInterest"),
            "rescheduleFromDate": obj.get("rescheduleFromDate"),
            "rescheduleFromInstallment": obj.get("rescheduleFromInstallment"),
            "rescheduleReasonCodeValue": RescheduleReasonsCodeValue.from_dict(obj["rescheduleReasonCodeValue"]) if obj.get("rescheduleReasonCodeValue") is not None else None,
            "rescheduleReasonComment": obj.get("rescheduleReasonComment"),
            "statusEnum": GetLoanRescheduleRequestStatus.from_dict(obj["statusEnum"]) if obj.get("statusEnum") is not None else None,
            "timeline": RescheduleReasonsTimeline.from_dict(obj["timeline"]) if obj.get("timeline") is not None else None
        })
        return _obj


