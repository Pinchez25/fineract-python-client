# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_loan_products_interest_recalculation_compounding_frequency_type import GetLoanProductsInterestRecalculationCompoundingFrequencyType
from fineract_client.models.get_loan_products_interest_recalculation_compounding_type import GetLoanProductsInterestRecalculationCompoundingType
from fineract_client.models.get_loan_products_pre_closure_interest_calculation_strategy import GetLoanProductsPreClosureInterestCalculationStrategy
from fineract_client.models.get_loan_products_reschedule_strategy_type import GetLoanProductsRescheduleStrategyType
from typing import Optional, Set
from typing_extensions import Self

class GetLoanProductsInterestRecalculationData(BaseModel):
    """
    GetLoanProductsInterestRecalculationData
    """ # noqa: E501
    allow_compounding_on_eod: Optional[StrictBool] = Field(default=None, alias="allowCompoundingOnEod")
    id: Optional[StrictInt] = None
    interest_recalculation_compounding_frequency_type: Optional[GetLoanProductsInterestRecalculationCompoundingFrequencyType] = Field(default=None, alias="interestRecalculationCompoundingFrequencyType")
    interest_recalculation_compounding_type: Optional[GetLoanProductsInterestRecalculationCompoundingType] = Field(default=None, alias="interestRecalculationCompoundingType")
    is_arrears_based_on_original_schedule: Optional[StrictBool] = Field(default=None, alias="isArrearsBasedOnOriginalSchedule")
    is_compounding_to_be_posted_as_transaction: Optional[StrictBool] = Field(default=None, alias="isCompoundingToBePostedAsTransaction")
    pre_closure_interest_calculation_strategy: Optional[GetLoanProductsPreClosureInterestCalculationStrategy] = Field(default=None, alias="preClosureInterestCalculationStrategy")
    product_id: Optional[StrictInt] = Field(default=None, alias="productId")
    recalculation_compounding_frequency_interval: Optional[StrictInt] = Field(default=None, alias="recalculationCompoundingFrequencyInterval")
    recalculation_compounding_frequency_on_day_type: Optional[StrictInt] = Field(default=None, alias="recalculationCompoundingFrequencyOnDayType")
    recalculation_rest_frequency_interval: Optional[StrictInt] = Field(default=None, alias="recalculationRestFrequencyInterval")
    recalculation_rest_frequency_type: Optional[GetLoanProductsInterestRecalculationCompoundingFrequencyType] = Field(default=None, alias="recalculationRestFrequencyType")
    reschedule_strategy_type: Optional[GetLoanProductsRescheduleStrategyType] = Field(default=None, alias="rescheduleStrategyType")
    __properties: ClassVar[List[str]] = ["allowCompoundingOnEod", "id", "interestRecalculationCompoundingFrequencyType", "interestRecalculationCompoundingType", "isArrearsBasedOnOriginalSchedule", "isCompoundingToBePostedAsTransaction", "preClosureInterestCalculationStrategy", "productId", "recalculationCompoundingFrequencyInterval", "recalculationCompoundingFrequencyOnDayType", "recalculationRestFrequencyInterval", "recalculationRestFrequencyType", "rescheduleStrategyType"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoanProductsInterestRecalculationData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of interest_recalculation_compounding_frequency_type
        if self.interest_recalculation_compounding_frequency_type:
            _dict['interestRecalculationCompoundingFrequencyType'] = self.interest_recalculation_compounding_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_recalculation_compounding_type
        if self.interest_recalculation_compounding_type:
            _dict['interestRecalculationCompoundingType'] = self.interest_recalculation_compounding_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_closure_interest_calculation_strategy
        if self.pre_closure_interest_calculation_strategy:
            _dict['preClosureInterestCalculationStrategy'] = self.pre_closure_interest_calculation_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recalculation_rest_frequency_type
        if self.recalculation_rest_frequency_type:
            _dict['recalculationRestFrequencyType'] = self.recalculation_rest_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reschedule_strategy_type
        if self.reschedule_strategy_type:
            _dict['rescheduleStrategyType'] = self.reschedule_strategy_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoanProductsInterestRecalculationData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowCompoundingOnEod": obj.get("allowCompoundingOnEod"),
            "id": obj.get("id"),
            "interestRecalculationCompoundingFrequencyType": GetLoanProductsInterestRecalculationCompoundingFrequencyType.from_dict(obj["interestRecalculationCompoundingFrequencyType"]) if obj.get("interestRecalculationCompoundingFrequencyType") is not None else None,
            "interestRecalculationCompoundingType": GetLoanProductsInterestRecalculationCompoundingType.from_dict(obj["interestRecalculationCompoundingType"]) if obj.get("interestRecalculationCompoundingType") is not None else None,
            "isArrearsBasedOnOriginalSchedule": obj.get("isArrearsBasedOnOriginalSchedule"),
            "isCompoundingToBePostedAsTransaction": obj.get("isCompoundingToBePostedAsTransaction"),
            "preClosureInterestCalculationStrategy": GetLoanProductsPreClosureInterestCalculationStrategy.from_dict(obj["preClosureInterestCalculationStrategy"]) if obj.get("preClosureInterestCalculationStrategy") is not None else None,
            "productId": obj.get("productId"),
            "recalculationCompoundingFrequencyInterval": obj.get("recalculationCompoundingFrequencyInterval"),
            "recalculationCompoundingFrequencyOnDayType": obj.get("recalculationCompoundingFrequencyOnDayType"),
            "recalculationRestFrequencyInterval": obj.get("recalculationRestFrequencyInterval"),
            "recalculationRestFrequencyType": GetLoanProductsInterestRecalculationCompoundingFrequencyType.from_dict(obj["recalculationRestFrequencyType"]) if obj.get("recalculationRestFrequencyType") is not None else None,
            "rescheduleStrategyType": GetLoanProductsRescheduleStrategyType.from_dict(obj["rescheduleStrategyType"]) if obj.get("rescheduleStrategyType") is not None else None
        })
        return _obj


