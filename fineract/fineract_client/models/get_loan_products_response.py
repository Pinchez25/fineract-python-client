# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.get_loan_products_accounting_rule import GetLoanProductsAccountingRule
from fineract_client.models.get_loan_products_amortization_type import GetLoanProductsAmortizationType
from fineract_client.models.get_loan_products_currency import GetLoanProductsCurrency
from fineract_client.models.get_loan_products_interest_rate_frequency_type import GetLoanProductsInterestRateFrequencyType
from fineract_client.models.get_loan_products_interest_recalculation_data import GetLoanProductsInterestRecalculationData
from fineract_client.models.get_loan_products_interest_type import GetLoanProductsInterestType
from fineract_client.models.get_loan_products_repayment_frequency_type import GetLoanProductsRepaymentFrequencyType
from fineract_client.models.get_loan_products_repayment_start_date_type import GetLoanProductsRepaymentStartDateType
from fineract_client.models.get_loans_products_days_in_month_type import GetLoansProductsDaysInMonthType
from fineract_client.models.get_loans_products_days_in_year_type import GetLoansProductsDaysInYearType
from fineract_client.models.get_loans_products_interest_calculation_period_type import GetLoansProductsInterestCalculationPeriodType
from fineract_client.models.string_enum_option_data import StringEnumOptionData
from typing import Optional, Set
from typing_extensions import Self

class GetLoanProductsResponse(BaseModel):
    """
    GetLoanProductsResponse
    """ # noqa: E501
    accounting_rule: Optional[GetLoanProductsAccountingRule] = Field(default=None, alias="accountingRule")
    amortization_type: Optional[GetLoanProductsAmortizationType] = Field(default=None, alias="amortizationType")
    annual_interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="annualInterestRate")
    currency: Optional[GetLoanProductsCurrency] = None
    days_in_month_type: Optional[GetLoansProductsDaysInMonthType] = Field(default=None, alias="daysInMonthType")
    days_in_year_type: Optional[GetLoansProductsDaysInYearType] = Field(default=None, alias="daysInYearType")
    end_date: Optional[date] = Field(default=None, alias="endDate")
    fixed_length: Optional[StrictInt] = Field(default=None, alias="fixedLength")
    fixed_principal_percentage_per_installment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fixedPrincipalPercentagePerInstallment")
    id: Optional[StrictInt] = None
    include_in_borrower_cycle: Optional[StrictBool] = Field(default=None, alias="includeInBorrowerCycle")
    interest_calculation_period_type: Optional[GetLoansProductsInterestCalculationPeriodType] = Field(default=None, alias="interestCalculationPeriodType")
    interest_rate_frequency_type: Optional[GetLoanProductsInterestRateFrequencyType] = Field(default=None, alias="interestRateFrequencyType")
    interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestRatePerPeriod")
    interest_rate_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="interestRateVariationsForBorrowerCycle")
    interest_recalculation_data: Optional[GetLoanProductsInterestRecalculationData] = Field(default=None, alias="interestRecalculationData")
    interest_type: Optional[GetLoanProductsInterestType] = Field(default=None, alias="interestType")
    is_interest_recalculation_enabled: Optional[StrictBool] = Field(default=None, alias="isInterestRecalculationEnabled")
    max_number_of_repayments: Optional[StrictInt] = Field(default=None, alias="maxNumberOfRepayments")
    max_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxPrincipal")
    min_number_of_repayments: Optional[StrictInt] = Field(default=None, alias="minNumberOfRepayments")
    min_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minPrincipal")
    name: Optional[StrictStr] = None
    number_of_repayment_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="numberOfRepaymentVariationsForBorrowerCycle")
    number_of_repayments: Optional[StrictInt] = Field(default=None, alias="numberOfRepayments")
    principal: Optional[Union[StrictFloat, StrictInt]] = None
    principal_threshold_for_last_instalment: Optional[StrictInt] = Field(default=None, alias="principalThresholdForLastInstalment")
    principal_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="principalVariationsForBorrowerCycle")
    repayment_every: Optional[StrictInt] = Field(default=None, alias="repaymentEvery")
    repayment_frequency_type: Optional[GetLoanProductsRepaymentFrequencyType] = Field(default=None, alias="repaymentFrequencyType")
    repayment_start_date_type: Optional[GetLoanProductsRepaymentStartDateType] = Field(default=None, alias="repaymentStartDateType")
    short_name: Optional[StrictStr] = Field(default=None, alias="shortName")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    status: Optional[StrictStr] = None
    supported_interest_refund_types: Optional[List[StringEnumOptionData]] = Field(default=None, alias="supportedInterestRefundTypes")
    transaction_processing_strategy: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategy")
    transaction_processing_strategy_name: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategyName")
    use_borrower_cycle: Optional[StrictBool] = Field(default=None, alias="useBorrowerCycle")
    __properties: ClassVar[List[str]] = ["accountingRule", "amortizationType", "annualInterestRate", "currency", "daysInMonthType", "daysInYearType", "endDate", "fixedLength", "fixedPrincipalPercentagePerInstallment", "id", "includeInBorrowerCycle", "interestCalculationPeriodType", "interestRateFrequencyType", "interestRatePerPeriod", "interestRateVariationsForBorrowerCycle", "interestRecalculationData", "interestType", "isInterestRecalculationEnabled", "maxNumberOfRepayments", "maxPrincipal", "minNumberOfRepayments", "minPrincipal", "name", "numberOfRepaymentVariationsForBorrowerCycle", "numberOfRepayments", "principal", "principalThresholdForLastInstalment", "principalVariationsForBorrowerCycle", "repaymentEvery", "repaymentFrequencyType", "repaymentStartDateType", "shortName", "startDate", "status", "supportedInterestRefundTypes", "transactionProcessingStrategy", "transactionProcessingStrategyName", "useBorrowerCycle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoanProductsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accounting_rule
        if self.accounting_rule:
            _dict['accountingRule'] = self.accounting_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amortization_type
        if self.amortization_type:
            _dict['amortizationType'] = self.amortization_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of days_in_month_type
        if self.days_in_month_type:
            _dict['daysInMonthType'] = self.days_in_month_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of days_in_year_type
        if self.days_in_year_type:
            _dict['daysInYearType'] = self.days_in_year_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_period_type
        if self.interest_calculation_period_type:
            _dict['interestCalculationPeriodType'] = self.interest_calculation_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_rate_frequency_type
        if self.interest_rate_frequency_type:
            _dict['interestRateFrequencyType'] = self.interest_rate_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_recalculation_data
        if self.interest_recalculation_data:
            _dict['interestRecalculationData'] = self.interest_recalculation_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_type
        if self.interest_type:
            _dict['interestType'] = self.interest_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repayment_frequency_type
        if self.repayment_frequency_type:
            _dict['repaymentFrequencyType'] = self.repayment_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repayment_start_date_type
        if self.repayment_start_date_type:
            _dict['repaymentStartDateType'] = self.repayment_start_date_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in supported_interest_refund_types (list)
        _items = []
        if self.supported_interest_refund_types:
            for _item_supported_interest_refund_types in self.supported_interest_refund_types:
                if _item_supported_interest_refund_types:
                    _items.append(_item_supported_interest_refund_types.to_dict())
            _dict['supportedInterestRefundTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoanProductsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountingRule": GetLoanProductsAccountingRule.from_dict(obj["accountingRule"]) if obj.get("accountingRule") is not None else None,
            "amortizationType": GetLoanProductsAmortizationType.from_dict(obj["amortizationType"]) if obj.get("amortizationType") is not None else None,
            "annualInterestRate": obj.get("annualInterestRate"),
            "currency": GetLoanProductsCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "daysInMonthType": GetLoansProductsDaysInMonthType.from_dict(obj["daysInMonthType"]) if obj.get("daysInMonthType") is not None else None,
            "daysInYearType": GetLoansProductsDaysInYearType.from_dict(obj["daysInYearType"]) if obj.get("daysInYearType") is not None else None,
            "endDate": obj.get("endDate"),
            "fixedLength": obj.get("fixedLength"),
            "fixedPrincipalPercentagePerInstallment": obj.get("fixedPrincipalPercentagePerInstallment"),
            "id": obj.get("id"),
            "includeInBorrowerCycle": obj.get("includeInBorrowerCycle"),
            "interestCalculationPeriodType": GetLoansProductsInterestCalculationPeriodType.from_dict(obj["interestCalculationPeriodType"]) if obj.get("interestCalculationPeriodType") is not None else None,
            "interestRateFrequencyType": GetLoanProductsInterestRateFrequencyType.from_dict(obj["interestRateFrequencyType"]) if obj.get("interestRateFrequencyType") is not None else None,
            "interestRatePerPeriod": obj.get("interestRatePerPeriod"),
            "interestRateVariationsForBorrowerCycle": obj.get("interestRateVariationsForBorrowerCycle"),
            "interestRecalculationData": GetLoanProductsInterestRecalculationData.from_dict(obj["interestRecalculationData"]) if obj.get("interestRecalculationData") is not None else None,
            "interestType": GetLoanProductsInterestType.from_dict(obj["interestType"]) if obj.get("interestType") is not None else None,
            "isInterestRecalculationEnabled": obj.get("isInterestRecalculationEnabled"),
            "maxNumberOfRepayments": obj.get("maxNumberOfRepayments"),
            "maxPrincipal": obj.get("maxPrincipal"),
            "minNumberOfRepayments": obj.get("minNumberOfRepayments"),
            "minPrincipal": obj.get("minPrincipal"),
            "name": obj.get("name"),
            "numberOfRepaymentVariationsForBorrowerCycle": obj.get("numberOfRepaymentVariationsForBorrowerCycle"),
            "numberOfRepayments": obj.get("numberOfRepayments"),
            "principal": obj.get("principal"),
            "principalThresholdForLastInstalment": obj.get("principalThresholdForLastInstalment"),
            "principalVariationsForBorrowerCycle": obj.get("principalVariationsForBorrowerCycle"),
            "repaymentEvery": obj.get("repaymentEvery"),
            "repaymentFrequencyType": GetLoanProductsRepaymentFrequencyType.from_dict(obj["repaymentFrequencyType"]) if obj.get("repaymentFrequencyType") is not None else None,
            "repaymentStartDateType": GetLoanProductsRepaymentStartDateType.from_dict(obj["repaymentStartDateType"]) if obj.get("repaymentStartDateType") is not None else None,
            "shortName": obj.get("shortName"),
            "startDate": obj.get("startDate"),
            "status": obj.get("status"),
            "supportedInterestRefundTypes": [StringEnumOptionData.from_dict(_item) for _item in obj["supportedInterestRefundTypes"]] if obj.get("supportedInterestRefundTypes") is not None else None,
            "transactionProcessingStrategy": obj.get("transactionProcessingStrategy"),
            "transactionProcessingStrategyName": obj.get("transactionProcessingStrategyName"),
            "useBorrowerCycle": obj.get("useBorrowerCycle")
        })
        return _obj


