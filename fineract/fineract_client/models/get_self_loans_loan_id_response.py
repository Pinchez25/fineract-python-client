# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_loans_loan_id_amortization_type import GetLoansLoanIdAmortizationType
from fineract_client.models.get_loans_loan_id_currency import GetLoansLoanIdCurrency
from fineract_client.models.get_loans_loan_id_interest_calculation_period_type import GetLoansLoanIdInterestCalculationPeriodType
from fineract_client.models.get_loans_loan_id_interest_rate_frequency_type import GetLoansLoanIdInterestRateFrequencyType
from fineract_client.models.get_loans_loan_id_interest_type import GetLoansLoanIdInterestType
from fineract_client.models.get_loans_loan_id_loan_type import GetLoansLoanIdLoanType
from fineract_client.models.get_loans_loan_id_repayment_frequency_type import GetLoansLoanIdRepaymentFrequencyType
from fineract_client.models.get_loans_loan_id_status import GetLoansLoanIdStatus
from fineract_client.models.get_loans_loan_id_term_period_frequency_type import GetLoansLoanIdTermPeriodFrequencyType
from fineract_client.models.get_self_loan_id_summary import GetSelfLoanIdSummary
from fineract_client.models.get_self_loan_id_timeline import GetSelfLoanIdTimeline
from typing import Optional, Set
from typing_extensions import Self

class GetSelfLoansLoanIdResponse(BaseModel):
    """
    GetSelfLoansLoanIdResponse
    """ # noqa: E501
    account_no: Optional[StrictInt] = Field(default=None, alias="accountNo")
    amortization_type: Optional[GetLoansLoanIdAmortizationType] = Field(default=None, alias="amortizationType")
    annual_interest_rate: Optional[StrictInt] = Field(default=None, alias="annualInterestRate")
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    client_name: Optional[StrictStr] = Field(default=None, alias="clientName")
    client_office_id: Optional[StrictInt] = Field(default=None, alias="clientOfficeId")
    currency: Optional[GetLoansLoanIdCurrency] = None
    id: Optional[StrictInt] = None
    interest_calculation_period_type: Optional[GetLoansLoanIdInterestCalculationPeriodType] = Field(default=None, alias="interestCalculationPeriodType")
    interest_rate_frequency_type: Optional[GetLoansLoanIdInterestRateFrequencyType] = Field(default=None, alias="interestRateFrequencyType")
    interest_rate_per_period: Optional[StrictInt] = Field(default=None, alias="interestRatePerPeriod")
    interest_type: Optional[GetLoansLoanIdInterestType] = Field(default=None, alias="interestType")
    loan_officer_id: Optional[StrictInt] = Field(default=None, alias="loanOfficerId")
    loan_officer_name: Optional[StrictStr] = Field(default=None, alias="loanOfficerName")
    loan_product_description: Optional[StrictStr] = Field(default=None, alias="loanProductDescription")
    loan_product_id: Optional[StrictInt] = Field(default=None, alias="loanProductId")
    loan_product_name: Optional[StrictStr] = Field(default=None, alias="loanProductName")
    loan_purpose_id: Optional[StrictInt] = Field(default=None, alias="loanPurposeId")
    loan_purpose_name: Optional[StrictStr] = Field(default=None, alias="loanPurposeName")
    loan_type: Optional[GetLoansLoanIdLoanType] = Field(default=None, alias="loanType")
    number_of_repayments: Optional[StrictInt] = Field(default=None, alias="numberOfRepayments")
    principal: Optional[StrictInt] = None
    repayment_every: Optional[StrictInt] = Field(default=None, alias="repaymentEvery")
    repayment_frequency_type: Optional[GetLoansLoanIdRepaymentFrequencyType] = Field(default=None, alias="repaymentFrequencyType")
    status: Optional[GetLoansLoanIdStatus] = None
    summary: Optional[GetSelfLoanIdSummary] = None
    term_frequency: Optional[StrictInt] = Field(default=None, alias="termFrequency")
    term_period_frequency_type: Optional[GetLoansLoanIdTermPeriodFrequencyType] = Field(default=None, alias="termPeriodFrequencyType")
    timeline: Optional[GetSelfLoanIdTimeline] = None
    transaction_processing_strategy_code: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategyCode")
    __properties: ClassVar[List[str]] = ["accountNo", "amortizationType", "annualInterestRate", "clientId", "clientName", "clientOfficeId", "currency", "id", "interestCalculationPeriodType", "interestRateFrequencyType", "interestRatePerPeriod", "interestType", "loanOfficerId", "loanOfficerName", "loanProductDescription", "loanProductId", "loanProductName", "loanPurposeId", "loanPurposeName", "loanType", "numberOfRepayments", "principal", "repaymentEvery", "repaymentFrequencyType", "status", "summary", "termFrequency", "termPeriodFrequencyType", "timeline", "transactionProcessingStrategyCode"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSelfLoansLoanIdResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amortization_type
        if self.amortization_type:
            _dict['amortizationType'] = self.amortization_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_period_type
        if self.interest_calculation_period_type:
            _dict['interestCalculationPeriodType'] = self.interest_calculation_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_rate_frequency_type
        if self.interest_rate_frequency_type:
            _dict['interestRateFrequencyType'] = self.interest_rate_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_type
        if self.interest_type:
            _dict['interestType'] = self.interest_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan_type
        if self.loan_type:
            _dict['loanType'] = self.loan_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repayment_frequency_type
        if self.repayment_frequency_type:
            _dict['repaymentFrequencyType'] = self.repayment_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of term_period_frequency_type
        if self.term_period_frequency_type:
            _dict['termPeriodFrequencyType'] = self.term_period_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeline
        if self.timeline:
            _dict['timeline'] = self.timeline.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSelfLoansLoanIdResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNo": obj.get("accountNo"),
            "amortizationType": GetLoansLoanIdAmortizationType.from_dict(obj["amortizationType"]) if obj.get("amortizationType") is not None else None,
            "annualInterestRate": obj.get("annualInterestRate"),
            "clientId": obj.get("clientId"),
            "clientName": obj.get("clientName"),
            "clientOfficeId": obj.get("clientOfficeId"),
            "currency": GetLoansLoanIdCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "id": obj.get("id"),
            "interestCalculationPeriodType": GetLoansLoanIdInterestCalculationPeriodType.from_dict(obj["interestCalculationPeriodType"]) if obj.get("interestCalculationPeriodType") is not None else None,
            "interestRateFrequencyType": GetLoansLoanIdInterestRateFrequencyType.from_dict(obj["interestRateFrequencyType"]) if obj.get("interestRateFrequencyType") is not None else None,
            "interestRatePerPeriod": obj.get("interestRatePerPeriod"),
            "interestType": GetLoansLoanIdInterestType.from_dict(obj["interestType"]) if obj.get("interestType") is not None else None,
            "loanOfficerId": obj.get("loanOfficerId"),
            "loanOfficerName": obj.get("loanOfficerName"),
            "loanProductDescription": obj.get("loanProductDescription"),
            "loanProductId": obj.get("loanProductId"),
            "loanProductName": obj.get("loanProductName"),
            "loanPurposeId": obj.get("loanPurposeId"),
            "loanPurposeName": obj.get("loanPurposeName"),
            "loanType": GetLoansLoanIdLoanType.from_dict(obj["loanType"]) if obj.get("loanType") is not None else None,
            "numberOfRepayments": obj.get("numberOfRepayments"),
            "principal": obj.get("principal"),
            "repaymentEvery": obj.get("repaymentEvery"),
            "repaymentFrequencyType": GetLoansLoanIdRepaymentFrequencyType.from_dict(obj["repaymentFrequencyType"]) if obj.get("repaymentFrequencyType") is not None else None,
            "status": GetLoansLoanIdStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "summary": GetSelfLoanIdSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "termFrequency": obj.get("termFrequency"),
            "termPeriodFrequencyType": GetLoansLoanIdTermPeriodFrequencyType.from_dict(obj["termPeriodFrequencyType"]) if obj.get("termPeriodFrequencyType") is not None else None,
            "timeline": GetSelfLoanIdTimeline.from_dict(obj["timeline"]) if obj.get("timeline") is not None else None,
            "transactionProcessingStrategyCode": obj.get("transactionProcessingStrategyCode")
        })
        return _obj


