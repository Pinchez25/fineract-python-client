# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetLoansLoanIdLoanTransactionEnumData(BaseModel):
    """
    Transaction type
    """ # noqa: E501
    accrual: Optional[StrictBool] = None
    approve_transfer: Optional[StrictBool] = Field(default=None, alias="approveTransfer")
    charge_adjustment: Optional[StrictBool] = Field(default=None, alias="chargeAdjustment")
    charge_payment: Optional[StrictBool] = Field(default=None, alias="chargePayment")
    chargeoff: Optional[StrictBool] = None
    code: Optional[StrictStr] = None
    contra: Optional[StrictBool] = None
    credit_balance_refund: Optional[StrictBool] = Field(default=None, alias="creditBalanceRefund")
    disbursement: Optional[StrictBool] = None
    goodwill_credit: Optional[StrictBool] = Field(default=None, alias="goodwillCredit")
    id: Optional[StrictInt] = None
    initiate_transfer: Optional[StrictBool] = Field(default=None, alias="initiateTransfer")
    merchant_issued_refund: Optional[StrictBool] = Field(default=None, alias="merchantIssuedRefund")
    payout_refund: Optional[StrictBool] = Field(default=None, alias="payoutRefund")
    recovery_repayment: Optional[StrictBool] = Field(default=None, alias="recoveryRepayment")
    refund: Optional[StrictBool] = None
    refund_for_active_loans: Optional[StrictBool] = Field(default=None, alias="refundForActiveLoans")
    reject_transfer: Optional[StrictBool] = Field(default=None, alias="rejectTransfer")
    repayment: Optional[StrictBool] = None
    repayment_at_disbursement: Optional[StrictBool] = Field(default=None, alias="repaymentAtDisbursement")
    value: Optional[StrictStr] = None
    waive_charges: Optional[StrictBool] = Field(default=None, alias="waiveCharges")
    waive_interest: Optional[StrictBool] = Field(default=None, alias="waiveInterest")
    withdraw_transfer: Optional[StrictBool] = Field(default=None, alias="withdrawTransfer")
    write_off: Optional[StrictBool] = Field(default=None, alias="writeOff")
    __properties: ClassVar[List[str]] = ["accrual", "approveTransfer", "chargeAdjustment", "chargePayment", "chargeoff", "code", "contra", "creditBalanceRefund", "disbursement", "goodwillCredit", "id", "initiateTransfer", "merchantIssuedRefund", "payoutRefund", "recoveryRepayment", "refund", "refundForActiveLoans", "rejectTransfer", "repayment", "repaymentAtDisbursement", "value", "waiveCharges", "waiveInterest", "withdrawTransfer", "writeOff"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoansLoanIdLoanTransactionEnumData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoansLoanIdLoanTransactionEnumData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accrual": obj.get("accrual"),
            "approveTransfer": obj.get("approveTransfer"),
            "chargeAdjustment": obj.get("chargeAdjustment"),
            "chargePayment": obj.get("chargePayment"),
            "chargeoff": obj.get("chargeoff"),
            "code": obj.get("code"),
            "contra": obj.get("contra"),
            "creditBalanceRefund": obj.get("creditBalanceRefund"),
            "disbursement": obj.get("disbursement"),
            "goodwillCredit": obj.get("goodwillCredit"),
            "id": obj.get("id"),
            "initiateTransfer": obj.get("initiateTransfer"),
            "merchantIssuedRefund": obj.get("merchantIssuedRefund"),
            "payoutRefund": obj.get("payoutRefund"),
            "recoveryRepayment": obj.get("recoveryRepayment"),
            "refund": obj.get("refund"),
            "refundForActiveLoans": obj.get("refundForActiveLoans"),
            "rejectTransfer": obj.get("rejectTransfer"),
            "repayment": obj.get("repayment"),
            "repaymentAtDisbursement": obj.get("repaymentAtDisbursement"),
            "value": obj.get("value"),
            "waiveCharges": obj.get("waiveCharges"),
            "waiveInterest": obj.get("waiveInterest"),
            "withdrawTransfer": obj.get("withdrawTransfer"),
            "writeOff": obj.get("writeOff")
        })
        return _obj


