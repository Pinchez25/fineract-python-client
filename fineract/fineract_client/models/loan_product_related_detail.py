# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.monetary_currency import MonetaryCurrency
from fineract_client.models.money import Money
from typing import Optional, Set
from typing_extensions import Self

class LoanProductRelatedDetail(BaseModel):
    """
    LoanProductRelatedDetail
    """ # noqa: E501
    allow_partial_period_interest_calcualtion: Optional[StrictBool] = Field(default=None, alias="allowPartialPeriodInterestCalcualtion")
    amortization_method: Optional[StrictStr] = Field(default=None, alias="amortizationMethod")
    annual_nominal_interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="annualNominalInterestRate")
    currency: Optional[MonetaryCurrency] = None
    days_in_month_type: Optional[StrictInt] = Field(default=None, alias="daysInMonthType")
    days_in_year_type: Optional[StrictInt] = Field(default=None, alias="daysInYearType")
    disbursed_amount_percentage_for_down_payment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="disbursedAmountPercentageForDownPayment")
    enable_accrual_activity_posting: Optional[StrictBool] = Field(default=None, alias="enableAccrualActivityPosting")
    enable_auto_repayment_for_down_payment: Optional[StrictBool] = Field(default=None, alias="enableAutoRepaymentForDownPayment")
    enable_down_payment: Optional[StrictBool] = Field(default=None, alias="enableDownPayment")
    equal_amortization: Optional[StrictBool] = Field(default=None, alias="equalAmortization")
    fixed_length: Optional[StrictInt] = Field(default=None, alias="fixedLength")
    grace_on_arrears_ageing: Optional[StrictInt] = Field(default=None, alias="graceOnArrearsAgeing")
    grace_on_interest_charged: Optional[StrictInt] = Field(default=None, alias="graceOnInterestCharged")
    grace_on_interest_payment: Optional[StrictInt] = Field(default=None, alias="graceOnInterestPayment")
    grace_on_principal_payment: Optional[StrictInt] = Field(default=None, alias="graceOnPrincipalPayment")
    in_arrears_tolerance: Optional[Money] = Field(default=None, alias="inArrearsTolerance")
    interest_calculation_period_method: Optional[StrictStr] = Field(default=None, alias="interestCalculationPeriodMethod")
    interest_method: Optional[StrictStr] = Field(default=None, alias="interestMethod")
    interest_period_frequency_type: Optional[StrictStr] = Field(default=None, alias="interestPeriodFrequencyType")
    interest_recalculation_enabled: Optional[StrictBool] = Field(default=None, alias="interestRecalculationEnabled")
    loan_schedule_processing_type: Optional[StrictStr] = Field(default=None, alias="loanScheduleProcessingType")
    loan_schedule_type: Optional[StrictStr] = Field(default=None, alias="loanScheduleType")
    nominal_interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="nominalInterestRatePerPeriod")
    number_of_repayments: Optional[StrictInt] = Field(default=None, alias="numberOfRepayments")
    principal: Optional[Money] = None
    recurring_moratorium_on_principal_periods: Optional[StrictInt] = Field(default=None, alias="recurringMoratoriumOnPrincipalPeriods")
    repay_every: Optional[StrictInt] = Field(default=None, alias="repayEvery")
    repayment_period_frequency_type: Optional[StrictStr] = Field(default=None, alias="repaymentPeriodFrequencyType")
    supported_interest_refund_types: Optional[List[StrictStr]] = Field(default=None, alias="supportedInterestRefundTypes")
    __properties: ClassVar[List[str]] = ["allowPartialPeriodInterestCalcualtion", "amortizationMethod", "annualNominalInterestRate", "currency", "daysInMonthType", "daysInYearType", "disbursedAmountPercentageForDownPayment", "enableAccrualActivityPosting", "enableAutoRepaymentForDownPayment", "enableDownPayment", "equalAmortization", "fixedLength", "graceOnArrearsAgeing", "graceOnInterestCharged", "graceOnInterestPayment", "graceOnPrincipalPayment", "inArrearsTolerance", "interestCalculationPeriodMethod", "interestMethod", "interestPeriodFrequencyType", "interestRecalculationEnabled", "loanScheduleProcessingType", "loanScheduleType", "nominalInterestRatePerPeriod", "numberOfRepayments", "principal", "recurringMoratoriumOnPrincipalPeriods", "repayEvery", "repaymentPeriodFrequencyType", "supportedInterestRefundTypes"]

    @field_validator('amortization_method')
    def amortization_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EQUAL_PRINCIPAL', 'EQUAL_INSTALLMENTS', 'INVALID']):
            raise ValueError("must be one of enum values ('EQUAL_PRINCIPAL', 'EQUAL_INSTALLMENTS', 'INVALID')")
        return value

    @field_validator('interest_calculation_period_method')
    def interest_calculation_period_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DAILY', 'SAME_AS_REPAYMENT_PERIOD', 'INVALID']):
            raise ValueError("must be one of enum values ('DAILY', 'SAME_AS_REPAYMENT_PERIOD', 'INVALID')")
        return value

    @field_validator('interest_method')
    def interest_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DECLINING_BALANCE', 'FLAT', 'INVALID']):
            raise ValueError("must be one of enum values ('DECLINING_BALANCE', 'FLAT', 'INVALID')")
        return value

    @field_validator('interest_period_frequency_type')
    def interest_period_frequency_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DAYS', 'WEEKS', 'MONTHS', 'YEARS', 'WHOLE_TERM', 'INVALID']):
            raise ValueError("must be one of enum values ('DAYS', 'WEEKS', 'MONTHS', 'YEARS', 'WHOLE_TERM', 'INVALID')")
        return value

    @field_validator('loan_schedule_processing_type')
    def loan_schedule_processing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HORIZONTAL', 'VERTICAL']):
            raise ValueError("must be one of enum values ('HORIZONTAL', 'VERTICAL')")
        return value

    @field_validator('loan_schedule_type')
    def loan_schedule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CUMULATIVE', 'PROGRESSIVE']):
            raise ValueError("must be one of enum values ('CUMULATIVE', 'PROGRESSIVE')")
        return value

    @field_validator('repayment_period_frequency_type')
    def repayment_period_frequency_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DAYS', 'WEEKS', 'MONTHS', 'YEARS', 'WHOLE_TERM', 'INVALID']):
            raise ValueError("must be one of enum values ('DAYS', 'WEEKS', 'MONTHS', 'YEARS', 'WHOLE_TERM', 'INVALID')")
        return value

    @field_validator('supported_interest_refund_types')
    def supported_interest_refund_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['MERCHANT_ISSUED_REFUND', 'PAYOUT_REFUND']):
                raise ValueError("each list item must be one of ('MERCHANT_ISSUED_REFUND', 'PAYOUT_REFUND')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoanProductRelatedDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_arrears_tolerance
        if self.in_arrears_tolerance:
            _dict['inArrearsTolerance'] = self.in_arrears_tolerance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of principal
        if self.principal:
            _dict['principal'] = self.principal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoanProductRelatedDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowPartialPeriodInterestCalcualtion": obj.get("allowPartialPeriodInterestCalcualtion"),
            "amortizationMethod": obj.get("amortizationMethod"),
            "annualNominalInterestRate": obj.get("annualNominalInterestRate"),
            "currency": MonetaryCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "daysInMonthType": obj.get("daysInMonthType"),
            "daysInYearType": obj.get("daysInYearType"),
            "disbursedAmountPercentageForDownPayment": obj.get("disbursedAmountPercentageForDownPayment"),
            "enableAccrualActivityPosting": obj.get("enableAccrualActivityPosting"),
            "enableAutoRepaymentForDownPayment": obj.get("enableAutoRepaymentForDownPayment"),
            "enableDownPayment": obj.get("enableDownPayment"),
            "equalAmortization": obj.get("equalAmortization"),
            "fixedLength": obj.get("fixedLength"),
            "graceOnArrearsAgeing": obj.get("graceOnArrearsAgeing"),
            "graceOnInterestCharged": obj.get("graceOnInterestCharged"),
            "graceOnInterestPayment": obj.get("graceOnInterestPayment"),
            "graceOnPrincipalPayment": obj.get("graceOnPrincipalPayment"),
            "inArrearsTolerance": Money.from_dict(obj["inArrearsTolerance"]) if obj.get("inArrearsTolerance") is not None else None,
            "interestCalculationPeriodMethod": obj.get("interestCalculationPeriodMethod"),
            "interestMethod": obj.get("interestMethod"),
            "interestPeriodFrequencyType": obj.get("interestPeriodFrequencyType"),
            "interestRecalculationEnabled": obj.get("interestRecalculationEnabled"),
            "loanScheduleProcessingType": obj.get("loanScheduleProcessingType"),
            "loanScheduleType": obj.get("loanScheduleType"),
            "nominalInterestRatePerPeriod": obj.get("nominalInterestRatePerPeriod"),
            "numberOfRepayments": obj.get("numberOfRepayments"),
            "principal": Money.from_dict(obj["principal"]) if obj.get("principal") is not None else None,
            "recurringMoratoriumOnPrincipalPeriods": obj.get("recurringMoratoriumOnPrincipalPeriods"),
            "repayEvery": obj.get("repayEvery"),
            "repaymentPeriodFrequencyType": obj.get("repaymentPeriodFrequencyType"),
            "supportedInterestRefundTypes": obj.get("supportedInterestRefundTypes")
        })
        return _obj


