# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.external_id import ExternalId
from typing import Optional, Set
from typing_extensions import Self

class InteropAccountData(BaseModel):
    """
    InteropAccountData
    """ # noqa: E501
    changes: Optional[Dict[str, Dict[str, Any]]] = None
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    command_id: Optional[StrictInt] = Field(default=None, alias="commandId")
    credit_bureau_report_data: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="creditBureauReportData")
    glim_id: Optional[StrictInt] = Field(default=None, alias="glimId")
    group_id: Optional[StrictInt] = Field(default=None, alias="groupId")
    gsim_id: Optional[StrictInt] = Field(default=None, alias="gsimId")
    loan_id: Optional[StrictInt] = Field(default=None, alias="loanId")
    office_id: Optional[StrictInt] = Field(default=None, alias="officeId")
    product_id: Optional[StrictInt] = Field(default=None, alias="productId")
    resource_external_id: Optional[ExternalId] = Field(default=None, alias="resourceExternalId")
    resource_id: Optional[StrictInt] = Field(default=None, alias="resourceId")
    resource_identifier: Optional[StrictStr] = Field(default=None, alias="resourceIdentifier")
    rollback_transaction: Optional[StrictBool] = Field(default=None, alias="rollbackTransaction")
    savings_id: Optional[StrictInt] = Field(default=None, alias="savingsId")
    sub_resource_external_id: Optional[ExternalId] = Field(default=None, alias="subResourceExternalId")
    sub_resource_id: Optional[StrictInt] = Field(default=None, alias="subResourceId")
    transaction_id: Optional[StrictStr] = Field(default=None, alias="transactionId")
    __properties: ClassVar[List[str]] = ["changes", "clientId", "commandId", "creditBureauReportData", "glimId", "groupId", "gsimId", "loanId", "officeId", "productId", "resourceExternalId", "resourceId", "resourceIdentifier", "rollbackTransaction", "savingsId", "subResourceExternalId", "subResourceId", "transactionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InteropAccountData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource_external_id
        if self.resource_external_id:
            _dict['resourceExternalId'] = self.resource_external_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_resource_external_id
        if self.sub_resource_external_id:
            _dict['subResourceExternalId'] = self.sub_resource_external_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InteropAccountData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changes": obj.get("changes"),
            "clientId": obj.get("clientId"),
            "commandId": obj.get("commandId"),
            "creditBureauReportData": obj.get("creditBureauReportData"),
            "glimId": obj.get("glimId"),
            "groupId": obj.get("groupId"),
            "gsimId": obj.get("gsimId"),
            "loanId": obj.get("loanId"),
            "officeId": obj.get("officeId"),
            "productId": obj.get("productId"),
            "resourceExternalId": ExternalId.from_dict(obj["resourceExternalId"]) if obj.get("resourceExternalId") is not None else None,
            "resourceId": obj.get("resourceId"),
            "resourceIdentifier": obj.get("resourceIdentifier"),
            "rollbackTransaction": obj.get("rollbackTransaction"),
            "savingsId": obj.get("savingsId"),
            "subResourceExternalId": ExternalId.from_dict(obj["subResourceExternalId"]) if obj.get("subResourceExternalId") is not None else None,
            "subResourceId": obj.get("subResourceId"),
            "transactionId": obj.get("transactionId")
        })
        return _obj


