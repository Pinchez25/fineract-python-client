# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.advanced_payment_data import AdvancedPaymentData
from fineract_client.models.allow_attribute_overrides import AllowAttributeOverrides
from fineract_client.models.charge_data import ChargeData
from fineract_client.models.charge_to_gl_account_mapper import ChargeToGLAccountMapper
from fineract_client.models.credit_allocation_data import CreditAllocationData
from fineract_client.models.get_loan_fee_to_income_account_mappings import GetLoanFeeToIncomeAccountMappings
from fineract_client.models.get_loan_payment_channel_to_fund_source_mappings import GetLoanPaymentChannelToFundSourceMappings
from fineract_client.models.rate_data import RateData
from typing import Optional, Set
from typing_extensions import Self

class PutLoanProductsProductIdRequest(BaseModel):
    """
    PutLoanProductsProductIdRequest
    """ # noqa: E501
    account_moves_out_of_npa_only_on_arrears_completion: Optional[StrictBool] = Field(default=None, alias="accountMovesOutOfNPAOnlyOnArrearsCompletion")
    accounting_rule: Optional[StrictInt] = Field(default=None, alias="accountingRule")
    allow_approved_disbursed_amounts_over_applied: Optional[StrictBool] = Field(default=None, alias="allowApprovedDisbursedAmountsOverApplied")
    allow_attribute_overrides: Optional[AllowAttributeOverrides] = Field(default=None, alias="allowAttributeOverrides")
    allow_compounding_on_eod: Optional[StrictBool] = Field(default=None, alias="allowCompoundingOnEod")
    allow_partial_period_interest_calcualtion: Optional[StrictBool] = Field(default=None, alias="allowPartialPeriodInterestCalcualtion")
    allow_variable_installments: Optional[StrictBool] = Field(default=None, alias="allowVariableInstallments")
    amortization_type: Optional[StrictInt] = Field(default=None, alias="amortizationType")
    can_define_installment_amount: Optional[StrictBool] = Field(default=None, alias="canDefineInstallmentAmount")
    can_use_for_topup: Optional[StrictBool] = Field(default=None, alias="canUseForTopup")
    charge_off_expense_account_id: Optional[StrictInt] = Field(default=None, alias="chargeOffExpenseAccountId")
    charge_off_fraud_expense_account_id: Optional[StrictInt] = Field(default=None, alias="chargeOffFraudExpenseAccountId")
    charges: Optional[List[ChargeData]] = None
    close_date: Optional[StrictStr] = Field(default=None, alias="closeDate")
    credit_allocation: Optional[List[CreditAllocationData]] = Field(default=None, alias="creditAllocation")
    currency_code: Optional[StrictStr] = Field(default=None, alias="currencyCode")
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    days_in_month_type: Optional[StrictInt] = Field(default=None, alias="daysInMonthType")
    days_in_year_type: Optional[StrictInt] = Field(default=None, alias="daysInYearType")
    delinquency_bucket_id: Optional[StrictInt] = Field(default=None, alias="delinquencyBucketId")
    description: Optional[StrictStr] = None
    digits_after_decimal: Optional[StrictInt] = Field(default=None, alias="digitsAfterDecimal")
    disallow_expected_disbursements: Optional[StrictBool] = Field(default=None, alias="disallowExpectedDisbursements")
    disbursed_amount_percentage_for_down_payment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="disbursedAmountPercentageForDownPayment")
    due_days_for_repayment_event: Optional[StrictInt] = Field(default=None, alias="dueDaysForRepaymentEvent")
    enable_accrual_activity_posting: Optional[StrictBool] = Field(default=None, alias="enableAccrualActivityPosting")
    enable_auto_repayment_for_down_payment: Optional[StrictBool] = Field(default=None, alias="enableAutoRepaymentForDownPayment")
    enable_down_payment: Optional[StrictBool] = Field(default=None, alias="enableDownPayment")
    enable_installment_level_delinquency: Optional[StrictBool] = Field(default=None, alias="enableInstallmentLevelDelinquency")
    fee_to_income_account_mappings: Optional[List[GetLoanFeeToIncomeAccountMappings]] = Field(default=None, alias="feeToIncomeAccountMappings")
    fixed_length: Optional[StrictInt] = Field(default=None, alias="fixedLength")
    fixed_principal_percentage_per_installment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fixedPrincipalPercentagePerInstallment")
    fund_id: Optional[StrictInt] = Field(default=None, alias="fundId")
    fund_source_account_id: Optional[StrictInt] = Field(default=None, alias="fundSourceAccountId")
    goodwill_credit_account_id: Optional[StrictInt] = Field(default=None, alias="goodwillCreditAccountId")
    grace_on_arrears_ageing: Optional[StrictInt] = Field(default=None, alias="graceOnArrearsAgeing")
    grace_on_interest_payment: Optional[StrictInt] = Field(default=None, alias="graceOnInterestPayment")
    grace_on_principal_payment: Optional[StrictInt] = Field(default=None, alias="graceOnPrincipalPayment")
    hold_guarantee_funds: Optional[StrictBool] = Field(default=None, alias="holdGuaranteeFunds")
    in_arrears_tolerance: Optional[StrictInt] = Field(default=None, alias="inArrearsTolerance")
    in_multiples_of: Optional[StrictInt] = Field(default=None, alias="inMultiplesOf")
    include_in_borrower_cycle: Optional[StrictBool] = Field(default=None, alias="includeInBorrowerCycle")
    income_from_charge_off_fees_account_id: Optional[StrictInt] = Field(default=None, alias="incomeFromChargeOffFeesAccountId")
    income_from_charge_off_interest_account_id: Optional[StrictInt] = Field(default=None, alias="incomeFromChargeOffInterestAccountId")
    income_from_charge_off_penalty_account_id: Optional[StrictInt] = Field(default=None, alias="incomeFromChargeOffPenaltyAccountId")
    income_from_fee_account_id: Optional[StrictInt] = Field(default=None, alias="incomeFromFeeAccountId")
    income_from_goodwill_credit_fees_account_id: Optional[StrictInt] = Field(default=None, alias="incomeFromGoodwillCreditFeesAccountId")
    income_from_goodwill_credit_interest_account_id: Optional[StrictInt] = Field(default=None, alias="incomeFromGoodwillCreditInterestAccountId")
    income_from_goodwill_credit_penalty_account_id: Optional[StrictInt] = Field(default=None, alias="incomeFromGoodwillCreditPenaltyAccountId")
    income_from_penalty_account_id: Optional[StrictInt] = Field(default=None, alias="incomeFromPenaltyAccountId")
    income_from_recovery_account_id: Optional[StrictInt] = Field(default=None, alias="incomeFromRecoveryAccountId")
    installment_amount_in_multiples_of: Optional[StrictInt] = Field(default=None, alias="installmentAmountInMultiplesOf")
    interest_calculation_period_type: Optional[StrictInt] = Field(default=None, alias="interestCalculationPeriodType")
    interest_on_loan_account_id: Optional[StrictInt] = Field(default=None, alias="interestOnLoanAccountId")
    interest_rate_frequency_type: Optional[StrictInt] = Field(default=None, alias="interestRateFrequencyType")
    interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestRatePerPeriod")
    interest_rate_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="interestRateVariationsForBorrowerCycle")
    interest_recalculation_compounding_method: Optional[StrictInt] = Field(default=None, alias="interestRecalculationCompoundingMethod")
    interest_type: Optional[StrictInt] = Field(default=None, alias="interestType")
    is_arrears_based_on_original_schedule: Optional[StrictBool] = Field(default=None, alias="isArrearsBasedOnOriginalSchedule")
    is_compounding_to_be_posted_as_transaction: Optional[StrictBool] = Field(default=None, alias="isCompoundingToBePostedAsTransaction")
    is_equal_amortization: Optional[StrictBool] = Field(default=None, alias="isEqualAmortization")
    is_interest_recalculation_enabled: Optional[StrictBool] = Field(default=None, alias="isInterestRecalculationEnabled")
    is_linked_to_floating_interest_rates: Optional[StrictBool] = Field(default=None, alias="isLinkedToFloatingInterestRates")
    loan_portfolio_account_id: Optional[StrictInt] = Field(default=None, alias="loanPortfolioAccountId")
    loan_schedule_processing_type: Optional[StrictStr] = Field(default=None, alias="loanScheduleProcessingType")
    loan_schedule_type: Optional[StrictStr] = Field(default=None, alias="loanScheduleType")
    locale: Optional[StrictStr] = None
    max_interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxInterestRatePerPeriod")
    max_number_of_repayments: Optional[StrictInt] = Field(default=None, alias="maxNumberOfRepayments")
    max_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxPrincipal")
    max_tranche_count: Optional[StrictInt] = Field(default=None, alias="maxTrancheCount")
    min_interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minInterestRatePerPeriod")
    min_number_of_repayments: Optional[StrictInt] = Field(default=None, alias="minNumberOfRepayments")
    min_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minPrincipal")
    minimum_days_between_disbursal_and_first_repayment: Optional[StrictInt] = Field(default=None, alias="minimumDaysBetweenDisbursalAndFirstRepayment")
    multi_disburse_loan: Optional[StrictBool] = Field(default=None, alias="multiDisburseLoan")
    name: Optional[StrictStr] = None
    number_of_repayment_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="numberOfRepaymentVariationsForBorrowerCycle")
    number_of_repayments: Optional[StrictInt] = Field(default=None, alias="numberOfRepayments")
    outstanding_loan_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="outstandingLoanBalance")
    over_applied_calculation_type: Optional[StrictStr] = Field(default=None, alias="overAppliedCalculationType")
    over_applied_number: Optional[StrictInt] = Field(default=None, alias="overAppliedNumber")
    over_due_days_for_repayment_event: Optional[StrictInt] = Field(default=None, alias="overDueDaysForRepaymentEvent")
    overdue_days_for_npa: Optional[StrictInt] = Field(default=None, alias="overdueDaysForNPA")
    overpayment_liability_account_id: Optional[StrictInt] = Field(default=None, alias="overpaymentLiabilityAccountId")
    payment_allocation: Optional[List[AdvancedPaymentData]] = Field(default=None, alias="paymentAllocation")
    payment_channel_to_fund_source_mappings: Optional[List[GetLoanPaymentChannelToFundSourceMappings]] = Field(default=None, alias="paymentChannelToFundSourceMappings")
    penalty_to_income_account_mappings: Optional[List[ChargeToGLAccountMapper]] = Field(default=None, alias="penaltyToIncomeAccountMappings")
    pre_closure_interest_calculation_strategy: Optional[StrictInt] = Field(default=None, alias="preClosureInterestCalculationStrategy")
    principal: Optional[Union[StrictFloat, StrictInt]] = None
    principal_threshold_for_last_installment: Optional[StrictInt] = Field(default=None, alias="principalThresholdForLastInstallment")
    principal_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="principalVariationsForBorrowerCycle")
    rates: Optional[List[RateData]] = None
    recalculation_compounding_frequency_interval: Optional[StrictInt] = Field(default=None, alias="recalculationCompoundingFrequencyInterval")
    recalculation_compounding_frequency_on_day_type: Optional[StrictInt] = Field(default=None, alias="recalculationCompoundingFrequencyOnDayType")
    recalculation_compounding_frequency_type: Optional[StrictInt] = Field(default=None, alias="recalculationCompoundingFrequencyType")
    recalculation_rest_frequency_interval: Optional[StrictInt] = Field(default=None, alias="recalculationRestFrequencyInterval")
    recalculation_rest_frequency_type: Optional[StrictInt] = Field(default=None, alias="recalculationRestFrequencyType")
    receivable_fee_account_id: Optional[StrictInt] = Field(default=None, alias="receivableFeeAccountId")
    receivable_interest_account_id: Optional[StrictInt] = Field(default=None, alias="receivableInterestAccountId")
    receivable_penalty_account_id: Optional[StrictInt] = Field(default=None, alias="receivablePenaltyAccountId")
    repayment_every: Optional[StrictInt] = Field(default=None, alias="repaymentEvery")
    repayment_frequency_type: Optional[StrictInt] = Field(default=None, alias="repaymentFrequencyType")
    repayment_start_date_type: Optional[StrictInt] = Field(default=None, alias="repaymentStartDateType")
    reschedule_strategy_method: Optional[StrictInt] = Field(default=None, alias="rescheduleStrategyMethod")
    short_name: Optional[StrictStr] = Field(default=None, alias="shortName")
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate")
    supported_interest_refund_types: Optional[List[StrictStr]] = Field(default=None, alias="supportedInterestRefundTypes")
    transaction_processing_strategy_code: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategyCode")
    transfers_in_suspense_account_id: Optional[StrictInt] = Field(default=None, alias="transfersInSuspenseAccountId")
    use_borrower_cycle: Optional[StrictBool] = Field(default=None, alias="useBorrowerCycle")
    write_off_account_id: Optional[StrictInt] = Field(default=None, alias="writeOffAccountId")
    __properties: ClassVar[List[str]] = ["accountMovesOutOfNPAOnlyOnArrearsCompletion", "accountingRule", "allowApprovedDisbursedAmountsOverApplied", "allowAttributeOverrides", "allowCompoundingOnEod", "allowPartialPeriodInterestCalcualtion", "allowVariableInstallments", "amortizationType", "canDefineInstallmentAmount", "canUseForTopup", "chargeOffExpenseAccountId", "chargeOffFraudExpenseAccountId", "charges", "closeDate", "creditAllocation", "currencyCode", "dateFormat", "daysInMonthType", "daysInYearType", "delinquencyBucketId", "description", "digitsAfterDecimal", "disallowExpectedDisbursements", "disbursedAmountPercentageForDownPayment", "dueDaysForRepaymentEvent", "enableAccrualActivityPosting", "enableAutoRepaymentForDownPayment", "enableDownPayment", "enableInstallmentLevelDelinquency", "feeToIncomeAccountMappings", "fixedLength", "fixedPrincipalPercentagePerInstallment", "fundId", "fundSourceAccountId", "goodwillCreditAccountId", "graceOnArrearsAgeing", "graceOnInterestPayment", "graceOnPrincipalPayment", "holdGuaranteeFunds", "inArrearsTolerance", "inMultiplesOf", "includeInBorrowerCycle", "incomeFromChargeOffFeesAccountId", "incomeFromChargeOffInterestAccountId", "incomeFromChargeOffPenaltyAccountId", "incomeFromFeeAccountId", "incomeFromGoodwillCreditFeesAccountId", "incomeFromGoodwillCreditInterestAccountId", "incomeFromGoodwillCreditPenaltyAccountId", "incomeFromPenaltyAccountId", "incomeFromRecoveryAccountId", "installmentAmountInMultiplesOf", "interestCalculationPeriodType", "interestOnLoanAccountId", "interestRateFrequencyType", "interestRatePerPeriod", "interestRateVariationsForBorrowerCycle", "interestRecalculationCompoundingMethod", "interestType", "isArrearsBasedOnOriginalSchedule", "isCompoundingToBePostedAsTransaction", "isEqualAmortization", "isInterestRecalculationEnabled", "isLinkedToFloatingInterestRates", "loanPortfolioAccountId", "loanScheduleProcessingType", "loanScheduleType", "locale", "maxInterestRatePerPeriod", "maxNumberOfRepayments", "maxPrincipal", "maxTrancheCount", "minInterestRatePerPeriod", "minNumberOfRepayments", "minPrincipal", "minimumDaysBetweenDisbursalAndFirstRepayment", "multiDisburseLoan", "name", "numberOfRepaymentVariationsForBorrowerCycle", "numberOfRepayments", "outstandingLoanBalance", "overAppliedCalculationType", "overAppliedNumber", "overDueDaysForRepaymentEvent", "overdueDaysForNPA", "overpaymentLiabilityAccountId", "paymentAllocation", "paymentChannelToFundSourceMappings", "penaltyToIncomeAccountMappings", "preClosureInterestCalculationStrategy", "principal", "principalThresholdForLastInstallment", "principalVariationsForBorrowerCycle", "rates", "recalculationCompoundingFrequencyInterval", "recalculationCompoundingFrequencyOnDayType", "recalculationCompoundingFrequencyType", "recalculationRestFrequencyInterval", "recalculationRestFrequencyType", "receivableFeeAccountId", "receivableInterestAccountId", "receivablePenaltyAccountId", "repaymentEvery", "repaymentFrequencyType", "repaymentStartDateType", "rescheduleStrategyMethod", "shortName", "startDate", "supportedInterestRefundTypes", "transactionProcessingStrategyCode", "transfersInSuspenseAccountId", "useBorrowerCycle", "writeOffAccountId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutLoanProductsProductIdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allow_attribute_overrides
        if self.allow_attribute_overrides:
            _dict['allowAttributeOverrides'] = self.allow_attribute_overrides.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credit_allocation (list)
        _items = []
        if self.credit_allocation:
            for _item in self.credit_allocation:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditAllocation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fee_to_income_account_mappings (list)
        _items = []
        if self.fee_to_income_account_mappings:
            for _item in self.fee_to_income_account_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['feeToIncomeAccountMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_allocation (list)
        _items = []
        if self.payment_allocation:
            for _item in self.payment_allocation:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentAllocation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_channel_to_fund_source_mappings (list)
        _items = []
        if self.payment_channel_to_fund_source_mappings:
            for _item in self.payment_channel_to_fund_source_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentChannelToFundSourceMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in penalty_to_income_account_mappings (list)
        _items = []
        if self.penalty_to_income_account_mappings:
            for _item in self.penalty_to_income_account_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['penaltyToIncomeAccountMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rates (list)
        _items = []
        if self.rates:
            for _item in self.rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutLoanProductsProductIdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountMovesOutOfNPAOnlyOnArrearsCompletion": obj.get("accountMovesOutOfNPAOnlyOnArrearsCompletion"),
            "accountingRule": obj.get("accountingRule"),
            "allowApprovedDisbursedAmountsOverApplied": obj.get("allowApprovedDisbursedAmountsOverApplied"),
            "allowAttributeOverrides": AllowAttributeOverrides.from_dict(obj["allowAttributeOverrides"]) if obj.get("allowAttributeOverrides") is not None else None,
            "allowCompoundingOnEod": obj.get("allowCompoundingOnEod"),
            "allowPartialPeriodInterestCalcualtion": obj.get("allowPartialPeriodInterestCalcualtion"),
            "allowVariableInstallments": obj.get("allowVariableInstallments"),
            "amortizationType": obj.get("amortizationType"),
            "canDefineInstallmentAmount": obj.get("canDefineInstallmentAmount"),
            "canUseForTopup": obj.get("canUseForTopup"),
            "chargeOffExpenseAccountId": obj.get("chargeOffExpenseAccountId"),
            "chargeOffFraudExpenseAccountId": obj.get("chargeOffFraudExpenseAccountId"),
            "charges": [ChargeData.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "closeDate": obj.get("closeDate"),
            "creditAllocation": [CreditAllocationData.from_dict(_item) for _item in obj["creditAllocation"]] if obj.get("creditAllocation") is not None else None,
            "currencyCode": obj.get("currencyCode"),
            "dateFormat": obj.get("dateFormat"),
            "daysInMonthType": obj.get("daysInMonthType"),
            "daysInYearType": obj.get("daysInYearType"),
            "delinquencyBucketId": obj.get("delinquencyBucketId"),
            "description": obj.get("description"),
            "digitsAfterDecimal": obj.get("digitsAfterDecimal"),
            "disallowExpectedDisbursements": obj.get("disallowExpectedDisbursements"),
            "disbursedAmountPercentageForDownPayment": obj.get("disbursedAmountPercentageForDownPayment"),
            "dueDaysForRepaymentEvent": obj.get("dueDaysForRepaymentEvent"),
            "enableAccrualActivityPosting": obj.get("enableAccrualActivityPosting"),
            "enableAutoRepaymentForDownPayment": obj.get("enableAutoRepaymentForDownPayment"),
            "enableDownPayment": obj.get("enableDownPayment"),
            "enableInstallmentLevelDelinquency": obj.get("enableInstallmentLevelDelinquency"),
            "feeToIncomeAccountMappings": [GetLoanFeeToIncomeAccountMappings.from_dict(_item) for _item in obj["feeToIncomeAccountMappings"]] if obj.get("feeToIncomeAccountMappings") is not None else None,
            "fixedLength": obj.get("fixedLength"),
            "fixedPrincipalPercentagePerInstallment": obj.get("fixedPrincipalPercentagePerInstallment"),
            "fundId": obj.get("fundId"),
            "fundSourceAccountId": obj.get("fundSourceAccountId"),
            "goodwillCreditAccountId": obj.get("goodwillCreditAccountId"),
            "graceOnArrearsAgeing": obj.get("graceOnArrearsAgeing"),
            "graceOnInterestPayment": obj.get("graceOnInterestPayment"),
            "graceOnPrincipalPayment": obj.get("graceOnPrincipalPayment"),
            "holdGuaranteeFunds": obj.get("holdGuaranteeFunds"),
            "inArrearsTolerance": obj.get("inArrearsTolerance"),
            "inMultiplesOf": obj.get("inMultiplesOf"),
            "includeInBorrowerCycle": obj.get("includeInBorrowerCycle"),
            "incomeFromChargeOffFeesAccountId": obj.get("incomeFromChargeOffFeesAccountId"),
            "incomeFromChargeOffInterestAccountId": obj.get("incomeFromChargeOffInterestAccountId"),
            "incomeFromChargeOffPenaltyAccountId": obj.get("incomeFromChargeOffPenaltyAccountId"),
            "incomeFromFeeAccountId": obj.get("incomeFromFeeAccountId"),
            "incomeFromGoodwillCreditFeesAccountId": obj.get("incomeFromGoodwillCreditFeesAccountId"),
            "incomeFromGoodwillCreditInterestAccountId": obj.get("incomeFromGoodwillCreditInterestAccountId"),
            "incomeFromGoodwillCreditPenaltyAccountId": obj.get("incomeFromGoodwillCreditPenaltyAccountId"),
            "incomeFromPenaltyAccountId": obj.get("incomeFromPenaltyAccountId"),
            "incomeFromRecoveryAccountId": obj.get("incomeFromRecoveryAccountId"),
            "installmentAmountInMultiplesOf": obj.get("installmentAmountInMultiplesOf"),
            "interestCalculationPeriodType": obj.get("interestCalculationPeriodType"),
            "interestOnLoanAccountId": obj.get("interestOnLoanAccountId"),
            "interestRateFrequencyType": obj.get("interestRateFrequencyType"),
            "interestRatePerPeriod": obj.get("interestRatePerPeriod"),
            "interestRateVariationsForBorrowerCycle": obj.get("interestRateVariationsForBorrowerCycle"),
            "interestRecalculationCompoundingMethod": obj.get("interestRecalculationCompoundingMethod"),
            "interestType": obj.get("interestType"),
            "isArrearsBasedOnOriginalSchedule": obj.get("isArrearsBasedOnOriginalSchedule"),
            "isCompoundingToBePostedAsTransaction": obj.get("isCompoundingToBePostedAsTransaction"),
            "isEqualAmortization": obj.get("isEqualAmortization"),
            "isInterestRecalculationEnabled": obj.get("isInterestRecalculationEnabled"),
            "isLinkedToFloatingInterestRates": obj.get("isLinkedToFloatingInterestRates"),
            "loanPortfolioAccountId": obj.get("loanPortfolioAccountId"),
            "loanScheduleProcessingType": obj.get("loanScheduleProcessingType"),
            "loanScheduleType": obj.get("loanScheduleType"),
            "locale": obj.get("locale"),
            "maxInterestRatePerPeriod": obj.get("maxInterestRatePerPeriod"),
            "maxNumberOfRepayments": obj.get("maxNumberOfRepayments"),
            "maxPrincipal": obj.get("maxPrincipal"),
            "maxTrancheCount": obj.get("maxTrancheCount"),
            "minInterestRatePerPeriod": obj.get("minInterestRatePerPeriod"),
            "minNumberOfRepayments": obj.get("minNumberOfRepayments"),
            "minPrincipal": obj.get("minPrincipal"),
            "minimumDaysBetweenDisbursalAndFirstRepayment": obj.get("minimumDaysBetweenDisbursalAndFirstRepayment"),
            "multiDisburseLoan": obj.get("multiDisburseLoan"),
            "name": obj.get("name"),
            "numberOfRepaymentVariationsForBorrowerCycle": obj.get("numberOfRepaymentVariationsForBorrowerCycle"),
            "numberOfRepayments": obj.get("numberOfRepayments"),
            "outstandingLoanBalance": obj.get("outstandingLoanBalance"),
            "overAppliedCalculationType": obj.get("overAppliedCalculationType"),
            "overAppliedNumber": obj.get("overAppliedNumber"),
            "overDueDaysForRepaymentEvent": obj.get("overDueDaysForRepaymentEvent"),
            "overdueDaysForNPA": obj.get("overdueDaysForNPA"),
            "overpaymentLiabilityAccountId": obj.get("overpaymentLiabilityAccountId"),
            "paymentAllocation": [AdvancedPaymentData.from_dict(_item) for _item in obj["paymentAllocation"]] if obj.get("paymentAllocation") is not None else None,
            "paymentChannelToFundSourceMappings": [GetLoanPaymentChannelToFundSourceMappings.from_dict(_item) for _item in obj["paymentChannelToFundSourceMappings"]] if obj.get("paymentChannelToFundSourceMappings") is not None else None,
            "penaltyToIncomeAccountMappings": [ChargeToGLAccountMapper.from_dict(_item) for _item in obj["penaltyToIncomeAccountMappings"]] if obj.get("penaltyToIncomeAccountMappings") is not None else None,
            "preClosureInterestCalculationStrategy": obj.get("preClosureInterestCalculationStrategy"),
            "principal": obj.get("principal"),
            "principalThresholdForLastInstallment": obj.get("principalThresholdForLastInstallment"),
            "principalVariationsForBorrowerCycle": obj.get("principalVariationsForBorrowerCycle"),
            "rates": [RateData.from_dict(_item) for _item in obj["rates"]] if obj.get("rates") is not None else None,
            "recalculationCompoundingFrequencyInterval": obj.get("recalculationCompoundingFrequencyInterval"),
            "recalculationCompoundingFrequencyOnDayType": obj.get("recalculationCompoundingFrequencyOnDayType"),
            "recalculationCompoundingFrequencyType": obj.get("recalculationCompoundingFrequencyType"),
            "recalculationRestFrequencyInterval": obj.get("recalculationRestFrequencyInterval"),
            "recalculationRestFrequencyType": obj.get("recalculationRestFrequencyType"),
            "receivableFeeAccountId": obj.get("receivableFeeAccountId"),
            "receivableInterestAccountId": obj.get("receivableInterestAccountId"),
            "receivablePenaltyAccountId": obj.get("receivablePenaltyAccountId"),
            "repaymentEvery": obj.get("repaymentEvery"),
            "repaymentFrequencyType": obj.get("repaymentFrequencyType"),
            "repaymentStartDateType": obj.get("repaymentStartDateType"),
            "rescheduleStrategyMethod": obj.get("rescheduleStrategyMethod"),
            "shortName": obj.get("shortName"),
            "startDate": obj.get("startDate"),
            "supportedInterestRefundTypes": obj.get("supportedInterestRefundTypes"),
            "transactionProcessingStrategyCode": obj.get("transactionProcessingStrategyCode"),
            "transfersInSuspenseAccountId": obj.get("transfersInSuspenseAccountId"),
            "useBorrowerCycle": obj.get("useBorrowerCycle"),
            "writeOffAccountId": obj.get("writeOffAccountId")
        })
        return _obj


