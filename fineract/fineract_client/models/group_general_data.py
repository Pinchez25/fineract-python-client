# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.calendar_data import CalendarData
from fineract_client.models.center_data import CenterData
from fineract_client.models.code_value_data import CodeValueData
from fineract_client.models.datatable_data import DatatableData
from fineract_client.models.enum_option_data import EnumOptionData
from fineract_client.models.group_role_data import GroupRoleData
from fineract_client.models.office_data import OfficeData
from fineract_client.models.staff_data import StaffData
from typing import Optional, Set
from typing_extensions import Self

class GroupGeneralData(BaseModel):
    """
    GroupGeneralData
    """ # noqa: E501
    account_no: Optional[StrictStr] = Field(default=None, alias="accountNo")
    activation_date: Optional[date] = Field(default=None, alias="activationDate")
    active: Optional[StrictBool] = None
    active_client_members: Optional[List[ClientData]] = Field(default=None, alias="activeClientMembers")
    available_roles: Optional[List[CodeValueData]] = Field(default=None, alias="availableRoles")
    calendars_data: Optional[List[CalendarData]] = Field(default=None, alias="calendarsData")
    center_id: Optional[StrictInt] = Field(default=None, alias="centerId")
    center_name: Optional[StrictStr] = Field(default=None, alias="centerName")
    center_options: Optional[List[CenterData]] = Field(default=None, alias="centerOptions")
    child_group: Optional[StrictBool] = Field(default=None, alias="childGroup")
    client_members: Optional[List[ClientData]] = Field(default=None, alias="clientMembers")
    client_options: Optional[List[ClientData]] = Field(default=None, alias="clientOptions")
    closure_reasons: Optional[List[CodeValueData]] = Field(default=None, alias="closureReasons")
    collection_meeting_calendar: Optional[CalendarData] = Field(default=None, alias="collectionMeetingCalendar")
    datatables: Optional[List[DatatableData]] = None
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    group_level: Optional[StrictStr] = Field(default=None, alias="groupLevel")
    group_roles: Optional[List[GroupRoleData]] = Field(default=None, alias="groupRoles")
    hierarchy: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    locale: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    office_id: Optional[StrictInt] = Field(default=None, alias="officeId")
    office_name: Optional[StrictStr] = Field(default=None, alias="officeName")
    office_options: Optional[List[OfficeData]] = Field(default=None, alias="officeOptions")
    parent_id: Optional[StrictInt] = Field(default=None, alias="parentId")
    row_index: Optional[StrictInt] = Field(default=None, alias="rowIndex")
    selected_role: Optional[GroupRoleData] = Field(default=None, alias="selectedRole")
    staff_id: Optional[StrictInt] = Field(default=None, alias="staffId")
    staff_name: Optional[StrictStr] = Field(default=None, alias="staffName")
    staff_options: Optional[List[StaffData]] = Field(default=None, alias="staffOptions")
    status: Optional[EnumOptionData] = None
    submitted_on_date: Optional[date] = Field(default=None, alias="submittedOnDate")
    timeline: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["accountNo", "activationDate", "active", "activeClientMembers", "availableRoles", "calendarsData", "centerId", "centerName", "centerOptions", "childGroup", "clientMembers", "clientOptions", "closureReasons", "collectionMeetingCalendar", "datatables", "dateFormat", "externalId", "groupLevel", "groupRoles", "hierarchy", "id", "locale", "name", "officeId", "officeName", "officeOptions", "parentId", "rowIndex", "selectedRole", "staffId", "staffName", "staffOptions", "status", "submittedOnDate", "timeline"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupGeneralData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_client_members (list)
        _items = []
        if self.active_client_members:
            for _item in self.active_client_members:
                if _item:
                    _items.append(_item.to_dict())
            _dict['activeClientMembers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in available_roles (list)
        _items = []
        if self.available_roles:
            for _item in self.available_roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['availableRoles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in calendars_data (list)
        _items = []
        if self.calendars_data:
            for _item in self.calendars_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['calendarsData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in center_options (list)
        _items = []
        if self.center_options:
            for _item in self.center_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['centerOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in client_members (list)
        _items = []
        if self.client_members:
            for _item in self.client_members:
                if _item:
                    _items.append(_item.to_dict())
            _dict['clientMembers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in client_options (list)
        _items = []
        if self.client_options:
            for _item in self.client_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['clientOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in closure_reasons (list)
        _items = []
        if self.closure_reasons:
            for _item in self.closure_reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['closureReasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of collection_meeting_calendar
        if self.collection_meeting_calendar:
            _dict['collectionMeetingCalendar'] = self.collection_meeting_calendar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in datatables (list)
        _items = []
        if self.datatables:
            for _item in self.datatables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datatables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_roles (list)
        _items = []
        if self.group_roles:
            for _item in self.group_roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groupRoles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in office_options (list)
        _items = []
        if self.office_options:
            for _item in self.office_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['officeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of selected_role
        if self.selected_role:
            _dict['selectedRole'] = self.selected_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in staff_options (list)
        _items = []
        if self.staff_options:
            for _item in self.staff_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['staffOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupGeneralData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNo": obj.get("accountNo"),
            "activationDate": obj.get("activationDate"),
            "active": obj.get("active"),
            "activeClientMembers": [ClientData.from_dict(_item) for _item in obj["activeClientMembers"]] if obj.get("activeClientMembers") is not None else None,
            "availableRoles": [CodeValueData.from_dict(_item) for _item in obj["availableRoles"]] if obj.get("availableRoles") is not None else None,
            "calendarsData": [CalendarData.from_dict(_item) for _item in obj["calendarsData"]] if obj.get("calendarsData") is not None else None,
            "centerId": obj.get("centerId"),
            "centerName": obj.get("centerName"),
            "centerOptions": [CenterData.from_dict(_item) for _item in obj["centerOptions"]] if obj.get("centerOptions") is not None else None,
            "childGroup": obj.get("childGroup"),
            "clientMembers": [ClientData.from_dict(_item) for _item in obj["clientMembers"]] if obj.get("clientMembers") is not None else None,
            "clientOptions": [ClientData.from_dict(_item) for _item in obj["clientOptions"]] if obj.get("clientOptions") is not None else None,
            "closureReasons": [CodeValueData.from_dict(_item) for _item in obj["closureReasons"]] if obj.get("closureReasons") is not None else None,
            "collectionMeetingCalendar": CalendarData.from_dict(obj["collectionMeetingCalendar"]) if obj.get("collectionMeetingCalendar") is not None else None,
            "datatables": [DatatableData.from_dict(_item) for _item in obj["datatables"]] if obj.get("datatables") is not None else None,
            "dateFormat": obj.get("dateFormat"),
            "externalId": obj.get("externalId"),
            "groupLevel": obj.get("groupLevel"),
            "groupRoles": [GroupRoleData.from_dict(_item) for _item in obj["groupRoles"]] if obj.get("groupRoles") is not None else None,
            "hierarchy": obj.get("hierarchy"),
            "id": obj.get("id"),
            "locale": obj.get("locale"),
            "name": obj.get("name"),
            "officeId": obj.get("officeId"),
            "officeName": obj.get("officeName"),
            "officeOptions": [OfficeData.from_dict(_item) for _item in obj["officeOptions"]] if obj.get("officeOptions") is not None else None,
            "parentId": obj.get("parentId"),
            "rowIndex": obj.get("rowIndex"),
            "selectedRole": GroupRoleData.from_dict(obj["selectedRole"]) if obj.get("selectedRole") is not None else None,
            "staffId": obj.get("staffId"),
            "staffName": obj.get("staffName"),
            "staffOptions": [StaffData.from_dict(_item) for _item in obj["staffOptions"]] if obj.get("staffOptions") is not None else None,
            "status": EnumOptionData.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "submittedOnDate": obj.get("submittedOnDate"),
            "timeline": obj.get("timeline")
        })
        return _obj

from fineract_client.models.client_data import ClientData
# TODO: Rewrite to not use raise_errors
GroupGeneralData.model_rebuild(raise_errors=False)

