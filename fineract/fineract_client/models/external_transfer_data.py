# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.external_transfer_data_details import ExternalTransferDataDetails
from fineract_client.models.external_transfer_loan_data import ExternalTransferLoanData
from fineract_client.models.external_transfer_owner_data import ExternalTransferOwnerData
from typing import Optional, Set
from typing_extensions import Self

class ExternalTransferData(BaseModel):
    """
    ExternalTransferData
    """ # noqa: E501
    details: Optional[ExternalTransferDataDetails] = None
    effective_from: Optional[date] = Field(default=None, alias="effectiveFrom")
    effective_to: Optional[date] = Field(default=None, alias="effectiveTo")
    loan: Optional[ExternalTransferLoanData] = None
    owner: Optional[ExternalTransferOwnerData] = None
    purchase_price_ratio: Optional[StrictStr] = Field(default=None, alias="purchasePriceRatio")
    settlement_date: Optional[date] = Field(default=None, alias="settlementDate")
    status: Optional[StrictStr] = None
    sub_status: Optional[StrictStr] = Field(default=None, alias="subStatus")
    transfer_external_id: Optional[StrictStr] = Field(default=None, alias="transferExternalId")
    transfer_id: Optional[StrictInt] = Field(default=None, alias="transferId")
    __properties: ClassVar[List[str]] = ["details", "effectiveFrom", "effectiveTo", "loan", "owner", "purchasePriceRatio", "settlementDate", "status", "subStatus", "transferExternalId", "transferId"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'DECLINED', 'PENDING', 'BUYBACK', 'CANCELLED']):
            raise ValueError("must be one of enum values ('ACTIVE', 'DECLINED', 'PENDING', 'BUYBACK', 'CANCELLED')")
        return value

    @field_validator('sub_status')
    def sub_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BALANCE_ZERO', 'BALANCE_NEGATIVE', 'SAMEDAY_TRANSFERS', 'USER_REQUESTED', 'UNSOLD']):
            raise ValueError("must be one of enum values ('BALANCE_ZERO', 'BALANCE_NEGATIVE', 'SAMEDAY_TRANSFERS', 'USER_REQUESTED', 'UNSOLD')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalTransferData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan
        if self.loan:
            _dict['loan'] = self.loan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalTransferData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "details": ExternalTransferDataDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "effectiveFrom": obj.get("effectiveFrom"),
            "effectiveTo": obj.get("effectiveTo"),
            "loan": ExternalTransferLoanData.from_dict(obj["loan"]) if obj.get("loan") is not None else None,
            "owner": ExternalTransferOwnerData.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "purchasePriceRatio": obj.get("purchasePriceRatio"),
            "settlementDate": obj.get("settlementDate"),
            "status": obj.get("status"),
            "subStatus": obj.get("subStatus"),
            "transferExternalId": obj.get("transferExternalId"),
            "transferId": obj.get("transferId")
        })
        return _obj


