# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.get_loans_loan_id_currency import GetLoansLoanIdCurrency
from fineract_client.models.post_loans_repayment_schedule_periods import PostLoansRepaymentSchedulePeriods
from typing import Optional, Set
from typing_extensions import Self

class PostLoansResponse(BaseModel):
    """
    PostLoansResponse
    """ # noqa: E501
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    currency: Optional[GetLoansLoanIdCurrency] = None
    loan_id: Optional[StrictInt] = Field(default=None, alias="loanId")
    loan_term_in_days: Optional[StrictInt] = Field(default=None, alias="loanTermInDays")
    office_id: Optional[StrictInt] = Field(default=None, alias="officeId")
    periods: Optional[List[PostLoansRepaymentSchedulePeriods]] = None
    resource_external_id: Optional[StrictStr] = Field(default=None, alias="resourceExternalId")
    resource_id: Optional[StrictInt] = Field(default=None, alias="resourceId")
    total_fee_charges_charged: Optional[StrictInt] = Field(default=None, alias="totalFeeChargesCharged")
    total_interest_charged: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalInterestCharged")
    total_outstanding: Optional[StrictInt] = Field(default=None, alias="totalOutstanding")
    total_penalty_charges_charged: Optional[StrictInt] = Field(default=None, alias="totalPenaltyChargesCharged")
    total_principal_disbursed: Optional[StrictInt] = Field(default=None, alias="totalPrincipalDisbursed")
    total_principal_expected: Optional[StrictInt] = Field(default=None, alias="totalPrincipalExpected")
    total_principal_paid: Optional[StrictInt] = Field(default=None, alias="totalPrincipalPaid")
    total_repayment: Optional[StrictInt] = Field(default=None, alias="totalRepayment")
    total_repayment_expected: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalRepaymentExpected")
    total_waived: Optional[StrictInt] = Field(default=None, alias="totalWaived")
    total_written_off: Optional[StrictInt] = Field(default=None, alias="totalWrittenOff")
    __properties: ClassVar[List[str]] = ["clientId", "currency", "loanId", "loanTermInDays", "officeId", "periods", "resourceExternalId", "resourceId", "totalFeeChargesCharged", "totalInterestCharged", "totalOutstanding", "totalPenaltyChargesCharged", "totalPrincipalDisbursed", "totalPrincipalExpected", "totalPrincipalPaid", "totalRepayment", "totalRepaymentExpected", "totalWaived", "totalWrittenOff"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostLoansResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in periods (list)
        _items = []
        if self.periods:
            for _item_periods in self.periods:
                if _item_periods:
                    _items.append(_item_periods.to_dict())
            _dict['periods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostLoansResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "currency": GetLoansLoanIdCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "loanId": obj.get("loanId"),
            "loanTermInDays": obj.get("loanTermInDays"),
            "officeId": obj.get("officeId"),
            "periods": [PostLoansRepaymentSchedulePeriods.from_dict(_item) for _item in obj["periods"]] if obj.get("periods") is not None else None,
            "resourceExternalId": obj.get("resourceExternalId"),
            "resourceId": obj.get("resourceId"),
            "totalFeeChargesCharged": obj.get("totalFeeChargesCharged"),
            "totalInterestCharged": obj.get("totalInterestCharged"),
            "totalOutstanding": obj.get("totalOutstanding"),
            "totalPenaltyChargesCharged": obj.get("totalPenaltyChargesCharged"),
            "totalPrincipalDisbursed": obj.get("totalPrincipalDisbursed"),
            "totalPrincipalExpected": obj.get("totalPrincipalExpected"),
            "totalPrincipalPaid": obj.get("totalPrincipalPaid"),
            "totalRepayment": obj.get("totalRepayment"),
            "totalRepaymentExpected": obj.get("totalRepaymentExpected"),
            "totalWaived": obj.get("totalWaived"),
            "totalWrittenOff": obj.get("totalWrittenOff")
        })
        return _obj


