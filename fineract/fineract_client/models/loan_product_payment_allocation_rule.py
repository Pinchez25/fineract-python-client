# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LoanProductPaymentAllocationRule(BaseModel):
    """
    LoanProductPaymentAllocationRule
    """ # noqa: E501
    allocation_types: Optional[List[StrictStr]] = Field(default=None, alias="allocationTypes")
    created_by: StrictInt = Field(alias="createdBy")
    created_date: datetime = Field(alias="createdDate")
    created_date_time: datetime = Field(alias="createdDateTime")
    future_installment_allocation_rule: Optional[StrictStr] = Field(default=None, alias="futureInstallmentAllocationRule")
    id: Optional[StrictInt] = None
    last_modified_by: StrictInt = Field(alias="lastModifiedBy")
    last_modified_date: datetime = Field(alias="lastModifiedDate")
    last_modified_date_time: datetime = Field(alias="lastModifiedDateTime")
    loan_product: Optional[LoanProduct] = Field(default=None, alias="loanProduct")
    new: Optional[StrictBool] = None
    transaction_type: Optional[StrictStr] = Field(default=None, alias="transactionType")
    __properties: ClassVar[List[str]] = ["allocationTypes", "createdBy", "createdDate", "createdDateTime", "futureInstallmentAllocationRule", "id", "lastModifiedBy", "lastModifiedDate", "lastModifiedDateTime", "loanProduct", "new", "transactionType"]

    @field_validator('allocation_types')
    def allocation_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['PAST_DUE_PENALTY', 'PAST_DUE_FEE', 'PAST_DUE_PRINCIPAL', 'PAST_DUE_INTEREST', 'DUE_PENALTY', 'DUE_FEE', 'DUE_PRINCIPAL', 'DUE_INTEREST', 'IN_ADVANCE_PENALTY', 'IN_ADVANCE_FEE', 'IN_ADVANCE_PRINCIPAL', 'IN_ADVANCE_INTEREST']):
                raise ValueError("each list item must be one of ('PAST_DUE_PENALTY', 'PAST_DUE_FEE', 'PAST_DUE_PRINCIPAL', 'PAST_DUE_INTEREST', 'DUE_PENALTY', 'DUE_FEE', 'DUE_PRINCIPAL', 'DUE_INTEREST', 'IN_ADVANCE_PENALTY', 'IN_ADVANCE_FEE', 'IN_ADVANCE_PRINCIPAL', 'IN_ADVANCE_INTEREST')")
        return value

    @field_validator('future_installment_allocation_rule')
    def future_installment_allocation_rule_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NEXT_INSTALLMENT', 'LAST_INSTALLMENT', 'REAMORTIZATION']):
            raise ValueError("must be one of enum values ('NEXT_INSTALLMENT', 'LAST_INSTALLMENT', 'REAMORTIZATION')")
        return value

    @field_validator('transaction_type')
    def transaction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'REPAYMENT', 'DOWN_PAYMENT', 'MERCHANT_ISSUED_REFUND', 'PAYOUT_REFUND', 'GOODWILL_CREDIT', 'CHARGE_REFUND', 'CHARGE_ADJUSTMENT', 'WAIVE_INTEREST', 'CHARGE_PAYMENT', 'REFUND_FOR_ACTIVE_LOAN', 'INTEREST_PAYMENT_WAIVER', 'INTEREST_REFUND']):
            raise ValueError("must be one of enum values ('DEFAULT', 'REPAYMENT', 'DOWN_PAYMENT', 'MERCHANT_ISSUED_REFUND', 'PAYOUT_REFUND', 'GOODWILL_CREDIT', 'CHARGE_REFUND', 'CHARGE_ADJUSTMENT', 'WAIVE_INTEREST', 'CHARGE_PAYMENT', 'REFUND_FOR_ACTIVE_LOAN', 'INTEREST_PAYMENT_WAIVER', 'INTEREST_REFUND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoanProductPaymentAllocationRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of loan_product
        if self.loan_product:
            _dict['loanProduct'] = self.loan_product.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoanProductPaymentAllocationRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocationTypes": obj.get("allocationTypes"),
            "createdBy": obj.get("createdBy"),
            "createdDate": obj.get("createdDate"),
            "createdDateTime": obj.get("createdDateTime"),
            "futureInstallmentAllocationRule": obj.get("futureInstallmentAllocationRule"),
            "id": obj.get("id"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "lastModifiedDateTime": obj.get("lastModifiedDateTime"),
            "loanProduct": LoanProduct.from_dict(obj["loanProduct"]) if obj.get("loanProduct") is not None else None,
            "new": obj.get("new"),
            "transactionType": obj.get("transactionType")
        })
        return _obj

from fineract_client.models.loan_product import LoanProduct
# TODO: Rewrite to not use raise_errors
LoanProductPaymentAllocationRule.model_rebuild(raise_errors=False)

