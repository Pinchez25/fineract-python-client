# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.get_account_transfers_from_account_type import GetAccountTransfersFromAccountType
from fineract_client.models.get_account_transfers_from_client_options import GetAccountTransfersFromClientOptions
from fineract_client.models.get_account_transfers_page_items_currency import GetAccountTransfersPageItemsCurrency
from fineract_client.models.get_account_transfers_page_items_from_account import GetAccountTransfersPageItemsFromAccount
from fineract_client.models.get_account_transfers_page_items_from_office import GetAccountTransfersPageItemsFromOffice
from fineract_client.models.get_account_transfers_page_items_to_account_type import GetAccountTransfersPageItemsToAccountType
from typing import Optional, Set
from typing_extensions import Self

class GetAccountTransfersPageItems(BaseModel):
    """
    GetAccountTransfersPageItems
    """ # noqa: E501
    currency: Optional[GetAccountTransfersPageItemsCurrency] = None
    from_account: Optional[GetAccountTransfersPageItemsFromAccount] = Field(default=None, alias="fromAccount")
    from_account_type: Optional[GetAccountTransfersFromAccountType] = Field(default=None, alias="fromAccountType")
    from_client: Optional[GetAccountTransfersFromClientOptions] = Field(default=None, alias="fromClient")
    from_office: Optional[GetAccountTransfersPageItemsFromOffice] = Field(default=None, alias="fromOffice")
    id: Optional[StrictInt] = None
    reversed: Optional[StrictBool] = None
    to_account: Optional[GetAccountTransfersPageItemsFromAccount] = Field(default=None, alias="toAccount")
    to_account_type: Optional[GetAccountTransfersPageItemsToAccountType] = Field(default=None, alias="toAccountType")
    to_client: Optional[GetAccountTransfersFromClientOptions] = Field(default=None, alias="toClient")
    to_office: Optional[GetAccountTransfersPageItemsFromOffice] = Field(default=None, alias="toOffice")
    transfer_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="transferAmount")
    transfer_date: Optional[date] = Field(default=None, alias="transferDate")
    transfer_description: Optional[StrictStr] = Field(default=None, alias="transferDescription")
    __properties: ClassVar[List[str]] = ["currency", "fromAccount", "fromAccountType", "fromClient", "fromOffice", "id", "reversed", "toAccount", "toAccountType", "toClient", "toOffice", "transferAmount", "transferDate", "transferDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountTransfersPageItems from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_account
        if self.from_account:
            _dict['fromAccount'] = self.from_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_account_type
        if self.from_account_type:
            _dict['fromAccountType'] = self.from_account_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_client
        if self.from_client:
            _dict['fromClient'] = self.from_client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_office
        if self.from_office:
            _dict['fromOffice'] = self.from_office.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_account
        if self.to_account:
            _dict['toAccount'] = self.to_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_account_type
        if self.to_account_type:
            _dict['toAccountType'] = self.to_account_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_client
        if self.to_client:
            _dict['toClient'] = self.to_client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_office
        if self.to_office:
            _dict['toOffice'] = self.to_office.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountTransfersPageItems from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currency": GetAccountTransfersPageItemsCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "fromAccount": GetAccountTransfersPageItemsFromAccount.from_dict(obj["fromAccount"]) if obj.get("fromAccount") is not None else None,
            "fromAccountType": GetAccountTransfersFromAccountType.from_dict(obj["fromAccountType"]) if obj.get("fromAccountType") is not None else None,
            "fromClient": GetAccountTransfersFromClientOptions.from_dict(obj["fromClient"]) if obj.get("fromClient") is not None else None,
            "fromOffice": GetAccountTransfersPageItemsFromOffice.from_dict(obj["fromOffice"]) if obj.get("fromOffice") is not None else None,
            "id": obj.get("id"),
            "reversed": obj.get("reversed"),
            "toAccount": GetAccountTransfersPageItemsFromAccount.from_dict(obj["toAccount"]) if obj.get("toAccount") is not None else None,
            "toAccountType": GetAccountTransfersPageItemsToAccountType.from_dict(obj["toAccountType"]) if obj.get("toAccountType") is not None else None,
            "toClient": GetAccountTransfersFromClientOptions.from_dict(obj["toClient"]) if obj.get("toClient") is not None else None,
            "toOffice": GetAccountTransfersPageItemsFromOffice.from_dict(obj["toOffice"]) if obj.get("toOffice") is not None else None,
            "transferAmount": obj.get("transferAmount"),
            "transferDate": obj.get("transferDate"),
            "transferDescription": obj.get("transferDescription")
        })
        return _obj


