# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.enum_option_data import EnumOptionData
from fineract_client.models.get_delinquency_ranges_response import GetDelinquencyRangesResponse
from fineract_client.models.get_loans_loan_id_amortization_type import GetLoansLoanIdAmortizationType
from fineract_client.models.get_loans_loan_id_currency import GetLoansLoanIdCurrency
from fineract_client.models.get_loans_loan_id_delinquency_summary import GetLoansLoanIdDelinquencySummary
from fineract_client.models.get_loans_loan_id_disbursement_details import GetLoansLoanIdDisbursementDetails
from fineract_client.models.get_loans_loan_id_interest_calculation_period_type import GetLoansLoanIdInterestCalculationPeriodType
from fineract_client.models.get_loans_loan_id_interest_rate_frequency_type import GetLoansLoanIdInterestRateFrequencyType
from fineract_client.models.get_loans_loan_id_interest_type import GetLoansLoanIdInterestType
from fineract_client.models.get_loans_loan_id_loan_charge_data import GetLoansLoanIdLoanChargeData
from fineract_client.models.get_loans_loan_id_loan_type import GetLoansLoanIdLoanType
from fineract_client.models.get_loans_loan_id_repayment_frequency_type import GetLoansLoanIdRepaymentFrequencyType
from fineract_client.models.get_loans_loan_id_repayment_schedule import GetLoansLoanIdRepaymentSchedule
from fineract_client.models.get_loans_loan_id_status import GetLoansLoanIdStatus
from fineract_client.models.get_loans_loan_id_summary import GetLoansLoanIdSummary
from fineract_client.models.get_loans_loan_id_term_period_frequency_type import GetLoansLoanIdTermPeriodFrequencyType
from fineract_client.models.get_loans_loan_id_timeline import GetLoansLoanIdTimeline
from fineract_client.models.get_loans_loan_id_transactions import GetLoansLoanIdTransactions
from typing import Optional, Set
from typing_extensions import Self

class GetLoansLoanIdResponse(BaseModel):
    """
    GetLoansLoanIdResponse
    """ # noqa: E501
    account_no: Optional[StrictStr] = Field(default=None, alias="accountNo")
    amortization_type: Optional[GetLoansLoanIdAmortizationType] = Field(default=None, alias="amortizationType")
    annual_interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="annualInterestRate")
    approved_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="approvedPrincipal")
    charged_off: Optional[StrictBool] = Field(default=None, alias="chargedOff")
    charges: Optional[List[GetLoansLoanIdLoanChargeData]] = Field(default=None, description="Set of charges")
    client_external_id: Optional[StrictStr] = Field(default=None, alias="clientExternalId")
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    client_name: Optional[StrictStr] = Field(default=None, alias="clientName")
    client_office_id: Optional[StrictInt] = Field(default=None, alias="clientOfficeId")
    currency: Optional[GetLoansLoanIdCurrency] = None
    delinquency_range: Optional[GetDelinquencyRangesResponse] = Field(default=None, alias="delinquencyRange")
    delinquent: Optional[GetLoansLoanIdDelinquencySummary] = None
    disallow_expected_disbursements: Optional[StrictBool] = Field(default=None, alias="disallowExpectedDisbursements")
    disbursed_amount_percentage_for_down_payment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="disbursedAmountPercentageForDownPayment")
    disbursement_details: Optional[List[GetLoansLoanIdDisbursementDetails]] = Field(default=None, description="Set of GetLoansLoanIdDisbursementDetails", alias="disbursementDetails")
    enable_auto_repayment_for_down_payment: Optional[StrictBool] = Field(default=None, alias="enableAutoRepaymentForDownPayment")
    enable_down_payment: Optional[StrictBool] = Field(default=None, alias="enableDownPayment")
    enable_installment_level_delinquency: Optional[StrictBool] = Field(default=None, alias="enableInstallmentLevelDelinquency")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    fixed_length: Optional[StrictInt] = Field(default=None, alias="fixedLength")
    fixed_principal_percentage_per_installment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fixedPrincipalPercentagePerInstallment")
    fraud: Optional[StrictBool] = None
    id: Optional[StrictInt] = None
    in_arrears_tolerance: Optional[StrictInt] = Field(default=None, alias="inArrearsTolerance")
    interest_calculation_period_type: Optional[GetLoansLoanIdInterestCalculationPeriodType] = Field(default=None, alias="interestCalculationPeriodType")
    interest_rate_frequency_type: Optional[GetLoansLoanIdInterestRateFrequencyType] = Field(default=None, alias="interestRateFrequencyType")
    interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestRatePerPeriod")
    interest_type: Optional[GetLoansLoanIdInterestType] = Field(default=None, alias="interestType")
    is_floating_interest_rate: Optional[StrictBool] = Field(default=None, alias="isFloatingInterestRate")
    last_closed_business_date: Optional[date] = Field(default=None, alias="lastClosedBusinessDate")
    loan_officer_id: Optional[StrictInt] = Field(default=None, alias="loanOfficerId")
    loan_officer_name: Optional[StrictStr] = Field(default=None, alias="loanOfficerName")
    loan_product_description: Optional[StrictStr] = Field(default=None, alias="loanProductDescription")
    loan_product_id: Optional[StrictInt] = Field(default=None, alias="loanProductId")
    loan_product_name: Optional[StrictStr] = Field(default=None, alias="loanProductName")
    loan_purpose_id: Optional[StrictInt] = Field(default=None, alias="loanPurposeId")
    loan_purpose_name: Optional[StrictStr] = Field(default=None, alias="loanPurposeName")
    loan_schedule_processing_type: Optional[EnumOptionData] = Field(default=None, alias="loanScheduleProcessingType")
    loan_schedule_type: Optional[EnumOptionData] = Field(default=None, alias="loanScheduleType")
    loan_type: Optional[GetLoansLoanIdLoanType] = Field(default=None, alias="loanType")
    net_disbursal_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="netDisbursalAmount")
    number_of_repayments: Optional[StrictInt] = Field(default=None, alias="numberOfRepayments")
    overpaid_on_date: Optional[date] = Field(default=None, alias="overpaidOnDate")
    principal: Optional[Union[StrictFloat, StrictInt]] = None
    proposed_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="proposedPrincipal")
    repayment_every: Optional[StrictInt] = Field(default=None, alias="repaymentEvery")
    repayment_frequency_type: Optional[GetLoansLoanIdRepaymentFrequencyType] = Field(default=None, alias="repaymentFrequencyType")
    repayment_schedule: Optional[GetLoansLoanIdRepaymentSchedule] = Field(default=None, alias="repaymentSchedule")
    status: Optional[GetLoansLoanIdStatus] = None
    summary: Optional[GetLoansLoanIdSummary] = None
    term_frequency: Optional[StrictInt] = Field(default=None, alias="termFrequency")
    term_period_frequency_type: Optional[GetLoansLoanIdTermPeriodFrequencyType] = Field(default=None, alias="termPeriodFrequencyType")
    timeline: Optional[GetLoansLoanIdTimeline] = None
    total_overpaid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalOverpaid")
    transaction_processing_strategy_code: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategyCode")
    transactions: Optional[List[GetLoansLoanIdTransactions]] = Field(default=None, description="Set of GetLoansLoanIdTransactions")
    __properties: ClassVar[List[str]] = ["accountNo", "amortizationType", "annualInterestRate", "approvedPrincipal", "chargedOff", "charges", "clientExternalId", "clientId", "clientName", "clientOfficeId", "currency", "delinquencyRange", "delinquent", "disallowExpectedDisbursements", "disbursedAmountPercentageForDownPayment", "disbursementDetails", "enableAutoRepaymentForDownPayment", "enableDownPayment", "enableInstallmentLevelDelinquency", "externalId", "fixedLength", "fixedPrincipalPercentagePerInstallment", "fraud", "id", "inArrearsTolerance", "interestCalculationPeriodType", "interestRateFrequencyType", "interestRatePerPeriod", "interestType", "isFloatingInterestRate", "lastClosedBusinessDate", "loanOfficerId", "loanOfficerName", "loanProductDescription", "loanProductId", "loanProductName", "loanPurposeId", "loanPurposeName", "loanScheduleProcessingType", "loanScheduleType", "loanType", "netDisbursalAmount", "numberOfRepayments", "overpaidOnDate", "principal", "proposedPrincipal", "repaymentEvery", "repaymentFrequencyType", "repaymentSchedule", "status", "summary", "termFrequency", "termPeriodFrequencyType", "timeline", "totalOverpaid", "transactionProcessingStrategyCode", "transactions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoansLoanIdResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amortization_type
        if self.amortization_type:
            _dict['amortizationType'] = self.amortization_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delinquency_range
        if self.delinquency_range:
            _dict['delinquencyRange'] = self.delinquency_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delinquent
        if self.delinquent:
            _dict['delinquent'] = self.delinquent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in disbursement_details (list)
        _items = []
        if self.disbursement_details:
            for _item in self.disbursement_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['disbursementDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_period_type
        if self.interest_calculation_period_type:
            _dict['interestCalculationPeriodType'] = self.interest_calculation_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_rate_frequency_type
        if self.interest_rate_frequency_type:
            _dict['interestRateFrequencyType'] = self.interest_rate_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_type
        if self.interest_type:
            _dict['interestType'] = self.interest_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan_schedule_processing_type
        if self.loan_schedule_processing_type:
            _dict['loanScheduleProcessingType'] = self.loan_schedule_processing_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan_schedule_type
        if self.loan_schedule_type:
            _dict['loanScheduleType'] = self.loan_schedule_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan_type
        if self.loan_type:
            _dict['loanType'] = self.loan_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repayment_frequency_type
        if self.repayment_frequency_type:
            _dict['repaymentFrequencyType'] = self.repayment_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repayment_schedule
        if self.repayment_schedule:
            _dict['repaymentSchedule'] = self.repayment_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of term_period_frequency_type
        if self.term_period_frequency_type:
            _dict['termPeriodFrequencyType'] = self.term_period_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeline
        if self.timeline:
            _dict['timeline'] = self.timeline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item in self.transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoansLoanIdResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNo": obj.get("accountNo"),
            "amortizationType": GetLoansLoanIdAmortizationType.from_dict(obj["amortizationType"]) if obj.get("amortizationType") is not None else None,
            "annualInterestRate": obj.get("annualInterestRate"),
            "approvedPrincipal": obj.get("approvedPrincipal"),
            "chargedOff": obj.get("chargedOff"),
            "charges": [GetLoansLoanIdLoanChargeData.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "clientExternalId": obj.get("clientExternalId"),
            "clientId": obj.get("clientId"),
            "clientName": obj.get("clientName"),
            "clientOfficeId": obj.get("clientOfficeId"),
            "currency": GetLoansLoanIdCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "delinquencyRange": GetDelinquencyRangesResponse.from_dict(obj["delinquencyRange"]) if obj.get("delinquencyRange") is not None else None,
            "delinquent": GetLoansLoanIdDelinquencySummary.from_dict(obj["delinquent"]) if obj.get("delinquent") is not None else None,
            "disallowExpectedDisbursements": obj.get("disallowExpectedDisbursements"),
            "disbursedAmountPercentageForDownPayment": obj.get("disbursedAmountPercentageForDownPayment"),
            "disbursementDetails": [GetLoansLoanIdDisbursementDetails.from_dict(_item) for _item in obj["disbursementDetails"]] if obj.get("disbursementDetails") is not None else None,
            "enableAutoRepaymentForDownPayment": obj.get("enableAutoRepaymentForDownPayment"),
            "enableDownPayment": obj.get("enableDownPayment"),
            "enableInstallmentLevelDelinquency": obj.get("enableInstallmentLevelDelinquency"),
            "externalId": obj.get("externalId"),
            "fixedLength": obj.get("fixedLength"),
            "fixedPrincipalPercentagePerInstallment": obj.get("fixedPrincipalPercentagePerInstallment"),
            "fraud": obj.get("fraud"),
            "id": obj.get("id"),
            "inArrearsTolerance": obj.get("inArrearsTolerance"),
            "interestCalculationPeriodType": GetLoansLoanIdInterestCalculationPeriodType.from_dict(obj["interestCalculationPeriodType"]) if obj.get("interestCalculationPeriodType") is not None else None,
            "interestRateFrequencyType": GetLoansLoanIdInterestRateFrequencyType.from_dict(obj["interestRateFrequencyType"]) if obj.get("interestRateFrequencyType") is not None else None,
            "interestRatePerPeriod": obj.get("interestRatePerPeriod"),
            "interestType": GetLoansLoanIdInterestType.from_dict(obj["interestType"]) if obj.get("interestType") is not None else None,
            "isFloatingInterestRate": obj.get("isFloatingInterestRate"),
            "lastClosedBusinessDate": obj.get("lastClosedBusinessDate"),
            "loanOfficerId": obj.get("loanOfficerId"),
            "loanOfficerName": obj.get("loanOfficerName"),
            "loanProductDescription": obj.get("loanProductDescription"),
            "loanProductId": obj.get("loanProductId"),
            "loanProductName": obj.get("loanProductName"),
            "loanPurposeId": obj.get("loanPurposeId"),
            "loanPurposeName": obj.get("loanPurposeName"),
            "loanScheduleProcessingType": EnumOptionData.from_dict(obj["loanScheduleProcessingType"]) if obj.get("loanScheduleProcessingType") is not None else None,
            "loanScheduleType": EnumOptionData.from_dict(obj["loanScheduleType"]) if obj.get("loanScheduleType") is not None else None,
            "loanType": GetLoansLoanIdLoanType.from_dict(obj["loanType"]) if obj.get("loanType") is not None else None,
            "netDisbursalAmount": obj.get("netDisbursalAmount"),
            "numberOfRepayments": obj.get("numberOfRepayments"),
            "overpaidOnDate": obj.get("overpaidOnDate"),
            "principal": obj.get("principal"),
            "proposedPrincipal": obj.get("proposedPrincipal"),
            "repaymentEvery": obj.get("repaymentEvery"),
            "repaymentFrequencyType": GetLoansLoanIdRepaymentFrequencyType.from_dict(obj["repaymentFrequencyType"]) if obj.get("repaymentFrequencyType") is not None else None,
            "repaymentSchedule": GetLoansLoanIdRepaymentSchedule.from_dict(obj["repaymentSchedule"]) if obj.get("repaymentSchedule") is not None else None,
            "status": GetLoansLoanIdStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "summary": GetLoansLoanIdSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "termFrequency": obj.get("termFrequency"),
            "termPeriodFrequencyType": GetLoansLoanIdTermPeriodFrequencyType.from_dict(obj["termPeriodFrequencyType"]) if obj.get("termPeriodFrequencyType") is not None else None,
            "timeline": GetLoansLoanIdTimeline.from_dict(obj["timeline"]) if obj.get("timeline") is not None else None,
            "totalOverpaid": obj.get("totalOverpaid"),
            "transactionProcessingStrategyCode": obj.get("transactionProcessingStrategyCode"),
            "transactions": [GetLoansLoanIdTransactions.from_dict(_item) for _item in obj["transactions"]] if obj.get("transactions") is not None else None
        })
        return _obj


