# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.get_fixed_deposit_accounts_account_chart import GetFixedDepositAccountsAccountChart
from fineract_client.models.get_fixed_deposit_accounts_account_id_currency import GetFixedDepositAccountsAccountIdCurrency
from fineract_client.models.get_fixed_deposit_accounts_account_id_summary import GetFixedDepositAccountsAccountIdSummary
from fineract_client.models.get_fixed_deposit_accounts_deposit_period_frequency import GetFixedDepositAccountsDepositPeriodFrequency
from fineract_client.models.get_fixed_deposit_accounts_interest_calculation_days_in_year_type import GetFixedDepositAccountsInterestCalculationDaysInYearType
from fineract_client.models.get_fixed_deposit_accounts_interest_calculation_type import GetFixedDepositAccountsInterestCalculationType
from fineract_client.models.get_fixed_deposit_accounts_interest_compounding_period_type import GetFixedDepositAccountsInterestCompoundingPeriodType
from fineract_client.models.get_fixed_deposit_accounts_interest_posting_period_type import GetFixedDepositAccountsInterestPostingPeriodType
from fineract_client.models.get_fixed_deposit_accounts_max_deposit_term_type import GetFixedDepositAccountsMaxDepositTermType
from fineract_client.models.get_fixed_deposit_accounts_min_deposit_term_type import GetFixedDepositAccountsMinDepositTermType
from fineract_client.models.get_fixed_deposit_accounts_status import GetFixedDepositAccountsStatus
from fineract_client.models.get_fixed_deposit_accounts_timeline import GetFixedDepositAccountsTimeline
from typing import Optional, Set
from typing_extensions import Self

class GetFixedDepositAccountsAccountIdResponse(BaseModel):
    """
    GetFixedDepositAccountsAccountIdResponse
    """ # noqa: E501
    account_chart: Optional[GetFixedDepositAccountsAccountChart] = Field(default=None, alias="accountChart")
    account_no: Optional[StrictInt] = Field(default=None, alias="accountNo")
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    client_name: Optional[StrictStr] = Field(default=None, alias="clientName")
    currency: Optional[GetFixedDepositAccountsAccountIdCurrency] = None
    deposit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="depositAmount")
    deposit_period: Optional[StrictInt] = Field(default=None, alias="depositPeriod")
    deposit_period_frequency: Optional[GetFixedDepositAccountsDepositPeriodFrequency] = Field(default=None, alias="depositPeriodFrequency")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    field_officer_id: Optional[StrictInt] = Field(default=None, alias="fieldOfficerId")
    id: Optional[StrictInt] = None
    interest_calculation_days_in_year_type: Optional[GetFixedDepositAccountsInterestCalculationDaysInYearType] = Field(default=None, alias="interestCalculationDaysInYearType")
    interest_calculation_type: Optional[GetFixedDepositAccountsInterestCalculationType] = Field(default=None, alias="interestCalculationType")
    interest_compounding_period_type: Optional[GetFixedDepositAccountsInterestCompoundingPeriodType] = Field(default=None, alias="interestCompoundingPeriodType")
    interest_free_period_applicable: Optional[StrictBool] = Field(default=None, alias="interestFreePeriodApplicable")
    interest_posting_period_type: Optional[GetFixedDepositAccountsInterestPostingPeriodType] = Field(default=None, alias="interestPostingPeriodType")
    maturity_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maturityAmount")
    maturity_date: Optional[date] = Field(default=None, alias="maturityDate")
    max_deposit_term: Optional[StrictInt] = Field(default=None, alias="maxDepositTerm")
    max_deposit_term_type: Optional[GetFixedDepositAccountsMaxDepositTermType] = Field(default=None, alias="maxDepositTermType")
    min_deposit_term: Optional[StrictInt] = Field(default=None, alias="minDepositTerm")
    min_deposit_term_type: Optional[GetFixedDepositAccountsMinDepositTermType] = Field(default=None, alias="minDepositTermType")
    pre_closure_penal_applicable: Optional[StrictBool] = Field(default=None, alias="preClosurePenalApplicable")
    savings_product_id: Optional[StrictInt] = Field(default=None, alias="savingsProductId")
    savings_product_name: Optional[StrictStr] = Field(default=None, alias="savingsProductName")
    status: Optional[GetFixedDepositAccountsStatus] = None
    summary: Optional[GetFixedDepositAccountsAccountIdSummary] = None
    timeline: Optional[GetFixedDepositAccountsTimeline] = None
    __properties: ClassVar[List[str]] = ["accountChart", "accountNo", "clientId", "clientName", "currency", "depositAmount", "depositPeriod", "depositPeriodFrequency", "externalId", "fieldOfficerId", "id", "interestCalculationDaysInYearType", "interestCalculationType", "interestCompoundingPeriodType", "interestFreePeriodApplicable", "interestPostingPeriodType", "maturityAmount", "maturityDate", "maxDepositTerm", "maxDepositTermType", "minDepositTerm", "minDepositTermType", "preClosurePenalApplicable", "savingsProductId", "savingsProductName", "status", "summary", "timeline"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetFixedDepositAccountsAccountIdResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_chart
        if self.account_chart:
            _dict['accountChart'] = self.account_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deposit_period_frequency
        if self.deposit_period_frequency:
            _dict['depositPeriodFrequency'] = self.deposit_period_frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_days_in_year_type
        if self.interest_calculation_days_in_year_type:
            _dict['interestCalculationDaysInYearType'] = self.interest_calculation_days_in_year_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_type
        if self.interest_calculation_type:
            _dict['interestCalculationType'] = self.interest_calculation_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_compounding_period_type
        if self.interest_compounding_period_type:
            _dict['interestCompoundingPeriodType'] = self.interest_compounding_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_posting_period_type
        if self.interest_posting_period_type:
            _dict['interestPostingPeriodType'] = self.interest_posting_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_deposit_term_type
        if self.max_deposit_term_type:
            _dict['maxDepositTermType'] = self.max_deposit_term_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_deposit_term_type
        if self.min_deposit_term_type:
            _dict['minDepositTermType'] = self.min_deposit_term_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeline
        if self.timeline:
            _dict['timeline'] = self.timeline.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetFixedDepositAccountsAccountIdResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountChart": GetFixedDepositAccountsAccountChart.from_dict(obj["accountChart"]) if obj.get("accountChart") is not None else None,
            "accountNo": obj.get("accountNo"),
            "clientId": obj.get("clientId"),
            "clientName": obj.get("clientName"),
            "currency": GetFixedDepositAccountsAccountIdCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "depositAmount": obj.get("depositAmount"),
            "depositPeriod": obj.get("depositPeriod"),
            "depositPeriodFrequency": GetFixedDepositAccountsDepositPeriodFrequency.from_dict(obj["depositPeriodFrequency"]) if obj.get("depositPeriodFrequency") is not None else None,
            "externalId": obj.get("externalId"),
            "fieldOfficerId": obj.get("fieldOfficerId"),
            "id": obj.get("id"),
            "interestCalculationDaysInYearType": GetFixedDepositAccountsInterestCalculationDaysInYearType.from_dict(obj["interestCalculationDaysInYearType"]) if obj.get("interestCalculationDaysInYearType") is not None else None,
            "interestCalculationType": GetFixedDepositAccountsInterestCalculationType.from_dict(obj["interestCalculationType"]) if obj.get("interestCalculationType") is not None else None,
            "interestCompoundingPeriodType": GetFixedDepositAccountsInterestCompoundingPeriodType.from_dict(obj["interestCompoundingPeriodType"]) if obj.get("interestCompoundingPeriodType") is not None else None,
            "interestFreePeriodApplicable": obj.get("interestFreePeriodApplicable"),
            "interestPostingPeriodType": GetFixedDepositAccountsInterestPostingPeriodType.from_dict(obj["interestPostingPeriodType"]) if obj.get("interestPostingPeriodType") is not None else None,
            "maturityAmount": obj.get("maturityAmount"),
            "maturityDate": obj.get("maturityDate"),
            "maxDepositTerm": obj.get("maxDepositTerm"),
            "maxDepositTermType": GetFixedDepositAccountsMaxDepositTermType.from_dict(obj["maxDepositTermType"]) if obj.get("maxDepositTermType") is not None else None,
            "minDepositTerm": obj.get("minDepositTerm"),
            "minDepositTermType": GetFixedDepositAccountsMinDepositTermType.from_dict(obj["minDepositTermType"]) if obj.get("minDepositTermType") is not None else None,
            "preClosurePenalApplicable": obj.get("preClosurePenalApplicable"),
            "savingsProductId": obj.get("savingsProductId"),
            "savingsProductName": obj.get("savingsProductName"),
            "status": GetFixedDepositAccountsStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "summary": GetFixedDepositAccountsAccountIdSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "timeline": GetFixedDepositAccountsTimeline.from_dict(obj["timeline"]) if obj.get("timeline") is not None else None
        })
        return _obj


