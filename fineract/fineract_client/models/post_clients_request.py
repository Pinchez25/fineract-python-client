# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.post_clients_address_request import PostClientsAddressRequest
from fineract_client.models.post_clients_datatable import PostClientsDatatable
from typing import Optional, Set
from typing_extensions import Self

class PostClientsRequest(BaseModel):
    """
    PostClientsRequest
    """ # noqa: E501
    activation_date: Optional[StrictStr] = Field(default=None, alias="activationDate")
    active: Optional[StrictBool] = None
    address: Optional[List[PostClientsAddressRequest]] = Field(default=None, description="Address requests")
    datatables: Optional[List[PostClientsDatatable]] = Field(default=None, description="List of PostClientsDatatable")
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    date_of_birth: Optional[date] = Field(default=None, alias="dateOfBirth")
    email_address: Optional[StrictStr] = Field(default=None, alias="emailAddress")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    firstname: Optional[StrictStr] = None
    fullname: Optional[StrictStr] = None
    group_id: Optional[StrictInt] = Field(default=None, alias="groupId")
    lastname: Optional[StrictStr] = None
    legal_form_id: Optional[StrictInt] = Field(default=None, alias="legalFormId")
    locale: Optional[StrictStr] = None
    middlename: Optional[StrictStr] = None
    mobile_no: Optional[StrictStr] = Field(default=None, alias="mobileNo")
    office_id: Optional[StrictInt] = Field(default=None, alias="officeId")
    __properties: ClassVar[List[str]] = ["activationDate", "active", "address", "datatables", "dateFormat", "dateOfBirth", "emailAddress", "externalId", "firstname", "fullname", "groupId", "lastname", "legalFormId", "locale", "middlename", "mobileNo", "officeId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostClientsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in address (list)
        _items = []
        if self.address:
            for _item_address in self.address:
                if _item_address:
                    _items.append(_item_address.to_dict())
            _dict['address'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in datatables (list)
        _items = []
        if self.datatables:
            for _item_datatables in self.datatables:
                if _item_datatables:
                    _items.append(_item_datatables.to_dict())
            _dict['datatables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostClientsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activationDate": obj.get("activationDate"),
            "active": obj.get("active"),
            "address": [PostClientsAddressRequest.from_dict(_item) for _item in obj["address"]] if obj.get("address") is not None else None,
            "datatables": [PostClientsDatatable.from_dict(_item) for _item in obj["datatables"]] if obj.get("datatables") is not None else None,
            "dateFormat": obj.get("dateFormat"),
            "dateOfBirth": obj.get("dateOfBirth"),
            "emailAddress": obj.get("emailAddress"),
            "externalId": obj.get("externalId"),
            "firstname": obj.get("firstname"),
            "fullname": obj.get("fullname"),
            "groupId": obj.get("groupId"),
            "lastname": obj.get("lastname"),
            "legalFormId": obj.get("legalFormId"),
            "locale": obj.get("locale"),
            "middlename": obj.get("middlename"),
            "mobileNo": obj.get("mobileNo"),
            "officeId": obj.get("officeId")
        })
        return _obj


