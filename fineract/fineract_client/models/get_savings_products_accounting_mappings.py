# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_savings_products_gl_account import GetSavingsProductsGlAccount
from typing import Optional, Set
from typing_extensions import Self

class GetSavingsProductsAccountingMappings(BaseModel):
    """
    GetSavingsProductsAccountingMappings
    """ # noqa: E501
    fee_receivable_account: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="feeReceivableAccount")
    income_from_fee_account: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="incomeFromFeeAccount")
    income_from_interest: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="incomeFromInterest")
    income_from_penalty_account: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="incomeFromPenaltyAccount")
    interest_on_savings_account: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="interestOnSavingsAccount")
    interest_payable_account: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="interestPayableAccount")
    overdraft_portfolio_control: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="overdraftPortfolioControl")
    penalty_receivable_account: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="penaltyReceivableAccount")
    savings_control_account: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="savingsControlAccount")
    savings_reference_account: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="savingsReferenceAccount")
    transfers_in_suspense_account: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="transfersInSuspenseAccount")
    write_off_account: Optional[GetSavingsProductsGlAccount] = Field(default=None, alias="writeOffAccount")
    __properties: ClassVar[List[str]] = ["feeReceivableAccount", "incomeFromFeeAccount", "incomeFromInterest", "incomeFromPenaltyAccount", "interestOnSavingsAccount", "interestPayableAccount", "overdraftPortfolioControl", "penaltyReceivableAccount", "savingsControlAccount", "savingsReferenceAccount", "transfersInSuspenseAccount", "writeOffAccount"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSavingsProductsAccountingMappings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fee_receivable_account
        if self.fee_receivable_account:
            _dict['feeReceivableAccount'] = self.fee_receivable_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_fee_account
        if self.income_from_fee_account:
            _dict['incomeFromFeeAccount'] = self.income_from_fee_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_interest
        if self.income_from_interest:
            _dict['incomeFromInterest'] = self.income_from_interest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income_from_penalty_account
        if self.income_from_penalty_account:
            _dict['incomeFromPenaltyAccount'] = self.income_from_penalty_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_on_savings_account
        if self.interest_on_savings_account:
            _dict['interestOnSavingsAccount'] = self.interest_on_savings_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_payable_account
        if self.interest_payable_account:
            _dict['interestPayableAccount'] = self.interest_payable_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of overdraft_portfolio_control
        if self.overdraft_portfolio_control:
            _dict['overdraftPortfolioControl'] = self.overdraft_portfolio_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of penalty_receivable_account
        if self.penalty_receivable_account:
            _dict['penaltyReceivableAccount'] = self.penalty_receivable_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of savings_control_account
        if self.savings_control_account:
            _dict['savingsControlAccount'] = self.savings_control_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of savings_reference_account
        if self.savings_reference_account:
            _dict['savingsReferenceAccount'] = self.savings_reference_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfers_in_suspense_account
        if self.transfers_in_suspense_account:
            _dict['transfersInSuspenseAccount'] = self.transfers_in_suspense_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of write_off_account
        if self.write_off_account:
            _dict['writeOffAccount'] = self.write_off_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSavingsProductsAccountingMappings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feeReceivableAccount": GetSavingsProductsGlAccount.from_dict(obj["feeReceivableAccount"]) if obj.get("feeReceivableAccount") is not None else None,
            "incomeFromFeeAccount": GetSavingsProductsGlAccount.from_dict(obj["incomeFromFeeAccount"]) if obj.get("incomeFromFeeAccount") is not None else None,
            "incomeFromInterest": GetSavingsProductsGlAccount.from_dict(obj["incomeFromInterest"]) if obj.get("incomeFromInterest") is not None else None,
            "incomeFromPenaltyAccount": GetSavingsProductsGlAccount.from_dict(obj["incomeFromPenaltyAccount"]) if obj.get("incomeFromPenaltyAccount") is not None else None,
            "interestOnSavingsAccount": GetSavingsProductsGlAccount.from_dict(obj["interestOnSavingsAccount"]) if obj.get("interestOnSavingsAccount") is not None else None,
            "interestPayableAccount": GetSavingsProductsGlAccount.from_dict(obj["interestPayableAccount"]) if obj.get("interestPayableAccount") is not None else None,
            "overdraftPortfolioControl": GetSavingsProductsGlAccount.from_dict(obj["overdraftPortfolioControl"]) if obj.get("overdraftPortfolioControl") is not None else None,
            "penaltyReceivableAccount": GetSavingsProductsGlAccount.from_dict(obj["penaltyReceivableAccount"]) if obj.get("penaltyReceivableAccount") is not None else None,
            "savingsControlAccount": GetSavingsProductsGlAccount.from_dict(obj["savingsControlAccount"]) if obj.get("savingsControlAccount") is not None else None,
            "savingsReferenceAccount": GetSavingsProductsGlAccount.from_dict(obj["savingsReferenceAccount"]) if obj.get("savingsReferenceAccount") is not None else None,
            "transfersInSuspenseAccount": GetSavingsProductsGlAccount.from_dict(obj["transfersInSuspenseAccount"]) if obj.get("transfersInSuspenseAccount") is not None else None,
            "writeOffAccount": GetSavingsProductsGlAccount.from_dict(obj["writeOffAccount"]) if obj.get("writeOffAccount") is not None else None
        })
        return _obj


