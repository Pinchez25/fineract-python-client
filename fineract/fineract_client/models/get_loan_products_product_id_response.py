# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.advanced_payment_data import AdvancedPaymentData
from fineract_client.models.credit_allocation_data import CreditAllocationData
from fineract_client.models.enum_option_data import EnumOptionData
from fineract_client.models.get_delinquency_buckets_response import GetDelinquencyBucketsResponse
from fineract_client.models.get_loan_accounting_mappings import GetLoanAccountingMappings
from fineract_client.models.get_loan_fee_to_income_account_mappings import GetLoanFeeToIncomeAccountMappings
from fineract_client.models.get_loan_payment_channel_to_fund_source_mappings import GetLoanPaymentChannelToFundSourceMappings
from fineract_client.models.get_loan_products_accounting_rule import GetLoanProductsAccountingRule
from fineract_client.models.get_loan_products_amortization_type import GetLoanProductsAmortizationType
from fineract_client.models.get_loan_products_currency import GetLoanProductsCurrency
from fineract_client.models.get_loan_products_interest_rate_frequency_type import GetLoanProductsInterestRateFrequencyType
from fineract_client.models.get_loan_products_interest_recalculation_data import GetLoanProductsInterestRecalculationData
from fineract_client.models.get_loan_products_interest_template_type import GetLoanProductsInterestTemplateType
from fineract_client.models.get_loan_products_principal_variations_for_borrower_cycle import GetLoanProductsPrincipalVariationsForBorrowerCycle
from fineract_client.models.get_loan_products_repayment_frequency_type import GetLoanProductsRepaymentFrequencyType
from fineract_client.models.get_loan_products_repayment_start_date_type import GetLoanProductsRepaymentStartDateType
from fineract_client.models.get_loans_products_interest_calculation_period_type import GetLoansProductsInterestCalculationPeriodType
from fineract_client.models.string_enum_option_data import StringEnumOptionData
from typing import Optional, Set
from typing_extensions import Self

class GetLoanProductsProductIdResponse(BaseModel):
    """
    GetLoanProductsProductIdResponse
    """ # noqa: E501
    accounting_mappings: Optional[GetLoanAccountingMappings] = Field(default=None, alias="accountingMappings")
    accounting_rule: Optional[GetLoanProductsAccountingRule] = Field(default=None, alias="accountingRule")
    allow_approved_disbursed_amounts_over_applied: Optional[StrictBool] = Field(default=None, alias="allowApprovedDisbursedAmountsOverApplied")
    allow_partial_period_interest_calculation: Optional[StrictBool] = Field(default=None, alias="allowPartialPeriodInterestCalculation")
    allow_variable_installments: Optional[StrictBool] = Field(default=None, alias="allowVariableInstallments")
    amortization_type: Optional[GetLoanProductsAmortizationType] = Field(default=None, alias="amortizationType")
    annual_interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="annualInterestRate")
    can_define_installment_amount: Optional[StrictBool] = Field(default=None, alias="canDefineInstallmentAmount")
    can_use_for_topup: Optional[StrictBool] = Field(default=None, alias="canUseForTopup")
    charges: Optional[List[StrictInt]] = None
    credit_allocation: Optional[List[CreditAllocationData]] = Field(default=None, alias="creditAllocation")
    currency: Optional[GetLoanProductsCurrency] = None
    delinquency_bucket: Optional[GetDelinquencyBucketsResponse] = Field(default=None, alias="delinquencyBucket")
    delinquency_bucket_options: Optional[List[GetDelinquencyBucketsResponse]] = Field(default=None, alias="delinquencyBucketOptions")
    description: Optional[StrictStr] = None
    disallow_expected_disbursements: Optional[StrictBool] = Field(default=None, alias="disallowExpectedDisbursements")
    disbursed_amount_percentage_for_down_payment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="disbursedAmountPercentageForDownPayment")
    due_days_for_repayment_event: Optional[StrictInt] = Field(default=None, alias="dueDaysForRepaymentEvent")
    enable_accrual_activity_posting: Optional[StrictBool] = Field(default=None, alias="enableAccrualActivityPosting")
    enable_auto_repayment_for_down_payment: Optional[StrictBool] = Field(default=None, alias="enableAutoRepaymentForDownPayment")
    enable_down_payment: Optional[StrictBool] = Field(default=None, alias="enableDownPayment")
    enable_installment_level_delinquency: Optional[StrictBool] = Field(default=None, alias="enableInstallmentLevelDelinquency")
    fee_to_income_account_mappings: Optional[List[GetLoanFeeToIncomeAccountMappings]] = Field(default=None, alias="feeToIncomeAccountMappings")
    fixed_length: Optional[StrictInt] = Field(default=None, alias="fixedLength")
    fixed_principal_percentage_per_installment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fixedPrincipalPercentagePerInstallment")
    id: Optional[StrictInt] = None
    in_arrears_tolerance: Optional[StrictInt] = Field(default=None, alias="inArrearsTolerance")
    include_in_borrower_cycle: Optional[StrictBool] = Field(default=None, alias="includeInBorrowerCycle")
    interest_calculation_period_type: Optional[GetLoansProductsInterestCalculationPeriodType] = Field(default=None, alias="interestCalculationPeriodType")
    interest_rate_frequency_type: Optional[GetLoanProductsInterestRateFrequencyType] = Field(default=None, alias="interestRateFrequencyType")
    interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestRatePerPeriod")
    interest_rate_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="interestRateVariationsForBorrowerCycle")
    interest_recalculation_data: Optional[GetLoanProductsInterestRecalculationData] = Field(default=None, alias="interestRecalculationData")
    interest_type: Optional[GetLoanProductsInterestTemplateType] = Field(default=None, alias="interestType")
    is_floating_interest_rate_calculation_allowed: Optional[StrictBool] = Field(default=None, alias="isFloatingInterestRateCalculationAllowed")
    is_interest_recalculation_enabled: Optional[StrictBool] = Field(default=None, alias="isInterestRecalculationEnabled")
    is_linked_to_floating_interest_rates: Optional[StrictBool] = Field(default=None, alias="isLinkedToFloatingInterestRates")
    is_rates_enabled: Optional[StrictBool] = Field(default=None, alias="isRatesEnabled")
    loan_schedule_processing_type: Optional[EnumOptionData] = Field(default=None, alias="loanScheduleProcessingType")
    loan_schedule_type: Optional[EnumOptionData] = Field(default=None, alias="loanScheduleType")
    max_interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxInterestRatePerPeriod")
    max_number_of_repayments: Optional[StrictInt] = Field(default=None, alias="maxNumberOfRepayments")
    max_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxPrincipal")
    max_tranche_count: Optional[StrictInt] = Field(default=None, alias="maxTrancheCount")
    maximum_gap: Optional[StrictInt] = Field(default=None, alias="maximumGap")
    min_interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minInterestRatePerPeriod")
    min_number_of_repayments: Optional[StrictInt] = Field(default=None, alias="minNumberOfRepayments")
    min_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minPrincipal")
    minimum_gap: Optional[StrictInt] = Field(default=None, alias="minimumGap")
    multi_disburse_loan: Optional[StrictBool] = Field(default=None, alias="multiDisburseLoan")
    name: Optional[StrictStr] = None
    number_of_repayment_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="numberOfRepaymentVariationsForBorrowerCycle")
    number_of_repayments: Optional[StrictInt] = Field(default=None, alias="numberOfRepayments")
    outstanding_loan_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="outstandingLoanBalance")
    over_applied_calculation_type: Optional[StrictStr] = Field(default=None, alias="overAppliedCalculationType")
    over_due_days_for_repayment_event: Optional[StrictInt] = Field(default=None, alias="overDueDaysForRepaymentEvent")
    overdue_days_for_npa: Optional[StrictInt] = Field(default=None, alias="overdueDaysForNPA")
    payment_allocation: Optional[List[AdvancedPaymentData]] = Field(default=None, alias="paymentAllocation")
    payment_channel_to_fund_source_mappings: Optional[List[GetLoanPaymentChannelToFundSourceMappings]] = Field(default=None, alias="paymentChannelToFundSourceMappings")
    principal: Optional[Union[StrictFloat, StrictInt]] = None
    principal_threshold_for_last_instalment: Optional[StrictInt] = Field(default=None, alias="principalThresholdForLastInstalment")
    products_principal_variations_for_borrower_cycle: Optional[List[GetLoanProductsPrincipalVariationsForBorrowerCycle]] = Field(default=None, alias="productsPrincipalVariationsForBorrowerCycle")
    repayment_every: Optional[StrictInt] = Field(default=None, alias="repaymentEvery")
    repayment_frequency_type: Optional[GetLoanProductsRepaymentFrequencyType] = Field(default=None, alias="repaymentFrequencyType")
    repayment_start_date_type: Optional[GetLoanProductsRepaymentStartDateType] = Field(default=None, alias="repaymentStartDateType")
    short_name: Optional[StrictStr] = Field(default=None, alias="shortName")
    status: Optional[StrictStr] = None
    supported_interest_refund_types: Optional[List[StringEnumOptionData]] = Field(default=None, alias="supportedInterestRefundTypes")
    transaction_processing_strategy_code: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategyCode")
    transaction_processing_strategy_name: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategyName")
    use_borrower_cycle: Optional[StrictBool] = Field(default=None, alias="useBorrowerCycle")
    __properties: ClassVar[List[str]] = ["accountingMappings", "accountingRule", "allowApprovedDisbursedAmountsOverApplied", "allowPartialPeriodInterestCalculation", "allowVariableInstallments", "amortizationType", "annualInterestRate", "canDefineInstallmentAmount", "canUseForTopup", "charges", "creditAllocation", "currency", "delinquencyBucket", "delinquencyBucketOptions", "description", "disallowExpectedDisbursements", "disbursedAmountPercentageForDownPayment", "dueDaysForRepaymentEvent", "enableAccrualActivityPosting", "enableAutoRepaymentForDownPayment", "enableDownPayment", "enableInstallmentLevelDelinquency", "feeToIncomeAccountMappings", "fixedLength", "fixedPrincipalPercentagePerInstallment", "id", "inArrearsTolerance", "includeInBorrowerCycle", "interestCalculationPeriodType", "interestRateFrequencyType", "interestRatePerPeriod", "interestRateVariationsForBorrowerCycle", "interestRecalculationData", "interestType", "isFloatingInterestRateCalculationAllowed", "isInterestRecalculationEnabled", "isLinkedToFloatingInterestRates", "isRatesEnabled", "loanScheduleProcessingType", "loanScheduleType", "maxInterestRatePerPeriod", "maxNumberOfRepayments", "maxPrincipal", "maxTrancheCount", "maximumGap", "minInterestRatePerPeriod", "minNumberOfRepayments", "minPrincipal", "minimumGap", "multiDisburseLoan", "name", "numberOfRepaymentVariationsForBorrowerCycle", "numberOfRepayments", "outstandingLoanBalance", "overAppliedCalculationType", "overDueDaysForRepaymentEvent", "overdueDaysForNPA", "paymentAllocation", "paymentChannelToFundSourceMappings", "principal", "principalThresholdForLastInstalment", "productsPrincipalVariationsForBorrowerCycle", "repaymentEvery", "repaymentFrequencyType", "repaymentStartDateType", "shortName", "status", "supportedInterestRefundTypes", "transactionProcessingStrategyCode", "transactionProcessingStrategyName", "useBorrowerCycle"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoanProductsProductIdResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accounting_mappings
        if self.accounting_mappings:
            _dict['accountingMappings'] = self.accounting_mappings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accounting_rule
        if self.accounting_rule:
            _dict['accountingRule'] = self.accounting_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amortization_type
        if self.amortization_type:
            _dict['amortizationType'] = self.amortization_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in credit_allocation (list)
        _items = []
        if self.credit_allocation:
            for _item in self.credit_allocation:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditAllocation'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delinquency_bucket
        if self.delinquency_bucket:
            _dict['delinquencyBucket'] = self.delinquency_bucket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in delinquency_bucket_options (list)
        _items = []
        if self.delinquency_bucket_options:
            for _item in self.delinquency_bucket_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['delinquencyBucketOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fee_to_income_account_mappings (list)
        _items = []
        if self.fee_to_income_account_mappings:
            for _item in self.fee_to_income_account_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['feeToIncomeAccountMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_period_type
        if self.interest_calculation_period_type:
            _dict['interestCalculationPeriodType'] = self.interest_calculation_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_rate_frequency_type
        if self.interest_rate_frequency_type:
            _dict['interestRateFrequencyType'] = self.interest_rate_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_recalculation_data
        if self.interest_recalculation_data:
            _dict['interestRecalculationData'] = self.interest_recalculation_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_type
        if self.interest_type:
            _dict['interestType'] = self.interest_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan_schedule_processing_type
        if self.loan_schedule_processing_type:
            _dict['loanScheduleProcessingType'] = self.loan_schedule_processing_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan_schedule_type
        if self.loan_schedule_type:
            _dict['loanScheduleType'] = self.loan_schedule_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_allocation (list)
        _items = []
        if self.payment_allocation:
            for _item in self.payment_allocation:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentAllocation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_channel_to_fund_source_mappings (list)
        _items = []
        if self.payment_channel_to_fund_source_mappings:
            for _item in self.payment_channel_to_fund_source_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentChannelToFundSourceMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in products_principal_variations_for_borrower_cycle (list)
        _items = []
        if self.products_principal_variations_for_borrower_cycle:
            for _item in self.products_principal_variations_for_borrower_cycle:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productsPrincipalVariationsForBorrowerCycle'] = _items
        # override the default output from pydantic by calling `to_dict()` of repayment_frequency_type
        if self.repayment_frequency_type:
            _dict['repaymentFrequencyType'] = self.repayment_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repayment_start_date_type
        if self.repayment_start_date_type:
            _dict['repaymentStartDateType'] = self.repayment_start_date_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in supported_interest_refund_types (list)
        _items = []
        if self.supported_interest_refund_types:
            for _item in self.supported_interest_refund_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['supportedInterestRefundTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoanProductsProductIdResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountingMappings": GetLoanAccountingMappings.from_dict(obj["accountingMappings"]) if obj.get("accountingMappings") is not None else None,
            "accountingRule": GetLoanProductsAccountingRule.from_dict(obj["accountingRule"]) if obj.get("accountingRule") is not None else None,
            "allowApprovedDisbursedAmountsOverApplied": obj.get("allowApprovedDisbursedAmountsOverApplied"),
            "allowPartialPeriodInterestCalculation": obj.get("allowPartialPeriodInterestCalculation"),
            "allowVariableInstallments": obj.get("allowVariableInstallments"),
            "amortizationType": GetLoanProductsAmortizationType.from_dict(obj["amortizationType"]) if obj.get("amortizationType") is not None else None,
            "annualInterestRate": obj.get("annualInterestRate"),
            "canDefineInstallmentAmount": obj.get("canDefineInstallmentAmount"),
            "canUseForTopup": obj.get("canUseForTopup"),
            "charges": obj.get("charges"),
            "creditAllocation": [CreditAllocationData.from_dict(_item) for _item in obj["creditAllocation"]] if obj.get("creditAllocation") is not None else None,
            "currency": GetLoanProductsCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "delinquencyBucket": GetDelinquencyBucketsResponse.from_dict(obj["delinquencyBucket"]) if obj.get("delinquencyBucket") is not None else None,
            "delinquencyBucketOptions": [GetDelinquencyBucketsResponse.from_dict(_item) for _item in obj["delinquencyBucketOptions"]] if obj.get("delinquencyBucketOptions") is not None else None,
            "description": obj.get("description"),
            "disallowExpectedDisbursements": obj.get("disallowExpectedDisbursements"),
            "disbursedAmountPercentageForDownPayment": obj.get("disbursedAmountPercentageForDownPayment"),
            "dueDaysForRepaymentEvent": obj.get("dueDaysForRepaymentEvent"),
            "enableAccrualActivityPosting": obj.get("enableAccrualActivityPosting"),
            "enableAutoRepaymentForDownPayment": obj.get("enableAutoRepaymentForDownPayment"),
            "enableDownPayment": obj.get("enableDownPayment"),
            "enableInstallmentLevelDelinquency": obj.get("enableInstallmentLevelDelinquency"),
            "feeToIncomeAccountMappings": [GetLoanFeeToIncomeAccountMappings.from_dict(_item) for _item in obj["feeToIncomeAccountMappings"]] if obj.get("feeToIncomeAccountMappings") is not None else None,
            "fixedLength": obj.get("fixedLength"),
            "fixedPrincipalPercentagePerInstallment": obj.get("fixedPrincipalPercentagePerInstallment"),
            "id": obj.get("id"),
            "inArrearsTolerance": obj.get("inArrearsTolerance"),
            "includeInBorrowerCycle": obj.get("includeInBorrowerCycle"),
            "interestCalculationPeriodType": GetLoansProductsInterestCalculationPeriodType.from_dict(obj["interestCalculationPeriodType"]) if obj.get("interestCalculationPeriodType") is not None else None,
            "interestRateFrequencyType": GetLoanProductsInterestRateFrequencyType.from_dict(obj["interestRateFrequencyType"]) if obj.get("interestRateFrequencyType") is not None else None,
            "interestRatePerPeriod": obj.get("interestRatePerPeriod"),
            "interestRateVariationsForBorrowerCycle": obj.get("interestRateVariationsForBorrowerCycle"),
            "interestRecalculationData": GetLoanProductsInterestRecalculationData.from_dict(obj["interestRecalculationData"]) if obj.get("interestRecalculationData") is not None else None,
            "interestType": GetLoanProductsInterestTemplateType.from_dict(obj["interestType"]) if obj.get("interestType") is not None else None,
            "isFloatingInterestRateCalculationAllowed": obj.get("isFloatingInterestRateCalculationAllowed"),
            "isInterestRecalculationEnabled": obj.get("isInterestRecalculationEnabled"),
            "isLinkedToFloatingInterestRates": obj.get("isLinkedToFloatingInterestRates"),
            "isRatesEnabled": obj.get("isRatesEnabled"),
            "loanScheduleProcessingType": EnumOptionData.from_dict(obj["loanScheduleProcessingType"]) if obj.get("loanScheduleProcessingType") is not None else None,
            "loanScheduleType": EnumOptionData.from_dict(obj["loanScheduleType"]) if obj.get("loanScheduleType") is not None else None,
            "maxInterestRatePerPeriod": obj.get("maxInterestRatePerPeriod"),
            "maxNumberOfRepayments": obj.get("maxNumberOfRepayments"),
            "maxPrincipal": obj.get("maxPrincipal"),
            "maxTrancheCount": obj.get("maxTrancheCount"),
            "maximumGap": obj.get("maximumGap"),
            "minInterestRatePerPeriod": obj.get("minInterestRatePerPeriod"),
            "minNumberOfRepayments": obj.get("minNumberOfRepayments"),
            "minPrincipal": obj.get("minPrincipal"),
            "minimumGap": obj.get("minimumGap"),
            "multiDisburseLoan": obj.get("multiDisburseLoan"),
            "name": obj.get("name"),
            "numberOfRepaymentVariationsForBorrowerCycle": obj.get("numberOfRepaymentVariationsForBorrowerCycle"),
            "numberOfRepayments": obj.get("numberOfRepayments"),
            "outstandingLoanBalance": obj.get("outstandingLoanBalance"),
            "overAppliedCalculationType": obj.get("overAppliedCalculationType"),
            "overDueDaysForRepaymentEvent": obj.get("overDueDaysForRepaymentEvent"),
            "overdueDaysForNPA": obj.get("overdueDaysForNPA"),
            "paymentAllocation": [AdvancedPaymentData.from_dict(_item) for _item in obj["paymentAllocation"]] if obj.get("paymentAllocation") is not None else None,
            "paymentChannelToFundSourceMappings": [GetLoanPaymentChannelToFundSourceMappings.from_dict(_item) for _item in obj["paymentChannelToFundSourceMappings"]] if obj.get("paymentChannelToFundSourceMappings") is not None else None,
            "principal": obj.get("principal"),
            "principalThresholdForLastInstalment": obj.get("principalThresholdForLastInstalment"),
            "productsPrincipalVariationsForBorrowerCycle": [GetLoanProductsPrincipalVariationsForBorrowerCycle.from_dict(_item) for _item in obj["productsPrincipalVariationsForBorrowerCycle"]] if obj.get("productsPrincipalVariationsForBorrowerCycle") is not None else None,
            "repaymentEvery": obj.get("repaymentEvery"),
            "repaymentFrequencyType": GetLoanProductsRepaymentFrequencyType.from_dict(obj["repaymentFrequencyType"]) if obj.get("repaymentFrequencyType") is not None else None,
            "repaymentStartDateType": GetLoanProductsRepaymentStartDateType.from_dict(obj["repaymentStartDateType"]) if obj.get("repaymentStartDateType") is not None else None,
            "shortName": obj.get("shortName"),
            "status": obj.get("status"),
            "supportedInterestRefundTypes": [StringEnumOptionData.from_dict(_item) for _item in obj["supportedInterestRefundTypes"]] if obj.get("supportedInterestRefundTypes") is not None else None,
            "transactionProcessingStrategyCode": obj.get("transactionProcessingStrategyCode"),
            "transactionProcessingStrategyName": obj.get("transactionProcessingStrategyName"),
            "useBorrowerCycle": obj.get("useBorrowerCycle")
        })
        return _obj


