# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.currency_data import CurrencyData
from typing import Optional, Set
from typing_extensions import Self

class SavingsAccountSummaryData(BaseModel):
    """
    SavingsAccountSummaryData
    """ # noqa: E501
    account_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="accountBalance")
    available_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="availableBalance")
    currency: Optional[CurrencyData] = None
    interest_not_posted: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestNotPosted")
    interest_posted_till_date: Optional[date] = Field(default=None, alias="interestPostedTillDate")
    last_interest_calculation_date: Optional[date] = Field(default=None, alias="lastInterestCalculationDate")
    prev_interest_posted_till_date: Optional[date] = Field(default=None, alias="prevInterestPostedTillDate")
    running_balance_on_interest_posting_till_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="runningBalanceOnInterestPostingTillDate")
    running_balance_on_pivot_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="runningBalanceOnPivotDate")
    total_annual_fees: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalAnnualFees")
    total_deposits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalDeposits")
    total_fee_charge: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalFeeCharge")
    total_interest_earned: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalInterestEarned")
    total_interest_posted: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalInterestPosted")
    total_overdraft_interest_derived: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalOverdraftInterestDerived")
    total_penalty_charge: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalPenaltyCharge")
    total_withdrawal_fees: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalWithdrawalFees")
    total_withdrawals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalWithdrawals")
    total_withhold_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalWithholdTax")
    __properties: ClassVar[List[str]] = ["accountBalance", "availableBalance", "currency", "interestNotPosted", "interestPostedTillDate", "lastInterestCalculationDate", "prevInterestPostedTillDate", "runningBalanceOnInterestPostingTillDate", "runningBalanceOnPivotDate", "totalAnnualFees", "totalDeposits", "totalFeeCharge", "totalInterestEarned", "totalInterestPosted", "totalOverdraftInterestDerived", "totalPenaltyCharge", "totalWithdrawalFees", "totalWithdrawals", "totalWithholdTax"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SavingsAccountSummaryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SavingsAccountSummaryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountBalance": obj.get("accountBalance"),
            "availableBalance": obj.get("availableBalance"),
            "currency": CurrencyData.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "interestNotPosted": obj.get("interestNotPosted"),
            "interestPostedTillDate": obj.get("interestPostedTillDate"),
            "lastInterestCalculationDate": obj.get("lastInterestCalculationDate"),
            "prevInterestPostedTillDate": obj.get("prevInterestPostedTillDate"),
            "runningBalanceOnInterestPostingTillDate": obj.get("runningBalanceOnInterestPostingTillDate"),
            "runningBalanceOnPivotDate": obj.get("runningBalanceOnPivotDate"),
            "totalAnnualFees": obj.get("totalAnnualFees"),
            "totalDeposits": obj.get("totalDeposits"),
            "totalFeeCharge": obj.get("totalFeeCharge"),
            "totalInterestEarned": obj.get("totalInterestEarned"),
            "totalInterestPosted": obj.get("totalInterestPosted"),
            "totalOverdraftInterestDerived": obj.get("totalOverdraftInterestDerived"),
            "totalPenaltyCharge": obj.get("totalPenaltyCharge"),
            "totalWithdrawalFees": obj.get("totalWithdrawalFees"),
            "totalWithdrawals": obj.get("totalWithdrawals"),
            "totalWithholdTax": obj.get("totalWithholdTax")
        })
        return _obj


