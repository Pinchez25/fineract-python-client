# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SavingsAccountTransactionEnumData(BaseModel):
    """
    SavingsAccountTransactionEnumData
    """ # noqa: E501
    accrual: Optional[StrictBool] = None
    amount_hold: Optional[StrictBool] = Field(default=None, alias="amountHold")
    amount_release: Optional[StrictBool] = Field(default=None, alias="amountRelease")
    annual_fee: Optional[StrictBool] = Field(default=None, alias="annualFee")
    approve_transfer: Optional[StrictBool] = Field(default=None, alias="approveTransfer")
    charge_transaction: Optional[StrictBool] = Field(default=None, alias="chargeTransaction")
    code: Optional[StrictStr] = None
    credit: Optional[StrictBool] = None
    debit: Optional[StrictBool] = None
    deposit: Optional[StrictBool] = None
    deposit_or_withdrawal: Optional[StrictBool] = Field(default=None, alias="depositOrWithdrawal")
    dividend_payout: Optional[StrictBool] = Field(default=None, alias="dividendPayout")
    entry_type: Optional[StrictStr] = Field(default=None, alias="entryType")
    escheat: Optional[StrictBool] = None
    fee_deduction: Optional[StrictBool] = Field(default=None, alias="feeDeduction")
    id: Optional[StrictInt] = None
    income_from_interest: Optional[StrictBool] = Field(default=None, alias="incomeFromInterest")
    initiate_transfer: Optional[StrictBool] = Field(default=None, alias="initiateTransfer")
    interest_posting: Optional[StrictBool] = Field(default=None, alias="interestPosting")
    over_draft_interest_posting: Optional[StrictBool] = Field(default=None, alias="overDraftInterestPosting")
    overdraft_fee: Optional[StrictBool] = Field(default=None, alias="overdraftFee")
    overdraft_interest: Optional[StrictBool] = Field(default=None, alias="overdraftInterest")
    pay_charge: Optional[StrictBool] = Field(default=None, alias="payCharge")
    reject_transfer: Optional[StrictBool] = Field(default=None, alias="rejectTransfer")
    transaction_type_enum: Optional[StrictStr] = Field(default=None, alias="transactionTypeEnum")
    value: Optional[StrictStr] = None
    withdraw_transfer: Optional[StrictBool] = Field(default=None, alias="withdrawTransfer")
    withdrawal: Optional[StrictBool] = None
    withdrawal_fee: Optional[StrictBool] = Field(default=None, alias="withdrawalFee")
    withhold_tax: Optional[StrictBool] = Field(default=None, alias="withholdTax")
    writtenoff: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["accrual", "amountHold", "amountRelease", "annualFee", "approveTransfer", "chargeTransaction", "code", "credit", "debit", "deposit", "depositOrWithdrawal", "dividendPayout", "entryType", "escheat", "feeDeduction", "id", "incomeFromInterest", "initiateTransfer", "interestPosting", "overDraftInterestPosting", "overdraftFee", "overdraftInterest", "payCharge", "rejectTransfer", "transactionTypeEnum", "value", "withdrawTransfer", "withdrawal", "withdrawalFee", "withholdTax", "writtenoff"]

    @field_validator('entry_type')
    def entry_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREDIT', 'DEBIT']):
            raise ValueError("must be one of enum values ('CREDIT', 'DEBIT')")
        return value

    @field_validator('transaction_type_enum')
    def transaction_type_enum_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVALID', 'DEPOSIT', 'WITHDRAWAL', 'INTEREST_POSTING', 'WITHDRAWAL_FEE', 'ANNUAL_FEE', 'WAIVE_CHARGES', 'PAY_CHARGE', 'DIVIDEND_PAYOUT', 'ACCRUAL', 'INITIATE_TRANSFER', 'APPROVE_TRANSFER', 'WITHDRAW_TRANSFER', 'REJECT_TRANSFER', 'WRITTEN_OFF', 'OVERDRAFT_INTEREST', 'WITHHOLD_TAX', 'ESCHEAT', 'AMOUNT_HOLD', 'AMOUNT_RELEASE']):
            raise ValueError("must be one of enum values ('INVALID', 'DEPOSIT', 'WITHDRAWAL', 'INTEREST_POSTING', 'WITHDRAWAL_FEE', 'ANNUAL_FEE', 'WAIVE_CHARGES', 'PAY_CHARGE', 'DIVIDEND_PAYOUT', 'ACCRUAL', 'INITIATE_TRANSFER', 'APPROVE_TRANSFER', 'WITHDRAW_TRANSFER', 'REJECT_TRANSFER', 'WRITTEN_OFF', 'OVERDRAFT_INTEREST', 'WITHHOLD_TAX', 'ESCHEAT', 'AMOUNT_HOLD', 'AMOUNT_RELEASE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SavingsAccountTransactionEnumData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SavingsAccountTransactionEnumData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accrual": obj.get("accrual"),
            "amountHold": obj.get("amountHold"),
            "amountRelease": obj.get("amountRelease"),
            "annualFee": obj.get("annualFee"),
            "approveTransfer": obj.get("approveTransfer"),
            "chargeTransaction": obj.get("chargeTransaction"),
            "code": obj.get("code"),
            "credit": obj.get("credit"),
            "debit": obj.get("debit"),
            "deposit": obj.get("deposit"),
            "depositOrWithdrawal": obj.get("depositOrWithdrawal"),
            "dividendPayout": obj.get("dividendPayout"),
            "entryType": obj.get("entryType"),
            "escheat": obj.get("escheat"),
            "feeDeduction": obj.get("feeDeduction"),
            "id": obj.get("id"),
            "incomeFromInterest": obj.get("incomeFromInterest"),
            "initiateTransfer": obj.get("initiateTransfer"),
            "interestPosting": obj.get("interestPosting"),
            "overDraftInterestPosting": obj.get("overDraftInterestPosting"),
            "overdraftFee": obj.get("overdraftFee"),
            "overdraftInterest": obj.get("overdraftInterest"),
            "payCharge": obj.get("payCharge"),
            "rejectTransfer": obj.get("rejectTransfer"),
            "transactionTypeEnum": obj.get("transactionTypeEnum"),
            "value": obj.get("value"),
            "withdrawTransfer": obj.get("withdrawTransfer"),
            "withdrawal": obj.get("withdrawal"),
            "withdrawalFee": obj.get("withdrawalFee"),
            "withholdTax": obj.get("withholdTax"),
            "writtenoff": obj.get("writtenoff")
        })
        return _obj


