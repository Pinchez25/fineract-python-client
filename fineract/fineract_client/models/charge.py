# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.charge_fee_on_month_day import ChargeFeeOnMonthDay
from fineract_client.models.gl_account import GLAccount
from fineract_client.models.payment_type import PaymentType
from fineract_client.models.tax_group import TaxGroup
from typing import Optional, Set
from typing_extensions import Self

class Charge(BaseModel):
    """
    Charge
    """ # noqa: E501
    account: Optional[GLAccount] = None
    active: Optional[StrictBool] = None
    allowed_client_charge_calculation_type: Optional[StrictBool] = Field(default=None, alias="allowedClientChargeCalculationType")
    allowed_client_charge_time: Optional[StrictBool] = Field(default=None, alias="allowedClientChargeTime")
    allowed_loan_charge_time: Optional[StrictBool] = Field(default=None, alias="allowedLoanChargeTime")
    allowed_savings_charge_calculation_type: Optional[StrictBool] = Field(default=None, alias="allowedSavingsChargeCalculationType")
    allowed_savings_charge_time: Optional[StrictBool] = Field(default=None, alias="allowedSavingsChargeTime")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    annual_fee: Optional[StrictBool] = Field(default=None, alias="annualFee")
    charge_calculation: Optional[StrictInt] = Field(default=None, alias="chargeCalculation")
    charge_payment_mode: Optional[StrictInt] = Field(default=None, alias="chargePaymentMode")
    charge_time_type: Optional[StrictInt] = Field(default=None, alias="chargeTimeType")
    client_charge: Optional[StrictBool] = Field(default=None, alias="clientCharge")
    currency_code: Optional[StrictStr] = Field(default=None, alias="currencyCode")
    deleted: Optional[StrictBool] = None
    disbursement_charge: Optional[StrictBool] = Field(default=None, alias="disbursementCharge")
    enable_free_withdrawal: Optional[StrictBool] = Field(default=None, alias="enableFreeWithdrawal")
    enable_payment_type: Optional[StrictBool] = Field(default=None, alias="enablePaymentType")
    fee_interval: Optional[StrictInt] = Field(default=None, alias="feeInterval")
    fee_on_month_day: Optional[ChargeFeeOnMonthDay] = Field(default=None, alias="feeOnMonthDay")
    frequency_free_withdrawal_charge: Optional[StrictInt] = Field(default=None, alias="frequencyFreeWithdrawalCharge")
    id: Optional[StrictInt] = None
    income_account_id: Optional[StrictInt] = Field(default=None, alias="incomeAccountId")
    loan_charge: Optional[StrictBool] = Field(default=None, alias="loanCharge")
    max_cap: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxCap")
    min_cap: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minCap")
    monthly_fee: Optional[StrictBool] = Field(default=None, alias="monthlyFee")
    name: Optional[StrictStr] = None
    new: Optional[StrictBool] = None
    overdue_installment: Optional[StrictBool] = Field(default=None, alias="overdueInstallment")
    payment_type: Optional[PaymentType] = Field(default=None, alias="paymentType")
    penalty: Optional[StrictBool] = None
    percentage_of_approved_amount: Optional[StrictBool] = Field(default=None, alias="percentageOfApprovedAmount")
    percentage_of_disbursement_amount: Optional[StrictBool] = Field(default=None, alias="percentageOfDisbursementAmount")
    restart_frequency: Optional[StrictInt] = Field(default=None, alias="restartFrequency")
    restart_frequency_enum: Optional[StrictInt] = Field(default=None, alias="restartFrequencyEnum")
    savings_charge: Optional[StrictBool] = Field(default=None, alias="savingsCharge")
    tax_group: Optional[TaxGroup] = Field(default=None, alias="taxGroup")
    __properties: ClassVar[List[str]] = ["account", "active", "allowedClientChargeCalculationType", "allowedClientChargeTime", "allowedLoanChargeTime", "allowedSavingsChargeCalculationType", "allowedSavingsChargeTime", "amount", "annualFee", "chargeCalculation", "chargePaymentMode", "chargeTimeType", "clientCharge", "currencyCode", "deleted", "disbursementCharge", "enableFreeWithdrawal", "enablePaymentType", "feeInterval", "feeOnMonthDay", "frequencyFreeWithdrawalCharge", "id", "incomeAccountId", "loanCharge", "maxCap", "minCap", "monthlyFee", "name", "new", "overdueInstallment", "paymentType", "penalty", "percentageOfApprovedAmount", "percentageOfDisbursementAmount", "restartFrequency", "restartFrequencyEnum", "savingsCharge", "taxGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Charge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee_on_month_day
        if self.fee_on_month_day:
            _dict['feeOnMonthDay'] = self.fee_on_month_day.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_type
        if self.payment_type:
            _dict['paymentType'] = self.payment_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_group
        if self.tax_group:
            _dict['taxGroup'] = self.tax_group.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Charge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": GLAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "active": obj.get("active"),
            "allowedClientChargeCalculationType": obj.get("allowedClientChargeCalculationType"),
            "allowedClientChargeTime": obj.get("allowedClientChargeTime"),
            "allowedLoanChargeTime": obj.get("allowedLoanChargeTime"),
            "allowedSavingsChargeCalculationType": obj.get("allowedSavingsChargeCalculationType"),
            "allowedSavingsChargeTime": obj.get("allowedSavingsChargeTime"),
            "amount": obj.get("amount"),
            "annualFee": obj.get("annualFee"),
            "chargeCalculation": obj.get("chargeCalculation"),
            "chargePaymentMode": obj.get("chargePaymentMode"),
            "chargeTimeType": obj.get("chargeTimeType"),
            "clientCharge": obj.get("clientCharge"),
            "currencyCode": obj.get("currencyCode"),
            "deleted": obj.get("deleted"),
            "disbursementCharge": obj.get("disbursementCharge"),
            "enableFreeWithdrawal": obj.get("enableFreeWithdrawal"),
            "enablePaymentType": obj.get("enablePaymentType"),
            "feeInterval": obj.get("feeInterval"),
            "feeOnMonthDay": ChargeFeeOnMonthDay.from_dict(obj["feeOnMonthDay"]) if obj.get("feeOnMonthDay") is not None else None,
            "frequencyFreeWithdrawalCharge": obj.get("frequencyFreeWithdrawalCharge"),
            "id": obj.get("id"),
            "incomeAccountId": obj.get("incomeAccountId"),
            "loanCharge": obj.get("loanCharge"),
            "maxCap": obj.get("maxCap"),
            "minCap": obj.get("minCap"),
            "monthlyFee": obj.get("monthlyFee"),
            "name": obj.get("name"),
            "new": obj.get("new"),
            "overdueInstallment": obj.get("overdueInstallment"),
            "paymentType": PaymentType.from_dict(obj["paymentType"]) if obj.get("paymentType") is not None else None,
            "penalty": obj.get("penalty"),
            "percentageOfApprovedAmount": obj.get("percentageOfApprovedAmount"),
            "percentageOfDisbursementAmount": obj.get("percentageOfDisbursementAmount"),
            "restartFrequency": obj.get("restartFrequency"),
            "restartFrequencyEnum": obj.get("restartFrequencyEnum"),
            "savingsCharge": obj.get("savingsCharge"),
            "taxGroup": TaxGroup.from_dict(obj["taxGroup"]) if obj.get("taxGroup") is not None else None
        })
        return _obj


