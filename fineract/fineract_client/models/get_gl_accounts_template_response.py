# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.code_value_data import CodeValueData
from fineract_client.models.enum_option_data import EnumOptionData
from fineract_client.models.gl_account_data import GLAccountData
from typing import Optional, Set
from typing_extensions import Self

class GetGLAccountsTemplateResponse(BaseModel):
    """
    GetGLAccountsTemplateResponse
    """ # noqa: E501
    account_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="accountTypeOptions")
    allowed_assets_tag_options: Optional[List[CodeValueData]] = Field(default=None, alias="allowedAssetsTagOptions")
    allowed_equity_tag_options: Optional[List[CodeValueData]] = Field(default=None, alias="allowedEquityTagOptions")
    allowed_expenses_tag_options: Optional[List[CodeValueData]] = Field(default=None, alias="allowedExpensesTagOptions")
    allowed_income_tag_options: Optional[List[CodeValueData]] = Field(default=None, alias="allowedIncomeTagOptions")
    allowed_liabilities_tag_options: Optional[List[CodeValueData]] = Field(default=None, alias="allowedLiabilitiesTagOptions")
    asset_header_account_options: Optional[List[GLAccountData]] = Field(default=None, alias="assetHeaderAccountOptions")
    disabled: Optional[StrictBool] = None
    equity_header_account_options: Optional[List[GLAccountData]] = Field(default=None, alias="equityHeaderAccountOptions")
    expense_header_account_options: Optional[List[GLAccountData]] = Field(default=None, alias="expenseHeaderAccountOptions")
    liability_header_account_options: Optional[List[GLAccountData]] = Field(default=None, alias="liabilityHeaderAccountOptions")
    manual_entries_allowed: Optional[StrictBool] = Field(default=None, alias="manualEntriesAllowed")
    type: Optional[EnumOptionData] = None
    usage: Optional[EnumOptionData] = None
    usage_options: Optional[List[EnumOptionData]] = Field(default=None, alias="usageOptions")
    __properties: ClassVar[List[str]] = ["accountTypeOptions", "allowedAssetsTagOptions", "allowedEquityTagOptions", "allowedExpensesTagOptions", "allowedIncomeTagOptions", "allowedLiabilitiesTagOptions", "assetHeaderAccountOptions", "disabled", "equityHeaderAccountOptions", "expenseHeaderAccountOptions", "liabilityHeaderAccountOptions", "manualEntriesAllowed", "type", "usage", "usageOptions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGLAccountsTemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in account_type_options (list)
        _items = []
        if self.account_type_options:
            for _item in self.account_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_assets_tag_options (list)
        _items = []
        if self.allowed_assets_tag_options:
            for _item in self.allowed_assets_tag_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedAssetsTagOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_equity_tag_options (list)
        _items = []
        if self.allowed_equity_tag_options:
            for _item in self.allowed_equity_tag_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedEquityTagOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_expenses_tag_options (list)
        _items = []
        if self.allowed_expenses_tag_options:
            for _item in self.allowed_expenses_tag_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedExpensesTagOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_income_tag_options (list)
        _items = []
        if self.allowed_income_tag_options:
            for _item in self.allowed_income_tag_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedIncomeTagOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_liabilities_tag_options (list)
        _items = []
        if self.allowed_liabilities_tag_options:
            for _item in self.allowed_liabilities_tag_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedLiabilitiesTagOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in asset_header_account_options (list)
        _items = []
        if self.asset_header_account_options:
            for _item in self.asset_header_account_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assetHeaderAccountOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in equity_header_account_options (list)
        _items = []
        if self.equity_header_account_options:
            for _item in self.equity_header_account_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['equityHeaderAccountOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in expense_header_account_options (list)
        _items = []
        if self.expense_header_account_options:
            for _item in self.expense_header_account_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['expenseHeaderAccountOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in liability_header_account_options (list)
        _items = []
        if self.liability_header_account_options:
            for _item in self.liability_header_account_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['liabilityHeaderAccountOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in usage_options (list)
        _items = []
        if self.usage_options:
            for _item in self.usage_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['usageOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGLAccountsTemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["accountTypeOptions"]] if obj.get("accountTypeOptions") is not None else None,
            "allowedAssetsTagOptions": [CodeValueData.from_dict(_item) for _item in obj["allowedAssetsTagOptions"]] if obj.get("allowedAssetsTagOptions") is not None else None,
            "allowedEquityTagOptions": [CodeValueData.from_dict(_item) for _item in obj["allowedEquityTagOptions"]] if obj.get("allowedEquityTagOptions") is not None else None,
            "allowedExpensesTagOptions": [CodeValueData.from_dict(_item) for _item in obj["allowedExpensesTagOptions"]] if obj.get("allowedExpensesTagOptions") is not None else None,
            "allowedIncomeTagOptions": [CodeValueData.from_dict(_item) for _item in obj["allowedIncomeTagOptions"]] if obj.get("allowedIncomeTagOptions") is not None else None,
            "allowedLiabilitiesTagOptions": [CodeValueData.from_dict(_item) for _item in obj["allowedLiabilitiesTagOptions"]] if obj.get("allowedLiabilitiesTagOptions") is not None else None,
            "assetHeaderAccountOptions": [GLAccountData.from_dict(_item) for _item in obj["assetHeaderAccountOptions"]] if obj.get("assetHeaderAccountOptions") is not None else None,
            "disabled": obj.get("disabled"),
            "equityHeaderAccountOptions": [GLAccountData.from_dict(_item) for _item in obj["equityHeaderAccountOptions"]] if obj.get("equityHeaderAccountOptions") is not None else None,
            "expenseHeaderAccountOptions": [GLAccountData.from_dict(_item) for _item in obj["expenseHeaderAccountOptions"]] if obj.get("expenseHeaderAccountOptions") is not None else None,
            "liabilityHeaderAccountOptions": [GLAccountData.from_dict(_item) for _item in obj["liabilityHeaderAccountOptions"]] if obj.get("liabilityHeaderAccountOptions") is not None else None,
            "manualEntriesAllowed": obj.get("manualEntriesAllowed"),
            "type": EnumOptionData.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "usage": EnumOptionData.from_dict(obj["usage"]) if obj.get("usage") is not None else None,
            "usageOptions": [EnumOptionData.from_dict(_item) for _item in obj["usageOptions"]] if obj.get("usageOptions") is not None else None
        })
        return _obj


