# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.image import Image
from fineract_client.models.office import Office
from typing import Optional, Set
from typing_extensions import Self

class Staff(BaseModel):
    """
    Staff
    """ # noqa: E501
    active: Optional[StrictBool] = None
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    email_address: Optional[StrictStr] = Field(default=None, alias="emailAddress")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    firstname: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    image: Optional[Image] = None
    joining_date: Optional[date] = Field(default=None, alias="joiningDate")
    lastname: Optional[StrictStr] = None
    loan_officer: Optional[StrictBool] = Field(default=None, alias="loanOfficer")
    mobile_no: Optional[StrictStr] = Field(default=None, alias="mobileNo")
    new: Optional[StrictBool] = None
    not_active: Optional[StrictBool] = Field(default=None, alias="notActive")
    not_loan_officer: Optional[StrictBool] = Field(default=None, alias="notLoanOfficer")
    office: Optional[Office] = None
    organisational_role_parent_staff: Optional[Staff] = Field(default=None, alias="organisationalRoleParentStaff")
    organisational_role_type: Optional[StrictInt] = Field(default=None, alias="organisationalRoleType")
    __properties: ClassVar[List[str]] = ["active", "displayName", "emailAddress", "externalId", "firstname", "id", "image", "joiningDate", "lastname", "loanOfficer", "mobileNo", "new", "notActive", "notLoanOfficer", "office", "organisationalRoleParentStaff", "organisationalRoleType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Staff from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of office
        if self.office:
            _dict['office'] = self.office.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organisational_role_parent_staff
        if self.organisational_role_parent_staff:
            _dict['organisationalRoleParentStaff'] = self.organisational_role_parent_staff.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Staff from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "displayName": obj.get("displayName"),
            "emailAddress": obj.get("emailAddress"),
            "externalId": obj.get("externalId"),
            "firstname": obj.get("firstname"),
            "id": obj.get("id"),
            "image": Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "joiningDate": obj.get("joiningDate"),
            "lastname": obj.get("lastname"),
            "loanOfficer": obj.get("loanOfficer"),
            "mobileNo": obj.get("mobileNo"),
            "new": obj.get("new"),
            "notActive": obj.get("notActive"),
            "notLoanOfficer": obj.get("notLoanOfficer"),
            "office": Office.from_dict(obj["office"]) if obj.get("office") is not None else None,
            "organisationalRoleParentStaff": Staff.from_dict(obj["organisationalRoleParentStaff"]) if obj.get("organisationalRoleParentStaff") is not None else None,
            "organisationalRoleType": obj.get("organisationalRoleType")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Staff.model_rebuild(raise_errors=False)

