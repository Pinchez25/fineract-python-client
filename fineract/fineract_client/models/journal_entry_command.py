# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.single_debit_or_credit_entry_command import SingleDebitOrCreditEntryCommand
from typing import Optional, Set
from typing_extensions import Self

class JournalEntryCommand(BaseModel):
    """
    JournalEntryCommand
    """ # noqa: E501
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    accounting_rule_id: Optional[StrictInt] = Field(default=None, alias="accountingRuleId")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    bank_number: Optional[StrictStr] = Field(default=None, alias="bankNumber")
    check_number: Optional[StrictStr] = Field(default=None, alias="checkNumber")
    comments: Optional[StrictStr] = None
    credits: Optional[List[SingleDebitOrCreditEntryCommand]] = None
    currency_code: Optional[StrictStr] = Field(default=None, alias="currencyCode")
    debits: Optional[List[SingleDebitOrCreditEntryCommand]] = None
    office_id: Optional[StrictInt] = Field(default=None, alias="officeId")
    payment_type_id: Optional[StrictInt] = Field(default=None, alias="paymentTypeId")
    receipt_number: Optional[StrictStr] = Field(default=None, alias="receiptNumber")
    reference_number: Optional[StrictStr] = Field(default=None, alias="referenceNumber")
    routing_code: Optional[StrictStr] = Field(default=None, alias="routingCode")
    transaction_date: Optional[date] = Field(default=None, alias="transactionDate")
    __properties: ClassVar[List[str]] = ["accountNumber", "accountingRuleId", "amount", "bankNumber", "checkNumber", "comments", "credits", "currencyCode", "debits", "officeId", "paymentTypeId", "receiptNumber", "referenceNumber", "routingCode", "transactionDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JournalEntryCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credits (list)
        _items = []
        if self.credits:
            for _item_credits in self.credits:
                if _item_credits:
                    _items.append(_item_credits.to_dict())
            _dict['credits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in debits (list)
        _items = []
        if self.debits:
            for _item_debits in self.debits:
                if _item_debits:
                    _items.append(_item_debits.to_dict())
            _dict['debits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JournalEntryCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNumber": obj.get("accountNumber"),
            "accountingRuleId": obj.get("accountingRuleId"),
            "amount": obj.get("amount"),
            "bankNumber": obj.get("bankNumber"),
            "checkNumber": obj.get("checkNumber"),
            "comments": obj.get("comments"),
            "credits": [SingleDebitOrCreditEntryCommand.from_dict(_item) for _item in obj["credits"]] if obj.get("credits") is not None else None,
            "currencyCode": obj.get("currencyCode"),
            "debits": [SingleDebitOrCreditEntryCommand.from_dict(_item) for _item in obj["debits"]] if obj.get("debits") is not None else None,
            "officeId": obj.get("officeId"),
            "paymentTypeId": obj.get("paymentTypeId"),
            "receiptNumber": obj.get("receiptNumber"),
            "referenceNumber": obj.get("referenceNumber"),
            "routingCode": obj.get("routingCode"),
            "transactionDate": obj.get("transactionDate")
        })
        return _obj


