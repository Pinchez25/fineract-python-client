# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ResultsetColumnHeaderData(BaseModel):
    """
    ResultsetColumnHeaderData
    """ # noqa: E501
    boolean_display_type: Optional[StrictBool] = Field(default=None, alias="booleanDisplayType")
    code_lookup_display_type: Optional[StrictBool] = Field(default=None, alias="codeLookupDisplayType")
    code_value_display_type: Optional[StrictBool] = Field(default=None, alias="codeValueDisplayType")
    column_code: Optional[StrictStr] = Field(default=None, alias="columnCode")
    column_display_type: Optional[StrictStr] = Field(default=None, alias="columnDisplayType")
    column_length: Optional[StrictInt] = Field(default=None, alias="columnLength")
    column_name: Optional[StrictStr] = Field(default=None, alias="columnName")
    column_type: Optional[StrictStr] = Field(default=None, alias="columnType")
    column_values: Optional[List[Dict[str, Any]]] = Field(default=None, alias="columnValues")
    date_display_type: Optional[StrictBool] = Field(default=None, alias="dateDisplayType")
    date_time_display_type: Optional[StrictBool] = Field(default=None, alias="dateTimeDisplayType")
    decimal_display_type: Optional[StrictBool] = Field(default=None, alias="decimalDisplayType")
    integer_display_type: Optional[StrictBool] = Field(default=None, alias="integerDisplayType")
    is_column_indexed: Optional[StrictBool] = Field(default=None, alias="isColumnIndexed")
    is_column_nullable: Optional[StrictBool] = Field(default=None, alias="isColumnNullable")
    is_column_primary_key: Optional[StrictBool] = Field(default=None, alias="isColumnPrimaryKey")
    is_column_unique: Optional[StrictBool] = Field(default=None, alias="isColumnUnique")
    mandatory: Optional[StrictBool] = None
    string_display_type: Optional[StrictBool] = Field(default=None, alias="stringDisplayType")
    text_display_type: Optional[StrictBool] = Field(default=None, alias="textDisplayType")
    time_display_type: Optional[StrictBool] = Field(default=None, alias="timeDisplayType")
    __properties: ClassVar[List[str]] = ["booleanDisplayType", "codeLookupDisplayType", "codeValueDisplayType", "columnCode", "columnDisplayType", "columnLength", "columnName", "columnType", "columnValues", "dateDisplayType", "dateTimeDisplayType", "decimalDisplayType", "integerDisplayType", "isColumnIndexed", "isColumnNullable", "isColumnPrimaryKey", "isColumnUnique", "mandatory", "stringDisplayType", "textDisplayType", "timeDisplayType"]

    @field_validator('column_display_type')
    def column_display_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TEXT', 'STRING', 'INTEGER', 'FLOAT', 'DECIMAL', 'DATE', 'TIME', 'DATETIME', 'BOOLEAN', 'BINARY', 'CODELOOKUP', 'CODEVALUE']):
            raise ValueError("must be one of enum values ('TEXT', 'STRING', 'INTEGER', 'FLOAT', 'DECIMAL', 'DATE', 'TIME', 'DATETIME', 'BOOLEAN', 'BINARY', 'CODELOOKUP', 'CODEVALUE')")
        return value

    @field_validator('column_type')
    def column_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BIT', 'BOOLEAN', 'SMALLINT', 'TINYINT', 'INTEGER', 'MEDIUMINT', 'BIGINT', 'REAL', 'FLOAT', 'DOUBLE', 'NUMERIC', 'DECIMAL', 'SERIAL', 'SMALLSERIAL', 'BIGSERIAL', 'MONEY', 'CHAR', 'VARCHAR', 'LONGVARCHAR', 'TEXT', 'TINYTEXT', 'MEDIUMTEXT', 'LONGTEXT', 'JSON', 'DATE', 'TIME', 'TIME_WITH_TIMEZONE', 'TIMESTAMP', 'DATETIME', 'TIMESTAMP_WITH_TIMEZONE', 'INTERVAL', 'BINARY', 'VARBINARY', 'LONGVARBINARY', 'BYTEA', 'BLOB', 'TINYBLOB', 'MEDIUMBLOB', 'LONGBLOB']):
            raise ValueError("must be one of enum values ('BIT', 'BOOLEAN', 'SMALLINT', 'TINYINT', 'INTEGER', 'MEDIUMINT', 'BIGINT', 'REAL', 'FLOAT', 'DOUBLE', 'NUMERIC', 'DECIMAL', 'SERIAL', 'SMALLSERIAL', 'BIGSERIAL', 'MONEY', 'CHAR', 'VARCHAR', 'LONGVARCHAR', 'TEXT', 'TINYTEXT', 'MEDIUMTEXT', 'LONGTEXT', 'JSON', 'DATE', 'TIME', 'TIME_WITH_TIMEZONE', 'TIMESTAMP', 'DATETIME', 'TIMESTAMP_WITH_TIMEZONE', 'INTERVAL', 'BINARY', 'VARBINARY', 'LONGVARBINARY', 'BYTEA', 'BLOB', 'TINYBLOB', 'MEDIUMBLOB', 'LONGBLOB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResultsetColumnHeaderData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResultsetColumnHeaderData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "booleanDisplayType": obj.get("booleanDisplayType"),
            "codeLookupDisplayType": obj.get("codeLookupDisplayType"),
            "codeValueDisplayType": obj.get("codeValueDisplayType"),
            "columnCode": obj.get("columnCode"),
            "columnDisplayType": obj.get("columnDisplayType"),
            "columnLength": obj.get("columnLength"),
            "columnName": obj.get("columnName"),
            "columnType": obj.get("columnType"),
            "columnValues": obj.get("columnValues"),
            "dateDisplayType": obj.get("dateDisplayType"),
            "dateTimeDisplayType": obj.get("dateTimeDisplayType"),
            "decimalDisplayType": obj.get("decimalDisplayType"),
            "integerDisplayType": obj.get("integerDisplayType"),
            "isColumnIndexed": obj.get("isColumnIndexed"),
            "isColumnNullable": obj.get("isColumnNullable"),
            "isColumnPrimaryKey": obj.get("isColumnPrimaryKey"),
            "isColumnUnique": obj.get("isColumnUnique"),
            "mandatory": obj.get("mandatory"),
            "stringDisplayType": obj.get("stringDisplayType"),
            "textDisplayType": obj.get("textDisplayType"),
            "timeDisplayType": obj.get("timeDisplayType")
        })
        return _obj


