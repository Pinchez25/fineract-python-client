# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_notes_note_type import GetNotesNoteType
from typing import Optional, Set
from typing_extensions import Self

class GetResourceTypeResourceIdNotesNoteIdResponse(BaseModel):
    """
    GetResourceTypeResourceIdNotesNoteIdResponse
    """ # noqa: E501
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    created_by_id: Optional[StrictInt] = Field(default=None, alias="createdById")
    created_by_username: Optional[StrictStr] = Field(default=None, alias="createdByUsername")
    created_on: Optional[datetime] = Field(default=None, alias="createdOn")
    id: Optional[StrictInt] = None
    note: Optional[StrictStr] = None
    note_type: Optional[GetNotesNoteType] = Field(default=None, alias="noteType")
    updated_by_id: Optional[StrictInt] = Field(default=None, alias="updatedById")
    updated_by_username: Optional[StrictStr] = Field(default=None, alias="updatedByUsername")
    updated_on: Optional[datetime] = Field(default=None, alias="updatedOn")
    __properties: ClassVar[List[str]] = ["clientId", "createdById", "createdByUsername", "createdOn", "id", "note", "noteType", "updatedById", "updatedByUsername", "updatedOn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetResourceTypeResourceIdNotesNoteIdResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of note_type
        if self.note_type:
            _dict['noteType'] = self.note_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetResourceTypeResourceIdNotesNoteIdResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "createdById": obj.get("createdById"),
            "createdByUsername": obj.get("createdByUsername"),
            "createdOn": obj.get("createdOn"),
            "id": obj.get("id"),
            "note": obj.get("note"),
            "noteType": GetNotesNoteType.from_dict(obj["noteType"]) if obj.get("noteType") is not None else None,
            "updatedById": obj.get("updatedById"),
            "updatedByUsername": obj.get("updatedByUsername"),
            "updatedOn": obj.get("updatedOn")
        })
        return _obj


