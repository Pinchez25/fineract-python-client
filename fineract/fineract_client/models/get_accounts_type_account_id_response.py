# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_accounts_charges import GetAccountsCharges
from fineract_client.models.get_accounts_currency import GetAccountsCurrency
from fineract_client.models.get_accounts_lock_period_type_enum import GetAccountsLockPeriodTypeEnum
from fineract_client.models.get_accounts_purchased_shares import GetAccountsPurchasedShares
from fineract_client.models.get_accounts_status import GetAccountsStatus
from fineract_client.models.get_accounts_summary import GetAccountsSummary
from fineract_client.models.get_accounts_timeline import GetAccountsTimeline
from typing import Optional, Set
from typing_extensions import Self

class GetAccountsTypeAccountIdResponse(BaseModel):
    """
    GetAccountsTypeAccountIdResponse
    """ # noqa: E501
    account_no: Optional[StrictInt] = Field(default=None, alias="accountNo")
    allow_dividend_calculation_for_inactive_clients: Optional[StrictBool] = Field(default=None, alias="allowDividendCalculationForInactiveClients")
    charges: Optional[List[GetAccountsCharges]] = None
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    client_name: Optional[StrictStr] = Field(default=None, alias="clientName")
    currency: Optional[GetAccountsCurrency] = None
    current_market_price: Optional[StrictInt] = Field(default=None, alias="currentMarketPrice")
    dividends: Optional[List[StrictStr]] = None
    id: Optional[StrictInt] = None
    lock_period_type_enum: Optional[GetAccountsLockPeriodTypeEnum] = Field(default=None, alias="lockPeriodTypeEnum")
    lockin_period: Optional[StrictInt] = Field(default=None, alias="lockinPeriod")
    minimum_active_period: Optional[StrictInt] = Field(default=None, alias="minimumActivePeriod")
    minimum_active_period_type_enum: Optional[GetAccountsLockPeriodTypeEnum] = Field(default=None, alias="minimumActivePeriodTypeEnum")
    product_id: Optional[StrictInt] = Field(default=None, alias="productId")
    product_name: Optional[StrictStr] = Field(default=None, alias="productName")
    purchased_shares: Optional[List[GetAccountsPurchasedShares]] = Field(default=None, alias="purchasedShares")
    savings_account_id: Optional[StrictInt] = Field(default=None, alias="savingsAccountId")
    savings_account_number: Optional[StrictInt] = Field(default=None, alias="savingsAccountNumber")
    status: Optional[GetAccountsStatus] = None
    summary: Optional[GetAccountsSummary] = None
    timeline: Optional[GetAccountsTimeline] = None
    __properties: ClassVar[List[str]] = ["accountNo", "allowDividendCalculationForInactiveClients", "charges", "clientId", "clientName", "currency", "currentMarketPrice", "dividends", "id", "lockPeriodTypeEnum", "lockinPeriod", "minimumActivePeriod", "minimumActivePeriodTypeEnum", "productId", "productName", "purchasedShares", "savingsAccountId", "savingsAccountNumber", "status", "summary", "timeline"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountsTypeAccountIdResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lock_period_type_enum
        if self.lock_period_type_enum:
            _dict['lockPeriodTypeEnum'] = self.lock_period_type_enum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minimum_active_period_type_enum
        if self.minimum_active_period_type_enum:
            _dict['minimumActivePeriodTypeEnum'] = self.minimum_active_period_type_enum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in purchased_shares (list)
        _items = []
        if self.purchased_shares:
            for _item in self.purchased_shares:
                if _item:
                    _items.append(_item.to_dict())
            _dict['purchasedShares'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeline
        if self.timeline:
            _dict['timeline'] = self.timeline.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountsTypeAccountIdResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNo": obj.get("accountNo"),
            "allowDividendCalculationForInactiveClients": obj.get("allowDividendCalculationForInactiveClients"),
            "charges": [GetAccountsCharges.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "clientId": obj.get("clientId"),
            "clientName": obj.get("clientName"),
            "currency": GetAccountsCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "currentMarketPrice": obj.get("currentMarketPrice"),
            "dividends": obj.get("dividends"),
            "id": obj.get("id"),
            "lockPeriodTypeEnum": GetAccountsLockPeriodTypeEnum.from_dict(obj["lockPeriodTypeEnum"]) if obj.get("lockPeriodTypeEnum") is not None else None,
            "lockinPeriod": obj.get("lockinPeriod"),
            "minimumActivePeriod": obj.get("minimumActivePeriod"),
            "minimumActivePeriodTypeEnum": GetAccountsLockPeriodTypeEnum.from_dict(obj["minimumActivePeriodTypeEnum"]) if obj.get("minimumActivePeriodTypeEnum") is not None else None,
            "productId": obj.get("productId"),
            "productName": obj.get("productName"),
            "purchasedShares": [GetAccountsPurchasedShares.from_dict(_item) for _item in obj["purchasedShares"]] if obj.get("purchasedShares") is not None else None,
            "savingsAccountId": obj.get("savingsAccountId"),
            "savingsAccountNumber": obj.get("savingsAccountNumber"),
            "status": GetAccountsStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "summary": GetAccountsSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "timeline": GetAccountsTimeline.from_dict(obj["timeline"]) if obj.get("timeline") is not None else None
        })
        return _obj


