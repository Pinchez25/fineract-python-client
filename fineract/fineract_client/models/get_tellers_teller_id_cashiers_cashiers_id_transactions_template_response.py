# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.cashier_data import CashierData
from fineract_client.models.currency_data import CurrencyData
from typing import Optional, Set
from typing_extensions import Self

class GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse(BaseModel):
    """
    GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse
    """ # noqa: E501
    cashier_data: Optional[CashierData] = Field(default=None, alias="cashierData")
    cashier_id: Optional[StrictInt] = Field(default=None, alias="cashierId")
    cashier_name: Optional[StrictStr] = Field(default=None, alias="cashierName")
    currency_options: Optional[List[CurrencyData]] = Field(default=None, alias="currencyOptions")
    end_date: Optional[date] = Field(default=None, alias="endDate")
    office_name: Optional[StrictStr] = Field(default=None, alias="officeName")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    teller_id: Optional[StrictInt] = Field(default=None, alias="tellerId")
    teller_name: Optional[StrictStr] = Field(default=None, alias="tellerName")
    __properties: ClassVar[List[str]] = ["cashierData", "cashierId", "cashierName", "currencyOptions", "endDate", "officeName", "startDate", "tellerId", "tellerName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cashier_data
        if self.cashier_data:
            _dict['cashierData'] = self.cashier_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in currency_options (list)
        _items = []
        if self.currency_options:
            for _item_currency_options in self.currency_options:
                if _item_currency_options:
                    _items.append(_item_currency_options.to_dict())
            _dict['currencyOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cashierData": CashierData.from_dict(obj["cashierData"]) if obj.get("cashierData") is not None else None,
            "cashierId": obj.get("cashierId"),
            "cashierName": obj.get("cashierName"),
            "currencyOptions": [CurrencyData.from_dict(_item) for _item in obj["currencyOptions"]] if obj.get("currencyOptions") is not None else None,
            "endDate": obj.get("endDate"),
            "officeName": obj.get("officeName"),
            "startDate": obj.get("startDate"),
            "tellerId": obj.get("tellerId"),
            "tellerName": obj.get("tellerName")
        })
        return _obj


