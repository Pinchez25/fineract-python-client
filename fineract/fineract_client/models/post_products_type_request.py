# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.post_products_charges_selected import PostProductsChargesSelected
from fineract_client.models.post_products_market_price_periods import PostProductsMarketPricePeriods
from typing import Optional, Set
from typing_extensions import Self

class PostProductsTypeRequest(BaseModel):
    """
    PostProductsTypeRequest
    """ # noqa: E501
    accounting_rule: Optional[StrictInt] = Field(default=None, alias="accountingRule")
    allow_dividend_calculation_for_inactive_clients: Optional[StrictBool] = Field(default=None, alias="allowDividendCalculationForInactiveClients")
    charges_selected: Optional[List[PostProductsChargesSelected]] = Field(default=None, alias="chargesSelected")
    currency_code: Optional[StrictStr] = Field(default=None, alias="currencyCode")
    description: Optional[StrictStr] = None
    digits_after_decimal: Optional[StrictInt] = Field(default=None, alias="digitsAfterDecimal")
    in_multiples_of: Optional[StrictInt] = Field(default=None, alias="inMultiplesOf")
    locale: Optional[StrictStr] = None
    lockin_period_frequency: Optional[StrictInt] = Field(default=None, alias="lockinPeriodFrequency")
    lockin_period_frequency_type: Optional[StrictInt] = Field(default=None, alias="lockinPeriodFrequencyType")
    market_price_periods: Optional[List[PostProductsMarketPricePeriods]] = Field(default=None, alias="marketPricePeriods")
    maximum_shares: Optional[StrictInt] = Field(default=None, alias="maximumShares")
    minimum_active_period_for_dividends: Optional[StrictInt] = Field(default=None, alias="minimumActivePeriodForDividends")
    minimum_shares: Optional[StrictInt] = Field(default=None, alias="minimumShares")
    minimumactiveperiod_frequency_type: Optional[StrictInt] = Field(default=None, alias="minimumactiveperiodFrequencyType")
    name: Optional[StrictStr] = None
    nominal_shares: Optional[StrictInt] = Field(default=None, alias="nominalShares")
    shares_issued: Optional[StrictInt] = Field(default=None, alias="sharesIssued")
    short_name: Optional[StrictStr] = Field(default=None, alias="shortName")
    total_shares: Optional[StrictInt] = Field(default=None, alias="totalShares")
    unit_price: Optional[StrictInt] = Field(default=None, alias="unitPrice")
    __properties: ClassVar[List[str]] = ["accountingRule", "allowDividendCalculationForInactiveClients", "chargesSelected", "currencyCode", "description", "digitsAfterDecimal", "inMultiplesOf", "locale", "lockinPeriodFrequency", "lockinPeriodFrequencyType", "marketPricePeriods", "maximumShares", "minimumActivePeriodForDividends", "minimumShares", "minimumactiveperiodFrequencyType", "name", "nominalShares", "sharesIssued", "shortName", "totalShares", "unitPrice"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostProductsTypeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charges_selected (list)
        _items = []
        if self.charges_selected:
            for _item in self.charges_selected:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargesSelected'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in market_price_periods (list)
        _items = []
        if self.market_price_periods:
            for _item in self.market_price_periods:
                if _item:
                    _items.append(_item.to_dict())
            _dict['marketPricePeriods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostProductsTypeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountingRule": obj.get("accountingRule"),
            "allowDividendCalculationForInactiveClients": obj.get("allowDividendCalculationForInactiveClients"),
            "chargesSelected": [PostProductsChargesSelected.from_dict(_item) for _item in obj["chargesSelected"]] if obj.get("chargesSelected") is not None else None,
            "currencyCode": obj.get("currencyCode"),
            "description": obj.get("description"),
            "digitsAfterDecimal": obj.get("digitsAfterDecimal"),
            "inMultiplesOf": obj.get("inMultiplesOf"),
            "locale": obj.get("locale"),
            "lockinPeriodFrequency": obj.get("lockinPeriodFrequency"),
            "lockinPeriodFrequencyType": obj.get("lockinPeriodFrequencyType"),
            "marketPricePeriods": [PostProductsMarketPricePeriods.from_dict(_item) for _item in obj["marketPricePeriods"]] if obj.get("marketPricePeriods") is not None else None,
            "maximumShares": obj.get("maximumShares"),
            "minimumActivePeriodForDividends": obj.get("minimumActivePeriodForDividends"),
            "minimumShares": obj.get("minimumShares"),
            "minimumactiveperiodFrequencyType": obj.get("minimumactiveperiodFrequencyType"),
            "name": obj.get("name"),
            "nominalShares": obj.get("nominalShares"),
            "sharesIssued": obj.get("sharesIssued"),
            "shortName": obj.get("shortName"),
            "totalShares": obj.get("totalShares"),
            "unitPrice": obj.get("unitPrice")
        })
        return _obj


