# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.get_savings_accounts_summary import GetSavingsAccountsSummary
from fineract_client.models.get_savings_currency import GetSavingsCurrency
from fineract_client.models.get_savings_interest_calculation_days_in_year_type import GetSavingsInterestCalculationDaysInYearType
from fineract_client.models.get_savings_interest_calculation_type import GetSavingsInterestCalculationType
from fineract_client.models.get_savings_interest_compounding_period_type import GetSavingsInterestCompoundingPeriodType
from fineract_client.models.get_savings_interest_posting_period_type import GetSavingsInterestPostingPeriodType
from fineract_client.models.get_savings_status import GetSavingsStatus
from fineract_client.models.get_savings_timeline import GetSavingsTimeline
from typing import Optional, Set
from typing_extensions import Self

class GetSavingsAccountsAccountIdResponse(BaseModel):
    """
    GetSavingsAccountsAccountIdResponse
    """ # noqa: E501
    account_no: Optional[StrictStr] = Field(default=None, alias="accountNo")
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    client_name: Optional[StrictStr] = Field(default=None, alias="clientName")
    currency: Optional[GetSavingsCurrency] = None
    field_officer_id: Optional[StrictInt] = Field(default=None, alias="fieldOfficerId")
    id: Optional[StrictInt] = None
    interest_calculation_days_in_year_type: Optional[GetSavingsInterestCalculationDaysInYearType] = Field(default=None, alias="interestCalculationDaysInYearType")
    interest_calculation_type: Optional[GetSavingsInterestCalculationType] = Field(default=None, alias="interestCalculationType")
    interest_compounding_period_type: Optional[GetSavingsInterestCompoundingPeriodType] = Field(default=None, alias="interestCompoundingPeriodType")
    interest_posting_period_type: Optional[GetSavingsInterestPostingPeriodType] = Field(default=None, alias="interestPostingPeriodType")
    nominal_annual_interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="nominalAnnualInterestRate")
    savings_product_id: Optional[StrictInt] = Field(default=None, alias="savingsProductId")
    savings_product_name: Optional[StrictStr] = Field(default=None, alias="savingsProductName")
    status: Optional[GetSavingsStatus] = None
    summary: Optional[GetSavingsAccountsSummary] = None
    timeline: Optional[GetSavingsTimeline] = None
    __properties: ClassVar[List[str]] = ["accountNo", "clientId", "clientName", "currency", "fieldOfficerId", "id", "interestCalculationDaysInYearType", "interestCalculationType", "interestCompoundingPeriodType", "interestPostingPeriodType", "nominalAnnualInterestRate", "savingsProductId", "savingsProductName", "status", "summary", "timeline"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSavingsAccountsAccountIdResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_days_in_year_type
        if self.interest_calculation_days_in_year_type:
            _dict['interestCalculationDaysInYearType'] = self.interest_calculation_days_in_year_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_type
        if self.interest_calculation_type:
            _dict['interestCalculationType'] = self.interest_calculation_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_compounding_period_type
        if self.interest_compounding_period_type:
            _dict['interestCompoundingPeriodType'] = self.interest_compounding_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_posting_period_type
        if self.interest_posting_period_type:
            _dict['interestPostingPeriodType'] = self.interest_posting_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeline
        if self.timeline:
            _dict['timeline'] = self.timeline.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSavingsAccountsAccountIdResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNo": obj.get("accountNo"),
            "clientId": obj.get("clientId"),
            "clientName": obj.get("clientName"),
            "currency": GetSavingsCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "fieldOfficerId": obj.get("fieldOfficerId"),
            "id": obj.get("id"),
            "interestCalculationDaysInYearType": GetSavingsInterestCalculationDaysInYearType.from_dict(obj["interestCalculationDaysInYearType"]) if obj.get("interestCalculationDaysInYearType") is not None else None,
            "interestCalculationType": GetSavingsInterestCalculationType.from_dict(obj["interestCalculationType"]) if obj.get("interestCalculationType") is not None else None,
            "interestCompoundingPeriodType": GetSavingsInterestCompoundingPeriodType.from_dict(obj["interestCompoundingPeriodType"]) if obj.get("interestCompoundingPeriodType") is not None else None,
            "interestPostingPeriodType": GetSavingsInterestPostingPeriodType.from_dict(obj["interestPostingPeriodType"]) if obj.get("interestPostingPeriodType") is not None else None,
            "nominalAnnualInterestRate": obj.get("nominalAnnualInterestRate"),
            "savingsProductId": obj.get("savingsProductId"),
            "savingsProductName": obj.get("savingsProductName"),
            "status": GetSavingsStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "summary": GetSavingsAccountsSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "timeline": GetSavingsTimeline.from_dict(obj["timeline"]) if obj.get("timeline") is not None else None
        })
        return _obj


