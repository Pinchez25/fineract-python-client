# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.post_fixed_deposit_products_charts import PostFixedDepositProductsCharts
from typing import Optional, Set
from typing_extensions import Self

class PostFixedDepositProductsRequest(BaseModel):
    """
    PostFixedDepositProductsRequest
    """ # noqa: E501
    accounting_rule: Optional[StrictInt] = Field(default=None, alias="accountingRule")
    charts: Optional[List[PostFixedDepositProductsCharts]] = None
    currency_code: Optional[StrictStr] = Field(default=None, alias="currencyCode")
    description: Optional[StrictStr] = None
    digits_after_decimal: Optional[StrictInt] = Field(default=None, alias="digitsAfterDecimal")
    in_multiples_of: Optional[StrictInt] = Field(default=None, alias="inMultiplesOf")
    interest_calculation_days_in_year_type: Optional[StrictInt] = Field(default=None, alias="interestCalculationDaysInYearType")
    interest_calculation_type: Optional[StrictInt] = Field(default=None, alias="interestCalculationType")
    interest_compounding_period_type: Optional[StrictInt] = Field(default=None, alias="interestCompoundingPeriodType")
    interest_posting_period_type: Optional[StrictInt] = Field(default=None, alias="interestPostingPeriodType")
    locale: Optional[StrictStr] = None
    max_deposit_term: Optional[StrictInt] = Field(default=None, alias="maxDepositTerm")
    max_deposit_term_type_id: Optional[StrictInt] = Field(default=None, alias="maxDepositTermTypeId")
    min_deposit_term: Optional[StrictInt] = Field(default=None, alias="minDepositTerm")
    min_deposit_term_type_id: Optional[StrictInt] = Field(default=None, alias="minDepositTermTypeId")
    name: Optional[StrictStr] = None
    pre_closure_penal_applicable: Optional[StrictBool] = Field(default=None, alias="preClosurePenalApplicable")
    pre_closure_penal_interest: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="preClosurePenalInterest")
    pre_closure_penal_interest_on_type_id: Optional[StrictInt] = Field(default=None, alias="preClosurePenalInterestOnTypeId")
    short_name: Optional[StrictStr] = Field(default=None, alias="shortName")
    __properties: ClassVar[List[str]] = ["accountingRule", "charts", "currencyCode", "description", "digitsAfterDecimal", "inMultiplesOf", "interestCalculationDaysInYearType", "interestCalculationType", "interestCompoundingPeriodType", "interestPostingPeriodType", "locale", "maxDepositTerm", "maxDepositTermTypeId", "minDepositTerm", "minDepositTermTypeId", "name", "preClosurePenalApplicable", "preClosurePenalInterest", "preClosurePenalInterestOnTypeId", "shortName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostFixedDepositProductsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charts (list)
        _items = []
        if self.charts:
            for _item_charts in self.charts:
                if _item_charts:
                    _items.append(_item_charts.to_dict())
            _dict['charts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostFixedDepositProductsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountingRule": obj.get("accountingRule"),
            "charts": [PostFixedDepositProductsCharts.from_dict(_item) for _item in obj["charts"]] if obj.get("charts") is not None else None,
            "currencyCode": obj.get("currencyCode"),
            "description": obj.get("description"),
            "digitsAfterDecimal": obj.get("digitsAfterDecimal"),
            "inMultiplesOf": obj.get("inMultiplesOf"),
            "interestCalculationDaysInYearType": obj.get("interestCalculationDaysInYearType"),
            "interestCalculationType": obj.get("interestCalculationType"),
            "interestCompoundingPeriodType": obj.get("interestCompoundingPeriodType"),
            "interestPostingPeriodType": obj.get("interestPostingPeriodType"),
            "locale": obj.get("locale"),
            "maxDepositTerm": obj.get("maxDepositTerm"),
            "maxDepositTermTypeId": obj.get("maxDepositTermTypeId"),
            "minDepositTerm": obj.get("minDepositTerm"),
            "minDepositTermTypeId": obj.get("minDepositTermTypeId"),
            "name": obj.get("name"),
            "preClosurePenalApplicable": obj.get("preClosurePenalApplicable"),
            "preClosurePenalInterest": obj.get("preClosurePenalInterest"),
            "preClosurePenalInterestOnTypeId": obj.get("preClosurePenalInterestOnTypeId"),
            "shortName": obj.get("shortName")
        })
        return _obj


