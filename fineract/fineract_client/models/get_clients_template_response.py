# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_clients_data_tables import GetClientsDataTables
from fineract_client.models.get_clients_office_options import GetClientsOfficeOptions
from fineract_client.models.get_clients_saving_product_options import GetClientsSavingProductOptions
from fineract_client.models.get_clients_staff_options import GetClientsStaffOptions
from typing import Optional, Set
from typing_extensions import Self

class GetClientsTemplateResponse(BaseModel):
    """
    GetClientsTemplateResponse
    """ # noqa: E501
    activation_date: Optional[date] = Field(default=None, alias="activationDate")
    datatables: Optional[List[GetClientsDataTables]] = None
    office_id: Optional[StrictInt] = Field(default=None, alias="officeId")
    office_options: Optional[List[GetClientsOfficeOptions]] = Field(default=None, alias="officeOptions")
    saving_product_options: Optional[List[GetClientsSavingProductOptions]] = Field(default=None, alias="savingProductOptions")
    staff_options: Optional[List[GetClientsStaffOptions]] = Field(default=None, alias="staffOptions")
    __properties: ClassVar[List[str]] = ["activationDate", "datatables", "officeId", "officeOptions", "savingProductOptions", "staffOptions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetClientsTemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in datatables (list)
        _items = []
        if self.datatables:
            for _item in self.datatables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datatables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in office_options (list)
        _items = []
        if self.office_options:
            for _item in self.office_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['officeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in saving_product_options (list)
        _items = []
        if self.saving_product_options:
            for _item in self.saving_product_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['savingProductOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in staff_options (list)
        _items = []
        if self.staff_options:
            for _item in self.staff_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['staffOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetClientsTemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activationDate": obj.get("activationDate"),
            "datatables": [GetClientsDataTables.from_dict(_item) for _item in obj["datatables"]] if obj.get("datatables") is not None else None,
            "officeId": obj.get("officeId"),
            "officeOptions": [GetClientsOfficeOptions.from_dict(_item) for _item in obj["officeOptions"]] if obj.get("officeOptions") is not None else None,
            "savingProductOptions": [GetClientsSavingProductOptions.from_dict(_item) for _item in obj["savingProductOptions"]] if obj.get("savingProductOptions") is not None else None,
            "staffOptions": [GetClientsStaffOptions.from_dict(_item) for _item in obj["staffOptions"]] if obj.get("staffOptions") is not None else None
        })
        return _obj


