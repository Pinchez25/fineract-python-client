# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.get_savings_account_charges_paid_by_data import GetSavingsAccountChargesPaidByData
from fineract_client.models.get_transactions_currency import GetTransactionsCurrency
from fineract_client.models.get_transactions_payment_detail_data import GetTransactionsPaymentDetailData
from fineract_client.models.get_transcation_enum_data import GetTranscationEnumData
from typing import Optional, Set
from typing_extensions import Self

class GetSavingsAccountTransactionsPageItem(BaseModel):
    """
    GetSavingsAccountTransactionsPageItem
    """ # noqa: E501
    account_id: Optional[StrictInt] = Field(default=None, alias="accountId")
    account_no: Optional[StrictStr] = Field(default=None, alias="accountNo")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    charges_paid_by_data: Optional[List[GetSavingsAccountChargesPaidByData]] = Field(default=None, alias="chargesPaidByData")
    currency: Optional[GetTransactionsCurrency] = None
    var_date: Optional[date] = Field(default=None, alias="date")
    entry_type: Optional[StrictStr] = Field(default=None, alias="entryType")
    id: Optional[StrictInt] = None
    interested_posted_as_on: Optional[StrictBool] = Field(default=None, alias="interestedPostedAsOn")
    is_manual_transaction: Optional[StrictBool] = Field(default=None, alias="isManualTransaction")
    is_reversal: Optional[StrictBool] = Field(default=None, alias="isReversal")
    lien_transaction: Optional[StrictBool] = Field(default=None, alias="lienTransaction")
    original_transaction_id: Optional[StrictInt] = Field(default=None, alias="originalTransactionId")
    payment_detail_data: Optional[GetTransactionsPaymentDetailData] = Field(default=None, alias="paymentDetailData")
    release_transaction_id: Optional[StrictInt] = Field(default=None, alias="releaseTransactionId")
    reversed: Optional[StrictBool] = None
    running_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="runningBalance")
    submitted_by_username: Optional[StrictStr] = Field(default=None, alias="submittedByUsername")
    submitted_on_date: Optional[date] = Field(default=None, alias="submittedOnDate")
    transaction_type: Optional[GetTranscationEnumData] = Field(default=None, alias="transactionType")
    __properties: ClassVar[List[str]] = ["accountId", "accountNo", "amount", "chargesPaidByData", "currency", "date", "entryType", "id", "interestedPostedAsOn", "isManualTransaction", "isReversal", "lienTransaction", "originalTransactionId", "paymentDetailData", "releaseTransactionId", "reversed", "runningBalance", "submittedByUsername", "submittedOnDate", "transactionType"]

    @field_validator('entry_type')
    def entry_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREDIT', 'DEBIT']):
            raise ValueError("must be one of enum values ('CREDIT', 'DEBIT')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSavingsAccountTransactionsPageItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charges_paid_by_data (list)
        _items = []
        if self.charges_paid_by_data:
            for _item in self.charges_paid_by_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargesPaidByData'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_detail_data
        if self.payment_detail_data:
            _dict['paymentDetailData'] = self.payment_detail_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_type
        if self.transaction_type:
            _dict['transactionType'] = self.transaction_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSavingsAccountTransactionsPageItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "accountNo": obj.get("accountNo"),
            "amount": obj.get("amount"),
            "chargesPaidByData": [GetSavingsAccountChargesPaidByData.from_dict(_item) for _item in obj["chargesPaidByData"]] if obj.get("chargesPaidByData") is not None else None,
            "currency": GetTransactionsCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "date": obj.get("date"),
            "entryType": obj.get("entryType"),
            "id": obj.get("id"),
            "interestedPostedAsOn": obj.get("interestedPostedAsOn"),
            "isManualTransaction": obj.get("isManualTransaction"),
            "isReversal": obj.get("isReversal"),
            "lienTransaction": obj.get("lienTransaction"),
            "originalTransactionId": obj.get("originalTransactionId"),
            "paymentDetailData": GetTransactionsPaymentDetailData.from_dict(obj["paymentDetailData"]) if obj.get("paymentDetailData") is not None else None,
            "releaseTransactionId": obj.get("releaseTransactionId"),
            "reversed": obj.get("reversed"),
            "runningBalance": obj.get("runningBalance"),
            "submittedByUsername": obj.get("submittedByUsername"),
            "submittedOnDate": obj.get("submittedOnDate"),
            "transactionType": GetTranscationEnumData.from_dict(obj["transactionType"]) if obj.get("transactionType") is not None else None
        })
        return _obj


