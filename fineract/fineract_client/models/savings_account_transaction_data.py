# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.currency_data import CurrencyData
from fineract_client.models.payment_detail_data import PaymentDetailData
from fineract_client.models.payment_type_data import PaymentTypeData
from fineract_client.models.savings_account_charges_paid_by_data import SavingsAccountChargesPaidByData
from fineract_client.models.savings_account_transaction_enum_data import SavingsAccountTransactionEnumData
from fineract_client.models.tax_details_data import TaxDetailsData
from typing import Optional, Set
from typing_extensions import Self

class SavingsAccountTransactionData(BaseModel):
    """
    SavingsAccountTransactionData
    """ # noqa: E501
    account_id: Optional[StrictInt] = Field(default=None, alias="accountId")
    account_no: Optional[StrictStr] = Field(default=None, alias="accountNo")
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    amount_on_hold: Optional[StrictBool] = Field(default=None, alias="amountOnHold")
    amount_release: Optional[StrictBool] = Field(default=None, alias="amountRelease")
    annual_fee: Optional[StrictBool] = Field(default=None, alias="annualFee")
    annual_fee_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="annualFeeAndNotReversed")
    balance_end_date: Optional[date] = Field(default=None, alias="balanceEndDate")
    balance_number_of_days: Optional[StrictInt] = Field(default=None, alias="balanceNumberOfDays")
    bank_number: Optional[StrictStr] = Field(default=None, alias="bankNumber")
    charge_transaction: Optional[StrictBool] = Field(default=None, alias="chargeTransaction")
    charge_transaction_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="chargeTransactionAndNotReversed")
    charges_paid_by_data: Optional[List[SavingsAccountChargesPaidByData]] = Field(default=None, alias="chargesPaidByData")
    check_number: Optional[StrictStr] = Field(default=None, alias="checkNumber")
    credit: Optional[StrictBool] = None
    cumulative_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cumulativeBalance")
    currency: Optional[CurrencyData] = None
    var_date: Optional[date] = Field(default=None, alias="date")
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    debit: Optional[StrictBool] = None
    deposit: Optional[StrictBool] = None
    deposit_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="depositAndNotReversed")
    dividend_payout_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="dividendPayoutAndNotReversed")
    end_of_balance_local_date: Optional[date] = Field(default=None, alias="endOfBalanceLocalDate")
    entry_type: Optional[StrictStr] = Field(default=None, alias="entryType")
    fee_charge: Optional[StrictBool] = Field(default=None, alias="feeCharge")
    fee_charge_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="feeChargeAndNotReversed")
    id: Optional[StrictInt] = None
    interest_posting: Optional[StrictBool] = Field(default=None, alias="interestPosting")
    interest_posting_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="interestPostingAndNotReversed")
    interested_posted_as_on: Optional[StrictBool] = Field(default=None, alias="interestedPostedAsOn")
    is_manual_transaction: Optional[StrictBool] = Field(default=None, alias="isManualTransaction")
    is_reversal: Optional[StrictBool] = Field(default=None, alias="isReversal")
    lien_transaction: Optional[StrictBool] = Field(default=None, alias="lienTransaction")
    locale: Optional[StrictStr] = None
    manual_transaction: Optional[StrictBool] = Field(default=None, alias="manualTransaction")
    modified_id: Optional[StrictInt] = Field(default=None, alias="modifiedId")
    not_reversed: Optional[StrictBool] = Field(default=None, alias="notReversed")
    note: Optional[StrictStr] = None
    original_transaction_id: Optional[StrictInt] = Field(default=None, alias="originalTransactionId")
    outstanding_charge_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="outstandingChargeAmount")
    overdraft_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="overdraftAmount")
    overdraft_interest_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="overdraftInterestAndNotReversed")
    pay_charge: Optional[StrictBool] = Field(default=None, alias="payCharge")
    payment_detail_data: Optional[PaymentDetailData] = Field(default=None, alias="paymentDetailData")
    payment_type_id: Optional[StrictInt] = Field(default=None, alias="paymentTypeId")
    payment_type_options: Optional[List[PaymentTypeData]] = Field(default=None, alias="paymentTypeOptions")
    penalty_charge: Optional[StrictBool] = Field(default=None, alias="penaltyCharge")
    penalty_charge_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="penaltyChargeAndNotReversed")
    reason_for_block: Optional[StrictStr] = Field(default=None, alias="reasonForBlock")
    receipt_number: Optional[StrictStr] = Field(default=None, alias="receiptNumber")
    ref_no: Optional[StrictStr] = Field(default=None, alias="refNo")
    release_transaction_id: Optional[StrictInt] = Field(default=None, alias="releaseTransactionId")
    reversal_transaction: Optional[StrictBool] = Field(default=None, alias="reversalTransaction")
    reversed: Optional[StrictBool] = None
    routing_code: Optional[StrictStr] = Field(default=None, alias="routingCode")
    row_index: Optional[StrictInt] = Field(default=None, alias="rowIndex")
    running_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="runningBalance")
    savings_account_charges_paid: Optional[List[SavingsAccountChargesPaidByData]] = Field(default=None, alias="savingsAccountChargesPaid")
    savings_account_id: Optional[StrictInt] = Field(default=None, alias="savingsAccountId")
    submitted_by_username: Optional[StrictStr] = Field(default=None, alias="submittedByUsername")
    submitted_on_date: Optional[date] = Field(default=None, alias="submittedOnDate")
    tax_details: Optional[List[TaxDetailsData]] = Field(default=None, alias="taxDetails")
    transaction_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="transactionAmount")
    transaction_date: Optional[date] = Field(default=None, alias="transactionDate")
    transaction_type: Optional[SavingsAccountTransactionEnumData] = Field(default=None, alias="transactionType")
    transfer: Optional[AccountTransferData] = None
    waive_charge: Optional[StrictBool] = Field(default=None, alias="waiveCharge")
    waive_fee_charge: Optional[StrictBool] = Field(default=None, alias="waiveFeeCharge")
    waive_fee_charge_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="waiveFeeChargeAndNotReversed")
    waive_penalty_charge: Optional[StrictBool] = Field(default=None, alias="waivePenaltyCharge")
    waive_penalty_charge_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="waivePenaltyChargeAndNotReversed")
    with_hold_tax_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="withHoldTaxAndNotReversed")
    withdrawal: Optional[StrictBool] = None
    withdrawal_fee_and_not_reversed: Optional[StrictBool] = Field(default=None, alias="withdrawalFeeAndNotReversed")
    __properties: ClassVar[List[str]] = ["accountId", "accountNo", "accountNumber", "amount", "amountOnHold", "amountRelease", "annualFee", "annualFeeAndNotReversed", "balanceEndDate", "balanceNumberOfDays", "bankNumber", "chargeTransaction", "chargeTransactionAndNotReversed", "chargesPaidByData", "checkNumber", "credit", "cumulativeBalance", "currency", "date", "dateFormat", "debit", "deposit", "depositAndNotReversed", "dividendPayoutAndNotReversed", "endOfBalanceLocalDate", "entryType", "feeCharge", "feeChargeAndNotReversed", "id", "interestPosting", "interestPostingAndNotReversed", "interestedPostedAsOn", "isManualTransaction", "isReversal", "lienTransaction", "locale", "manualTransaction", "modifiedId", "notReversed", "note", "originalTransactionId", "outstandingChargeAmount", "overdraftAmount", "overdraftInterestAndNotReversed", "payCharge", "paymentDetailData", "paymentTypeId", "paymentTypeOptions", "penaltyCharge", "penaltyChargeAndNotReversed", "reasonForBlock", "receiptNumber", "refNo", "releaseTransactionId", "reversalTransaction", "reversed", "routingCode", "rowIndex", "runningBalance", "savingsAccountChargesPaid", "savingsAccountId", "submittedByUsername", "submittedOnDate", "taxDetails", "transactionAmount", "transactionDate", "transactionType", "transfer", "waiveCharge", "waiveFeeCharge", "waiveFeeChargeAndNotReversed", "waivePenaltyCharge", "waivePenaltyChargeAndNotReversed", "withHoldTaxAndNotReversed", "withdrawal", "withdrawalFeeAndNotReversed"]

    @field_validator('entry_type')
    def entry_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREDIT', 'DEBIT']):
            raise ValueError("must be one of enum values ('CREDIT', 'DEBIT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SavingsAccountTransactionData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charges_paid_by_data (list)
        _items = []
        if self.charges_paid_by_data:
            for _item_charges_paid_by_data in self.charges_paid_by_data:
                if _item_charges_paid_by_data:
                    _items.append(_item_charges_paid_by_data.to_dict())
            _dict['chargesPaidByData'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_detail_data
        if self.payment_detail_data:
            _dict['paymentDetailData'] = self.payment_detail_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_type_options (list)
        _items = []
        if self.payment_type_options:
            for _item_payment_type_options in self.payment_type_options:
                if _item_payment_type_options:
                    _items.append(_item_payment_type_options.to_dict())
            _dict['paymentTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in savings_account_charges_paid (list)
        _items = []
        if self.savings_account_charges_paid:
            for _item_savings_account_charges_paid in self.savings_account_charges_paid:
                if _item_savings_account_charges_paid:
                    _items.append(_item_savings_account_charges_paid.to_dict())
            _dict['savingsAccountChargesPaid'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tax_details (list)
        _items = []
        if self.tax_details:
            for _item_tax_details in self.tax_details:
                if _item_tax_details:
                    _items.append(_item_tax_details.to_dict())
            _dict['taxDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of transaction_type
        if self.transaction_type:
            _dict['transactionType'] = self.transaction_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer
        if self.transfer:
            _dict['transfer'] = self.transfer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SavingsAccountTransactionData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "accountNo": obj.get("accountNo"),
            "accountNumber": obj.get("accountNumber"),
            "amount": obj.get("amount"),
            "amountOnHold": obj.get("amountOnHold"),
            "amountRelease": obj.get("amountRelease"),
            "annualFee": obj.get("annualFee"),
            "annualFeeAndNotReversed": obj.get("annualFeeAndNotReversed"),
            "balanceEndDate": obj.get("balanceEndDate"),
            "balanceNumberOfDays": obj.get("balanceNumberOfDays"),
            "bankNumber": obj.get("bankNumber"),
            "chargeTransaction": obj.get("chargeTransaction"),
            "chargeTransactionAndNotReversed": obj.get("chargeTransactionAndNotReversed"),
            "chargesPaidByData": [SavingsAccountChargesPaidByData.from_dict(_item) for _item in obj["chargesPaidByData"]] if obj.get("chargesPaidByData") is not None else None,
            "checkNumber": obj.get("checkNumber"),
            "credit": obj.get("credit"),
            "cumulativeBalance": obj.get("cumulativeBalance"),
            "currency": CurrencyData.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "date": obj.get("date"),
            "dateFormat": obj.get("dateFormat"),
            "debit": obj.get("debit"),
            "deposit": obj.get("deposit"),
            "depositAndNotReversed": obj.get("depositAndNotReversed"),
            "dividendPayoutAndNotReversed": obj.get("dividendPayoutAndNotReversed"),
            "endOfBalanceLocalDate": obj.get("endOfBalanceLocalDate"),
            "entryType": obj.get("entryType"),
            "feeCharge": obj.get("feeCharge"),
            "feeChargeAndNotReversed": obj.get("feeChargeAndNotReversed"),
            "id": obj.get("id"),
            "interestPosting": obj.get("interestPosting"),
            "interestPostingAndNotReversed": obj.get("interestPostingAndNotReversed"),
            "interestedPostedAsOn": obj.get("interestedPostedAsOn"),
            "isManualTransaction": obj.get("isManualTransaction"),
            "isReversal": obj.get("isReversal"),
            "lienTransaction": obj.get("lienTransaction"),
            "locale": obj.get("locale"),
            "manualTransaction": obj.get("manualTransaction"),
            "modifiedId": obj.get("modifiedId"),
            "notReversed": obj.get("notReversed"),
            "note": obj.get("note"),
            "originalTransactionId": obj.get("originalTransactionId"),
            "outstandingChargeAmount": obj.get("outstandingChargeAmount"),
            "overdraftAmount": obj.get("overdraftAmount"),
            "overdraftInterestAndNotReversed": obj.get("overdraftInterestAndNotReversed"),
            "payCharge": obj.get("payCharge"),
            "paymentDetailData": PaymentDetailData.from_dict(obj["paymentDetailData"]) if obj.get("paymentDetailData") is not None else None,
            "paymentTypeId": obj.get("paymentTypeId"),
            "paymentTypeOptions": [PaymentTypeData.from_dict(_item) for _item in obj["paymentTypeOptions"]] if obj.get("paymentTypeOptions") is not None else None,
            "penaltyCharge": obj.get("penaltyCharge"),
            "penaltyChargeAndNotReversed": obj.get("penaltyChargeAndNotReversed"),
            "reasonForBlock": obj.get("reasonForBlock"),
            "receiptNumber": obj.get("receiptNumber"),
            "refNo": obj.get("refNo"),
            "releaseTransactionId": obj.get("releaseTransactionId"),
            "reversalTransaction": obj.get("reversalTransaction"),
            "reversed": obj.get("reversed"),
            "routingCode": obj.get("routingCode"),
            "rowIndex": obj.get("rowIndex"),
            "runningBalance": obj.get("runningBalance"),
            "savingsAccountChargesPaid": [SavingsAccountChargesPaidByData.from_dict(_item) for _item in obj["savingsAccountChargesPaid"]] if obj.get("savingsAccountChargesPaid") is not None else None,
            "savingsAccountId": obj.get("savingsAccountId"),
            "submittedByUsername": obj.get("submittedByUsername"),
            "submittedOnDate": obj.get("submittedOnDate"),
            "taxDetails": [TaxDetailsData.from_dict(_item) for _item in obj["taxDetails"]] if obj.get("taxDetails") is not None else None,
            "transactionAmount": obj.get("transactionAmount"),
            "transactionDate": obj.get("transactionDate"),
            "transactionType": SavingsAccountTransactionEnumData.from_dict(obj["transactionType"]) if obj.get("transactionType") is not None else None,
            "transfer": AccountTransferData.from_dict(obj["transfer"]) if obj.get("transfer") is not None else None,
            "waiveCharge": obj.get("waiveCharge"),
            "waiveFeeCharge": obj.get("waiveFeeCharge"),
            "waiveFeeChargeAndNotReversed": obj.get("waiveFeeChargeAndNotReversed"),
            "waivePenaltyCharge": obj.get("waivePenaltyCharge"),
            "waivePenaltyChargeAndNotReversed": obj.get("waivePenaltyChargeAndNotReversed"),
            "withHoldTaxAndNotReversed": obj.get("withHoldTaxAndNotReversed"),
            "withdrawal": obj.get("withdrawal"),
            "withdrawalFeeAndNotReversed": obj.get("withdrawalFeeAndNotReversed")
        })
        return _obj

from fineract_client.models.account_transfer_data import AccountTransferData
# TODO: Rewrite to not use raise_errors
SavingsAccountTransactionData.model_rebuild(raise_errors=False)

