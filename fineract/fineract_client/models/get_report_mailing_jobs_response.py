# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.enum_option_data import EnumOptionData
from fineract_client.models.report_mailing_job_timeline_data import ReportMailingJobTimelineData
from typing import Optional, Set
from typing_extensions import Self

class GetReportMailingJobsResponse(BaseModel):
    """
    GetReportMailingJobsResponse
    """ # noqa: E501
    description: Optional[StrictStr] = None
    email_attachment_file_format: Optional[EnumOptionData] = Field(default=None, alias="emailAttachmentFileFormat")
    email_message: Optional[StrictStr] = Field(default=None, alias="emailMessage")
    email_recipients: Optional[StrictStr] = Field(default=None, alias="emailRecipients")
    email_subject: Optional[StrictStr] = Field(default=None, alias="emailSubject")
    id: Optional[StrictInt] = None
    is_active: Optional[StrictBool] = Field(default=None, alias="isActive")
    name: Optional[StrictStr] = None
    next_run_date_time: Optional[datetime] = Field(default=None, alias="nextRunDateTime")
    number_of_runs: Optional[StrictInt] = Field(default=None, alias="numberOfRuns")
    recurrence: Optional[StrictStr] = None
    run_as_user_id: Optional[StrictInt] = Field(default=None, alias="runAsUserId")
    start_date_time: Optional[datetime] = Field(default=None, alias="startDateTime")
    stretchy_report: Optional[Dict[str, Any]] = Field(default=None, alias="stretchyReport")
    stretchy_report_param_map: Optional[StrictStr] = Field(default=None, alias="stretchyReportParamMap")
    timeline: Optional[ReportMailingJobTimelineData] = None
    __properties: ClassVar[List[str]] = ["description", "emailAttachmentFileFormat", "emailMessage", "emailRecipients", "emailSubject", "id", "isActive", "name", "nextRunDateTime", "numberOfRuns", "recurrence", "runAsUserId", "startDateTime", "stretchyReport", "stretchyReportParamMap", "timeline"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetReportMailingJobsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_attachment_file_format
        if self.email_attachment_file_format:
            _dict['emailAttachmentFileFormat'] = self.email_attachment_file_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeline
        if self.timeline:
            _dict['timeline'] = self.timeline.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetReportMailingJobsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "emailAttachmentFileFormat": EnumOptionData.from_dict(obj["emailAttachmentFileFormat"]) if obj.get("emailAttachmentFileFormat") is not None else None,
            "emailMessage": obj.get("emailMessage"),
            "emailRecipients": obj.get("emailRecipients"),
            "emailSubject": obj.get("emailSubject"),
            "id": obj.get("id"),
            "isActive": obj.get("isActive"),
            "name": obj.get("name"),
            "nextRunDateTime": obj.get("nextRunDateTime"),
            "numberOfRuns": obj.get("numberOfRuns"),
            "recurrence": obj.get("recurrence"),
            "runAsUserId": obj.get("runAsUserId"),
            "startDateTime": obj.get("startDateTime"),
            "stretchyReport": obj.get("stretchyReport"),
            "stretchyReportParamMap": obj.get("stretchyReportParamMap"),
            "timeline": ReportMailingJobTimelineData.from_dict(obj["timeline"]) if obj.get("timeline") is not None else None
        })
        return _obj


