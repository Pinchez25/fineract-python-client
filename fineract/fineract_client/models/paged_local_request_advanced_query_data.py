# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.advanced_query_data import AdvancedQueryData
from fineract_client.models.paged_local_request_advanced_query_data_locale_object import PagedLocalRequestAdvancedQueryDataLocaleObject
from fineract_client.models.sort_order import SortOrder
from typing import Optional, Set
from typing_extensions import Self

class PagedLocalRequestAdvancedQueryData(BaseModel):
    """
    PagedLocalRequestAdvancedQueryData
    """ # noqa: E501
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    date_time_format: Optional[StrictStr] = Field(default=None, alias="dateTimeFormat")
    locale: Optional[StrictStr] = None
    locale_object: Optional[PagedLocalRequestAdvancedQueryDataLocaleObject] = Field(default=None, alias="localeObject")
    page: Optional[StrictInt] = None
    request: Optional[AdvancedQueryData] = None
    size: Optional[StrictInt] = None
    sorts: Optional[List[SortOrder]] = None
    __properties: ClassVar[List[str]] = ["dateFormat", "dateTimeFormat", "locale", "localeObject", "page", "request", "size", "sorts"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagedLocalRequestAdvancedQueryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of locale_object
        if self.locale_object:
            _dict['localeObject'] = self.locale_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sorts (list)
        _items = []
        if self.sorts:
            for _item in self.sorts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sorts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagedLocalRequestAdvancedQueryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateFormat": obj.get("dateFormat"),
            "dateTimeFormat": obj.get("dateTimeFormat"),
            "locale": obj.get("locale"),
            "localeObject": PagedLocalRequestAdvancedQueryDataLocaleObject.from_dict(obj["localeObject"]) if obj.get("localeObject") is not None else None,
            "page": obj.get("page"),
            "request": AdvancedQueryData.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "size": obj.get("size"),
            "sorts": [SortOrder.from_dict(_item) for _item in obj["sorts"]] if obj.get("sorts") is not None else None
        })
        return _obj


