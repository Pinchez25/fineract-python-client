# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.enum_option_data import EnumOptionData
from typing import Optional, Set
from typing_extensions import Self

class SmsCampaignData(BaseModel):
    """
    SmsCampaignData
    """ # noqa: E501
    campaign_name: Optional[StrictStr] = Field(default=None, alias="campaignName")
    campaign_status: Optional[EnumOptionData] = Field(default=None, alias="campaignStatus")
    campaign_type: Optional[EnumOptionData] = Field(default=None, alias="campaignType")
    id: Optional[StrictInt] = None
    last_trigger_date: Optional[date] = Field(default=None, alias="lastTriggerDate")
    message: Optional[StrictStr] = None
    next_trigger_date: Optional[datetime] = Field(default=None, alias="nextTriggerDate")
    notification: Optional[StrictBool] = None
    param_value: Optional[StrictStr] = Field(default=None, alias="paramValue")
    recurrence: Optional[StrictStr] = None
    recurrence_start_date: Optional[datetime] = Field(default=None, alias="recurrenceStartDate")
    report_name: Optional[StrictStr] = Field(default=None, alias="reportName")
    run_report_id: Optional[StrictInt] = Field(default=None, alias="runReportId")
    __properties: ClassVar[List[str]] = ["campaignName", "campaignStatus", "campaignType", "id", "lastTriggerDate", "message", "nextTriggerDate", "notification", "paramValue", "recurrence", "recurrenceStartDate", "reportName", "runReportId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SmsCampaignData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of campaign_status
        if self.campaign_status:
            _dict['campaignStatus'] = self.campaign_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign_type
        if self.campaign_type:
            _dict['campaignType'] = self.campaign_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SmsCampaignData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaignName": obj.get("campaignName"),
            "campaignStatus": EnumOptionData.from_dict(obj["campaignStatus"]) if obj.get("campaignStatus") is not None else None,
            "campaignType": EnumOptionData.from_dict(obj["campaignType"]) if obj.get("campaignType") is not None else None,
            "id": obj.get("id"),
            "lastTriggerDate": obj.get("lastTriggerDate"),
            "message": obj.get("message"),
            "nextTriggerDate": obj.get("nextTriggerDate"),
            "notification": obj.get("notification"),
            "paramValue": obj.get("paramValue"),
            "recurrence": obj.get("recurrence"),
            "recurrenceStartDate": obj.get("recurrenceStartDate"),
            "reportName": obj.get("reportName"),
            "runReportId": obj.get("runReportId")
        })
        return _obj


