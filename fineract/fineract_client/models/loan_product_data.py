# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.advanced_payment_data import AdvancedPaymentData
from fineract_client.models.charge_data import ChargeData
from fineract_client.models.charge_to_gl_account_mapper import ChargeToGLAccountMapper
from fineract_client.models.credit_allocation_data import CreditAllocationData
from fineract_client.models.currency_data import CurrencyData
from fineract_client.models.delinquency_bucket_data import DelinquencyBucketData
from fineract_client.models.enum_option_data import EnumOptionData
from fineract_client.models.floating_rate_data import FloatingRateData
from fineract_client.models.fund_data import FundData
from fineract_client.models.gl_account_data import GLAccountData
from fineract_client.models.loan_product_borrower_cycle_variation_data import LoanProductBorrowerCycleVariationData
from fineract_client.models.loan_product_configurable_attributes import LoanProductConfigurableAttributes
from fineract_client.models.loan_product_guarantee_data import LoanProductGuaranteeData
from fineract_client.models.loan_product_interest_recalculation_data import LoanProductInterestRecalculationData
from fineract_client.models.payment_type_data import PaymentTypeData
from fineract_client.models.payment_type_to_gl_account_mapper import PaymentTypeToGLAccountMapper
from fineract_client.models.rate_data import RateData
from fineract_client.models.string_enum_option_data import StringEnumOptionData
from fineract_client.models.transaction_processing_strategy_data import TransactionProcessingStrategyData
from typing import Optional, Set
from typing_extensions import Self

class LoanProductData(BaseModel):
    """
    LoanProductData
    """ # noqa: E501
    account_moves_out_of_npa_only_on_arrears_completion: Optional[StrictBool] = Field(default=None, alias="accountMovesOutOfNPAOnlyOnArrearsCompletion")
    accounting_mapping_options: Optional[Dict[str, List[GLAccountData]]] = Field(default=None, alias="accountingMappingOptions")
    accounting_mappings: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="accountingMappings")
    accounting_rule: Optional[EnumOptionData] = Field(default=None, alias="accountingRule")
    accounting_rule_options: Optional[List[EnumOptionData]] = Field(default=None, alias="accountingRuleOptions")
    advanced_payment_allocation_future_installment_allocation_rules: Optional[List[EnumOptionData]] = Field(default=None, alias="advancedPaymentAllocationFutureInstallmentAllocationRules")
    advanced_payment_allocation_transaction_types: Optional[List[EnumOptionData]] = Field(default=None, alias="advancedPaymentAllocationTransactionTypes")
    advanced_payment_allocation_types: Optional[List[EnumOptionData]] = Field(default=None, alias="advancedPaymentAllocationTypes")
    allow_approved_disbursed_amounts_over_applied: Optional[StrictBool] = Field(default=None, alias="allowApprovedDisbursedAmountsOverApplied")
    allow_attribute_overrides: Optional[LoanProductConfigurableAttributes] = Field(default=None, alias="allowAttributeOverrides")
    allow_partial_period_interest_calculation: Optional[StrictBool] = Field(default=None, alias="allowPartialPeriodInterestCalculation")
    allow_variable_installments: Optional[StrictBool] = Field(default=None, alias="allowVariableInstallments")
    amortization_type: Optional[EnumOptionData] = Field(default=None, alias="amortizationType")
    amortization_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="amortizationTypeOptions")
    annual_interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="annualInterestRate")
    can_define_installment_amount: Optional[StrictBool] = Field(default=None, alias="canDefineInstallmentAmount")
    can_use_for_topup: Optional[StrictBool] = Field(default=None, alias="canUseForTopup")
    charge_options: Optional[List[ChargeData]] = Field(default=None, alias="chargeOptions")
    charges: Optional[List[ChargeData]] = None
    close_date: Optional[date] = Field(default=None, alias="closeDate")
    compounding_to_be_posted_as_transaction: Optional[StrictBool] = Field(default=None, alias="compoundingToBePostedAsTransaction")
    credit_allocation: Optional[List[CreditAllocationData]] = Field(default=None, alias="creditAllocation")
    credit_allocation_allocation_types: Optional[List[EnumOptionData]] = Field(default=None, alias="creditAllocationAllocationTypes")
    credit_allocation_transaction_types: Optional[List[EnumOptionData]] = Field(default=None, alias="creditAllocationTransactionTypes")
    currency: Optional[CurrencyData] = None
    currency_options: Optional[List[CurrencyData]] = Field(default=None, alias="currencyOptions")
    days_in_month_type: Optional[EnumOptionData] = Field(default=None, alias="daysInMonthType")
    days_in_month_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="daysInMonthTypeOptions")
    days_in_year_type: Optional[EnumOptionData] = Field(default=None, alias="daysInYearType")
    days_in_year_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="daysInYearTypeOptions")
    default_differential_lending_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="defaultDifferentialLendingRate")
    delinquency_bucket: Optional[DelinquencyBucketData] = Field(default=None, alias="delinquencyBucket")
    delinquency_bucket_options: Optional[List[DelinquencyBucketData]] = Field(default=None, alias="delinquencyBucketOptions")
    description: Optional[StrictStr] = None
    disallow_expected_disbursements: Optional[StrictBool] = Field(default=None, alias="disallowExpectedDisbursements")
    disbursed_amount_percentage_for_down_payment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="disbursedAmountPercentageForDownPayment")
    due_days_for_repayment_event: Optional[StrictInt] = Field(default=None, alias="dueDaysForRepaymentEvent")
    enable_accrual_activity_posting: Optional[StrictBool] = Field(default=None, alias="enableAccrualActivityPosting")
    enable_auto_repayment_for_down_payment: Optional[StrictBool] = Field(default=None, alias="enableAutoRepaymentForDownPayment")
    enable_down_payment: Optional[StrictBool] = Field(default=None, alias="enableDownPayment")
    enable_installment_level_delinquency: Optional[StrictBool] = Field(default=None, alias="enableInstallmentLevelDelinquency")
    equal_amortization: Optional[StrictBool] = Field(default=None, alias="equalAmortization")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    fee_to_income_account_mappings: Optional[List[ChargeToGLAccountMapper]] = Field(default=None, alias="feeToIncomeAccountMappings")
    fixed_length: Optional[StrictInt] = Field(default=None, alias="fixedLength")
    fixed_principal_percentage_per_installment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fixedPrincipalPercentagePerInstallment")
    floating_interest_rate_calculation_allowed: Optional[StrictBool] = Field(default=None, alias="floatingInterestRateCalculationAllowed")
    floating_rate_id: Optional[StrictInt] = Field(default=None, alias="floatingRateId")
    floating_rate_name: Optional[StrictStr] = Field(default=None, alias="floatingRateName")
    floating_rate_options: Optional[List[FloatingRateData]] = Field(default=None, alias="floatingRateOptions")
    fund_id: Optional[StrictInt] = Field(default=None, alias="fundId")
    fund_name: Optional[StrictStr] = Field(default=None, alias="fundName")
    fund_options: Optional[List[FundData]] = Field(default=None, alias="fundOptions")
    grace_on_arrears_ageing: Optional[StrictInt] = Field(default=None, alias="graceOnArrearsAgeing")
    grace_on_interest_charged: Optional[StrictInt] = Field(default=None, alias="graceOnInterestCharged")
    grace_on_interest_payment: Optional[StrictInt] = Field(default=None, alias="graceOnInterestPayment")
    grace_on_principal_payment: Optional[StrictInt] = Field(default=None, alias="graceOnPrincipalPayment")
    hold_guarantee_funds: Optional[StrictBool] = Field(default=None, alias="holdGuaranteeFunds")
    id: Optional[StrictInt] = None
    in_arrears_tolerance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="inArrearsTolerance")
    include_in_borrower_cycle: Optional[StrictBool] = Field(default=None, alias="includeInBorrowerCycle")
    installment_amount_in_multiples_of: Optional[StrictInt] = Field(default=None, alias="installmentAmountInMultiplesOf")
    interest_calculation_period_type: Optional[EnumOptionData] = Field(default=None, alias="interestCalculationPeriodType")
    interest_calculation_period_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestCalculationPeriodTypeOptions")
    interest_rate_differential: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestRateDifferential")
    interest_rate_frequency_type: Optional[EnumOptionData] = Field(default=None, alias="interestRateFrequencyType")
    interest_rate_frequency_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestRateFrequencyTypeOptions")
    interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="interestRatePerPeriod")
    interest_rate_variations_for_borrower_cycle: Optional[List[LoanProductBorrowerCycleVariationData]] = Field(default=None, alias="interestRateVariationsForBorrowerCycle")
    interest_recalculation_compounding_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestRecalculationCompoundingTypeOptions")
    interest_recalculation_data: Optional[LoanProductInterestRecalculationData] = Field(default=None, alias="interestRecalculationData")
    interest_recalculation_day_of_week_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestRecalculationDayOfWeekTypeOptions")
    interest_recalculation_enabled: Optional[StrictBool] = Field(default=None, alias="interestRecalculationEnabled")
    interest_recalculation_frequency_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestRecalculationFrequencyTypeOptions")
    interest_recalculation_nth_day_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestRecalculationNthDayTypeOptions")
    interest_type: Optional[EnumOptionData] = Field(default=None, alias="interestType")
    interest_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestTypeOptions")
    is_allow_partial_period_interest_calculation: Optional[StrictBool] = Field(default=None, alias="isAllowPartialPeriodInterestCalculation")
    is_equal_amortization: Optional[StrictBool] = Field(default=None, alias="isEqualAmortization")
    is_floating_interest_rate_calculation_allowed: Optional[StrictBool] = Field(default=None, alias="isFloatingInterestRateCalculationAllowed")
    is_interest_recalculation_enabled: Optional[StrictBool] = Field(default=None, alias="isInterestRecalculationEnabled")
    is_linked_to_floating_interest_rates: Optional[StrictBool] = Field(default=None, alias="isLinkedToFloatingInterestRates")
    is_rates_enabled: Optional[StrictBool] = Field(default=None, alias="isRatesEnabled")
    linked_to_floating_interest_rates: Optional[StrictBool] = Field(default=None, alias="linkedToFloatingInterestRates")
    loan_product_configurable_attributes: Optional[LoanProductConfigurableAttributes] = Field(default=None, alias="loanProductConfigurableAttributes")
    loan_schedule_processing_type: Optional[EnumOptionData] = Field(default=None, alias="loanScheduleProcessingType")
    loan_schedule_processing_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="loanScheduleProcessingTypeOptions")
    loan_schedule_type: Optional[EnumOptionData] = Field(default=None, alias="loanScheduleType")
    loan_schedule_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="loanScheduleTypeOptions")
    max_differential_lending_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxDifferentialLendingRate")
    max_interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxInterestRatePerPeriod")
    max_number_of_repayments: Optional[StrictInt] = Field(default=None, alias="maxNumberOfRepayments")
    max_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxPrincipal")
    max_tranche_count: Optional[StrictInt] = Field(default=None, alias="maxTrancheCount")
    maximum_gap: Optional[StrictInt] = Field(default=None, alias="maximumGap")
    min_differential_lending_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minDifferentialLendingRate")
    min_interest_rate_per_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minInterestRatePerPeriod")
    min_number_of_repayments: Optional[StrictInt] = Field(default=None, alias="minNumberOfRepayments")
    min_principal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minPrincipal")
    minimum_days_between_disbursal_and_first_repayment: Optional[StrictInt] = Field(default=None, alias="minimumDaysBetweenDisbursalAndFirstRepayment")
    minimum_gap: Optional[StrictInt] = Field(default=None, alias="minimumGap")
    multi_disburse_loan: Optional[StrictBool] = Field(default=None, alias="multiDisburseLoan")
    name: Optional[StrictStr] = None
    number_of_repayment_variations_for_borrower_cycle: Optional[List[LoanProductBorrowerCycleVariationData]] = Field(default=None, alias="numberOfRepaymentVariationsForBorrowerCycle")
    number_of_repayments: Optional[StrictInt] = Field(default=None, alias="numberOfRepayments")
    outstanding_loan_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="outstandingLoanBalance")
    over_applied_calculation_type: Optional[StrictStr] = Field(default=None, alias="overAppliedCalculationType")
    over_applied_number: Optional[StrictInt] = Field(default=None, alias="overAppliedNumber")
    over_due_days_for_repayment_event: Optional[StrictInt] = Field(default=None, alias="overDueDaysForRepaymentEvent")
    overdue_days_for_npa: Optional[StrictInt] = Field(default=None, alias="overdueDaysForNPA")
    payment_allocation: Optional[List[AdvancedPaymentData]] = Field(default=None, alias="paymentAllocation")
    payment_channel_to_fund_source_mappings: Optional[List[PaymentTypeToGLAccountMapper]] = Field(default=None, alias="paymentChannelToFundSourceMappings")
    payment_type_options: Optional[List[PaymentTypeData]] = Field(default=None, alias="paymentTypeOptions")
    penalty_options: Optional[List[ChargeData]] = Field(default=None, alias="penaltyOptions")
    penalty_to_income_account_mappings: Optional[List[ChargeToGLAccountMapper]] = Field(default=None, alias="penaltyToIncomeAccountMappings")
    pre_closure_interest_calculation_strategy_options: Optional[List[EnumOptionData]] = Field(default=None, alias="preClosureInterestCalculationStrategyOptions")
    principal: Optional[Union[StrictFloat, StrictInt]] = None
    principal_threshold_for_last_installment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="principalThresholdForLastInstallment")
    principal_variations_for_borrower_cycle: Optional[List[LoanProductBorrowerCycleVariationData]] = Field(default=None, alias="principalVariationsForBorrowerCycle")
    product_guarantee_data: Optional[LoanProductGuaranteeData] = Field(default=None, alias="productGuaranteeData")
    rate_options: Optional[List[RateData]] = Field(default=None, alias="rateOptions")
    rates: Optional[List[RateData]] = None
    rates_enabled: Optional[StrictBool] = Field(default=None, alias="ratesEnabled")
    recurring_moratorium_on_principal_periods: Optional[StrictInt] = Field(default=None, alias="recurringMoratoriumOnPrincipalPeriods")
    repayment_every: Optional[StrictInt] = Field(default=None, alias="repaymentEvery")
    repayment_frequency_type: Optional[EnumOptionData] = Field(default=None, alias="repaymentFrequencyType")
    repayment_frequency_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="repaymentFrequencyTypeOptions")
    repayment_start_date_type: Optional[EnumOptionData] = Field(default=None, alias="repaymentStartDateType")
    repayment_start_date_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="repaymentStartDateTypeOptions")
    reschedule_strategy_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="rescheduleStrategyTypeOptions")
    short_name: Optional[StrictStr] = Field(default=None, alias="shortName")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    status: Optional[StrictStr] = None
    supported_interest_refund_types: Optional[List[StringEnumOptionData]] = Field(default=None, alias="supportedInterestRefundTypes")
    supported_interest_refund_types_options: Optional[List[StringEnumOptionData]] = Field(default=None, alias="supportedInterestRefundTypesOptions")
    sync_expected_with_disbursement_date: Optional[StrictBool] = Field(default=None, alias="syncExpectedWithDisbursementDate")
    transaction_processing_strategy_code: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategyCode")
    transaction_processing_strategy_name: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategyName")
    transaction_processing_strategy_options: Optional[List[TransactionProcessingStrategyData]] = Field(default=None, alias="transactionProcessingStrategyOptions")
    use_borrower_cycle: Optional[StrictBool] = Field(default=None, alias="useBorrowerCycle")
    value_condition_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="valueConditionTypeOptions")
    __properties: ClassVar[List[str]] = ["accountMovesOutOfNPAOnlyOnArrearsCompletion", "accountingMappingOptions", "accountingMappings", "accountingRule", "accountingRuleOptions", "advancedPaymentAllocationFutureInstallmentAllocationRules", "advancedPaymentAllocationTransactionTypes", "advancedPaymentAllocationTypes", "allowApprovedDisbursedAmountsOverApplied", "allowAttributeOverrides", "allowPartialPeriodInterestCalculation", "allowVariableInstallments", "amortizationType", "amortizationTypeOptions", "annualInterestRate", "canDefineInstallmentAmount", "canUseForTopup", "chargeOptions", "charges", "closeDate", "compoundingToBePostedAsTransaction", "creditAllocation", "creditAllocationAllocationTypes", "creditAllocationTransactionTypes", "currency", "currencyOptions", "daysInMonthType", "daysInMonthTypeOptions", "daysInYearType", "daysInYearTypeOptions", "defaultDifferentialLendingRate", "delinquencyBucket", "delinquencyBucketOptions", "description", "disallowExpectedDisbursements", "disbursedAmountPercentageForDownPayment", "dueDaysForRepaymentEvent", "enableAccrualActivityPosting", "enableAutoRepaymentForDownPayment", "enableDownPayment", "enableInstallmentLevelDelinquency", "equalAmortization", "externalId", "feeToIncomeAccountMappings", "fixedLength", "fixedPrincipalPercentagePerInstallment", "floatingInterestRateCalculationAllowed", "floatingRateId", "floatingRateName", "floatingRateOptions", "fundId", "fundName", "fundOptions", "graceOnArrearsAgeing", "graceOnInterestCharged", "graceOnInterestPayment", "graceOnPrincipalPayment", "holdGuaranteeFunds", "id", "inArrearsTolerance", "includeInBorrowerCycle", "installmentAmountInMultiplesOf", "interestCalculationPeriodType", "interestCalculationPeriodTypeOptions", "interestRateDifferential", "interestRateFrequencyType", "interestRateFrequencyTypeOptions", "interestRatePerPeriod", "interestRateVariationsForBorrowerCycle", "interestRecalculationCompoundingTypeOptions", "interestRecalculationData", "interestRecalculationDayOfWeekTypeOptions", "interestRecalculationEnabled", "interestRecalculationFrequencyTypeOptions", "interestRecalculationNthDayTypeOptions", "interestType", "interestTypeOptions", "isAllowPartialPeriodInterestCalculation", "isEqualAmortization", "isFloatingInterestRateCalculationAllowed", "isInterestRecalculationEnabled", "isLinkedToFloatingInterestRates", "isRatesEnabled", "linkedToFloatingInterestRates", "loanProductConfigurableAttributes", "loanScheduleProcessingType", "loanScheduleProcessingTypeOptions", "loanScheduleType", "loanScheduleTypeOptions", "maxDifferentialLendingRate", "maxInterestRatePerPeriod", "maxNumberOfRepayments", "maxPrincipal", "maxTrancheCount", "maximumGap", "minDifferentialLendingRate", "minInterestRatePerPeriod", "minNumberOfRepayments", "minPrincipal", "minimumDaysBetweenDisbursalAndFirstRepayment", "minimumGap", "multiDisburseLoan", "name", "numberOfRepaymentVariationsForBorrowerCycle", "numberOfRepayments", "outstandingLoanBalance", "overAppliedCalculationType", "overAppliedNumber", "overDueDaysForRepaymentEvent", "overdueDaysForNPA", "paymentAllocation", "paymentChannelToFundSourceMappings", "paymentTypeOptions", "penaltyOptions", "penaltyToIncomeAccountMappings", "preClosureInterestCalculationStrategyOptions", "principal", "principalThresholdForLastInstallment", "principalVariationsForBorrowerCycle", "productGuaranteeData", "rateOptions", "rates", "ratesEnabled", "recurringMoratoriumOnPrincipalPeriods", "repaymentEvery", "repaymentFrequencyType", "repaymentFrequencyTypeOptions", "repaymentStartDateType", "repaymentStartDateTypeOptions", "rescheduleStrategyTypeOptions", "shortName", "startDate", "status", "supportedInterestRefundTypes", "supportedInterestRefundTypesOptions", "syncExpectedWithDisbursementDate", "transactionProcessingStrategyCode", "transactionProcessingStrategyName", "transactionProcessingStrategyOptions", "useBorrowerCycle", "valueConditionTypeOptions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoanProductData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in accounting_mapping_options (dict of array)
        _field_dict_of_array = {}
        if self.accounting_mapping_options:
            for _key in self.accounting_mapping_options:
                if self.accounting_mapping_options[_key] is not None:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.accounting_mapping_options[_key]
                    ]
            _dict['accountingMappingOptions'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of accounting_rule
        if self.accounting_rule:
            _dict['accountingRule'] = self.accounting_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in accounting_rule_options (list)
        _items = []
        if self.accounting_rule_options:
            for _item in self.accounting_rule_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountingRuleOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_payment_allocation_future_installment_allocation_rules (list)
        _items = []
        if self.advanced_payment_allocation_future_installment_allocation_rules:
            for _item in self.advanced_payment_allocation_future_installment_allocation_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['advancedPaymentAllocationFutureInstallmentAllocationRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_payment_allocation_transaction_types (list)
        _items = []
        if self.advanced_payment_allocation_transaction_types:
            for _item in self.advanced_payment_allocation_transaction_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['advancedPaymentAllocationTransactionTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_payment_allocation_types (list)
        _items = []
        if self.advanced_payment_allocation_types:
            for _item in self.advanced_payment_allocation_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['advancedPaymentAllocationTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of allow_attribute_overrides
        if self.allow_attribute_overrides:
            _dict['allowAttributeOverrides'] = self.allow_attribute_overrides.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amortization_type
        if self.amortization_type:
            _dict['amortizationType'] = self.amortization_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in amortization_type_options (list)
        _items = []
        if self.amortization_type_options:
            for _item in self.amortization_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['amortizationTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charge_options (list)
        _items = []
        if self.charge_options:
            for _item in self.charge_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credit_allocation (list)
        _items = []
        if self.credit_allocation:
            for _item in self.credit_allocation:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditAllocation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credit_allocation_allocation_types (list)
        _items = []
        if self.credit_allocation_allocation_types:
            for _item in self.credit_allocation_allocation_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditAllocationAllocationTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credit_allocation_transaction_types (list)
        _items = []
        if self.credit_allocation_transaction_types:
            for _item in self.credit_allocation_transaction_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditAllocationTransactionTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in currency_options (list)
        _items = []
        if self.currency_options:
            for _item in self.currency_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['currencyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of days_in_month_type
        if self.days_in_month_type:
            _dict['daysInMonthType'] = self.days_in_month_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in days_in_month_type_options (list)
        _items = []
        if self.days_in_month_type_options:
            for _item in self.days_in_month_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['daysInMonthTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of days_in_year_type
        if self.days_in_year_type:
            _dict['daysInYearType'] = self.days_in_year_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in days_in_year_type_options (list)
        _items = []
        if self.days_in_year_type_options:
            for _item in self.days_in_year_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['daysInYearTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of delinquency_bucket
        if self.delinquency_bucket:
            _dict['delinquencyBucket'] = self.delinquency_bucket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in delinquency_bucket_options (list)
        _items = []
        if self.delinquency_bucket_options:
            for _item in self.delinquency_bucket_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['delinquencyBucketOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fee_to_income_account_mappings (list)
        _items = []
        if self.fee_to_income_account_mappings:
            for _item in self.fee_to_income_account_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['feeToIncomeAccountMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in floating_rate_options (list)
        _items = []
        if self.floating_rate_options:
            for _item in self.floating_rate_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['floatingRateOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fund_options (list)
        _items = []
        if self.fund_options:
            for _item in self.fund_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fundOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_period_type
        if self.interest_calculation_period_type:
            _dict['interestCalculationPeriodType'] = self.interest_calculation_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_calculation_period_type_options (list)
        _items = []
        if self.interest_calculation_period_type_options:
            for _item in self.interest_calculation_period_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestCalculationPeriodTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_rate_frequency_type
        if self.interest_rate_frequency_type:
            _dict['interestRateFrequencyType'] = self.interest_rate_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_rate_frequency_type_options (list)
        _items = []
        if self.interest_rate_frequency_type_options:
            for _item in self.interest_rate_frequency_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestRateFrequencyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interest_rate_variations_for_borrower_cycle (list)
        _items = []
        if self.interest_rate_variations_for_borrower_cycle:
            for _item in self.interest_rate_variations_for_borrower_cycle:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestRateVariationsForBorrowerCycle'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interest_recalculation_compounding_type_options (list)
        _items = []
        if self.interest_recalculation_compounding_type_options:
            for _item in self.interest_recalculation_compounding_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestRecalculationCompoundingTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_recalculation_data
        if self.interest_recalculation_data:
            _dict['interestRecalculationData'] = self.interest_recalculation_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_recalculation_day_of_week_type_options (list)
        _items = []
        if self.interest_recalculation_day_of_week_type_options:
            for _item in self.interest_recalculation_day_of_week_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestRecalculationDayOfWeekTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interest_recalculation_frequency_type_options (list)
        _items = []
        if self.interest_recalculation_frequency_type_options:
            for _item in self.interest_recalculation_frequency_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestRecalculationFrequencyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interest_recalculation_nth_day_type_options (list)
        _items = []
        if self.interest_recalculation_nth_day_type_options:
            for _item in self.interest_recalculation_nth_day_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestRecalculationNthDayTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_type
        if self.interest_type:
            _dict['interestType'] = self.interest_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_type_options (list)
        _items = []
        if self.interest_type_options:
            for _item in self.interest_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of loan_product_configurable_attributes
        if self.loan_product_configurable_attributes:
            _dict['loanProductConfigurableAttributes'] = self.loan_product_configurable_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan_schedule_processing_type
        if self.loan_schedule_processing_type:
            _dict['loanScheduleProcessingType'] = self.loan_schedule_processing_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in loan_schedule_processing_type_options (list)
        _items = []
        if self.loan_schedule_processing_type_options:
            for _item in self.loan_schedule_processing_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['loanScheduleProcessingTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of loan_schedule_type
        if self.loan_schedule_type:
            _dict['loanScheduleType'] = self.loan_schedule_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in loan_schedule_type_options (list)
        _items = []
        if self.loan_schedule_type_options:
            for _item in self.loan_schedule_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['loanScheduleTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in number_of_repayment_variations_for_borrower_cycle (list)
        _items = []
        if self.number_of_repayment_variations_for_borrower_cycle:
            for _item in self.number_of_repayment_variations_for_borrower_cycle:
                if _item:
                    _items.append(_item.to_dict())
            _dict['numberOfRepaymentVariationsForBorrowerCycle'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_allocation (list)
        _items = []
        if self.payment_allocation:
            for _item in self.payment_allocation:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentAllocation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_channel_to_fund_source_mappings (list)
        _items = []
        if self.payment_channel_to_fund_source_mappings:
            for _item in self.payment_channel_to_fund_source_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentChannelToFundSourceMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_type_options (list)
        _items = []
        if self.payment_type_options:
            for _item in self.payment_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in penalty_options (list)
        _items = []
        if self.penalty_options:
            for _item in self.penalty_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['penaltyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in penalty_to_income_account_mappings (list)
        _items = []
        if self.penalty_to_income_account_mappings:
            for _item in self.penalty_to_income_account_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['penaltyToIncomeAccountMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pre_closure_interest_calculation_strategy_options (list)
        _items = []
        if self.pre_closure_interest_calculation_strategy_options:
            for _item in self.pre_closure_interest_calculation_strategy_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['preClosureInterestCalculationStrategyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in principal_variations_for_borrower_cycle (list)
        _items = []
        if self.principal_variations_for_borrower_cycle:
            for _item in self.principal_variations_for_borrower_cycle:
                if _item:
                    _items.append(_item.to_dict())
            _dict['principalVariationsForBorrowerCycle'] = _items
        # override the default output from pydantic by calling `to_dict()` of product_guarantee_data
        if self.product_guarantee_data:
            _dict['productGuaranteeData'] = self.product_guarantee_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rate_options (list)
        _items = []
        if self.rate_options:
            for _item in self.rate_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rateOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rates (list)
        _items = []
        if self.rates:
            for _item in self.rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rates'] = _items
        # override the default output from pydantic by calling `to_dict()` of repayment_frequency_type
        if self.repayment_frequency_type:
            _dict['repaymentFrequencyType'] = self.repayment_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in repayment_frequency_type_options (list)
        _items = []
        if self.repayment_frequency_type_options:
            for _item in self.repayment_frequency_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['repaymentFrequencyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of repayment_start_date_type
        if self.repayment_start_date_type:
            _dict['repaymentStartDateType'] = self.repayment_start_date_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in repayment_start_date_type_options (list)
        _items = []
        if self.repayment_start_date_type_options:
            for _item in self.repayment_start_date_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['repaymentStartDateTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reschedule_strategy_type_options (list)
        _items = []
        if self.reschedule_strategy_type_options:
            for _item in self.reschedule_strategy_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rescheduleStrategyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in supported_interest_refund_types (list)
        _items = []
        if self.supported_interest_refund_types:
            for _item in self.supported_interest_refund_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['supportedInterestRefundTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in supported_interest_refund_types_options (list)
        _items = []
        if self.supported_interest_refund_types_options:
            for _item in self.supported_interest_refund_types_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['supportedInterestRefundTypesOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transaction_processing_strategy_options (list)
        _items = []
        if self.transaction_processing_strategy_options:
            for _item in self.transaction_processing_strategy_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transactionProcessingStrategyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in value_condition_type_options (list)
        _items = []
        if self.value_condition_type_options:
            for _item in self.value_condition_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['valueConditionTypeOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoanProductData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountMovesOutOfNPAOnlyOnArrearsCompletion": obj.get("accountMovesOutOfNPAOnlyOnArrearsCompletion"),
            "accountingMappingOptions": dict(
                (_k,
                        [GLAccountData.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("accountingMappingOptions", {}).items()
            ),
            "accountingMappings": obj.get("accountingMappings"),
            "accountingRule": EnumOptionData.from_dict(obj["accountingRule"]) if obj.get("accountingRule") is not None else None,
            "accountingRuleOptions": [EnumOptionData.from_dict(_item) for _item in obj["accountingRuleOptions"]] if obj.get("accountingRuleOptions") is not None else None,
            "advancedPaymentAllocationFutureInstallmentAllocationRules": [EnumOptionData.from_dict(_item) for _item in obj["advancedPaymentAllocationFutureInstallmentAllocationRules"]] if obj.get("advancedPaymentAllocationFutureInstallmentAllocationRules") is not None else None,
            "advancedPaymentAllocationTransactionTypes": [EnumOptionData.from_dict(_item) for _item in obj["advancedPaymentAllocationTransactionTypes"]] if obj.get("advancedPaymentAllocationTransactionTypes") is not None else None,
            "advancedPaymentAllocationTypes": [EnumOptionData.from_dict(_item) for _item in obj["advancedPaymentAllocationTypes"]] if obj.get("advancedPaymentAllocationTypes") is not None else None,
            "allowApprovedDisbursedAmountsOverApplied": obj.get("allowApprovedDisbursedAmountsOverApplied"),
            "allowAttributeOverrides": LoanProductConfigurableAttributes.from_dict(obj["allowAttributeOverrides"]) if obj.get("allowAttributeOverrides") is not None else None,
            "allowPartialPeriodInterestCalculation": obj.get("allowPartialPeriodInterestCalculation"),
            "allowVariableInstallments": obj.get("allowVariableInstallments"),
            "amortizationType": EnumOptionData.from_dict(obj["amortizationType"]) if obj.get("amortizationType") is not None else None,
            "amortizationTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["amortizationTypeOptions"]] if obj.get("amortizationTypeOptions") is not None else None,
            "annualInterestRate": obj.get("annualInterestRate"),
            "canDefineInstallmentAmount": obj.get("canDefineInstallmentAmount"),
            "canUseForTopup": obj.get("canUseForTopup"),
            "chargeOptions": [ChargeData.from_dict(_item) for _item in obj["chargeOptions"]] if obj.get("chargeOptions") is not None else None,
            "charges": [ChargeData.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "closeDate": obj.get("closeDate"),
            "compoundingToBePostedAsTransaction": obj.get("compoundingToBePostedAsTransaction"),
            "creditAllocation": [CreditAllocationData.from_dict(_item) for _item in obj["creditAllocation"]] if obj.get("creditAllocation") is not None else None,
            "creditAllocationAllocationTypes": [EnumOptionData.from_dict(_item) for _item in obj["creditAllocationAllocationTypes"]] if obj.get("creditAllocationAllocationTypes") is not None else None,
            "creditAllocationTransactionTypes": [EnumOptionData.from_dict(_item) for _item in obj["creditAllocationTransactionTypes"]] if obj.get("creditAllocationTransactionTypes") is not None else None,
            "currency": CurrencyData.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "currencyOptions": [CurrencyData.from_dict(_item) for _item in obj["currencyOptions"]] if obj.get("currencyOptions") is not None else None,
            "daysInMonthType": EnumOptionData.from_dict(obj["daysInMonthType"]) if obj.get("daysInMonthType") is not None else None,
            "daysInMonthTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["daysInMonthTypeOptions"]] if obj.get("daysInMonthTypeOptions") is not None else None,
            "daysInYearType": EnumOptionData.from_dict(obj["daysInYearType"]) if obj.get("daysInYearType") is not None else None,
            "daysInYearTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["daysInYearTypeOptions"]] if obj.get("daysInYearTypeOptions") is not None else None,
            "defaultDifferentialLendingRate": obj.get("defaultDifferentialLendingRate"),
            "delinquencyBucket": DelinquencyBucketData.from_dict(obj["delinquencyBucket"]) if obj.get("delinquencyBucket") is not None else None,
            "delinquencyBucketOptions": [DelinquencyBucketData.from_dict(_item) for _item in obj["delinquencyBucketOptions"]] if obj.get("delinquencyBucketOptions") is not None else None,
            "description": obj.get("description"),
            "disallowExpectedDisbursements": obj.get("disallowExpectedDisbursements"),
            "disbursedAmountPercentageForDownPayment": obj.get("disbursedAmountPercentageForDownPayment"),
            "dueDaysForRepaymentEvent": obj.get("dueDaysForRepaymentEvent"),
            "enableAccrualActivityPosting": obj.get("enableAccrualActivityPosting"),
            "enableAutoRepaymentForDownPayment": obj.get("enableAutoRepaymentForDownPayment"),
            "enableDownPayment": obj.get("enableDownPayment"),
            "enableInstallmentLevelDelinquency": obj.get("enableInstallmentLevelDelinquency"),
            "equalAmortization": obj.get("equalAmortization"),
            "externalId": obj.get("externalId"),
            "feeToIncomeAccountMappings": [ChargeToGLAccountMapper.from_dict(_item) for _item in obj["feeToIncomeAccountMappings"]] if obj.get("feeToIncomeAccountMappings") is not None else None,
            "fixedLength": obj.get("fixedLength"),
            "fixedPrincipalPercentagePerInstallment": obj.get("fixedPrincipalPercentagePerInstallment"),
            "floatingInterestRateCalculationAllowed": obj.get("floatingInterestRateCalculationAllowed"),
            "floatingRateId": obj.get("floatingRateId"),
            "floatingRateName": obj.get("floatingRateName"),
            "floatingRateOptions": [FloatingRateData.from_dict(_item) for _item in obj["floatingRateOptions"]] if obj.get("floatingRateOptions") is not None else None,
            "fundId": obj.get("fundId"),
            "fundName": obj.get("fundName"),
            "fundOptions": [FundData.from_dict(_item) for _item in obj["fundOptions"]] if obj.get("fundOptions") is not None else None,
            "graceOnArrearsAgeing": obj.get("graceOnArrearsAgeing"),
            "graceOnInterestCharged": obj.get("graceOnInterestCharged"),
            "graceOnInterestPayment": obj.get("graceOnInterestPayment"),
            "graceOnPrincipalPayment": obj.get("graceOnPrincipalPayment"),
            "holdGuaranteeFunds": obj.get("holdGuaranteeFunds"),
            "id": obj.get("id"),
            "inArrearsTolerance": obj.get("inArrearsTolerance"),
            "includeInBorrowerCycle": obj.get("includeInBorrowerCycle"),
            "installmentAmountInMultiplesOf": obj.get("installmentAmountInMultiplesOf"),
            "interestCalculationPeriodType": EnumOptionData.from_dict(obj["interestCalculationPeriodType"]) if obj.get("interestCalculationPeriodType") is not None else None,
            "interestCalculationPeriodTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestCalculationPeriodTypeOptions"]] if obj.get("interestCalculationPeriodTypeOptions") is not None else None,
            "interestRateDifferential": obj.get("interestRateDifferential"),
            "interestRateFrequencyType": EnumOptionData.from_dict(obj["interestRateFrequencyType"]) if obj.get("interestRateFrequencyType") is not None else None,
            "interestRateFrequencyTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestRateFrequencyTypeOptions"]] if obj.get("interestRateFrequencyTypeOptions") is not None else None,
            "interestRatePerPeriod": obj.get("interestRatePerPeriod"),
            "interestRateVariationsForBorrowerCycle": [LoanProductBorrowerCycleVariationData.from_dict(_item) for _item in obj["interestRateVariationsForBorrowerCycle"]] if obj.get("interestRateVariationsForBorrowerCycle") is not None else None,
            "interestRecalculationCompoundingTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestRecalculationCompoundingTypeOptions"]] if obj.get("interestRecalculationCompoundingTypeOptions") is not None else None,
            "interestRecalculationData": LoanProductInterestRecalculationData.from_dict(obj["interestRecalculationData"]) if obj.get("interestRecalculationData") is not None else None,
            "interestRecalculationDayOfWeekTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestRecalculationDayOfWeekTypeOptions"]] if obj.get("interestRecalculationDayOfWeekTypeOptions") is not None else None,
            "interestRecalculationEnabled": obj.get("interestRecalculationEnabled"),
            "interestRecalculationFrequencyTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestRecalculationFrequencyTypeOptions"]] if obj.get("interestRecalculationFrequencyTypeOptions") is not None else None,
            "interestRecalculationNthDayTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestRecalculationNthDayTypeOptions"]] if obj.get("interestRecalculationNthDayTypeOptions") is not None else None,
            "interestType": EnumOptionData.from_dict(obj["interestType"]) if obj.get("interestType") is not None else None,
            "interestTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestTypeOptions"]] if obj.get("interestTypeOptions") is not None else None,
            "isAllowPartialPeriodInterestCalculation": obj.get("isAllowPartialPeriodInterestCalculation"),
            "isEqualAmortization": obj.get("isEqualAmortization"),
            "isFloatingInterestRateCalculationAllowed": obj.get("isFloatingInterestRateCalculationAllowed"),
            "isInterestRecalculationEnabled": obj.get("isInterestRecalculationEnabled"),
            "isLinkedToFloatingInterestRates": obj.get("isLinkedToFloatingInterestRates"),
            "isRatesEnabled": obj.get("isRatesEnabled"),
            "linkedToFloatingInterestRates": obj.get("linkedToFloatingInterestRates"),
            "loanProductConfigurableAttributes": LoanProductConfigurableAttributes.from_dict(obj["loanProductConfigurableAttributes"]) if obj.get("loanProductConfigurableAttributes") is not None else None,
            "loanScheduleProcessingType": EnumOptionData.from_dict(obj["loanScheduleProcessingType"]) if obj.get("loanScheduleProcessingType") is not None else None,
            "loanScheduleProcessingTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["loanScheduleProcessingTypeOptions"]] if obj.get("loanScheduleProcessingTypeOptions") is not None else None,
            "loanScheduleType": EnumOptionData.from_dict(obj["loanScheduleType"]) if obj.get("loanScheduleType") is not None else None,
            "loanScheduleTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["loanScheduleTypeOptions"]] if obj.get("loanScheduleTypeOptions") is not None else None,
            "maxDifferentialLendingRate": obj.get("maxDifferentialLendingRate"),
            "maxInterestRatePerPeriod": obj.get("maxInterestRatePerPeriod"),
            "maxNumberOfRepayments": obj.get("maxNumberOfRepayments"),
            "maxPrincipal": obj.get("maxPrincipal"),
            "maxTrancheCount": obj.get("maxTrancheCount"),
            "maximumGap": obj.get("maximumGap"),
            "minDifferentialLendingRate": obj.get("minDifferentialLendingRate"),
            "minInterestRatePerPeriod": obj.get("minInterestRatePerPeriod"),
            "minNumberOfRepayments": obj.get("minNumberOfRepayments"),
            "minPrincipal": obj.get("minPrincipal"),
            "minimumDaysBetweenDisbursalAndFirstRepayment": obj.get("minimumDaysBetweenDisbursalAndFirstRepayment"),
            "minimumGap": obj.get("minimumGap"),
            "multiDisburseLoan": obj.get("multiDisburseLoan"),
            "name": obj.get("name"),
            "numberOfRepaymentVariationsForBorrowerCycle": [LoanProductBorrowerCycleVariationData.from_dict(_item) for _item in obj["numberOfRepaymentVariationsForBorrowerCycle"]] if obj.get("numberOfRepaymentVariationsForBorrowerCycle") is not None else None,
            "numberOfRepayments": obj.get("numberOfRepayments"),
            "outstandingLoanBalance": obj.get("outstandingLoanBalance"),
            "overAppliedCalculationType": obj.get("overAppliedCalculationType"),
            "overAppliedNumber": obj.get("overAppliedNumber"),
            "overDueDaysForRepaymentEvent": obj.get("overDueDaysForRepaymentEvent"),
            "overdueDaysForNPA": obj.get("overdueDaysForNPA"),
            "paymentAllocation": [AdvancedPaymentData.from_dict(_item) for _item in obj["paymentAllocation"]] if obj.get("paymentAllocation") is not None else None,
            "paymentChannelToFundSourceMappings": [PaymentTypeToGLAccountMapper.from_dict(_item) for _item in obj["paymentChannelToFundSourceMappings"]] if obj.get("paymentChannelToFundSourceMappings") is not None else None,
            "paymentTypeOptions": [PaymentTypeData.from_dict(_item) for _item in obj["paymentTypeOptions"]] if obj.get("paymentTypeOptions") is not None else None,
            "penaltyOptions": [ChargeData.from_dict(_item) for _item in obj["penaltyOptions"]] if obj.get("penaltyOptions") is not None else None,
            "penaltyToIncomeAccountMappings": [ChargeToGLAccountMapper.from_dict(_item) for _item in obj["penaltyToIncomeAccountMappings"]] if obj.get("penaltyToIncomeAccountMappings") is not None else None,
            "preClosureInterestCalculationStrategyOptions": [EnumOptionData.from_dict(_item) for _item in obj["preClosureInterestCalculationStrategyOptions"]] if obj.get("preClosureInterestCalculationStrategyOptions") is not None else None,
            "principal": obj.get("principal"),
            "principalThresholdForLastInstallment": obj.get("principalThresholdForLastInstallment"),
            "principalVariationsForBorrowerCycle": [LoanProductBorrowerCycleVariationData.from_dict(_item) for _item in obj["principalVariationsForBorrowerCycle"]] if obj.get("principalVariationsForBorrowerCycle") is not None else None,
            "productGuaranteeData": LoanProductGuaranteeData.from_dict(obj["productGuaranteeData"]) if obj.get("productGuaranteeData") is not None else None,
            "rateOptions": [RateData.from_dict(_item) for _item in obj["rateOptions"]] if obj.get("rateOptions") is not None else None,
            "rates": [RateData.from_dict(_item) for _item in obj["rates"]] if obj.get("rates") is not None else None,
            "ratesEnabled": obj.get("ratesEnabled"),
            "recurringMoratoriumOnPrincipalPeriods": obj.get("recurringMoratoriumOnPrincipalPeriods"),
            "repaymentEvery": obj.get("repaymentEvery"),
            "repaymentFrequencyType": EnumOptionData.from_dict(obj["repaymentFrequencyType"]) if obj.get("repaymentFrequencyType") is not None else None,
            "repaymentFrequencyTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["repaymentFrequencyTypeOptions"]] if obj.get("repaymentFrequencyTypeOptions") is not None else None,
            "repaymentStartDateType": EnumOptionData.from_dict(obj["repaymentStartDateType"]) if obj.get("repaymentStartDateType") is not None else None,
            "repaymentStartDateTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["repaymentStartDateTypeOptions"]] if obj.get("repaymentStartDateTypeOptions") is not None else None,
            "rescheduleStrategyTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["rescheduleStrategyTypeOptions"]] if obj.get("rescheduleStrategyTypeOptions") is not None else None,
            "shortName": obj.get("shortName"),
            "startDate": obj.get("startDate"),
            "status": obj.get("status"),
            "supportedInterestRefundTypes": [StringEnumOptionData.from_dict(_item) for _item in obj["supportedInterestRefundTypes"]] if obj.get("supportedInterestRefundTypes") is not None else None,
            "supportedInterestRefundTypesOptions": [StringEnumOptionData.from_dict(_item) for _item in obj["supportedInterestRefundTypesOptions"]] if obj.get("supportedInterestRefundTypesOptions") is not None else None,
            "syncExpectedWithDisbursementDate": obj.get("syncExpectedWithDisbursementDate"),
            "transactionProcessingStrategyCode": obj.get("transactionProcessingStrategyCode"),
            "transactionProcessingStrategyName": obj.get("transactionProcessingStrategyName"),
            "transactionProcessingStrategyOptions": [TransactionProcessingStrategyData.from_dict(_item) for _item in obj["transactionProcessingStrategyOptions"]] if obj.get("transactionProcessingStrategyOptions") is not None else None,
            "useBorrowerCycle": obj.get("useBorrowerCycle"),
            "valueConditionTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["valueConditionTypeOptions"]] if obj.get("valueConditionTypeOptions") is not None else None
        })
        return _obj


