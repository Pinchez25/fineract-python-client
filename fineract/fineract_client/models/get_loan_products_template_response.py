# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.enum_option_data import EnumOptionData
from fineract_client.models.get_loan_products_accounting_mapping_options import GetLoanProductsAccountingMappingOptions
from fineract_client.models.get_loan_products_accounting_rule import GetLoanProductsAccountingRule
from fineract_client.models.get_loan_products_amortization_type import GetLoanProductsAmortizationType
from fineract_client.models.get_loan_products_charge_options import GetLoanProductsChargeOptions
from fineract_client.models.get_loan_products_currency_options import GetLoanProductsCurrencyOptions
from fineract_client.models.get_loan_products_days_in_year_template_type import GetLoanProductsDaysInYearTemplateType
from fineract_client.models.get_loan_products_interest_rate_template_frequency_type import GetLoanProductsInterestRateTemplateFrequencyType
from fineract_client.models.get_loan_products_interest_recalculation_compounding_frequency_type import GetLoanProductsInterestRecalculationCompoundingFrequencyType
from fineract_client.models.get_loan_products_interest_recalculation_compounding_type import GetLoanProductsInterestRecalculationCompoundingType
from fineract_client.models.get_loan_products_interest_recalculation_template_data import GetLoanProductsInterestRecalculationTemplateData
from fineract_client.models.get_loan_products_interest_template_type import GetLoanProductsInterestTemplateType
from fineract_client.models.get_loan_products_payment_type_options import GetLoanProductsPaymentTypeOptions
from fineract_client.models.get_loan_products_pre_closure_interest_calculation_strategy import GetLoanProductsPreClosureInterestCalculationStrategy
from fineract_client.models.get_loan_products_repayment_start_date_type import GetLoanProductsRepaymentStartDateType
from fineract_client.models.get_loan_products_repayment_template_frequency_type import GetLoanProductsRepaymentTemplateFrequencyType
from fineract_client.models.get_loan_products_reschedule_strategy_type import GetLoanProductsRescheduleStrategyType
from fineract_client.models.get_loan_products_template_currency import GetLoanProductsTemplateCurrency
from fineract_client.models.get_loan_products_transaction_processing_strategy_options import GetLoanProductsTransactionProcessingStrategyOptions
from fineract_client.models.get_loan_products_value_condition_type_options import GetLoanProductsValueConditionTypeOptions
from fineract_client.models.get_loans_products_days_in_month_template_type import GetLoansProductsDaysInMonthTemplateType
from fineract_client.models.get_loans_products_interest_calculation_period_type import GetLoansProductsInterestCalculationPeriodType
from fineract_client.models.string_enum_option_data import StringEnumOptionData
from typing import Optional, Set
from typing_extensions import Self

class GetLoanProductsTemplateResponse(BaseModel):
    """
    GetLoanProductsTemplateResponse
    """ # noqa: E501
    accounting_mapping_options: Optional[GetLoanProductsAccountingMappingOptions] = Field(default=None, alias="accountingMappingOptions")
    accounting_rule: Optional[GetLoanProductsAccountingRule] = Field(default=None, alias="accountingRule")
    accounting_rule_options: Optional[List[GetLoanProductsAccountingRule]] = Field(default=None, alias="accountingRuleOptions")
    advanced_payment_allocation_future_installment_allocation_rules: Optional[List[EnumOptionData]] = Field(default=None, alias="advancedPaymentAllocationFutureInstallmentAllocationRules")
    advanced_payment_allocation_transaction_types: Optional[List[EnumOptionData]] = Field(default=None, alias="advancedPaymentAllocationTransactionTypes")
    advanced_payment_allocation_types: Optional[List[EnumOptionData]] = Field(default=None, alias="advancedPaymentAllocationTypes")
    amortization_type: Optional[GetLoanProductsAmortizationType] = Field(default=None, alias="amortizationType")
    amortization_type_options: Optional[List[GetLoanProductsAmortizationType]] = Field(default=None, alias="amortizationTypeOptions")
    charge_options: Optional[List[GetLoanProductsChargeOptions]] = Field(default=None, alias="chargeOptions")
    credit_allocation_allocation_types: Optional[List[EnumOptionData]] = Field(default=None, alias="creditAllocationAllocationTypes")
    credit_allocation_transaction_types: Optional[List[EnumOptionData]] = Field(default=None, alias="creditAllocationTransactionTypes")
    currency: Optional[GetLoanProductsTemplateCurrency] = None
    currency_options: Optional[List[GetLoanProductsCurrencyOptions]] = Field(default=None, alias="currencyOptions")
    days_in_month_type: Optional[GetLoansProductsDaysInMonthTemplateType] = Field(default=None, alias="daysInMonthType")
    days_in_month_type_options: Optional[List[GetLoansProductsDaysInMonthTemplateType]] = Field(default=None, alias="daysInMonthTypeOptions")
    days_in_year_type: Optional[GetLoanProductsDaysInYearTemplateType] = Field(default=None, alias="daysInYearType")
    days_in_year_type_options: Optional[List[GetLoanProductsInterestTemplateType]] = Field(default=None, alias="daysInYearTypeOptions")
    include_in_borrower_cycle: Optional[StrictBool] = Field(default=None, alias="includeInBorrowerCycle")
    interest_calculation_period_type: Optional[GetLoansProductsInterestCalculationPeriodType] = Field(default=None, alias="interestCalculationPeriodType")
    interest_calculation_period_type_options: Optional[List[GetLoansProductsInterestCalculationPeriodType]] = Field(default=None, alias="interestCalculationPeriodTypeOptions")
    interest_rate_frequency_type: Optional[GetLoanProductsInterestRateTemplateFrequencyType] = Field(default=None, alias="interestRateFrequencyType")
    interest_rate_frequency_type_options: Optional[List[GetLoanProductsInterestRateTemplateFrequencyType]] = Field(default=None, alias="interestRateFrequencyTypeOptions")
    interest_rate_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="interestRateVariationsForBorrowerCycle")
    interest_recalculation_compounding_type_options: Optional[List[GetLoanProductsInterestRecalculationCompoundingType]] = Field(default=None, alias="interestRecalculationCompoundingTypeOptions")
    interest_recalculation_data: Optional[GetLoanProductsInterestRecalculationTemplateData] = Field(default=None, alias="interestRecalculationData")
    interest_recalculation_frequency_type_options: Optional[List[GetLoanProductsInterestRecalculationCompoundingFrequencyType]] = Field(default=None, alias="interestRecalculationFrequencyTypeOptions")
    interest_type: Optional[GetLoanProductsInterestTemplateType] = Field(default=None, alias="interestType")
    interest_type_options: Optional[List[GetLoanProductsInterestTemplateType]] = Field(default=None, alias="interestTypeOptions")
    is_interest_recalculation_enabled: Optional[StrictBool] = Field(default=None, alias="isInterestRecalculationEnabled")
    loan_schedule_processing_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="loanScheduleProcessingTypeOptions")
    loan_schedule_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="loanScheduleTypeOptions")
    number_of_repayment_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="numberOfRepaymentVariationsForBorrowerCycle")
    payment_type_options: Optional[List[GetLoanProductsPaymentTypeOptions]] = Field(default=None, alias="paymentTypeOptions")
    pre_closure_interest_calculation_strategy_options: Optional[List[GetLoanProductsPreClosureInterestCalculationStrategy]] = Field(default=None, alias="preClosureInterestCalculationStrategyOptions")
    principal_variations_for_borrower_cycle: Optional[List[StrictInt]] = Field(default=None, alias="principalVariationsForBorrowerCycle")
    repayment_frequency_type: Optional[GetLoanProductsRepaymentTemplateFrequencyType] = Field(default=None, alias="repaymentFrequencyType")
    repayment_frequency_type_options: Optional[List[GetLoanProductsRepaymentTemplateFrequencyType]] = Field(default=None, alias="repaymentFrequencyTypeOptions")
    repayment_start_date_type_options: Optional[List[GetLoanProductsRepaymentStartDateType]] = Field(default=None, alias="repaymentStartDateTypeOptions")
    reschedule_strategy_type_options: Optional[List[GetLoanProductsRescheduleStrategyType]] = Field(default=None, alias="rescheduleStrategyTypeOptions")
    supported_interest_refund_types: Optional[List[StringEnumOptionData]] = Field(default=None, alias="supportedInterestRefundTypes")
    supported_interest_refund_types_options: Optional[List[StringEnumOptionData]] = Field(default=None, alias="supportedInterestRefundTypesOptions")
    transaction_processing_strategy_options: Optional[List[GetLoanProductsTransactionProcessingStrategyOptions]] = Field(default=None, alias="transactionProcessingStrategyOptions")
    use_borrower_cycle: Optional[StrictBool] = Field(default=None, alias="useBorrowerCycle")
    value_condition_type_options: Optional[List[GetLoanProductsValueConditionTypeOptions]] = Field(default=None, alias="valueConditionTypeOptions")
    __properties: ClassVar[List[str]] = ["accountingMappingOptions", "accountingRule", "accountingRuleOptions", "advancedPaymentAllocationFutureInstallmentAllocationRules", "advancedPaymentAllocationTransactionTypes", "advancedPaymentAllocationTypes", "amortizationType", "amortizationTypeOptions", "chargeOptions", "creditAllocationAllocationTypes", "creditAllocationTransactionTypes", "currency", "currencyOptions", "daysInMonthType", "daysInMonthTypeOptions", "daysInYearType", "daysInYearTypeOptions", "includeInBorrowerCycle", "interestCalculationPeriodType", "interestCalculationPeriodTypeOptions", "interestRateFrequencyType", "interestRateFrequencyTypeOptions", "interestRateVariationsForBorrowerCycle", "interestRecalculationCompoundingTypeOptions", "interestRecalculationData", "interestRecalculationFrequencyTypeOptions", "interestType", "interestTypeOptions", "isInterestRecalculationEnabled", "loanScheduleProcessingTypeOptions", "loanScheduleTypeOptions", "numberOfRepaymentVariationsForBorrowerCycle", "paymentTypeOptions", "preClosureInterestCalculationStrategyOptions", "principalVariationsForBorrowerCycle", "repaymentFrequencyType", "repaymentFrequencyTypeOptions", "repaymentStartDateTypeOptions", "rescheduleStrategyTypeOptions", "supportedInterestRefundTypes", "supportedInterestRefundTypesOptions", "transactionProcessingStrategyOptions", "useBorrowerCycle", "valueConditionTypeOptions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLoanProductsTemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accounting_mapping_options
        if self.accounting_mapping_options:
            _dict['accountingMappingOptions'] = self.accounting_mapping_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accounting_rule
        if self.accounting_rule:
            _dict['accountingRule'] = self.accounting_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in accounting_rule_options (list)
        _items = []
        if self.accounting_rule_options:
            for _item in self.accounting_rule_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountingRuleOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_payment_allocation_future_installment_allocation_rules (list)
        _items = []
        if self.advanced_payment_allocation_future_installment_allocation_rules:
            for _item in self.advanced_payment_allocation_future_installment_allocation_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['advancedPaymentAllocationFutureInstallmentAllocationRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_payment_allocation_transaction_types (list)
        _items = []
        if self.advanced_payment_allocation_transaction_types:
            for _item in self.advanced_payment_allocation_transaction_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['advancedPaymentAllocationTransactionTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_payment_allocation_types (list)
        _items = []
        if self.advanced_payment_allocation_types:
            for _item in self.advanced_payment_allocation_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['advancedPaymentAllocationTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of amortization_type
        if self.amortization_type:
            _dict['amortizationType'] = self.amortization_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in amortization_type_options (list)
        _items = []
        if self.amortization_type_options:
            for _item in self.amortization_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['amortizationTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charge_options (list)
        _items = []
        if self.charge_options:
            for _item in self.charge_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credit_allocation_allocation_types (list)
        _items = []
        if self.credit_allocation_allocation_types:
            for _item in self.credit_allocation_allocation_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditAllocationAllocationTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credit_allocation_transaction_types (list)
        _items = []
        if self.credit_allocation_transaction_types:
            for _item in self.credit_allocation_transaction_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditAllocationTransactionTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in currency_options (list)
        _items = []
        if self.currency_options:
            for _item in self.currency_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['currencyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of days_in_month_type
        if self.days_in_month_type:
            _dict['daysInMonthType'] = self.days_in_month_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in days_in_month_type_options (list)
        _items = []
        if self.days_in_month_type_options:
            for _item in self.days_in_month_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['daysInMonthTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of days_in_year_type
        if self.days_in_year_type:
            _dict['daysInYearType'] = self.days_in_year_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in days_in_year_type_options (list)
        _items = []
        if self.days_in_year_type_options:
            for _item in self.days_in_year_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['daysInYearTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_period_type
        if self.interest_calculation_period_type:
            _dict['interestCalculationPeriodType'] = self.interest_calculation_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_calculation_period_type_options (list)
        _items = []
        if self.interest_calculation_period_type_options:
            for _item in self.interest_calculation_period_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestCalculationPeriodTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_rate_frequency_type
        if self.interest_rate_frequency_type:
            _dict['interestRateFrequencyType'] = self.interest_rate_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_rate_frequency_type_options (list)
        _items = []
        if self.interest_rate_frequency_type_options:
            for _item in self.interest_rate_frequency_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestRateFrequencyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interest_recalculation_compounding_type_options (list)
        _items = []
        if self.interest_recalculation_compounding_type_options:
            for _item in self.interest_recalculation_compounding_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestRecalculationCompoundingTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_recalculation_data
        if self.interest_recalculation_data:
            _dict['interestRecalculationData'] = self.interest_recalculation_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_recalculation_frequency_type_options (list)
        _items = []
        if self.interest_recalculation_frequency_type_options:
            for _item in self.interest_recalculation_frequency_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestRecalculationFrequencyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_type
        if self.interest_type:
            _dict['interestType'] = self.interest_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_type_options (list)
        _items = []
        if self.interest_type_options:
            for _item in self.interest_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['interestTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loan_schedule_processing_type_options (list)
        _items = []
        if self.loan_schedule_processing_type_options:
            for _item in self.loan_schedule_processing_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['loanScheduleProcessingTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loan_schedule_type_options (list)
        _items = []
        if self.loan_schedule_type_options:
            for _item in self.loan_schedule_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['loanScheduleTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_type_options (list)
        _items = []
        if self.payment_type_options:
            for _item in self.payment_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pre_closure_interest_calculation_strategy_options (list)
        _items = []
        if self.pre_closure_interest_calculation_strategy_options:
            for _item in self.pre_closure_interest_calculation_strategy_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['preClosureInterestCalculationStrategyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of repayment_frequency_type
        if self.repayment_frequency_type:
            _dict['repaymentFrequencyType'] = self.repayment_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in repayment_frequency_type_options (list)
        _items = []
        if self.repayment_frequency_type_options:
            for _item in self.repayment_frequency_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['repaymentFrequencyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in repayment_start_date_type_options (list)
        _items = []
        if self.repayment_start_date_type_options:
            for _item in self.repayment_start_date_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['repaymentStartDateTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reschedule_strategy_type_options (list)
        _items = []
        if self.reschedule_strategy_type_options:
            for _item in self.reschedule_strategy_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rescheduleStrategyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in supported_interest_refund_types (list)
        _items = []
        if self.supported_interest_refund_types:
            for _item in self.supported_interest_refund_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['supportedInterestRefundTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in supported_interest_refund_types_options (list)
        _items = []
        if self.supported_interest_refund_types_options:
            for _item in self.supported_interest_refund_types_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['supportedInterestRefundTypesOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transaction_processing_strategy_options (list)
        _items = []
        if self.transaction_processing_strategy_options:
            for _item in self.transaction_processing_strategy_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transactionProcessingStrategyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in value_condition_type_options (list)
        _items = []
        if self.value_condition_type_options:
            for _item in self.value_condition_type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['valueConditionTypeOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLoanProductsTemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountingMappingOptions": GetLoanProductsAccountingMappingOptions.from_dict(obj["accountingMappingOptions"]) if obj.get("accountingMappingOptions") is not None else None,
            "accountingRule": GetLoanProductsAccountingRule.from_dict(obj["accountingRule"]) if obj.get("accountingRule") is not None else None,
            "accountingRuleOptions": [GetLoanProductsAccountingRule.from_dict(_item) for _item in obj["accountingRuleOptions"]] if obj.get("accountingRuleOptions") is not None else None,
            "advancedPaymentAllocationFutureInstallmentAllocationRules": [EnumOptionData.from_dict(_item) for _item in obj["advancedPaymentAllocationFutureInstallmentAllocationRules"]] if obj.get("advancedPaymentAllocationFutureInstallmentAllocationRules") is not None else None,
            "advancedPaymentAllocationTransactionTypes": [EnumOptionData.from_dict(_item) for _item in obj["advancedPaymentAllocationTransactionTypes"]] if obj.get("advancedPaymentAllocationTransactionTypes") is not None else None,
            "advancedPaymentAllocationTypes": [EnumOptionData.from_dict(_item) for _item in obj["advancedPaymentAllocationTypes"]] if obj.get("advancedPaymentAllocationTypes") is not None else None,
            "amortizationType": GetLoanProductsAmortizationType.from_dict(obj["amortizationType"]) if obj.get("amortizationType") is not None else None,
            "amortizationTypeOptions": [GetLoanProductsAmortizationType.from_dict(_item) for _item in obj["amortizationTypeOptions"]] if obj.get("amortizationTypeOptions") is not None else None,
            "chargeOptions": [GetLoanProductsChargeOptions.from_dict(_item) for _item in obj["chargeOptions"]] if obj.get("chargeOptions") is not None else None,
            "creditAllocationAllocationTypes": [EnumOptionData.from_dict(_item) for _item in obj["creditAllocationAllocationTypes"]] if obj.get("creditAllocationAllocationTypes") is not None else None,
            "creditAllocationTransactionTypes": [EnumOptionData.from_dict(_item) for _item in obj["creditAllocationTransactionTypes"]] if obj.get("creditAllocationTransactionTypes") is not None else None,
            "currency": GetLoanProductsTemplateCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "currencyOptions": [GetLoanProductsCurrencyOptions.from_dict(_item) for _item in obj["currencyOptions"]] if obj.get("currencyOptions") is not None else None,
            "daysInMonthType": GetLoansProductsDaysInMonthTemplateType.from_dict(obj["daysInMonthType"]) if obj.get("daysInMonthType") is not None else None,
            "daysInMonthTypeOptions": [GetLoansProductsDaysInMonthTemplateType.from_dict(_item) for _item in obj["daysInMonthTypeOptions"]] if obj.get("daysInMonthTypeOptions") is not None else None,
            "daysInYearType": GetLoanProductsDaysInYearTemplateType.from_dict(obj["daysInYearType"]) if obj.get("daysInYearType") is not None else None,
            "daysInYearTypeOptions": [GetLoanProductsInterestTemplateType.from_dict(_item) for _item in obj["daysInYearTypeOptions"]] if obj.get("daysInYearTypeOptions") is not None else None,
            "includeInBorrowerCycle": obj.get("includeInBorrowerCycle"),
            "interestCalculationPeriodType": GetLoansProductsInterestCalculationPeriodType.from_dict(obj["interestCalculationPeriodType"]) if obj.get("interestCalculationPeriodType") is not None else None,
            "interestCalculationPeriodTypeOptions": [GetLoansProductsInterestCalculationPeriodType.from_dict(_item) for _item in obj["interestCalculationPeriodTypeOptions"]] if obj.get("interestCalculationPeriodTypeOptions") is not None else None,
            "interestRateFrequencyType": GetLoanProductsInterestRateTemplateFrequencyType.from_dict(obj["interestRateFrequencyType"]) if obj.get("interestRateFrequencyType") is not None else None,
            "interestRateFrequencyTypeOptions": [GetLoanProductsInterestRateTemplateFrequencyType.from_dict(_item) for _item in obj["interestRateFrequencyTypeOptions"]] if obj.get("interestRateFrequencyTypeOptions") is not None else None,
            "interestRateVariationsForBorrowerCycle": obj.get("interestRateVariationsForBorrowerCycle"),
            "interestRecalculationCompoundingTypeOptions": [GetLoanProductsInterestRecalculationCompoundingType.from_dict(_item) for _item in obj["interestRecalculationCompoundingTypeOptions"]] if obj.get("interestRecalculationCompoundingTypeOptions") is not None else None,
            "interestRecalculationData": GetLoanProductsInterestRecalculationTemplateData.from_dict(obj["interestRecalculationData"]) if obj.get("interestRecalculationData") is not None else None,
            "interestRecalculationFrequencyTypeOptions": [GetLoanProductsInterestRecalculationCompoundingFrequencyType.from_dict(_item) for _item in obj["interestRecalculationFrequencyTypeOptions"]] if obj.get("interestRecalculationFrequencyTypeOptions") is not None else None,
            "interestType": GetLoanProductsInterestTemplateType.from_dict(obj["interestType"]) if obj.get("interestType") is not None else None,
            "interestTypeOptions": [GetLoanProductsInterestTemplateType.from_dict(_item) for _item in obj["interestTypeOptions"]] if obj.get("interestTypeOptions") is not None else None,
            "isInterestRecalculationEnabled": obj.get("isInterestRecalculationEnabled"),
            "loanScheduleProcessingTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["loanScheduleProcessingTypeOptions"]] if obj.get("loanScheduleProcessingTypeOptions") is not None else None,
            "loanScheduleTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["loanScheduleTypeOptions"]] if obj.get("loanScheduleTypeOptions") is not None else None,
            "numberOfRepaymentVariationsForBorrowerCycle": obj.get("numberOfRepaymentVariationsForBorrowerCycle"),
            "paymentTypeOptions": [GetLoanProductsPaymentTypeOptions.from_dict(_item) for _item in obj["paymentTypeOptions"]] if obj.get("paymentTypeOptions") is not None else None,
            "preClosureInterestCalculationStrategyOptions": [GetLoanProductsPreClosureInterestCalculationStrategy.from_dict(_item) for _item in obj["preClosureInterestCalculationStrategyOptions"]] if obj.get("preClosureInterestCalculationStrategyOptions") is not None else None,
            "principalVariationsForBorrowerCycle": obj.get("principalVariationsForBorrowerCycle"),
            "repaymentFrequencyType": GetLoanProductsRepaymentTemplateFrequencyType.from_dict(obj["repaymentFrequencyType"]) if obj.get("repaymentFrequencyType") is not None else None,
            "repaymentFrequencyTypeOptions": [GetLoanProductsRepaymentTemplateFrequencyType.from_dict(_item) for _item in obj["repaymentFrequencyTypeOptions"]] if obj.get("repaymentFrequencyTypeOptions") is not None else None,
            "repaymentStartDateTypeOptions": [GetLoanProductsRepaymentStartDateType.from_dict(_item) for _item in obj["repaymentStartDateTypeOptions"]] if obj.get("repaymentStartDateTypeOptions") is not None else None,
            "rescheduleStrategyTypeOptions": [GetLoanProductsRescheduleStrategyType.from_dict(_item) for _item in obj["rescheduleStrategyTypeOptions"]] if obj.get("rescheduleStrategyTypeOptions") is not None else None,
            "supportedInterestRefundTypes": [StringEnumOptionData.from_dict(_item) for _item in obj["supportedInterestRefundTypes"]] if obj.get("supportedInterestRefundTypes") is not None else None,
            "supportedInterestRefundTypesOptions": [StringEnumOptionData.from_dict(_item) for _item in obj["supportedInterestRefundTypesOptions"]] if obj.get("supportedInterestRefundTypesOptions") is not None else None,
            "transactionProcessingStrategyOptions": [GetLoanProductsTransactionProcessingStrategyOptions.from_dict(_item) for _item in obj["transactionProcessingStrategyOptions"]] if obj.get("transactionProcessingStrategyOptions") is not None else None,
            "useBorrowerCycle": obj.get("useBorrowerCycle"),
            "valueConditionTypeOptions": [GetLoanProductsValueConditionTypeOptions.from_dict(_item) for _item in obj["valueConditionTypeOptions"]] if obj.get("valueConditionTypeOptions") is not None else None
        })
        return _obj


