# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.charge_data import ChargeData
from fineract_client.models.currency_data import CurrencyData
from fineract_client.models.datatable_data import DatatableData
from fineract_client.models.enum_option_data import EnumOptionData
from fineract_client.models.savings_account_application_timeline_data import SavingsAccountApplicationTimelineData
from fineract_client.models.savings_account_charge_data import SavingsAccountChargeData
from fineract_client.models.savings_account_status_enum_data import SavingsAccountStatusEnumData
from fineract_client.models.savings_account_sub_status_enum_data import SavingsAccountSubStatusEnumData
from fineract_client.models.savings_account_summary_data import SavingsAccountSummaryData
from fineract_client.models.savings_product_data import SavingsProductData
from fineract_client.models.staff_data import StaffData
from fineract_client.models.tax_group_data import TaxGroupData
from typing import Optional, Set
from typing_extensions import Self

class SavingsAccountData(BaseModel):
    """
    SavingsAccountData
    """ # noqa: E501
    account_no: Optional[StrictStr] = Field(default=None, alias="accountNo")
    accrual_based_accounting_enabled_on_savings_product: Optional[StrictBool] = Field(default=None, alias="accrualBasedAccountingEnabledOnSavingsProduct")
    activated_on_date: Optional[date] = Field(default=None, alias="activatedOnDate")
    activation_local_date: Optional[date] = Field(default=None, alias="activationLocalDate")
    allow_overdraft: Optional[StrictBool] = Field(default=None, alias="allowOverdraft")
    annual_fee: Optional[SavingsAccountChargeData] = Field(default=None, alias="annualFee")
    cash_based_accounting_enabled_on_savings_product: Optional[StrictBool] = Field(default=None, alias="cashBasedAccountingEnabledOnSavingsProduct")
    charge_options: Optional[List[ChargeData]] = Field(default=None, alias="chargeOptions")
    charges: Optional[List[SavingsAccountChargeData]] = None
    client_data: Optional[ClientData] = Field(default=None, alias="clientData")
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    client_name: Optional[StrictStr] = Field(default=None, alias="clientName")
    currency: Optional[CurrencyData] = None
    datatables: Optional[List[DatatableData]] = None
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    days_to_dormancy: Optional[StrictInt] = Field(default=None, alias="daysToDormancy")
    days_to_escheat: Optional[StrictInt] = Field(default=None, alias="daysToEscheat")
    days_to_inactive: Optional[StrictInt] = Field(default=None, alias="daysToInactive")
    deposit_type: Optional[EnumOptionData] = Field(default=None, alias="depositType")
    deposit_type_id: Optional[StrictInt] = Field(default=None, alias="depositTypeId")
    enforce_min_required_balance: Optional[StrictBool] = Field(default=None, alias="enforceMinRequiredBalance")
    existing_reversed_transaction_ids: Optional[List[StrictInt]] = Field(default=None, alias="existingReversedTransactionIds")
    existing_transaction_ids: Optional[List[StrictInt]] = Field(default=None, alias="existingTransactionIds")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    field_officer_id: Optional[StrictInt] = Field(default=None, alias="fieldOfficerId")
    field_officer_name: Optional[StrictStr] = Field(default=None, alias="fieldOfficerName")
    field_officer_options: Optional[List[StaffData]] = Field(default=None, alias="fieldOfficerOptions")
    gl_account_id_for_interest_on_savings: Optional[StrictInt] = Field(default=None, alias="glAccountIdForInterestOnSavings")
    gl_account_id_for_savings_control: Optional[StrictInt] = Field(default=None, alias="glAccountIdForSavingsControl")
    group_general_data: Optional[GroupGeneralData] = Field(default=None, alias="groupGeneralData")
    group_id: Optional[StrictInt] = Field(default=None, alias="groupId")
    group_name: Optional[StrictStr] = Field(default=None, alias="groupName")
    id: Optional[StrictInt] = None
    interest_calculation_days_in_year_type: Optional[EnumOptionData] = Field(default=None, alias="interestCalculationDaysInYearType")
    interest_calculation_days_in_year_type_id: Optional[StrictInt] = Field(default=None, alias="interestCalculationDaysInYearTypeId")
    interest_calculation_days_in_year_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestCalculationDaysInYearTypeOptions")
    interest_calculation_type: Optional[EnumOptionData] = Field(default=None, alias="interestCalculationType")
    interest_calculation_type_id: Optional[StrictInt] = Field(default=None, alias="interestCalculationTypeId")
    interest_calculation_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestCalculationTypeOptions")
    interest_compounding_period_type: Optional[EnumOptionData] = Field(default=None, alias="interestCompoundingPeriodType")
    interest_compounding_period_type_id: Optional[StrictInt] = Field(default=None, alias="interestCompoundingPeriodTypeId")
    interest_compounding_period_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestCompoundingPeriodTypeOptions")
    interest_posting_period_type: Optional[EnumOptionData] = Field(default=None, alias="interestPostingPeriodType")
    interest_posting_period_type_id: Optional[StrictInt] = Field(default=None, alias="interestPostingPeriodTypeId")
    interest_posting_period_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="interestPostingPeriodTypeOptions")
    is_dormancy_tracking_active: Optional[StrictBool] = Field(default=None, alias="isDormancyTrackingActive")
    last_active_transaction_date: Optional[date] = Field(default=None, alias="lastActiveTransactionDate")
    last_savings_account_transaction: Optional[SavingsAccountTransactionData] = Field(default=None, alias="lastSavingsAccountTransaction")
    lien_allowed: Optional[StrictBool] = Field(default=None, alias="lienAllowed")
    locale: Optional[StrictStr] = None
    locked_in_until_date: Optional[date] = Field(default=None, alias="lockedInUntilDate")
    lockin_period_frequency: Optional[StrictInt] = Field(default=None, alias="lockinPeriodFrequency")
    lockin_period_frequency_type: Optional[EnumOptionData] = Field(default=None, alias="lockinPeriodFrequencyType")
    lockin_period_frequency_type_id: Optional[StrictInt] = Field(default=None, alias="lockinPeriodFrequencyTypeId")
    lockin_period_frequency_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="lockinPeriodFrequencyTypeOptions")
    max_allowed_lien_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxAllowedLienLimit")
    min_balance_for_interest_calculation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minBalanceForInterestCalculation")
    min_overdraft_for_interest_calculation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minOverdraftForInterestCalculation")
    min_required_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minRequiredBalance")
    min_required_opening_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minRequiredOpeningBalance")
    new_savings_account_transaction_data: Optional[List[SavingsAccountTransactionData]] = Field(default=None, alias="newSavingsAccountTransactionData")
    nominal_annual_interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="nominalAnnualInterestRate")
    nominal_annual_interest_rate_overdraft: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="nominalAnnualInterestRateOverdraft")
    office_id: Optional[StrictInt] = Field(default=None, alias="officeId")
    on_hold_funds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="onHoldFunds")
    overdraft_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="overdraftLimit")
    product_id: Optional[StrictInt] = Field(default=None, alias="productId")
    product_options: Optional[List[SavingsProductData]] = Field(default=None, alias="productOptions")
    reason_for_block: Optional[StrictStr] = Field(default=None, alias="reasonForBlock")
    row_index: Optional[StrictInt] = Field(default=None, alias="rowIndex")
    savings_account_summary_data: Optional[SavingsAccountSummaryData] = Field(default=None, alias="savingsAccountSummaryData")
    savings_account_transaction_data: Optional[List[SavingsAccountTransactionData]] = Field(default=None, alias="savingsAccountTransactionData")
    savings_account_transaction_summary_wrapper: Optional[Dict[str, Any]] = Field(default=None, alias="savingsAccountTransactionSummaryWrapper")
    savings_account_transactions_with_pivot_config: Optional[List[SavingsAccountTransactionData]] = Field(default=None, alias="savingsAccountTransactionsWithPivotConfig")
    savings_amount_on_hold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="savingsAmountOnHold")
    savings_helper: Optional[Dict[str, Any]] = Field(default=None, alias="savingsHelper")
    savings_product: Optional[SavingsProductData] = Field(default=None, alias="savingsProduct")
    savings_product_data: Optional[SavingsProductData] = Field(default=None, alias="savingsProductData")
    savings_product_id: Optional[StrictInt] = Field(default=None, alias="savingsProductId")
    savings_product_name: Optional[StrictStr] = Field(default=None, alias="savingsProductName")
    start_interest_calculation_date: Optional[date] = Field(default=None, alias="startInterestCalculationDate")
    status: Optional[SavingsAccountStatusEnumData] = None
    sub_status: Optional[SavingsAccountSubStatusEnumData] = Field(default=None, alias="subStatus")
    submitted_on_date: Optional[date] = Field(default=None, alias="submittedOnDate")
    summary: Optional[SavingsAccountSummaryData] = None
    tax_group: Optional[TaxGroupData] = Field(default=None, alias="taxGroup")
    timeline: Optional[SavingsAccountApplicationTimelineData] = None
    transactions: Optional[List[SavingsAccountTransactionData]] = None
    updated_transactions: Optional[List[SavingsAccountTransactionData]] = Field(default=None, alias="updatedTransactions")
    with_hold_tax: Optional[StrictBool] = Field(default=None, alias="withHoldTax")
    withdrawal_fee: Optional[SavingsAccountChargeData] = Field(default=None, alias="withdrawalFee")
    withdrawal_fee_for_transfers: Optional[StrictBool] = Field(default=None, alias="withdrawalFeeForTransfers")
    withdrawal_fee_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="withdrawalFeeTypeOptions")
    __properties: ClassVar[List[str]] = ["accountNo", "accrualBasedAccountingEnabledOnSavingsProduct", "activatedOnDate", "activationLocalDate", "allowOverdraft", "annualFee", "cashBasedAccountingEnabledOnSavingsProduct", "chargeOptions", "charges", "clientData", "clientId", "clientName", "currency", "datatables", "dateFormat", "daysToDormancy", "daysToEscheat", "daysToInactive", "depositType", "depositTypeId", "enforceMinRequiredBalance", "existingReversedTransactionIds", "existingTransactionIds", "externalId", "fieldOfficerId", "fieldOfficerName", "fieldOfficerOptions", "glAccountIdForInterestOnSavings", "glAccountIdForSavingsControl", "groupGeneralData", "groupId", "groupName", "id", "interestCalculationDaysInYearType", "interestCalculationDaysInYearTypeId", "interestCalculationDaysInYearTypeOptions", "interestCalculationType", "interestCalculationTypeId", "interestCalculationTypeOptions", "interestCompoundingPeriodType", "interestCompoundingPeriodTypeId", "interestCompoundingPeriodTypeOptions", "interestPostingPeriodType", "interestPostingPeriodTypeId", "interestPostingPeriodTypeOptions", "isDormancyTrackingActive", "lastActiveTransactionDate", "lastSavingsAccountTransaction", "lienAllowed", "locale", "lockedInUntilDate", "lockinPeriodFrequency", "lockinPeriodFrequencyType", "lockinPeriodFrequencyTypeId", "lockinPeriodFrequencyTypeOptions", "maxAllowedLienLimit", "minBalanceForInterestCalculation", "minOverdraftForInterestCalculation", "minRequiredBalance", "minRequiredOpeningBalance", "newSavingsAccountTransactionData", "nominalAnnualInterestRate", "nominalAnnualInterestRateOverdraft", "officeId", "onHoldFunds", "overdraftLimit", "productId", "productOptions", "reasonForBlock", "rowIndex", "savingsAccountSummaryData", "savingsAccountTransactionData", "savingsAccountTransactionSummaryWrapper", "savingsAccountTransactionsWithPivotConfig", "savingsAmountOnHold", "savingsHelper", "savingsProduct", "savingsProductData", "savingsProductId", "savingsProductName", "startInterestCalculationDate", "status", "subStatus", "submittedOnDate", "summary", "taxGroup", "timeline", "transactions", "updatedTransactions", "withHoldTax", "withdrawalFee", "withdrawalFeeForTransfers", "withdrawalFeeTypeOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SavingsAccountData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of annual_fee
        if self.annual_fee:
            _dict['annualFee'] = self.annual_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charge_options (list)
        _items = []
        if self.charge_options:
            for _item_charge_options in self.charge_options:
                if _item_charge_options:
                    _items.append(_item_charge_options.to_dict())
            _dict['chargeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item_charges in self.charges:
                if _item_charges:
                    _items.append(_item_charges.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of client_data
        if self.client_data:
            _dict['clientData'] = self.client_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in datatables (list)
        _items = []
        if self.datatables:
            for _item_datatables in self.datatables:
                if _item_datatables:
                    _items.append(_item_datatables.to_dict())
            _dict['datatables'] = _items
        # override the default output from pydantic by calling `to_dict()` of deposit_type
        if self.deposit_type:
            _dict['depositType'] = self.deposit_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in field_officer_options (list)
        _items = []
        if self.field_officer_options:
            for _item_field_officer_options in self.field_officer_options:
                if _item_field_officer_options:
                    _items.append(_item_field_officer_options.to_dict())
            _dict['fieldOfficerOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of group_general_data
        if self.group_general_data:
            _dict['groupGeneralData'] = self.group_general_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_days_in_year_type
        if self.interest_calculation_days_in_year_type:
            _dict['interestCalculationDaysInYearType'] = self.interest_calculation_days_in_year_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_calculation_days_in_year_type_options (list)
        _items = []
        if self.interest_calculation_days_in_year_type_options:
            for _item_interest_calculation_days_in_year_type_options in self.interest_calculation_days_in_year_type_options:
                if _item_interest_calculation_days_in_year_type_options:
                    _items.append(_item_interest_calculation_days_in_year_type_options.to_dict())
            _dict['interestCalculationDaysInYearTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_calculation_type
        if self.interest_calculation_type:
            _dict['interestCalculationType'] = self.interest_calculation_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_calculation_type_options (list)
        _items = []
        if self.interest_calculation_type_options:
            for _item_interest_calculation_type_options in self.interest_calculation_type_options:
                if _item_interest_calculation_type_options:
                    _items.append(_item_interest_calculation_type_options.to_dict())
            _dict['interestCalculationTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_compounding_period_type
        if self.interest_compounding_period_type:
            _dict['interestCompoundingPeriodType'] = self.interest_compounding_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_compounding_period_type_options (list)
        _items = []
        if self.interest_compounding_period_type_options:
            for _item_interest_compounding_period_type_options in self.interest_compounding_period_type_options:
                if _item_interest_compounding_period_type_options:
                    _items.append(_item_interest_compounding_period_type_options.to_dict())
            _dict['interestCompoundingPeriodTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of interest_posting_period_type
        if self.interest_posting_period_type:
            _dict['interestPostingPeriodType'] = self.interest_posting_period_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interest_posting_period_type_options (list)
        _items = []
        if self.interest_posting_period_type_options:
            for _item_interest_posting_period_type_options in self.interest_posting_period_type_options:
                if _item_interest_posting_period_type_options:
                    _items.append(_item_interest_posting_period_type_options.to_dict())
            _dict['interestPostingPeriodTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_savings_account_transaction
        if self.last_savings_account_transaction:
            _dict['lastSavingsAccountTransaction'] = self.last_savings_account_transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lockin_period_frequency_type
        if self.lockin_period_frequency_type:
            _dict['lockinPeriodFrequencyType'] = self.lockin_period_frequency_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lockin_period_frequency_type_options (list)
        _items = []
        if self.lockin_period_frequency_type_options:
            for _item_lockin_period_frequency_type_options in self.lockin_period_frequency_type_options:
                if _item_lockin_period_frequency_type_options:
                    _items.append(_item_lockin_period_frequency_type_options.to_dict())
            _dict['lockinPeriodFrequencyTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in new_savings_account_transaction_data (list)
        _items = []
        if self.new_savings_account_transaction_data:
            for _item_new_savings_account_transaction_data in self.new_savings_account_transaction_data:
                if _item_new_savings_account_transaction_data:
                    _items.append(_item_new_savings_account_transaction_data.to_dict())
            _dict['newSavingsAccountTransactionData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_options (list)
        _items = []
        if self.product_options:
            for _item_product_options in self.product_options:
                if _item_product_options:
                    _items.append(_item_product_options.to_dict())
            _dict['productOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of savings_account_summary_data
        if self.savings_account_summary_data:
            _dict['savingsAccountSummaryData'] = self.savings_account_summary_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in savings_account_transaction_data (list)
        _items = []
        if self.savings_account_transaction_data:
            for _item_savings_account_transaction_data in self.savings_account_transaction_data:
                if _item_savings_account_transaction_data:
                    _items.append(_item_savings_account_transaction_data.to_dict())
            _dict['savingsAccountTransactionData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in savings_account_transactions_with_pivot_config (list)
        _items = []
        if self.savings_account_transactions_with_pivot_config:
            for _item_savings_account_transactions_with_pivot_config in self.savings_account_transactions_with_pivot_config:
                if _item_savings_account_transactions_with_pivot_config:
                    _items.append(_item_savings_account_transactions_with_pivot_config.to_dict())
            _dict['savingsAccountTransactionsWithPivotConfig'] = _items
        # override the default output from pydantic by calling `to_dict()` of savings_product
        if self.savings_product:
            _dict['savingsProduct'] = self.savings_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of savings_product_data
        if self.savings_product_data:
            _dict['savingsProductData'] = self.savings_product_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_status
        if self.sub_status:
            _dict['subStatus'] = self.sub_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_group
        if self.tax_group:
            _dict['taxGroup'] = self.tax_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeline
        if self.timeline:
            _dict['timeline'] = self.timeline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item_transactions in self.transactions:
                if _item_transactions:
                    _items.append(_item_transactions.to_dict())
            _dict['transactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in updated_transactions (list)
        _items = []
        if self.updated_transactions:
            for _item_updated_transactions in self.updated_transactions:
                if _item_updated_transactions:
                    _items.append(_item_updated_transactions.to_dict())
            _dict['updatedTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of withdrawal_fee
        if self.withdrawal_fee:
            _dict['withdrawalFee'] = self.withdrawal_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in withdrawal_fee_type_options (list)
        _items = []
        if self.withdrawal_fee_type_options:
            for _item_withdrawal_fee_type_options in self.withdrawal_fee_type_options:
                if _item_withdrawal_fee_type_options:
                    _items.append(_item_withdrawal_fee_type_options.to_dict())
            _dict['withdrawalFeeTypeOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SavingsAccountData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNo": obj.get("accountNo"),
            "accrualBasedAccountingEnabledOnSavingsProduct": obj.get("accrualBasedAccountingEnabledOnSavingsProduct"),
            "activatedOnDate": obj.get("activatedOnDate"),
            "activationLocalDate": obj.get("activationLocalDate"),
            "allowOverdraft": obj.get("allowOverdraft"),
            "annualFee": SavingsAccountChargeData.from_dict(obj["annualFee"]) if obj.get("annualFee") is not None else None,
            "cashBasedAccountingEnabledOnSavingsProduct": obj.get("cashBasedAccountingEnabledOnSavingsProduct"),
            "chargeOptions": [ChargeData.from_dict(_item) for _item in obj["chargeOptions"]] if obj.get("chargeOptions") is not None else None,
            "charges": [SavingsAccountChargeData.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "clientData": ClientData.from_dict(obj["clientData"]) if obj.get("clientData") is not None else None,
            "clientId": obj.get("clientId"),
            "clientName": obj.get("clientName"),
            "currency": CurrencyData.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "datatables": [DatatableData.from_dict(_item) for _item in obj["datatables"]] if obj.get("datatables") is not None else None,
            "dateFormat": obj.get("dateFormat"),
            "daysToDormancy": obj.get("daysToDormancy"),
            "daysToEscheat": obj.get("daysToEscheat"),
            "daysToInactive": obj.get("daysToInactive"),
            "depositType": EnumOptionData.from_dict(obj["depositType"]) if obj.get("depositType") is not None else None,
            "depositTypeId": obj.get("depositTypeId"),
            "enforceMinRequiredBalance": obj.get("enforceMinRequiredBalance"),
            "existingReversedTransactionIds": obj.get("existingReversedTransactionIds"),
            "existingTransactionIds": obj.get("existingTransactionIds"),
            "externalId": obj.get("externalId"),
            "fieldOfficerId": obj.get("fieldOfficerId"),
            "fieldOfficerName": obj.get("fieldOfficerName"),
            "fieldOfficerOptions": [StaffData.from_dict(_item) for _item in obj["fieldOfficerOptions"]] if obj.get("fieldOfficerOptions") is not None else None,
            "glAccountIdForInterestOnSavings": obj.get("glAccountIdForInterestOnSavings"),
            "glAccountIdForSavingsControl": obj.get("glAccountIdForSavingsControl"),
            "groupGeneralData": GroupGeneralData.from_dict(obj["groupGeneralData"]) if obj.get("groupGeneralData") is not None else None,
            "groupId": obj.get("groupId"),
            "groupName": obj.get("groupName"),
            "id": obj.get("id"),
            "interestCalculationDaysInYearType": EnumOptionData.from_dict(obj["interestCalculationDaysInYearType"]) if obj.get("interestCalculationDaysInYearType") is not None else None,
            "interestCalculationDaysInYearTypeId": obj.get("interestCalculationDaysInYearTypeId"),
            "interestCalculationDaysInYearTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestCalculationDaysInYearTypeOptions"]] if obj.get("interestCalculationDaysInYearTypeOptions") is not None else None,
            "interestCalculationType": EnumOptionData.from_dict(obj["interestCalculationType"]) if obj.get("interestCalculationType") is not None else None,
            "interestCalculationTypeId": obj.get("interestCalculationTypeId"),
            "interestCalculationTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestCalculationTypeOptions"]] if obj.get("interestCalculationTypeOptions") is not None else None,
            "interestCompoundingPeriodType": EnumOptionData.from_dict(obj["interestCompoundingPeriodType"]) if obj.get("interestCompoundingPeriodType") is not None else None,
            "interestCompoundingPeriodTypeId": obj.get("interestCompoundingPeriodTypeId"),
            "interestCompoundingPeriodTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestCompoundingPeriodTypeOptions"]] if obj.get("interestCompoundingPeriodTypeOptions") is not None else None,
            "interestPostingPeriodType": EnumOptionData.from_dict(obj["interestPostingPeriodType"]) if obj.get("interestPostingPeriodType") is not None else None,
            "interestPostingPeriodTypeId": obj.get("interestPostingPeriodTypeId"),
            "interestPostingPeriodTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["interestPostingPeriodTypeOptions"]] if obj.get("interestPostingPeriodTypeOptions") is not None else None,
            "isDormancyTrackingActive": obj.get("isDormancyTrackingActive"),
            "lastActiveTransactionDate": obj.get("lastActiveTransactionDate"),
            "lastSavingsAccountTransaction": SavingsAccountTransactionData.from_dict(obj["lastSavingsAccountTransaction"]) if obj.get("lastSavingsAccountTransaction") is not None else None,
            "lienAllowed": obj.get("lienAllowed"),
            "locale": obj.get("locale"),
            "lockedInUntilDate": obj.get("lockedInUntilDate"),
            "lockinPeriodFrequency": obj.get("lockinPeriodFrequency"),
            "lockinPeriodFrequencyType": EnumOptionData.from_dict(obj["lockinPeriodFrequencyType"]) if obj.get("lockinPeriodFrequencyType") is not None else None,
            "lockinPeriodFrequencyTypeId": obj.get("lockinPeriodFrequencyTypeId"),
            "lockinPeriodFrequencyTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["lockinPeriodFrequencyTypeOptions"]] if obj.get("lockinPeriodFrequencyTypeOptions") is not None else None,
            "maxAllowedLienLimit": obj.get("maxAllowedLienLimit"),
            "minBalanceForInterestCalculation": obj.get("minBalanceForInterestCalculation"),
            "minOverdraftForInterestCalculation": obj.get("minOverdraftForInterestCalculation"),
            "minRequiredBalance": obj.get("minRequiredBalance"),
            "minRequiredOpeningBalance": obj.get("minRequiredOpeningBalance"),
            "newSavingsAccountTransactionData": [SavingsAccountTransactionData.from_dict(_item) for _item in obj["newSavingsAccountTransactionData"]] if obj.get("newSavingsAccountTransactionData") is not None else None,
            "nominalAnnualInterestRate": obj.get("nominalAnnualInterestRate"),
            "nominalAnnualInterestRateOverdraft": obj.get("nominalAnnualInterestRateOverdraft"),
            "officeId": obj.get("officeId"),
            "onHoldFunds": obj.get("onHoldFunds"),
            "overdraftLimit": obj.get("overdraftLimit"),
            "productId": obj.get("productId"),
            "productOptions": [SavingsProductData.from_dict(_item) for _item in obj["productOptions"]] if obj.get("productOptions") is not None else None,
            "reasonForBlock": obj.get("reasonForBlock"),
            "rowIndex": obj.get("rowIndex"),
            "savingsAccountSummaryData": SavingsAccountSummaryData.from_dict(obj["savingsAccountSummaryData"]) if obj.get("savingsAccountSummaryData") is not None else None,
            "savingsAccountTransactionData": [SavingsAccountTransactionData.from_dict(_item) for _item in obj["savingsAccountTransactionData"]] if obj.get("savingsAccountTransactionData") is not None else None,
            "savingsAccountTransactionSummaryWrapper": obj.get("savingsAccountTransactionSummaryWrapper"),
            "savingsAccountTransactionsWithPivotConfig": [SavingsAccountTransactionData.from_dict(_item) for _item in obj["savingsAccountTransactionsWithPivotConfig"]] if obj.get("savingsAccountTransactionsWithPivotConfig") is not None else None,
            "savingsAmountOnHold": obj.get("savingsAmountOnHold"),
            "savingsHelper": obj.get("savingsHelper"),
            "savingsProduct": SavingsProductData.from_dict(obj["savingsProduct"]) if obj.get("savingsProduct") is not None else None,
            "savingsProductData": SavingsProductData.from_dict(obj["savingsProductData"]) if obj.get("savingsProductData") is not None else None,
            "savingsProductId": obj.get("savingsProductId"),
            "savingsProductName": obj.get("savingsProductName"),
            "startInterestCalculationDate": obj.get("startInterestCalculationDate"),
            "status": SavingsAccountStatusEnumData.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "subStatus": SavingsAccountSubStatusEnumData.from_dict(obj["subStatus"]) if obj.get("subStatus") is not None else None,
            "submittedOnDate": obj.get("submittedOnDate"),
            "summary": SavingsAccountSummaryData.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "taxGroup": TaxGroupData.from_dict(obj["taxGroup"]) if obj.get("taxGroup") is not None else None,
            "timeline": SavingsAccountApplicationTimelineData.from_dict(obj["timeline"]) if obj.get("timeline") is not None else None,
            "transactions": [SavingsAccountTransactionData.from_dict(_item) for _item in obj["transactions"]] if obj.get("transactions") is not None else None,
            "updatedTransactions": [SavingsAccountTransactionData.from_dict(_item) for _item in obj["updatedTransactions"]] if obj.get("updatedTransactions") is not None else None,
            "withHoldTax": obj.get("withHoldTax"),
            "withdrawalFee": SavingsAccountChargeData.from_dict(obj["withdrawalFee"]) if obj.get("withdrawalFee") is not None else None,
            "withdrawalFeeForTransfers": obj.get("withdrawalFeeForTransfers"),
            "withdrawalFeeTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["withdrawalFeeTypeOptions"]] if obj.get("withdrawalFeeTypeOptions") is not None else None
        })
        return _obj

from fineract_client.models.client_data import ClientData
from fineract_client.models.group_general_data import GroupGeneralData
from fineract_client.models.savings_account_transaction_data import SavingsAccountTransactionData
# TODO: Rewrite to not use raise_errors
SavingsAccountData.model_rebuild(raise_errors=False)

