# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.enum_option_data import EnumOptionData
from fineract_client.models.gl_account_data import GLAccountData
from fineract_client.models.tax_component_history_data import TaxComponentHistoryData
from typing import Optional, Set
from typing_extensions import Self

class TaxComponentData(BaseModel):
    """
    TaxComponentData
    """ # noqa: E501
    credit_account: Optional[GLAccountData] = Field(default=None, alias="creditAccount")
    credit_account_type: Optional[EnumOptionData] = Field(default=None, alias="creditAccountType")
    debit_account: Optional[GLAccountData] = Field(default=None, alias="debitAccount")
    debit_account_type: Optional[EnumOptionData] = Field(default=None, alias="debitAccountType")
    gl_account_options: Optional[Dict[str, List[GLAccountData]]] = Field(default=None, alias="glAccountOptions")
    gl_account_type_options: Optional[List[EnumOptionData]] = Field(default=None, alias="glAccountTypeOptions")
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    percentage: Optional[Union[StrictFloat, StrictInt]] = None
    start_date: Optional[date] = Field(default=None, alias="startDate")
    tax_component_histories: Optional[List[TaxComponentHistoryData]] = Field(default=None, alias="taxComponentHistories")
    __properties: ClassVar[List[str]] = ["creditAccount", "creditAccountType", "debitAccount", "debitAccountType", "glAccountOptions", "glAccountTypeOptions", "id", "name", "percentage", "startDate", "taxComponentHistories"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaxComponentData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credit_account
        if self.credit_account:
            _dict['creditAccount'] = self.credit_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_account_type
        if self.credit_account_type:
            _dict['creditAccountType'] = self.credit_account_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debit_account
        if self.debit_account:
            _dict['debitAccount'] = self.debit_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debit_account_type
        if self.debit_account_type:
            _dict['debitAccountType'] = self.debit_account_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in gl_account_options (dict of array)
        _field_dict_of_array = {}
        if self.gl_account_options:
            for _key_gl_account_options in self.gl_account_options:
                if self.gl_account_options[_key_gl_account_options] is not None:
                    _field_dict_of_array[_key_gl_account_options] = [
                        _item.to_dict() for _item in self.gl_account_options[_key_gl_account_options]
                    ]
            _dict['glAccountOptions'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each item in gl_account_type_options (list)
        _items = []
        if self.gl_account_type_options:
            for _item_gl_account_type_options in self.gl_account_type_options:
                if _item_gl_account_type_options:
                    _items.append(_item_gl_account_type_options.to_dict())
            _dict['glAccountTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tax_component_histories (list)
        _items = []
        if self.tax_component_histories:
            for _item_tax_component_histories in self.tax_component_histories:
                if _item_tax_component_histories:
                    _items.append(_item_tax_component_histories.to_dict())
            _dict['taxComponentHistories'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaxComponentData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creditAccount": GLAccountData.from_dict(obj["creditAccount"]) if obj.get("creditAccount") is not None else None,
            "creditAccountType": EnumOptionData.from_dict(obj["creditAccountType"]) if obj.get("creditAccountType") is not None else None,
            "debitAccount": GLAccountData.from_dict(obj["debitAccount"]) if obj.get("debitAccount") is not None else None,
            "debitAccountType": EnumOptionData.from_dict(obj["debitAccountType"]) if obj.get("debitAccountType") is not None else None,
            "glAccountOptions": dict(
                (_k,
                        [GLAccountData.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("glAccountOptions", {}).items()
            ),
            "glAccountTypeOptions": [EnumOptionData.from_dict(_item) for _item in obj["glAccountTypeOptions"]] if obj.get("glAccountTypeOptions") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "percentage": obj.get("percentage"),
            "startDate": obj.get("startDate"),
            "taxComponentHistories": [TaxComponentHistoryData.from_dict(_item) for _item in obj["taxComponentHistories"]] if obj.get("taxComponentHistories") is not None else None
        })
        return _obj


