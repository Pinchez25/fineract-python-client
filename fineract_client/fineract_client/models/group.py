# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.group_level import GroupLevel
from fineract_client.models.office import Office
from fineract_client.models.staff import Staff
from typing import Optional, Set
from typing_extensions import Self

class Group(BaseModel):
    """
    Group
    """ # noqa: E501
    account_number_requires_auto_generation: Optional[StrictBool] = Field(default=None, alias="accountNumberRequiresAutoGeneration")
    activation_date: Optional[date] = Field(default=None, alias="activationDate")
    active: Optional[StrictBool] = None
    active_client_members: Optional[List[Client]] = Field(default=None, alias="activeClientMembers")
    center: Optional[StrictBool] = None
    child_group: Optional[StrictBool] = Field(default=None, alias="childGroup")
    client_members: Optional[List[Client]] = Field(default=None, alias="clientMembers")
    closed: Optional[StrictBool] = None
    group: Optional[StrictBool] = None
    group_level: Optional[GroupLevel] = Field(default=None, alias="groupLevel")
    group_members: Optional[List[Group]] = Field(default=None, alias="groupMembers")
    id: Optional[StrictInt] = None
    new: Optional[StrictBool] = None
    not_active: Optional[StrictBool] = Field(default=None, alias="notActive")
    not_pending: Optional[StrictBool] = Field(default=None, alias="notPending")
    office: Optional[Office] = None
    parent: Optional[Group] = None
    pending: Optional[StrictBool] = None
    staff: Optional[Staff] = None
    submitted_on_date: Optional[date] = Field(default=None, alias="submittedOnDate")
    transfer_in_progress: Optional[StrictBool] = Field(default=None, alias="transferInProgress")
    transfer_in_progress_or_on_hold: Optional[StrictBool] = Field(default=None, alias="transferInProgressOrOnHold")
    transfer_on_hold: Optional[StrictBool] = Field(default=None, alias="transferOnHold")
    __properties: ClassVar[List[str]] = ["accountNumberRequiresAutoGeneration", "activationDate", "active", "activeClientMembers", "center", "childGroup", "clientMembers", "closed", "group", "groupLevel", "groupMembers", "id", "new", "notActive", "notPending", "office", "parent", "pending", "staff", "submittedOnDate", "transferInProgress", "transferInProgressOrOnHold", "transferOnHold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Group from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_client_members (list)
        _items = []
        if self.active_client_members:
            for _item_active_client_members in self.active_client_members:
                if _item_active_client_members:
                    _items.append(_item_active_client_members.to_dict())
            _dict['activeClientMembers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in client_members (list)
        _items = []
        if self.client_members:
            for _item_client_members in self.client_members:
                if _item_client_members:
                    _items.append(_item_client_members.to_dict())
            _dict['clientMembers'] = _items
        # override the default output from pydantic by calling `to_dict()` of group_level
        if self.group_level:
            _dict['groupLevel'] = self.group_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in group_members (list)
        _items = []
        if self.group_members:
            for _item_group_members in self.group_members:
                if _item_group_members:
                    _items.append(_item_group_members.to_dict())
            _dict['groupMembers'] = _items
        # override the default output from pydantic by calling `to_dict()` of office
        if self.office:
            _dict['office'] = self.office.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of staff
        if self.staff:
            _dict['staff'] = self.staff.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Group from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNumberRequiresAutoGeneration": obj.get("accountNumberRequiresAutoGeneration"),
            "activationDate": obj.get("activationDate"),
            "active": obj.get("active"),
            "activeClientMembers": [Client.from_dict(_item) for _item in obj["activeClientMembers"]] if obj.get("activeClientMembers") is not None else None,
            "center": obj.get("center"),
            "childGroup": obj.get("childGroup"),
            "clientMembers": [Client.from_dict(_item) for _item in obj["clientMembers"]] if obj.get("clientMembers") is not None else None,
            "closed": obj.get("closed"),
            "group": obj.get("group"),
            "groupLevel": GroupLevel.from_dict(obj["groupLevel"]) if obj.get("groupLevel") is not None else None,
            "groupMembers": [Group.from_dict(_item) for _item in obj["groupMembers"]] if obj.get("groupMembers") is not None else None,
            "id": obj.get("id"),
            "new": obj.get("new"),
            "notActive": obj.get("notActive"),
            "notPending": obj.get("notPending"),
            "office": Office.from_dict(obj["office"]) if obj.get("office") is not None else None,
            "parent": Group.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "pending": obj.get("pending"),
            "staff": Staff.from_dict(obj["staff"]) if obj.get("staff") is not None else None,
            "submittedOnDate": obj.get("submittedOnDate"),
            "transferInProgress": obj.get("transferInProgress"),
            "transferInProgressOrOnHold": obj.get("transferInProgressOrOnHold"),
            "transferOnHold": obj.get("transferOnHold")
        })
        return _obj

from fineract_client.models.client import Client
# TODO: Rewrite to not use raise_errors
Group.model_rebuild(raise_errors=False)

