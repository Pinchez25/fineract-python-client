# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.get_charges_applies_to_response import GetChargesAppliesToResponse
from fineract_client.models.get_charges_calculation_type_response import GetChargesCalculationTypeResponse
from fineract_client.models.get_charges_currency_response import GetChargesCurrencyResponse
from fineract_client.models.get_charges_payment_mode_response import GetChargesPaymentModeResponse
from fineract_client.models.get_charges_template_fee_frequency_options import GetChargesTemplateFeeFrequencyOptions
from fineract_client.models.get_charges_template_loan_charge_calculation_type_options import GetChargesTemplateLoanChargeCalculationTypeOptions
from fineract_client.models.get_charges_template_loan_charge_time_type_options import GetChargesTemplateLoanChargeTimeTypeOptions
from fineract_client.models.get_charges_time_type_response import GetChargesTimeTypeResponse
from typing import Optional, Set
from typing_extensions import Self

class GetChargesTemplateResponse(BaseModel):
    """
    GetChargesTemplateResponse
    """ # noqa: E501
    active: Optional[StrictBool] = None
    charge_applies_to_options: Optional[List[GetChargesAppliesToResponse]] = Field(default=None, alias="chargeAppliesToOptions")
    charge_calculation_type_options: Optional[List[GetChargesCalculationTypeResponse]] = Field(default=None, alias="chargeCalculationTypeOptions")
    charge_payment_mode_options: Optional[List[GetChargesPaymentModeResponse]] = Field(default=None, alias="chargePaymentModeOptions")
    charge_time_type_options: Optional[List[GetChargesTimeTypeResponse]] = Field(default=None, alias="chargeTimeTypeOptions")
    currency_options: Optional[List[GetChargesCurrencyResponse]] = Field(default=None, alias="currencyOptions")
    fee_frequency_options: Optional[List[GetChargesTemplateFeeFrequencyOptions]] = Field(default=None, alias="feeFrequencyOptions")
    loan_charge_calculation_type_options: Optional[List[GetChargesTemplateLoanChargeCalculationTypeOptions]] = Field(default=None, alias="loanChargeCalculationTypeOptions")
    loan_charge_time_type_options: Optional[List[GetChargesTemplateLoanChargeTimeTypeOptions]] = Field(default=None, alias="loanChargeTimeTypeOptions")
    penalty: Optional[StrictBool] = None
    savings_charge_calculation_type_options: Optional[List[GetChargesTemplateLoanChargeCalculationTypeOptions]] = Field(default=None, alias="savingsChargeCalculationTypeOptions")
    savings_charge_time_type_options: Optional[List[GetChargesTemplateLoanChargeTimeTypeOptions]] = Field(default=None, alias="savingsChargeTimeTypeOptions")
    __properties: ClassVar[List[str]] = ["active", "chargeAppliesToOptions", "chargeCalculationTypeOptions", "chargePaymentModeOptions", "chargeTimeTypeOptions", "currencyOptions", "feeFrequencyOptions", "loanChargeCalculationTypeOptions", "loanChargeTimeTypeOptions", "penalty", "savingsChargeCalculationTypeOptions", "savingsChargeTimeTypeOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetChargesTemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charge_applies_to_options (list)
        _items = []
        if self.charge_applies_to_options:
            for _item_charge_applies_to_options in self.charge_applies_to_options:
                if _item_charge_applies_to_options:
                    _items.append(_item_charge_applies_to_options.to_dict())
            _dict['chargeAppliesToOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charge_calculation_type_options (list)
        _items = []
        if self.charge_calculation_type_options:
            for _item_charge_calculation_type_options in self.charge_calculation_type_options:
                if _item_charge_calculation_type_options:
                    _items.append(_item_charge_calculation_type_options.to_dict())
            _dict['chargeCalculationTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charge_payment_mode_options (list)
        _items = []
        if self.charge_payment_mode_options:
            for _item_charge_payment_mode_options in self.charge_payment_mode_options:
                if _item_charge_payment_mode_options:
                    _items.append(_item_charge_payment_mode_options.to_dict())
            _dict['chargePaymentModeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charge_time_type_options (list)
        _items = []
        if self.charge_time_type_options:
            for _item_charge_time_type_options in self.charge_time_type_options:
                if _item_charge_time_type_options:
                    _items.append(_item_charge_time_type_options.to_dict())
            _dict['chargeTimeTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in currency_options (list)
        _items = []
        if self.currency_options:
            for _item_currency_options in self.currency_options:
                if _item_currency_options:
                    _items.append(_item_currency_options.to_dict())
            _dict['currencyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fee_frequency_options (list)
        _items = []
        if self.fee_frequency_options:
            for _item_fee_frequency_options in self.fee_frequency_options:
                if _item_fee_frequency_options:
                    _items.append(_item_fee_frequency_options.to_dict())
            _dict['feeFrequencyOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loan_charge_calculation_type_options (list)
        _items = []
        if self.loan_charge_calculation_type_options:
            for _item_loan_charge_calculation_type_options in self.loan_charge_calculation_type_options:
                if _item_loan_charge_calculation_type_options:
                    _items.append(_item_loan_charge_calculation_type_options.to_dict())
            _dict['loanChargeCalculationTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loan_charge_time_type_options (list)
        _items = []
        if self.loan_charge_time_type_options:
            for _item_loan_charge_time_type_options in self.loan_charge_time_type_options:
                if _item_loan_charge_time_type_options:
                    _items.append(_item_loan_charge_time_type_options.to_dict())
            _dict['loanChargeTimeTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in savings_charge_calculation_type_options (list)
        _items = []
        if self.savings_charge_calculation_type_options:
            for _item_savings_charge_calculation_type_options in self.savings_charge_calculation_type_options:
                if _item_savings_charge_calculation_type_options:
                    _items.append(_item_savings_charge_calculation_type_options.to_dict())
            _dict['savingsChargeCalculationTypeOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in savings_charge_time_type_options (list)
        _items = []
        if self.savings_charge_time_type_options:
            for _item_savings_charge_time_type_options in self.savings_charge_time_type_options:
                if _item_savings_charge_time_type_options:
                    _items.append(_item_savings_charge_time_type_options.to_dict())
            _dict['savingsChargeTimeTypeOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetChargesTemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "chargeAppliesToOptions": [GetChargesAppliesToResponse.from_dict(_item) for _item in obj["chargeAppliesToOptions"]] if obj.get("chargeAppliesToOptions") is not None else None,
            "chargeCalculationTypeOptions": [GetChargesCalculationTypeResponse.from_dict(_item) for _item in obj["chargeCalculationTypeOptions"]] if obj.get("chargeCalculationTypeOptions") is not None else None,
            "chargePaymentModeOptions": [GetChargesPaymentModeResponse.from_dict(_item) for _item in obj["chargePaymentModeOptions"]] if obj.get("chargePaymentModeOptions") is not None else None,
            "chargeTimeTypeOptions": [GetChargesTimeTypeResponse.from_dict(_item) for _item in obj["chargeTimeTypeOptions"]] if obj.get("chargeTimeTypeOptions") is not None else None,
            "currencyOptions": [GetChargesCurrencyResponse.from_dict(_item) for _item in obj["currencyOptions"]] if obj.get("currencyOptions") is not None else None,
            "feeFrequencyOptions": [GetChargesTemplateFeeFrequencyOptions.from_dict(_item) for _item in obj["feeFrequencyOptions"]] if obj.get("feeFrequencyOptions") is not None else None,
            "loanChargeCalculationTypeOptions": [GetChargesTemplateLoanChargeCalculationTypeOptions.from_dict(_item) for _item in obj["loanChargeCalculationTypeOptions"]] if obj.get("loanChargeCalculationTypeOptions") is not None else None,
            "loanChargeTimeTypeOptions": [GetChargesTemplateLoanChargeTimeTypeOptions.from_dict(_item) for _item in obj["loanChargeTimeTypeOptions"]] if obj.get("loanChargeTimeTypeOptions") is not None else None,
            "penalty": obj.get("penalty"),
            "savingsChargeCalculationTypeOptions": [GetChargesTemplateLoanChargeCalculationTypeOptions.from_dict(_item) for _item in obj["savingsChargeCalculationTypeOptions"]] if obj.get("savingsChargeCalculationTypeOptions") is not None else None,
            "savingsChargeTimeTypeOptions": [GetChargesTemplateLoanChargeTimeTypeOptions.from_dict(_item) for _item in obj["savingsChargeTimeTypeOptions"]] if obj.get("savingsChargeTimeTypeOptions") is not None else None
        })
        return _obj


