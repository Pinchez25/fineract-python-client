# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.loan_product_provisioning_entry_data import LoanProductProvisioningEntryData
from typing import Optional, Set
from typing_extensions import Self

class ProvisioningEntryData(BaseModel):
    """
    ProvisioningEntryData
    """ # noqa: E501
    created_by_id: Optional[StrictInt] = Field(default=None, alias="createdById")
    created_date: Optional[date] = Field(default=None, alias="createdDate")
    created_user: Optional[StrictStr] = Field(default=None, alias="createdUser")
    id: Optional[StrictInt] = None
    journal_entry: Optional[StrictBool] = Field(default=None, alias="journalEntry")
    modified_by_id: Optional[StrictInt] = Field(default=None, alias="modifiedById")
    modified_user: Optional[StrictStr] = Field(default=None, alias="modifiedUser")
    provisioning_entries: Optional[List[LoanProductProvisioningEntryData]] = Field(default=None, alias="provisioningEntries")
    reserved_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="reservedAmount")
    __properties: ClassVar[List[str]] = ["createdById", "createdDate", "createdUser", "id", "journalEntry", "modifiedById", "modifiedUser", "provisioningEntries", "reservedAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProvisioningEntryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in provisioning_entries (list)
        _items = []
        if self.provisioning_entries:
            for _item_provisioning_entries in self.provisioning_entries:
                if _item_provisioning_entries:
                    _items.append(_item_provisioning_entries.to_dict())
            _dict['provisioningEntries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProvisioningEntryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "createdUser": obj.get("createdUser"),
            "id": obj.get("id"),
            "journalEntry": obj.get("journalEntry"),
            "modifiedById": obj.get("modifiedById"),
            "modifiedUser": obj.get("modifiedUser"),
            "provisioningEntries": [LoanProductProvisioningEntryData.from_dict(_item) for _item in obj["provisioningEntries"]] if obj.get("provisioningEntries") is not None else None,
            "reservedAmount": obj.get("reservedAmount")
        })
        return _obj


