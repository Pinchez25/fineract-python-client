# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fineract_client.models.post_accounts_charges import PostAccountsCharges
from typing import Optional, Set
from typing_extensions import Self

class PostAccountsTypeRequest(BaseModel):
    """
    PostAccountsTypeRequest
    """ # noqa: E501
    allow_dividend_calculation_for_inactive_clients: Optional[StrictBool] = Field(default=None, alias="allowDividendCalculationForInactiveClients")
    application_date: Optional[StrictStr] = Field(default=None, alias="applicationDate")
    charges: Optional[List[PostAccountsCharges]] = None
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    locale: Optional[StrictStr] = None
    lockin_period_frequency: Optional[StrictInt] = Field(default=None, alias="lockinPeriodFrequency")
    lockin_period_frequency_type: Optional[StrictInt] = Field(default=None, alias="lockinPeriodFrequencyType")
    minimum_active_period: Optional[StrictInt] = Field(default=None, alias="minimumActivePeriod")
    minimum_active_period_frequency_type: Optional[StrictInt] = Field(default=None, alias="minimumActivePeriodFrequencyType")
    product_id: Optional[StrictInt] = Field(default=None, alias="productId")
    requested_shares: Optional[StrictInt] = Field(default=None, alias="requestedShares")
    savings_account_id: Optional[StrictInt] = Field(default=None, alias="savingsAccountId")
    submitted_date: Optional[StrictStr] = Field(default=None, alias="submittedDate")
    __properties: ClassVar[List[str]] = ["allowDividendCalculationForInactiveClients", "applicationDate", "charges", "clientId", "dateFormat", "externalId", "locale", "lockinPeriodFrequency", "lockinPeriodFrequencyType", "minimumActivePeriod", "minimumActivePeriodFrequencyType", "productId", "requestedShares", "savingsAccountId", "submittedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostAccountsTypeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item_charges in self.charges:
                if _item_charges:
                    _items.append(_item_charges.to_dict())
            _dict['charges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostAccountsTypeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowDividendCalculationForInactiveClients": obj.get("allowDividendCalculationForInactiveClients"),
            "applicationDate": obj.get("applicationDate"),
            "charges": [PostAccountsCharges.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "clientId": obj.get("clientId"),
            "dateFormat": obj.get("dateFormat"),
            "externalId": obj.get("externalId"),
            "locale": obj.get("locale"),
            "lockinPeriodFrequency": obj.get("lockinPeriodFrequency"),
            "lockinPeriodFrequencyType": obj.get("lockinPeriodFrequencyType"),
            "minimumActivePeriod": obj.get("minimumActivePeriod"),
            "minimumActivePeriodFrequencyType": obj.get("minimumActivePeriodFrequencyType"),
            "productId": obj.get("productId"),
            "requestedShares": obj.get("requestedShares"),
            "savingsAccountId": obj.get("savingsAccountId"),
            "submittedDate": obj.get("submittedDate")
        })
        return _obj


