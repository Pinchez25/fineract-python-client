# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from fineract_client.models.post_self_loans_datatables import PostSelfLoansDatatables
from fineract_client.models.post_self_loans_disbursement_data import PostSelfLoansDisbursementData
from typing import Optional, Set
from typing_extensions import Self

class PostSelfLoansRequest(BaseModel):
    """
    PostSelfLoansRequest
    """ # noqa: E501
    amortization_type: Optional[StrictInt] = Field(default=None, alias="amortizationType")
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    datatables: Optional[List[PostSelfLoansDatatables]] = None
    date_format: Optional[StrictStr] = Field(default=None, alias="dateFormat")
    disbursement_data: Optional[List[PostSelfLoansDisbursementData]] = Field(default=None, alias="disbursementData")
    expected_disbursement_date: Optional[StrictStr] = Field(default=None, alias="expectedDisbursementDate")
    fixed_emi_amount: Optional[StrictInt] = Field(default=None, alias="fixedEmiAmount")
    interest_calculation_period_type: Optional[StrictInt] = Field(default=None, alias="interestCalculationPeriodType")
    interest_rate_per_period: Optional[StrictInt] = Field(default=None, alias="interestRatePerPeriod")
    interest_type: Optional[StrictInt] = Field(default=None, alias="interestType")
    link_account_id: Optional[StrictInt] = Field(default=None, alias="linkAccountId")
    loan_term_frequency: Optional[StrictInt] = Field(default=None, alias="loanTermFrequency")
    loan_term_frequency_type: Optional[StrictInt] = Field(default=None, alias="loanTermFrequencyType")
    loan_type: Optional[StrictStr] = Field(default=None, alias="loanType")
    locale: Optional[StrictStr] = None
    max_outstanding_loan_balance: Optional[StrictInt] = Field(default=None, alias="maxOutstandingLoanBalance")
    number_of_repayments: Optional[StrictInt] = Field(default=None, alias="numberOfRepayments")
    principal: Optional[Union[StrictFloat, StrictInt]] = None
    product_id: Optional[StrictInt] = Field(default=None, alias="productId")
    repayment_every: Optional[StrictInt] = Field(default=None, alias="repaymentEvery")
    repayment_frequency_type: Optional[StrictInt] = Field(default=None, alias="repaymentFrequencyType")
    submitted_on_date: Optional[StrictStr] = Field(default=None, alias="submittedOnDate")
    transaction_processing_strategy_code: Optional[StrictStr] = Field(default=None, alias="transactionProcessingStrategyCode")
    __properties: ClassVar[List[str]] = ["amortizationType", "clientId", "datatables", "dateFormat", "disbursementData", "expectedDisbursementDate", "fixedEmiAmount", "interestCalculationPeriodType", "interestRatePerPeriod", "interestType", "linkAccountId", "loanTermFrequency", "loanTermFrequencyType", "loanType", "locale", "maxOutstandingLoanBalance", "numberOfRepayments", "principal", "productId", "repaymentEvery", "repaymentFrequencyType", "submittedOnDate", "transactionProcessingStrategyCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostSelfLoansRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in datatables (list)
        _items = []
        if self.datatables:
            for _item_datatables in self.datatables:
                if _item_datatables:
                    _items.append(_item_datatables.to_dict())
            _dict['datatables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in disbursement_data (list)
        _items = []
        if self.disbursement_data:
            for _item_disbursement_data in self.disbursement_data:
                if _item_disbursement_data:
                    _items.append(_item_disbursement_data.to_dict())
            _dict['disbursementData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostSelfLoansRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amortizationType": obj.get("amortizationType"),
            "clientId": obj.get("clientId"),
            "datatables": [PostSelfLoansDatatables.from_dict(_item) for _item in obj["datatables"]] if obj.get("datatables") is not None else None,
            "dateFormat": obj.get("dateFormat"),
            "disbursementData": [PostSelfLoansDisbursementData.from_dict(_item) for _item in obj["disbursementData"]] if obj.get("disbursementData") is not None else None,
            "expectedDisbursementDate": obj.get("expectedDisbursementDate"),
            "fixedEmiAmount": obj.get("fixedEmiAmount"),
            "interestCalculationPeriodType": obj.get("interestCalculationPeriodType"),
            "interestRatePerPeriod": obj.get("interestRatePerPeriod"),
            "interestType": obj.get("interestType"),
            "linkAccountId": obj.get("linkAccountId"),
            "loanTermFrequency": obj.get("loanTermFrequency"),
            "loanTermFrequencyType": obj.get("loanTermFrequencyType"),
            "loanType": obj.get("loanType"),
            "locale": obj.get("locale"),
            "maxOutstandingLoanBalance": obj.get("maxOutstandingLoanBalance"),
            "numberOfRepayments": obj.get("numberOfRepayments"),
            "principal": obj.get("principal"),
            "productId": obj.get("productId"),
            "repaymentEvery": obj.get("repaymentEvery"),
            "repaymentFrequencyType": obj.get("repaymentFrequencyType"),
            "submittedOnDate": obj.get("submittedOnDate"),
            "transactionProcessingStrategyCode": obj.get("transactionProcessingStrategyCode")
        })
        return _obj


