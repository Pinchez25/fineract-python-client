# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class ProvisioningEntriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_provisioning_entries(self, **kwargs):  # noqa: E501
        """Create new Provisioning Entries  # noqa: E501

        Creates a new Provisioning Entries  Mandatory Fields date dateFormat locale Optional Fields createjournalentries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_provisioning_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostProvisioningEntriesRequest body:
        :return: PostProvisioningEntriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_provisioning_entries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_provisioning_entries_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_provisioning_entries_with_http_info(self, **kwargs):  # noqa: E501
        """Create new Provisioning Entries  # noqa: E501

        Creates a new Provisioning Entries  Mandatory Fields date dateFormat locale Optional Fields createjournalentries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_provisioning_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostProvisioningEntriesRequest body:
        :return: PostProvisioningEntriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_provisioning_entries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/provisioningentries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostProvisioningEntriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_provisioning_entry(self, entry_id, **kwargs):  # noqa: E501
        """Recreates Provisioning Entry  # noqa: E501

        Recreates Provisioning Entry | createjournalentry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_provisioning_entry(entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int entry_id: entryId (required)
        :param PutProvisioningEntriesRequest body:
        :param str command: command=createjournalentry command=recreateprovisioningentry
        :return: PutProvisioningEntriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_provisioning_entry_with_http_info(entry_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_provisioning_entry_with_http_info(entry_id, **kwargs)  # noqa: E501
            return data

    def modify_provisioning_entry_with_http_info(self, entry_id, **kwargs):  # noqa: E501
        """Recreates Provisioning Entry  # noqa: E501

        Recreates Provisioning Entry | createjournalentry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_provisioning_entry_with_http_info(entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int entry_id: entryId (required)
        :param PutProvisioningEntriesRequest body:
        :param str command: command=createjournalentry command=recreateprovisioningentry
        :return: PutProvisioningEntriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entry_id', 'body', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_provisioning_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entry_id' is set
        if ('entry_id' not in params or
                params['entry_id'] is None):
            raise ValueError("Missing the required parameter `entry_id` when calling `modify_provisioning_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entry_id' in params:
            path_params['entryId'] = params['entry_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/provisioningentries/{entryId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutProvisioningEntriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all_provisioning_entries(self, **kwargs):  # noqa: E501
        """List all Provisioning Entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_provisioning_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: offset
        :param int limit: limit
        :return: list[ProvisioningEntryData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_provisioning_entries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_provisioning_entries_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all_provisioning_entries_with_http_info(self, **kwargs):  # noqa: E501
        """List all Provisioning Entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_provisioning_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: offset
        :param int limit: limit
        :return: list[ProvisioningEntryData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_provisioning_entries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/provisioningentries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProvisioningEntryData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_proviioning_entries(self, **kwargs):  # noqa: E501
        """retrieve_proviioning_entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_proviioning_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int entry_id:
        :param int offset:
        :param int limit:
        :param int office_id:
        :param int product_id:
        :param int category_id:
        :return: LoanProductProvisioningEntryData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_proviioning_entries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_proviioning_entries_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_proviioning_entries_with_http_info(self, **kwargs):  # noqa: E501
        """retrieve_proviioning_entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_proviioning_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int entry_id:
        :param int offset:
        :param int limit:
        :param int office_id:
        :param int product_id:
        :param int category_id:
        :return: LoanProductProvisioningEntryData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entry_id', 'offset', 'limit', 'office_id', 'product_id', 'category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_proviioning_entries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'entry_id' in params:
            query_params.append(('entryId', params['entry_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'office_id' in params:
            query_params.append(('officeId', params['office_id']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('productId', params['product_id']))  # noqa: E501
        if 'category_id' in params:
            query_params.append(('categoryId', params['category_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/provisioningentries/entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanProductProvisioningEntryData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_provisioning_entry(self, entry_id, **kwargs):  # noqa: E501
        """Retrieves a Provisioning Entry  # noqa: E501

        Returns the details of a generated Provisioning Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_provisioning_entry(entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int entry_id: entryId (required)
        :return: ProvisioningEntryData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_provisioning_entry_with_http_info(entry_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_provisioning_entry_with_http_info(entry_id, **kwargs)  # noqa: E501
            return data

    def retrieve_provisioning_entry_with_http_info(self, entry_id, **kwargs):  # noqa: E501
        """Retrieves a Provisioning Entry  # noqa: E501

        Returns the details of a generated Provisioning Entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_provisioning_entry_with_http_info(entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int entry_id: entryId (required)
        :return: ProvisioningEntryData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entry_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_provisioning_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entry_id' is set
        if ('entry_id' not in params or
                params['entry_id'] is None):
            raise ValueError("Missing the required parameter `entry_id` when calling `retrieve_provisioning_entry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entry_id' in params:
            path_params['entryId'] = params['entry_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/provisioningentries/{entryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProvisioningEntryData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
