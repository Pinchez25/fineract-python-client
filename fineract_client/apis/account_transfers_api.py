# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class AccountTransfersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create4(self, body, **kwargs):  # noqa: E501
        """Create new Transfer  # noqa: E501

        Ability to create new transfer of monetary funds from one account to another.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create4(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostAccountTransfersRequest body: (required)
        :return: PostAccountTransfersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create4_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create4_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create4_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new Transfer  # noqa: E501

        Ability to create new transfer of monetary funds from one account to another.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create4_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostAccountTransfersRequest body: (required)
        :return: PostAccountTransfersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create4`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounttransfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostAccountTransfersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all18(self, **kwargs):  # noqa: E501
        """List account transfers  # noqa: E501

        Lists account's transfers  Example Requests:    accounttransfers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all18(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: externalId
        :param int offset: offset
        :param int limit:
        :param str order_by: orderBy
        :param str sort_order: sortOrder
        :param int account_detail_id: accountDetailId
        :return: GetAccountTransfersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all18_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all18_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all18_with_http_info(self, **kwargs):  # noqa: E501
        """List account transfers  # noqa: E501

        Lists account's transfers  Example Requests:    accounttransfers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all18_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: externalId
        :param int offset: offset
        :param int limit:
        :param str order_by: orderBy
        :param str sort_order: sortOrder
        :param int account_detail_id: accountDetailId
        :return: GetAccountTransfersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_id', 'offset', 'limit', 'order_by', 'sort_order', 'account_detail_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all18" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'external_id' in params:
            query_params.append(('externalId', params['external_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'account_detail_id' in params:
            query_params.append(('accountDetailId', params['account_detail_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounttransfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountTransfersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_one9(self, transfer_id, **kwargs):  # noqa: E501
        """Retrieve account transfer  # noqa: E501

        Retrieves account transfer  Example Requests :    accounttransfers/1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one9(transfer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int transfer_id: transferId (required)
        :return: GetAccountTransfersPageItems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_one9_with_http_info(transfer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_one9_with_http_info(transfer_id, **kwargs)  # noqa: E501
            return data

    def retrieve_one9_with_http_info(self, transfer_id, **kwargs):  # noqa: E501
        """Retrieve account transfer  # noqa: E501

        Retrieves account transfer  Example Requests :    accounttransfers/1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one9_with_http_info(transfer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int transfer_id: transferId (required)
        :return: GetAccountTransfersPageItems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transfer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_one9" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transfer_id' is set
        if ('transfer_id' not in params or
                params['transfer_id'] is None):
            raise ValueError("Missing the required parameter `transfer_id` when calling `retrieve_one9`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transfer_id' in params:
            path_params['transferId'] = params['transfer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounttransfers/{transferId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountTransfersPageItems',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template5(self, **kwargs):  # noqa: E501
        """Retrieve Account Transfer Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:    Field Defaults  Allowed Value Lists  Example Requests:    accounttransfers/template?fromAccountType=2&fromOfficeId=1    accounttransfers/template?fromAccountType=2&fromOfficeId=1&fromClientId=1    accounttransfers/template?fromClientId=1&fromAccountType=2&fromAccountId=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template5(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int from_office_id: fromOfficeId
        :param int from_client_id: fromClientId
        :param int from_account_id: fromAccountId
        :param int from_account_type: fromAccountType
        :param int to_office_id: toOfficeId
        :param int to_client_id: toClientId
        :param int to_account_id: toAccountId
        :param int to_account_type: toAccountType
        :return: GetAccountTransfersTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template5_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.template5_with_http_info(**kwargs)  # noqa: E501
            return data

    def template5_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve Account Transfer Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:    Field Defaults  Allowed Value Lists  Example Requests:    accounttransfers/template?fromAccountType=2&fromOfficeId=1    accounttransfers/template?fromAccountType=2&fromOfficeId=1&fromClientId=1    accounttransfers/template?fromClientId=1&fromAccountType=2&fromAccountId=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template5_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int from_office_id: fromOfficeId
        :param int from_client_id: fromClientId
        :param int from_account_id: fromAccountId
        :param int from_account_type: fromAccountType
        :param int to_office_id: toOfficeId
        :param int to_client_id: toClientId
        :param int to_account_id: toAccountId
        :param int to_account_type: toAccountType
        :return: GetAccountTransfersTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_office_id', 'from_client_id', 'from_account_id', 'from_account_type', 'to_office_id', 'to_client_id', 'to_account_id', 'to_account_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template5" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_office_id' in params:
            query_params.append(('fromOfficeId', params['from_office_id']))  # noqa: E501
        if 'from_client_id' in params:
            query_params.append(('fromClientId', params['from_client_id']))  # noqa: E501
        if 'from_account_id' in params:
            query_params.append(('fromAccountId', params['from_account_id']))  # noqa: E501
        if 'from_account_type' in params:
            query_params.append(('fromAccountType', params['from_account_type']))  # noqa: E501
        if 'to_office_id' in params:
            query_params.append(('toOfficeId', params['to_office_id']))  # noqa: E501
        if 'to_client_id' in params:
            query_params.append(('toClientId', params['to_client_id']))  # noqa: E501
        if 'to_account_id' in params:
            query_params.append(('toAccountId', params['to_account_id']))  # noqa: E501
        if 'to_account_type' in params:
            query_params.append(('toAccountType', params['to_account_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounttransfers/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountTransfersTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_refund_by_transfer(self, **kwargs):  # noqa: E501
        """Retrieve Refund of an Active Loan by Transfer Template  # noqa: E501

        Retrieves Refund of an Active Loan by Transfer TemplateExample Requests :    accounttransfers/templateRefundByTransfer?fromAccountId=2&fromAccountType=1& toAccountId=1&toAccountType=2&toClientId=1&toOfficeId=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_refund_by_transfer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int from_office_id: fromOfficeId
        :param int from_client_id: fromClientId
        :param int from_account_id: fromAccountId
        :param int from_account_type: fromAccountType
        :param int to_office_id: toOfficeId
        :param int to_client_id: toClientId
        :param int to_account_id: toAccountId
        :param int to_account_type: toAccountType
        :return: GetAccountTransfersTemplateRefundByTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_refund_by_transfer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.template_refund_by_transfer_with_http_info(**kwargs)  # noqa: E501
            return data

    def template_refund_by_transfer_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve Refund of an Active Loan by Transfer Template  # noqa: E501

        Retrieves Refund of an Active Loan by Transfer TemplateExample Requests :    accounttransfers/templateRefundByTransfer?fromAccountId=2&fromAccountType=1& toAccountId=1&toAccountType=2&toClientId=1&toOfficeId=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_refund_by_transfer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int from_office_id: fromOfficeId
        :param int from_client_id: fromClientId
        :param int from_account_id: fromAccountId
        :param int from_account_type: fromAccountType
        :param int to_office_id: toOfficeId
        :param int to_client_id: toClientId
        :param int to_account_id: toAccountId
        :param int to_account_type: toAccountType
        :return: GetAccountTransfersTemplateRefundByTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_office_id', 'from_client_id', 'from_account_id', 'from_account_type', 'to_office_id', 'to_client_id', 'to_account_id', 'to_account_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_refund_by_transfer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_office_id' in params:
            query_params.append(('fromOfficeId', params['from_office_id']))  # noqa: E501
        if 'from_client_id' in params:
            query_params.append(('fromClientId', params['from_client_id']))  # noqa: E501
        if 'from_account_id' in params:
            query_params.append(('fromAccountId', params['from_account_id']))  # noqa: E501
        if 'from_account_type' in params:
            query_params.append(('fromAccountType', params['from_account_type']))  # noqa: E501
        if 'to_office_id' in params:
            query_params.append(('toOfficeId', params['to_office_id']))  # noqa: E501
        if 'to_client_id' in params:
            query_params.append(('toClientId', params['to_client_id']))  # noqa: E501
        if 'to_account_id' in params:
            query_params.append(('toAccountId', params['to_account_id']))  # noqa: E501
        if 'to_account_type' in params:
            query_params.append(('toAccountType', params['to_account_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounttransfers/templateRefundByTransfer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountTransfersTemplateRefundByTransferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_refund_by_transfer_post(self, body, **kwargs):  # noqa: E501
        """Refund of an Active Loan by Transfer  # noqa: E501

        Ability to refund an active loan by transferring to a savings account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_refund_by_transfer_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostAccountTransfersRefundByTransferRequest body: (required)
        :return: PostAccountTransfersRefundByTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template_refund_by_transfer_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.template_refund_by_transfer_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def template_refund_by_transfer_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Refund of an Active Loan by Transfer  # noqa: E501

        Ability to refund an active loan by transferring to a savings account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template_refund_by_transfer_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostAccountTransfersRefundByTransferRequest body: (required)
        :return: PostAccountTransfersRefundByTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_refund_by_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `template_refund_by_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounttransfers/refundByTransfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostAccountTransfersRefundByTransferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
