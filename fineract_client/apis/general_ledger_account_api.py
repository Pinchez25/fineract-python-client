# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class GeneralLedgerAccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_gl_account1(self, **kwargs):  # noqa: E501
        """Create a General Ledger Account  # noqa: E501

        Note: You may optionally create Hierarchical Chart of Accounts by using the \"parentId\" property of an Account Mandatory Fields:  name, glCode, type, usage and manualEntriesAllowed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_gl_account1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostGLAccountsRequest body:
        :return: PostGLAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_gl_account1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_gl_account1_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_gl_account1_with_http_info(self, **kwargs):  # noqa: E501
        """Create a General Ledger Account  # noqa: E501

        Note: You may optionally create Hierarchical Chart of Accounts by using the \"parentId\" property of an Account Mandatory Fields:  name, glCode, type, usage and manualEntriesAllowed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_gl_account1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostGLAccountsRequest body:
        :return: PostGLAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_gl_account1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/glaccounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostGLAccountsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_gl_account1(self, gl_account_id, **kwargs):  # noqa: E501
        """Delete a GL Account  # noqa: E501

        Deletes a GL Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_gl_account1(gl_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int gl_account_id: glAccountId (required)
        :return: DeleteGLAccountsRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_gl_account1_with_http_info(gl_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_gl_account1_with_http_info(gl_account_id, **kwargs)  # noqa: E501
            return data

    def delete_gl_account1_with_http_info(self, gl_account_id, **kwargs):  # noqa: E501
        """Delete a GL Account  # noqa: E501

        Deletes a GL Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_gl_account1_with_http_info(gl_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int gl_account_id: glAccountId (required)
        :return: DeleteGLAccountsRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gl_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_gl_account1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gl_account_id' is set
        if ('gl_account_id' not in params or
                params['gl_account_id'] is None):
            raise ValueError("Missing the required parameter `gl_account_id` when calling `delete_gl_account1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gl_account_id' in params:
            path_params['glAccountId'] = params['gl_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/glaccounts/{glAccountId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteGLAccountsRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gl_accounts_template(self, **kwargs):  # noqa: E501
        """get_gl_accounts_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gl_accounts_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gl_accounts_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_gl_accounts_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_gl_accounts_template_with_http_info(self, **kwargs):  # noqa: E501
        """get_gl_accounts_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gl_accounts_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gl_accounts_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.ms-excel'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/glaccounts/downloadtemplate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_gl_accounts_template(self, **kwargs):  # noqa: E501
        """post_gl_accounts_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_gl_accounts_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_format:
        :param str locale:
        :param str uploaded_input_stream:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_gl_accounts_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_gl_accounts_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_gl_accounts_template_with_http_info(self, **kwargs):  # noqa: E501
        """post_gl_accounts_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_gl_accounts_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_format:
        :param str locale:
        :param str uploaded_input_stream:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_format', 'locale', 'uploaded_input_stream']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_gl_accounts_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date_format' in params:
            form_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'locale' in params:
            form_params.append(('locale', params['locale']))  # noqa: E501
        if 'uploaded_input_stream' in params:
            local_var_files['uploadedInputStream'] = params['uploaded_input_stream']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/glaccounts/uploadtemplate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retreive_account(self, gl_account_id, **kwargs):  # noqa: E501
        """Retrieve a General Ledger Account  # noqa: E501

        Example Requests:  glaccounts/1   glaccounts/1?template=true   glaccounts/1?fields=name,glCode   glaccounts/1?fetchRunningBalance=true  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retreive_account(gl_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int gl_account_id: glAccountId (required)
        :param bool fetch_running_balance: fetchRunningBalance
        :return: GetGLAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retreive_account_with_http_info(gl_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retreive_account_with_http_info(gl_account_id, **kwargs)  # noqa: E501
            return data

    def retreive_account_with_http_info(self, gl_account_id, **kwargs):  # noqa: E501
        """Retrieve a General Ledger Account  # noqa: E501

        Example Requests:  glaccounts/1   glaccounts/1?template=true   glaccounts/1?fields=name,glCode   glaccounts/1?fetchRunningBalance=true  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retreive_account_with_http_info(gl_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int gl_account_id: glAccountId (required)
        :param bool fetch_running_balance: fetchRunningBalance
        :return: GetGLAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gl_account_id', 'fetch_running_balance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retreive_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gl_account_id' is set
        if ('gl_account_id' not in params or
                params['gl_account_id'] is None):
            raise ValueError("Missing the required parameter `gl_account_id` when calling `retreive_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gl_account_id' in params:
            path_params['glAccountId'] = params['gl_account_id']  # noqa: E501

        query_params = []
        if 'fetch_running_balance' in params:
            query_params.append(('fetchRunningBalance', params['fetch_running_balance']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/glaccounts/{glAccountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetGLAccountsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all_accounts(self, **kwargs):  # noqa: E501
        """List General Ledger Accounts  # noqa: E501

        ARGUMENTS type Integer optional manualEntriesAllowed boolean optional usage Integer optional disabled boolean optional parentId Long optional tagId Long optional Example Requests:  glaccounts   glaccounts?type=1&manualEntriesAllowed=true&usage=1&disabled=false  glaccounts?fetchRunningBalance=true  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: type
        :param str search_param: searchParam
        :param int usage: usage
        :param bool manual_entries_allowed: manualEntriesAllowed
        :param bool disabled: disabled
        :param bool fetch_running_balance: fetchRunningBalance
        :return: list[GetGLAccountsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """List General Ledger Accounts  # noqa: E501

        ARGUMENTS type Integer optional manualEntriesAllowed boolean optional usage Integer optional disabled boolean optional parentId Long optional tagId Long optional Example Requests:  glaccounts   glaccounts?type=1&manualEntriesAllowed=true&usage=1&disabled=false  glaccounts?fetchRunningBalance=true  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: type
        :param str search_param: searchParam
        :param int usage: usage
        :param bool manual_entries_allowed: manualEntriesAllowed
        :param bool disabled: disabled
        :param bool fetch_running_balance: fetchRunningBalance
        :return: list[GetGLAccountsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'search_param', 'usage', 'manual_entries_allowed', 'disabled', 'fetch_running_balance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'search_param' in params:
            query_params.append(('searchParam', params['search_param']))  # noqa: E501
        if 'usage' in params:
            query_params.append(('usage', params['usage']))  # noqa: E501
        if 'manual_entries_allowed' in params:
            query_params.append(('manualEntriesAllowed', params['manual_entries_allowed']))  # noqa: E501
        if 'disabled' in params:
            query_params.append(('disabled', params['disabled']))  # noqa: E501
        if 'fetch_running_balance' in params:
            query_params.append(('fetchRunningBalance', params['fetch_running_balance']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/glaccounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetGLAccountsResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_new_account_details(self, **kwargs):  # noqa: E501
        """Retrieve GL Accounts Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  glaccounts/template glaccounts/template?type=1  type is optional and integer value from 1 to 5.  1.Assets  2.Liabilities  3.Equity  4.Income  5.Expenses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_new_account_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: type
        :return: GetGLAccountsTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_new_account_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_new_account_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_new_account_details_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve GL Accounts Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  glaccounts/template glaccounts/template?type=1  type is optional and integer value from 1 to 5.  1.Assets  2.Liabilities  3.Equity  4.Income  5.Expenses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_new_account_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: type
        :return: GetGLAccountsTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_new_account_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/glaccounts/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetGLAccountsTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_gl_account1(self, gl_account_id, **kwargs):  # noqa: E501
        """Update a GL Account  # noqa: E501

        Updates a GL Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_gl_account1(gl_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int gl_account_id: glAccountId (required)
        :param PutGLAccountsRequest body:
        :return: PutGLAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_gl_account1_with_http_info(gl_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_gl_account1_with_http_info(gl_account_id, **kwargs)  # noqa: E501
            return data

    def update_gl_account1_with_http_info(self, gl_account_id, **kwargs):  # noqa: E501
        """Update a GL Account  # noqa: E501

        Updates a GL Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_gl_account1_with_http_info(gl_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int gl_account_id: glAccountId (required)
        :param PutGLAccountsRequest body:
        :return: PutGLAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gl_account_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_gl_account1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gl_account_id' is set
        if ('gl_account_id' not in params or
                params['gl_account_id'] is None):
            raise ValueError("Missing the required parameter `gl_account_id` when calling `update_gl_account1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gl_account_id' in params:
            path_params['glAccountId'] = params['gl_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/glaccounts/{glAccountId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutGLAccountsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
