# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class NotesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_new_note(self, body, resource_type, resource_id, **kwargs):  # noqa: E501
        """Add a Resource Note  # noqa: E501

        Adds a new note to a supported resource.  Example Requests:  clients/1/notes   groups/1/notes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_new_note(body, resource_type, resource_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostResourceTypeResourceIdNotesRequest body: (required)
        :param str resource_type: resourceType (required)
        :param int resource_id: resourceId (required)
        :return: PostResourceTypeResourceIdNotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_new_note_with_http_info(body, resource_type, resource_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_new_note_with_http_info(body, resource_type, resource_id, **kwargs)  # noqa: E501
            return data

    def add_new_note_with_http_info(self, body, resource_type, resource_id, **kwargs):  # noqa: E501
        """Add a Resource Note  # noqa: E501

        Adds a new note to a supported resource.  Example Requests:  clients/1/notes   groups/1/notes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_new_note_with_http_info(body, resource_type, resource_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostResourceTypeResourceIdNotesRequest body: (required)
        :param str resource_type: resourceType (required)
        :param int resource_id: resourceId (required)
        :return: PostResourceTypeResourceIdNotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'resource_type', 'resource_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_new_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_new_note`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `add_new_note`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `add_new_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{resourceType}/{resourceId}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResourceTypeResourceIdNotesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_note(self, resource_type, resource_id, note_id, **kwargs):  # noqa: E501
        """Delete a Resource Note  # noqa: E501

        Deletes a Resource Note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_note(resource_type, resource_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: resourceType (required)
        :param int resource_id: resourceId (required)
        :param int note_id: noteId (required)
        :return: DeleteResourceTypeResourceIdNotesNoteIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_note_with_http_info(resource_type, resource_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_note_with_http_info(resource_type, resource_id, note_id, **kwargs)  # noqa: E501
            return data

    def delete_note_with_http_info(self, resource_type, resource_id, note_id, **kwargs):  # noqa: E501
        """Delete a Resource Note  # noqa: E501

        Deletes a Resource Note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_note_with_http_info(resource_type, resource_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: resourceType (required)
        :param int resource_id: resourceId (required)
        :param int note_id: noteId (required)
        :return: DeleteResourceTypeResourceIdNotesNoteIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_type', 'resource_id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `delete_note`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `delete_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `delete_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{resourceType}/{resourceId}/notes/{noteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteResourceTypeResourceIdNotesNoteIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_note(self, resource_type, resource_id, note_id, **kwargs):  # noqa: E501
        """Retrieve a Resource Note  # noqa: E501

        Retrieves a Resource Note  Example Requests:  clients/1/notes/76   groups/1/notes/20   clients/1/notes/76?fields=note,createdOn,createdByUsername   groups/1/notes/20?fields=note,createdOn,createdByUsername  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_note(resource_type, resource_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: resourceType (required)
        :param int resource_id: resourceId (required)
        :param int note_id: noteId (required)
        :return: GetResourceTypeResourceIdNotesNoteIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_note_with_http_info(resource_type, resource_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_note_with_http_info(resource_type, resource_id, note_id, **kwargs)  # noqa: E501
            return data

    def retrieve_note_with_http_info(self, resource_type, resource_id, note_id, **kwargs):  # noqa: E501
        """Retrieve a Resource Note  # noqa: E501

        Retrieves a Resource Note  Example Requests:  clients/1/notes/76   groups/1/notes/20   clients/1/notes/76?fields=note,createdOn,createdByUsername   groups/1/notes/20?fields=note,createdOn,createdByUsername  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_note_with_http_info(resource_type, resource_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: resourceType (required)
        :param int resource_id: resourceId (required)
        :param int note_id: noteId (required)
        :return: GetResourceTypeResourceIdNotesNoteIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_type', 'resource_id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `retrieve_note`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `retrieve_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `retrieve_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{resourceType}/{resourceId}/notes/{noteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetResourceTypeResourceIdNotesNoteIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_notes_by_resource(self, resource_type, resource_id, **kwargs):  # noqa: E501
        """Retrieve a Resource's description  # noqa: E501

        Retrieves a Resource's Notes  Note: Notes are returned in descending createOn order.  Example Requests:  clients/2/notes   groups/2/notes?fields=note,createdOn,createdByUsername  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_notes_by_resource(resource_type, resource_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: resourceType (required)
        :param int resource_id: resourceId (required)
        :return: list[GetResourceTypeResourceIdNotesResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_notes_by_resource_with_http_info(resource_type, resource_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_notes_by_resource_with_http_info(resource_type, resource_id, **kwargs)  # noqa: E501
            return data

    def retrieve_notes_by_resource_with_http_info(self, resource_type, resource_id, **kwargs):  # noqa: E501
        """Retrieve a Resource's description  # noqa: E501

        Retrieves a Resource's Notes  Note: Notes are returned in descending createOn order.  Example Requests:  clients/2/notes   groups/2/notes?fields=note,createdOn,createdByUsername  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_notes_by_resource_with_http_info(resource_type, resource_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: resourceType (required)
        :param int resource_id: resourceId (required)
        :return: list[GetResourceTypeResourceIdNotesResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_type', 'resource_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_notes_by_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `retrieve_notes_by_resource`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `retrieve_notes_by_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{resourceType}/{resourceId}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetResourceTypeResourceIdNotesResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_note(self, body, resource_type, resource_id, note_id, **kwargs):  # noqa: E501
        """Update a Resource Note  # noqa: E501

        Updates a Resource Note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_note(body, resource_type, resource_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutResourceTypeResourceIdNotesNoteIdRequest body: (required)
        :param str resource_type: resourceType (required)
        :param int resource_id: resourceId (required)
        :param int note_id: noteId (required)
        :return: PutResourceTypeResourceIdNotesNoteIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_note_with_http_info(body, resource_type, resource_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_note_with_http_info(body, resource_type, resource_id, note_id, **kwargs)  # noqa: E501
            return data

    def update_note_with_http_info(self, body, resource_type, resource_id, note_id, **kwargs):  # noqa: E501
        """Update a Resource Note  # noqa: E501

        Updates a Resource Note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_note_with_http_info(body, resource_type, resource_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutResourceTypeResourceIdNotesNoteIdRequest body: (required)
        :param str resource_type: resourceType (required)
        :param int resource_id: resourceId (required)
        :param int note_id: noteId (required)
        :return: PutResourceTypeResourceIdNotesNoteIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'resource_type', 'resource_id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_note`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `update_note`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `update_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `update_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{resourceType}/{resourceId}/notes/{noteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutResourceTypeResourceIdNotesNoteIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
