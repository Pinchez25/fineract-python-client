# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class AccountNumberFormatApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create(self, **kwargs):  # noqa: E501
        """Create an Account number format  # noqa: E501

        Note: You may associate a single Account number format for a given account type Mandatory Fields for Account number formats accountType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostAccountNumberFormatsRequest body:
        :return: PostAccountNumberFormatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_with_http_info(self, **kwargs):  # noqa: E501
        """Create an Account number format  # noqa: E501

        Note: You may associate a single Account number format for a given account type Mandatory Fields for Account number formats accountType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostAccountNumberFormatsRequest body:
        :return: PostAccountNumberFormatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accountnumberformats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostAccountNumberFormatsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, account_number_format_id, **kwargs):  # noqa: E501
        """Delete an Account number format  # noqa: E501

        Note: Account numbers created while this format was active would remain unchanged.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(account_number_format_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_number_format_id: accountNumberFormatId (required)
        :return: DeleteAccountNumberFormatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_with_http_info(account_number_format_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(account_number_format_id, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, account_number_format_id, **kwargs):  # noqa: E501
        """Delete an Account number format  # noqa: E501

        Note: Account numbers created while this format was active would remain unchanged.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(account_number_format_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_number_format_id: accountNumberFormatId (required)
        :return: DeleteAccountNumberFormatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number_format_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number_format_id' is set
        if ('account_number_format_id' not in params or
                params['account_number_format_id'] is None):
            raise ValueError("Missing the required parameter `account_number_format_id` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_number_format_id' in params:
            path_params['accountNumberFormatId'] = params['account_number_format_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accountnumberformats/{accountNumberFormatId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteAccountNumberFormatsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all3(self, **kwargs):  # noqa: E501
        """List Account number formats  # noqa: E501

        Example Requests:  accountnumberformats   accountnumberformats?fields=accountType,prefixType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all3(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GetAccountNumberFormatsIdResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all3_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all3_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all3_with_http_info(self, **kwargs):  # noqa: E501
        """List Account number formats  # noqa: E501

        Example Requests:  accountnumberformats   accountnumberformats?fields=accountType,prefixType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all3_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GetAccountNumberFormatsIdResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all3" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accountnumberformats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetAccountNumberFormatsIdResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_one(self, account_number_format_id, **kwargs):  # noqa: E501
        """Retrieve an Account number format  # noqa: E501

        Example Requests:  accountnumberformats/1   accountnumberformats/1?template=true   accountnumberformats/1?fields=accountType,prefixType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one(account_number_format_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_number_format_id: accountNumberFormatId (required)
        :return: GetAccountNumberFormatsIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_one_with_http_info(account_number_format_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_one_with_http_info(account_number_format_id, **kwargs)  # noqa: E501
            return data

    def retrieve_one_with_http_info(self, account_number_format_id, **kwargs):  # noqa: E501
        """Retrieve an Account number format  # noqa: E501

        Example Requests:  accountnumberformats/1   accountnumberformats/1?template=true   accountnumberformats/1?fields=accountType,prefixType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one_with_http_info(account_number_format_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_number_format_id: accountNumberFormatId (required)
        :return: GetAccountNumberFormatsIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number_format_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number_format_id' is set
        if ('account_number_format_id' not in params or
                params['account_number_format_id'] is None):
            raise ValueError("Missing the required parameter `account_number_format_id` when calling `retrieve_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_number_format_id' in params:
            path_params['accountNumberFormatId'] = params['account_number_format_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accountnumberformats/{accountNumberFormatId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountNumberFormatsIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_template2(self, **kwargs):  # noqa: E501
        """Retrieve Account number format Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Request:  accountnumberformats/template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_template2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetAccountNumberFormatsResponseTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_template2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_template2_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_template2_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve Account number format Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Request:  accountnumberformats/template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_template2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetAccountNumberFormatsResponseTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_template2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accountnumberformats/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountNumberFormatsResponseTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update1(self, body, account_number_format_id, **kwargs):  # noqa: E501
        """Update an Account number format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update1(body, account_number_format_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutAccountNumberFormatsRequest body: (required)
        :param int account_number_format_id: accountNumberFormatId (required)
        :return: PutAccountNumberFormatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update1_with_http_info(body, account_number_format_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update1_with_http_info(body, account_number_format_id, **kwargs)  # noqa: E501
            return data

    def update1_with_http_info(self, body, account_number_format_id, **kwargs):  # noqa: E501
        """Update an Account number format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update1_with_http_info(body, account_number_format_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutAccountNumberFormatsRequest body: (required)
        :param int account_number_format_id: accountNumberFormatId (required)
        :return: PutAccountNumberFormatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'account_number_format_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update1`")  # noqa: E501
        # verify the required parameter 'account_number_format_id' is set
        if ('account_number_format_id' not in params or
                params['account_number_format_id'] is None):
            raise ValueError("Missing the required parameter `account_number_format_id` when calling `update1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_number_format_id' in params:
            path_params['accountNumberFormatId'] = params['account_number_format_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accountnumberformats/{accountNumberFormatId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutAccountNumberFormatsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
