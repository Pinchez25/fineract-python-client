# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class LoanChargesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_loan_charge(self, loan_id, loan_charge_id, **kwargs):  # noqa: E501
        """Delete a Loan Charge  # noqa: E501

        Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_charge(loan_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: DeleteLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_loan_charge_with_http_info(loan_id, loan_charge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_loan_charge_with_http_info(loan_id, loan_charge_id, **kwargs)  # noqa: E501
            return data

    def delete_loan_charge_with_http_info(self, loan_id, loan_charge_id, **kwargs):  # noqa: E501
        """Delete a Loan Charge  # noqa: E501

        Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_charge_with_http_info(loan_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: DeleteLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id', 'loan_charge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_loan_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `delete_loan_charge`")  # noqa: E501
        # verify the required parameter 'loan_charge_id' is set
        if ('loan_charge_id' not in params or
                params['loan_charge_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_id` when calling `delete_loan_charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'loan_charge_id' in params:
            path_params['loanChargeId'] = params['loan_charge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges/{loanChargeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_loan_charge1(self, loan_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Delete a Loan Charge  # noqa: E501

        Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_charge1(loan_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: DeleteLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_loan_charge1_with_http_info(loan_id, loan_charge_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_loan_charge1_with_http_info(loan_id, loan_charge_external_id, **kwargs)  # noqa: E501
            return data

    def delete_loan_charge1_with_http_info(self, loan_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Delete a Loan Charge  # noqa: E501

        Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_charge1_with_http_info(loan_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: DeleteLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id', 'loan_charge_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_loan_charge1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `delete_loan_charge1`")  # noqa: E501
        # verify the required parameter 'loan_charge_external_id' is set
        if ('loan_charge_external_id' not in params or
                params['loan_charge_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_external_id` when calling `delete_loan_charge1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'loan_charge_external_id' in params:
            path_params['loanChargeExternalId'] = params['loan_charge_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges/external-id/{loanChargeExternalId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_loan_charge2(self, loan_external_id, loan_charge_id, **kwargs):  # noqa: E501
        """Delete a Loan Charge  # noqa: E501

        Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_charge2(loan_external_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: DeleteLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_loan_charge2_with_http_info(loan_external_id, loan_charge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_loan_charge2_with_http_info(loan_external_id, loan_charge_id, **kwargs)  # noqa: E501
            return data

    def delete_loan_charge2_with_http_info(self, loan_external_id, loan_charge_id, **kwargs):  # noqa: E501
        """Delete a Loan Charge  # noqa: E501

        Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_charge2_with_http_info(loan_external_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: DeleteLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id', 'loan_charge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_loan_charge2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `delete_loan_charge2`")  # noqa: E501
        # verify the required parameter 'loan_charge_id' is set
        if ('loan_charge_id' not in params or
                params['loan_charge_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_id` when calling `delete_loan_charge2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'loan_charge_id' in params:
            path_params['loanChargeId'] = params['loan_charge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges/{loanChargeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_loan_charge3(self, loan_external_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Delete a Loan Charge  # noqa: E501

        Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_charge3(loan_external_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: DeleteLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_loan_charge3_with_http_info(loan_external_id, loan_charge_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_loan_charge3_with_http_info(loan_external_id, loan_charge_external_id, **kwargs)  # noqa: E501
            return data

    def delete_loan_charge3_with_http_info(self, loan_external_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Delete a Loan Charge  # noqa: E501

        Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_charge3_with_http_info(loan_external_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: DeleteLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id', 'loan_charge_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_loan_charge3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `delete_loan_charge3`")  # noqa: E501
        # verify the required parameter 'loan_charge_external_id' is set
        if ('loan_charge_external_id' not in params or
                params['loan_charge_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_external_id` when calling `delete_loan_charge3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'loan_charge_external_id' in params:
            path_params['loanChargeExternalId'] = params['loan_charge_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges/external-id/{loanChargeExternalId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_loan_charge(self, body, loan_id, **kwargs):  # noqa: E501
        """Create a Loan Charge (no command provided) or Pay a charge (command=pay)  # noqa: E501

        Creates a Loan Charge | Pay a Loan Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesRequest body: (required)
        :param int loan_id: loanId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_loan_charge_with_http_info(body, loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_loan_charge_with_http_info(body, loan_id, **kwargs)  # noqa: E501
            return data

    def execute_loan_charge_with_http_info(self, body, loan_id, **kwargs):  # noqa: E501
        """Create a Loan Charge (no command provided) or Pay a charge (command=pay)  # noqa: E501

        Creates a Loan Charge | Pay a Loan Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge_with_http_info(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesRequest body: (required)
        :param int loan_id: loanId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_loan_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_loan_charge`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `execute_loan_charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdChargesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_loan_charge1(self, body, loan_external_id, **kwargs):  # noqa: E501
        """Create a Loan Charge (no command provided) or Pay a charge (command=pay)  # noqa: E501

        Creates a Loan Charge | Pay a Loan Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge1(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_loan_charge1_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_loan_charge1_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
            return data

    def execute_loan_charge1_with_http_info(self, body, loan_external_id, **kwargs):  # noqa: E501
        """Create a Loan Charge (no command provided) or Pay a charge (command=pay)  # noqa: E501

        Creates a Loan Charge | Pay a Loan Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge1_with_http_info(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_loan_charge1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_loan_charge1`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `execute_loan_charge1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdChargesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_loan_charge2(self, body, loan_id, loan_charge_id, **kwargs):  # noqa: E501
        """Pay / Waive / Adjustment for Loan Charge  # noqa: E501

        Loan Charge will be paid if the loan is linked with a savings account | Waive Loan Charge | Add Charge Adjustment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge2(body, loan_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesChargeIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param int loan_charge_id: loanChargeId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_loan_charge2_with_http_info(body, loan_id, loan_charge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_loan_charge2_with_http_info(body, loan_id, loan_charge_id, **kwargs)  # noqa: E501
            return data

    def execute_loan_charge2_with_http_info(self, body, loan_id, loan_charge_id, **kwargs):  # noqa: E501
        """Pay / Waive / Adjustment for Loan Charge  # noqa: E501

        Loan Charge will be paid if the loan is linked with a savings account | Waive Loan Charge | Add Charge Adjustment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge2_with_http_info(body, loan_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesChargeIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param int loan_charge_id: loanChargeId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'loan_charge_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_loan_charge2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_loan_charge2`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `execute_loan_charge2`")  # noqa: E501
        # verify the required parameter 'loan_charge_id' is set
        if ('loan_charge_id' not in params or
                params['loan_charge_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_id` when calling `execute_loan_charge2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'loan_charge_id' in params:
            path_params['loanChargeId'] = params['loan_charge_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges/{loanChargeId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_loan_charge3(self, body, loan_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Pay / Waive / Adjustment for Loan Charge  # noqa: E501

        Loan Charge will be paid if the loan is linked with a savings account | Waive Loan Charge | Add Charge Adjustment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge3(body, loan_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesChargeIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_loan_charge3_with_http_info(body, loan_id, loan_charge_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_loan_charge3_with_http_info(body, loan_id, loan_charge_external_id, **kwargs)  # noqa: E501
            return data

    def execute_loan_charge3_with_http_info(self, body, loan_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Pay / Waive / Adjustment for Loan Charge  # noqa: E501

        Loan Charge will be paid if the loan is linked with a savings account | Waive Loan Charge | Add Charge Adjustment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge3_with_http_info(body, loan_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesChargeIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'loan_charge_external_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_loan_charge3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_loan_charge3`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `execute_loan_charge3`")  # noqa: E501
        # verify the required parameter 'loan_charge_external_id' is set
        if ('loan_charge_external_id' not in params or
                params['loan_charge_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_external_id` when calling `execute_loan_charge3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'loan_charge_external_id' in params:
            path_params['loanChargeExternalId'] = params['loan_charge_external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges/external-id/{loanChargeExternalId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_loan_charge4(self, body, loan_external_id, loan_charge_id, **kwargs):  # noqa: E501
        """Pay / Waive / Adjustment for Loan Charge  # noqa: E501

        Loan Charge will be paid if the loan is linked with a savings account | Waive Loan Charge | Add Charge Adjustment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge4(body, loan_external_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesChargeIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param int loan_charge_id: loanChargeId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_loan_charge4_with_http_info(body, loan_external_id, loan_charge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_loan_charge4_with_http_info(body, loan_external_id, loan_charge_id, **kwargs)  # noqa: E501
            return data

    def execute_loan_charge4_with_http_info(self, body, loan_external_id, loan_charge_id, **kwargs):  # noqa: E501
        """Pay / Waive / Adjustment for Loan Charge  # noqa: E501

        Loan Charge will be paid if the loan is linked with a savings account | Waive Loan Charge | Add Charge Adjustment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge4_with_http_info(body, loan_external_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesChargeIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param int loan_charge_id: loanChargeId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'loan_charge_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_loan_charge4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_loan_charge4`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `execute_loan_charge4`")  # noqa: E501
        # verify the required parameter 'loan_charge_id' is set
        if ('loan_charge_id' not in params or
                params['loan_charge_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_id` when calling `execute_loan_charge4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'loan_charge_id' in params:
            path_params['loanChargeId'] = params['loan_charge_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges/{loanChargeId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_loan_charge5(self, body, loan_external_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Pay / Waive / Adjustment for Loan Charge  # noqa: E501

        Loan Charge will be paid if the loan is linked with a savings account | Waive Loan Charge | Add Charge Adjustment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge5(body, loan_external_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesChargeIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_loan_charge5_with_http_info(body, loan_external_id, loan_charge_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_loan_charge5_with_http_info(body, loan_external_id, loan_charge_external_id, **kwargs)  # noqa: E501
            return data

    def execute_loan_charge5_with_http_info(self, body, loan_external_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Pay / Waive / Adjustment for Loan Charge  # noqa: E501

        Loan Charge will be paid if the loan is linked with a savings account | Waive Loan Charge | Add Charge Adjustment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_charge5_with_http_info(body, loan_external_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdChargesChargeIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :param str command: command
        :return: PostLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'loan_charge_external_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_loan_charge5" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_loan_charge5`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `execute_loan_charge5`")  # noqa: E501
        # verify the required parameter 'loan_charge_external_id' is set
        if ('loan_charge_external_id' not in params or
                params['loan_charge_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_external_id` when calling `execute_loan_charge5`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'loan_charge_external_id' in params:
            path_params['loanChargeExternalId'] = params['loan_charge_external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges/external-id/{loanChargeExternalId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all_loan_charges(self, loan_id, **kwargs):  # noqa: E501
        """List Loan Charges  # noqa: E501

        It lists all the Loan Charges specific to a Loan   Example Requests:  loans/1/charges   loans/1/charges?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_loan_charges(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: list[GetLoansLoanIdChargesChargeIdResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_loan_charges_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_loan_charges_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def retrieve_all_loan_charges_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """List Loan Charges  # noqa: E501

        It lists all the Loan Charges specific to a Loan   Example Requests:  loans/1/charges   loans/1/charges?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_loan_charges_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: list[GetLoansLoanIdChargesChargeIdResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_loan_charges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `retrieve_all_loan_charges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetLoansLoanIdChargesChargeIdResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all_loan_charges1(self, loan_external_id, **kwargs):  # noqa: E501
        """List Loan Charges  # noqa: E501

        It lists all the Loan Charges specific to a Loan   Example Requests:  loans/1/charges   loans/1/charges?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_loan_charges1(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :return: list[GetLoansLoanIdChargesChargeIdResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_loan_charges1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_loan_charges1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
            return data

    def retrieve_all_loan_charges1_with_http_info(self, loan_external_id, **kwargs):  # noqa: E501
        """List Loan Charges  # noqa: E501

        It lists all the Loan Charges specific to a Loan   Example Requests:  loans/1/charges   loans/1/charges?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_loan_charges1_with_http_info(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :return: list[GetLoansLoanIdChargesChargeIdResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_loan_charges1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `retrieve_all_loan_charges1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetLoansLoanIdChargesChargeIdResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_loan_charge(self, loan_id, loan_charge_id, **kwargs):  # noqa: E501
        """Retrieve a Loan Charge  # noqa: E501

        Retrieves Loan Charge according to the Loan ID and Loan Charge IDExample Requests:  /loans/1/charges/1   /loans/1/charges/1?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan_charge(loan_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: GetLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_loan_charge_with_http_info(loan_id, loan_charge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_loan_charge_with_http_info(loan_id, loan_charge_id, **kwargs)  # noqa: E501
            return data

    def retrieve_loan_charge_with_http_info(self, loan_id, loan_charge_id, **kwargs):  # noqa: E501
        """Retrieve a Loan Charge  # noqa: E501

        Retrieves Loan Charge according to the Loan ID and Loan Charge IDExample Requests:  /loans/1/charges/1   /loans/1/charges/1?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan_charge_with_http_info(loan_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: GetLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id', 'loan_charge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_loan_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `retrieve_loan_charge`")  # noqa: E501
        # verify the required parameter 'loan_charge_id' is set
        if ('loan_charge_id' not in params or
                params['loan_charge_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_id` when calling `retrieve_loan_charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'loan_charge_id' in params:
            path_params['loanChargeId'] = params['loan_charge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges/{loanChargeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_loan_charge1(self, loan_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Retrieve a Loan Charge  # noqa: E501

        Retrieves Loan Charge according to the Loan ID and Loan Charge External IDExample Requests:  /loans/1/charges/1   /loans/1/charges/external-id/1?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan_charge1(loan_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: GetLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_loan_charge1_with_http_info(loan_id, loan_charge_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_loan_charge1_with_http_info(loan_id, loan_charge_external_id, **kwargs)  # noqa: E501
            return data

    def retrieve_loan_charge1_with_http_info(self, loan_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Retrieve a Loan Charge  # noqa: E501

        Retrieves Loan Charge according to the Loan ID and Loan Charge External IDExample Requests:  /loans/1/charges/1   /loans/1/charges/external-id/1?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan_charge1_with_http_info(loan_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: GetLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id', 'loan_charge_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_loan_charge1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `retrieve_loan_charge1`")  # noqa: E501
        # verify the required parameter 'loan_charge_external_id' is set
        if ('loan_charge_external_id' not in params or
                params['loan_charge_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_external_id` when calling `retrieve_loan_charge1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'loan_charge_external_id' in params:
            path_params['loanChargeExternalId'] = params['loan_charge_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges/external-id/{loanChargeExternalId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_loan_charge2(self, loan_external_id, loan_charge_id, **kwargs):  # noqa: E501
        """Retrieve a Loan Charge  # noqa: E501

        Retrieves Loan Charge according to the Loan external ID and Loan Charge IDExample Requests:  /loans/1/charges/1   /loans/1/charges/1?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan_charge2(loan_external_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: GetLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_loan_charge2_with_http_info(loan_external_id, loan_charge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_loan_charge2_with_http_info(loan_external_id, loan_charge_id, **kwargs)  # noqa: E501
            return data

    def retrieve_loan_charge2_with_http_info(self, loan_external_id, loan_charge_id, **kwargs):  # noqa: E501
        """Retrieve a Loan Charge  # noqa: E501

        Retrieves Loan Charge according to the Loan external ID and Loan Charge IDExample Requests:  /loans/1/charges/1   /loans/1/charges/1?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan_charge2_with_http_info(loan_external_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: GetLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id', 'loan_charge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_loan_charge2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `retrieve_loan_charge2`")  # noqa: E501
        # verify the required parameter 'loan_charge_id' is set
        if ('loan_charge_id' not in params or
                params['loan_charge_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_id` when calling `retrieve_loan_charge2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'loan_charge_id' in params:
            path_params['loanChargeId'] = params['loan_charge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges/{loanChargeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_loan_charge3(self, loan_external_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Retrieve a Loan Charge  # noqa: E501

        Retrieves Loan Charge according to the Loan External ID and Loan Charge External IDExample Requests:  /loans/1/charges/1   /loans/1/charges/1?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan_charge3(loan_external_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: GetLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_loan_charge3_with_http_info(loan_external_id, loan_charge_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_loan_charge3_with_http_info(loan_external_id, loan_charge_external_id, **kwargs)  # noqa: E501
            return data

    def retrieve_loan_charge3_with_http_info(self, loan_external_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Retrieve a Loan Charge  # noqa: E501

        Retrieves Loan Charge according to the Loan External ID and Loan Charge External IDExample Requests:  /loans/1/charges/1   /loans/1/charges/1?fields=name,amountOrPercentage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan_charge3_with_http_info(loan_external_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: GetLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id', 'loan_charge_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_loan_charge3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `retrieve_loan_charge3`")  # noqa: E501
        # verify the required parameter 'loan_charge_external_id' is set
        if ('loan_charge_external_id' not in params or
                params['loan_charge_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_external_id` when calling `retrieve_loan_charge3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'loan_charge_external_id' in params:
            path_params['loanChargeExternalId'] = params['loan_charge_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges/external-id/{loanChargeExternalId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_template8(self, loan_id, **kwargs):  # noqa: E501
        """Retrieve Loan Charges Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  loans/1/charges/template    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_template8(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: GetLoansLoanIdChargesTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_template8_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_template8_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def retrieve_template8_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """Retrieve Loan Charges Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  loans/1/charges/template    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_template8_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: GetLoansLoanIdChargesTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_template8" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `retrieve_template8`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdChargesTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_template9(self, loan_external_id, **kwargs):  # noqa: E501
        """Retrieve Loan Charges Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  loans/1/charges/template    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_template9(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :return: GetLoansLoanIdChargesTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_template9_with_http_info(loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_template9_with_http_info(loan_external_id, **kwargs)  # noqa: E501
            return data

    def retrieve_template9_with_http_info(self, loan_external_id, **kwargs):  # noqa: E501
        """Retrieve Loan Charges Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  loans/1/charges/template    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_template9_with_http_info(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :return: GetLoansLoanIdChargesTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_template9" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `retrieve_template9`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdChargesTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_loan_charge(self, body, loan_id, loan_charge_id, **kwargs):  # noqa: E501
        """Update a Loan Charge  # noqa: E501

        Currently Loan Charges may be updated only if the Loan is not yet approved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_charge(body, loan_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdChargesChargeIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: PutLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_loan_charge_with_http_info(body, loan_id, loan_charge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_loan_charge_with_http_info(body, loan_id, loan_charge_id, **kwargs)  # noqa: E501
            return data

    def update_loan_charge_with_http_info(self, body, loan_id, loan_charge_id, **kwargs):  # noqa: E501
        """Update a Loan Charge  # noqa: E501

        Currently Loan Charges may be updated only if the Loan is not yet approved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_charge_with_http_info(body, loan_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdChargesChargeIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: PutLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'loan_charge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_loan_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_loan_charge`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `update_loan_charge`")  # noqa: E501
        # verify the required parameter 'loan_charge_id' is set
        if ('loan_charge_id' not in params or
                params['loan_charge_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_id` when calling `update_loan_charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'loan_charge_id' in params:
            path_params['loanChargeId'] = params['loan_charge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges/{loanChargeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_loan_charge1(self, body, loan_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Update a Loan Charge  # noqa: E501

        Currently Loan Charges may be updated only if the Loan is not yet approved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_charge1(body, loan_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdChargesChargeIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: PutLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_loan_charge1_with_http_info(body, loan_id, loan_charge_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_loan_charge1_with_http_info(body, loan_id, loan_charge_external_id, **kwargs)  # noqa: E501
            return data

    def update_loan_charge1_with_http_info(self, body, loan_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Update a Loan Charge  # noqa: E501

        Currently Loan Charges may be updated only if the Loan is not yet approved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_charge1_with_http_info(body, loan_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdChargesChargeIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: PutLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'loan_charge_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_loan_charge1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_loan_charge1`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `update_loan_charge1`")  # noqa: E501
        # verify the required parameter 'loan_charge_external_id' is set
        if ('loan_charge_external_id' not in params or
                params['loan_charge_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_external_id` when calling `update_loan_charge1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'loan_charge_external_id' in params:
            path_params['loanChargeExternalId'] = params['loan_charge_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/charges/external-id/{loanChargeExternalId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_loan_charge2(self, body, loan_external_id, loan_charge_id, **kwargs):  # noqa: E501
        """Update a Loan Charge  # noqa: E501

        Currently Loan Charges may be updated only if the Loan is not yet approved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_charge2(body, loan_external_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdChargesChargeIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: PutLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_loan_charge2_with_http_info(body, loan_external_id, loan_charge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_loan_charge2_with_http_info(body, loan_external_id, loan_charge_id, **kwargs)  # noqa: E501
            return data

    def update_loan_charge2_with_http_info(self, body, loan_external_id, loan_charge_id, **kwargs):  # noqa: E501
        """Update a Loan Charge  # noqa: E501

        Currently Loan Charges may be updated only if the Loan is not yet approved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_charge2_with_http_info(body, loan_external_id, loan_charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdChargesChargeIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param int loan_charge_id: loanChargeId (required)
        :return: PutLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'loan_charge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_loan_charge2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_loan_charge2`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `update_loan_charge2`")  # noqa: E501
        # verify the required parameter 'loan_charge_id' is set
        if ('loan_charge_id' not in params or
                params['loan_charge_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_id` when calling `update_loan_charge2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'loan_charge_id' in params:
            path_params['loanChargeId'] = params['loan_charge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges/{loanChargeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_loan_charge3(self, body, loan_external_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Update a Loan Charge  # noqa: E501

        Currently Loan Charges may be updated only if the Loan is not yet approved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_charge3(body, loan_external_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdChargesChargeIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: PutLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_loan_charge3_with_http_info(body, loan_external_id, loan_charge_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_loan_charge3_with_http_info(body, loan_external_id, loan_charge_external_id, **kwargs)  # noqa: E501
            return data

    def update_loan_charge3_with_http_info(self, body, loan_external_id, loan_charge_external_id, **kwargs):  # noqa: E501
        """Update a Loan Charge  # noqa: E501

        Currently Loan Charges may be updated only if the Loan is not yet approved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_charge3_with_http_info(body, loan_external_id, loan_charge_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdChargesChargeIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str loan_charge_external_id: loanChargeExternalId (required)
        :return: PutLoansLoanIdChargesChargeIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'loan_charge_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_loan_charge3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_loan_charge3`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `update_loan_charge3`")  # noqa: E501
        # verify the required parameter 'loan_charge_external_id' is set
        if ('loan_charge_external_id' not in params or
                params['loan_charge_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_charge_external_id` when calling `update_loan_charge3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'loan_charge_external_id' in params:
            path_params['loanChargeExternalId'] = params['loan_charge_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/charges/external-id/{loanChargeExternalId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutLoansLoanIdChargesChargeIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
