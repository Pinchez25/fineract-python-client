# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class TellerCashManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def allocate_cash_to_cashier(self, body, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Allocate Cash To Cashier  # noqa: E501

        Mandatory Fields:  Date, Amount, Currency, Notes/Comments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.allocate_cash_to_cashier(body, teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTellersTellerIdCashiersCashierIdAllocateRequest body: (required)
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: PostTellersTellerIdCashiersCashierIdAllocateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.allocate_cash_to_cashier_with_http_info(body, teller_id, cashier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.allocate_cash_to_cashier_with_http_info(body, teller_id, cashier_id, **kwargs)  # noqa: E501
            return data

    def allocate_cash_to_cashier_with_http_info(self, body, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Allocate Cash To Cashier  # noqa: E501

        Mandatory Fields:  Date, Amount, Currency, Notes/Comments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.allocate_cash_to_cashier_with_http_info(body, teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTellersTellerIdCashiersCashierIdAllocateRequest body: (required)
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: PostTellersTellerIdCashiersCashierIdAllocateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'teller_id', 'cashier_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method allocate_cash_to_cashier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `allocate_cash_to_cashier`")  # noqa: E501
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `allocate_cash_to_cashier`")  # noqa: E501
        # verify the required parameter 'cashier_id' is set
        if ('cashier_id' not in params or
                params['cashier_id'] is None):
            raise ValueError("Missing the required parameter `cashier_id` when calling `allocate_cash_to_cashier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501
        if 'cashier_id' in params:
            path_params['cashierId'] = params['cashier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers/{cashierId}/allocate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostTellersTellerIdCashiersCashierIdAllocateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cashier(self, body, teller_id, **kwargs):  # noqa: E501
        """Create Cashiers  # noqa: E501

        Mandatory Fields:  Cashier/staff, Fromm Date, To Date, Full Day or From time and To time    Optional Fields:  Description/Notes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cashier(body, teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTellersTellerIdCashiersRequest body: (required)
        :param int teller_id: tellerId (required)
        :return: PostTellersTellerIdCashiersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cashier_with_http_info(body, teller_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cashier_with_http_info(body, teller_id, **kwargs)  # noqa: E501
            return data

    def create_cashier_with_http_info(self, body, teller_id, **kwargs):  # noqa: E501
        """Create Cashiers  # noqa: E501

        Mandatory Fields:  Cashier/staff, Fromm Date, To Date, Full Day or From time and To time    Optional Fields:  Description/Notes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cashier_with_http_info(body, teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTellersTellerIdCashiersRequest body: (required)
        :param int teller_id: tellerId (required)
        :return: PostTellersTellerIdCashiersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'teller_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cashier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_cashier`")  # noqa: E501
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `create_cashier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostTellersTellerIdCashiersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_teller(self, body, **kwargs):  # noqa: E501
        """Create teller  # noqa: E501

        Mandatory Fields Teller name, OfficeId, Description, Start Date, Status Optional Fields End Date  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_teller(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTellersRequest body: (required)
        :return: PostTellersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_teller_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_teller_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_teller_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create teller  # noqa: E501

        Mandatory Fields Teller name, OfficeId, Description, Start Date, Status Optional Fields End Date  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_teller_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTellersRequest body: (required)
        :return: PostTellersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_teller" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_teller`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostTellersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cashier(self, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Delete Cashier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cashier(teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: DeleteTellersTellerIdCashiersCashierIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cashier_with_http_info(teller_id, cashier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cashier_with_http_info(teller_id, cashier_id, **kwargs)  # noqa: E501
            return data

    def delete_cashier_with_http_info(self, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Delete Cashier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cashier_with_http_info(teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: DeleteTellersTellerIdCashiersCashierIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id', 'cashier_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cashier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `delete_cashier`")  # noqa: E501
        # verify the required parameter 'cashier_id' is set
        if ('cashier_id' not in params or
                params['cashier_id'] is None):
            raise ValueError("Missing the required parameter `cashier_id` when calling `delete_cashier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501
        if 'cashier_id' in params:
            path_params['cashierId'] = params['cashier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers/{cashierId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteTellersTellerIdCashiersCashierIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_teller(self, teller_id, **kwargs):  # noqa: E501
        """delete_teller  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_teller(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_teller_with_http_info(teller_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_teller_with_http_info(teller_id, **kwargs)  # noqa: E501
            return data

    def delete_teller_with_http_info(self, teller_id, **kwargs):  # noqa: E501
        """delete_teller  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_teller_with_http_info(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_teller" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `delete_teller`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_cashier_data(self, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Retrieve a cashier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_cashier_data(teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: GetTellersTellerIdCashiersCashierIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_cashier_data_with_http_info(teller_id, cashier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_cashier_data_with_http_info(teller_id, cashier_id, **kwargs)  # noqa: E501
            return data

    def find_cashier_data_with_http_info(self, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Retrieve a cashier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_cashier_data_with_http_info(teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: GetTellersTellerIdCashiersCashierIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id', 'cashier_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_cashier_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `find_cashier_data`")  # noqa: E501
        # verify the required parameter 'cashier_id' is set
        if ('cashier_id' not in params or
                params['cashier_id'] is None):
            raise ValueError("Missing the required parameter `cashier_id` when calling `find_cashier_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501
        if 'cashier_id' in params:
            path_params['cashierId'] = params['cashier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers/{cashierId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTellersTellerIdCashiersCashierIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_teller(self, teller_id, **kwargs):  # noqa: E501
        """Retrieve tellers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_teller(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :return: GetTellersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_teller_with_http_info(teller_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_teller_with_http_info(teller_id, **kwargs)  # noqa: E501
            return data

    def find_teller_with_http_info(self, teller_id, **kwargs):  # noqa: E501
        """Retrieve tellers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_teller_with_http_info(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :return: GetTellersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_teller" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `find_teller`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTellersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_transaction_data(self, teller_id, transaction_id, **kwargs):  # noqa: E501
        """find_transaction_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_transaction_data(teller_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int transaction_id: transactionId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_transaction_data_with_http_info(teller_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_transaction_data_with_http_info(teller_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def find_transaction_data_with_http_info(self, teller_id, transaction_id, **kwargs):  # noqa: E501
        """find_transaction_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_transaction_data_with_http_info(teller_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int transaction_id: transactionId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_transaction_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `find_transaction_data`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `find_transaction_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/transactions/{transactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cashier_data1(self, teller_id, **kwargs):  # noqa: E501
        """List Cashiers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cashier_data1(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param str fromdate: fromdate
        :param str todate: todate
        :return: GetTellersTellerIdCashiersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cashier_data1_with_http_info(teller_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cashier_data1_with_http_info(teller_id, **kwargs)  # noqa: E501
            return data

    def get_cashier_data1_with_http_info(self, teller_id, **kwargs):  # noqa: E501
        """List Cashiers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cashier_data1_with_http_info(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param str fromdate: fromdate
        :param str todate: todate
        :return: GetTellersTellerIdCashiersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id', 'fromdate', 'todate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cashier_data1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `get_cashier_data1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501

        query_params = []
        if 'fromdate' in params:
            query_params.append(('fromdate', params['fromdate']))  # noqa: E501
        if 'todate' in params:
            query_params.append(('todate', params['todate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTellersTellerIdCashiersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cashier_template(self, teller_id, **kwargs):  # noqa: E501
        """Find Cashiers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cashier_template(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :return: GetTellersTellerIdCashiersTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cashier_template_with_http_info(teller_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cashier_template_with_http_info(teller_id, **kwargs)  # noqa: E501
            return data

    def get_cashier_template_with_http_info(self, teller_id, **kwargs):  # noqa: E501
        """Find Cashiers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cashier_template_with_http_info(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :return: GetTellersTellerIdCashiersTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cashier_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `get_cashier_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTellersTellerIdCashiersTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cashier_txn_template(self, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Retrieve Cashier Transaction Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cashier_txn_template(teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cashier_txn_template_with_http_info(teller_id, cashier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cashier_txn_template_with_http_info(teller_id, cashier_id, **kwargs)  # noqa: E501
            return data

    def get_cashier_txn_template_with_http_info(self, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Retrieve Cashier Transaction Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cashier_txn_template_with_http_info(teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id', 'cashier_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cashier_txn_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `get_cashier_txn_template`")  # noqa: E501
        # verify the required parameter 'cashier_id' is set
        if ('cashier_id' not in params or
                params['cashier_id'] is None):
            raise ValueError("Missing the required parameter `cashier_id` when calling `get_cashier_txn_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501
        if 'cashier_id' in params:
            path_params['cashierId'] = params['cashier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers/{cashierId}/transactions/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_journal_data(self, teller_id, **kwargs):  # noqa: E501
        """get_journal_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journal_data(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId
        :param str date_range: dateRange
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_journal_data_with_http_info(teller_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_journal_data_with_http_info(teller_id, **kwargs)  # noqa: E501
            return data

    def get_journal_data_with_http_info(self, teller_id, **kwargs):  # noqa: E501
        """get_journal_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journal_data_with_http_info(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId
        :param str date_range: dateRange
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id', 'cashier_id', 'date_range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_journal_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `get_journal_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501

        query_params = []
        if 'cashier_id' in params:
            query_params.append(('cashierId', params['cashier_id']))  # noqa: E501
        if 'date_range' in params:
            query_params.append(('dateRange', params['date_range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/journals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_teller_data(self, **kwargs):  # noqa: E501
        """List all tellers  # noqa: E501

        Retrieves list tellers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teller_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id: officeId
        :return: list[GetTellersResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_teller_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_teller_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_teller_data_with_http_info(self, **kwargs):  # noqa: E501
        """List all tellers  # noqa: E501

        Retrieves list tellers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teller_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id: officeId
        :return: list[GetTellersResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_teller_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office_id' in params:
            query_params.append(('officeId', params['office_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetTellersResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_data(self, teller_id, **kwargs):  # noqa: E501
        """get_transaction_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_data(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param str date_range: dateRange
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transaction_data_with_http_info(teller_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_data_with_http_info(teller_id, **kwargs)  # noqa: E501
            return data

    def get_transaction_data_with_http_info(self, teller_id, **kwargs):  # noqa: E501
        """get_transaction_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_data_with_http_info(teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param str date_range: dateRange
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id', 'date_range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `get_transaction_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501

        query_params = []
        if 'date_range' in params:
            query_params.append(('dateRange', params['date_range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transactions_for_cashier(self, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Retrieve Cashier Transaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transactions_for_cashier(teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :param str currency_code: currencyCode
        :param int offset: offset
        :param int limit: limit
        :param str order_by: orderBy
        :param str sort_order: sortOrder
        :return: list[GetTellersTellerIdCashiersCashiersIdTransactionsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transactions_for_cashier_with_http_info(teller_id, cashier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transactions_for_cashier_with_http_info(teller_id, cashier_id, **kwargs)  # noqa: E501
            return data

    def get_transactions_for_cashier_with_http_info(self, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Retrieve Cashier Transaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transactions_for_cashier_with_http_info(teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :param str currency_code: currencyCode
        :param int offset: offset
        :param int limit: limit
        :param str order_by: orderBy
        :param str sort_order: sortOrder
        :return: list[GetTellersTellerIdCashiersCashiersIdTransactionsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id', 'cashier_id', 'currency_code', 'offset', 'limit', 'order_by', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transactions_for_cashier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `get_transactions_for_cashier`")  # noqa: E501
        # verify the required parameter 'cashier_id' is set
        if ('cashier_id' not in params or
                params['cashier_id'] is None):
            raise ValueError("Missing the required parameter `cashier_id` when calling `get_transactions_for_cashier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501
        if 'cashier_id' in params:
            path_params['cashierId'] = params['cashier_id']  # noqa: E501

        query_params = []
        if 'currency_code' in params:
            query_params.append(('currencyCode', params['currency_code']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers/{cashierId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetTellersTellerIdCashiersCashiersIdTransactionsResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transactions_wtih_summary_for_cashier(self, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Transactions Wtih Summary For Cashier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transactions_wtih_summary_for_cashier(teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :param str currency_code: currencyCode
        :param int offset: offset
        :param int limit: limit
        :param str order_by: orderBy
        :param str sort_order: sortOrder
        :return: GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transactions_wtih_summary_for_cashier_with_http_info(teller_id, cashier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transactions_wtih_summary_for_cashier_with_http_info(teller_id, cashier_id, **kwargs)  # noqa: E501
            return data

    def get_transactions_wtih_summary_for_cashier_with_http_info(self, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Transactions Wtih Summary For Cashier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transactions_wtih_summary_for_cashier_with_http_info(teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :param str currency_code: currencyCode
        :param int offset: offset
        :param int limit: limit
        :param str order_by: orderBy
        :param str sort_order: sortOrder
        :return: GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['teller_id', 'cashier_id', 'currency_code', 'offset', 'limit', 'order_by', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transactions_wtih_summary_for_cashier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `get_transactions_wtih_summary_for_cashier`")  # noqa: E501
        # verify the required parameter 'cashier_id' is set
        if ('cashier_id' not in params or
                params['cashier_id'] is None):
            raise ValueError("Missing the required parameter `cashier_id` when calling `get_transactions_wtih_summary_for_cashier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501
        if 'cashier_id' in params:
            path_params['cashierId'] = params['cashier_id']  # noqa: E501

        query_params = []
        if 'currency_code' in params:
            query_params.append(('currencyCode', params['currency_code']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers/{cashierId}/summaryandtransactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settle_cash_from_cashier(self, body, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Settle Cash From Cashier  # noqa: E501

        Mandatory Fields Date, Amount, Currency, Notes/Comments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settle_cash_from_cashier(body, teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTellersTellerIdCashiersCashierIdSettleRequest body: (required)
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: PostTellersTellerIdCashiersCashierIdSettleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settle_cash_from_cashier_with_http_info(body, teller_id, cashier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.settle_cash_from_cashier_with_http_info(body, teller_id, cashier_id, **kwargs)  # noqa: E501
            return data

    def settle_cash_from_cashier_with_http_info(self, body, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Settle Cash From Cashier  # noqa: E501

        Mandatory Fields Date, Amount, Currency, Notes/Comments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settle_cash_from_cashier_with_http_info(body, teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTellersTellerIdCashiersCashierIdSettleRequest body: (required)
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: PostTellersTellerIdCashiersCashierIdSettleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'teller_id', 'cashier_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settle_cash_from_cashier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `settle_cash_from_cashier`")  # noqa: E501
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `settle_cash_from_cashier`")  # noqa: E501
        # verify the required parameter 'cashier_id' is set
        if ('cashier_id' not in params or
                params['cashier_id'] is None):
            raise ValueError("Missing the required parameter `cashier_id` when calling `settle_cash_from_cashier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501
        if 'cashier_id' in params:
            path_params['cashierId'] = params['cashier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers/{cashierId}/settle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostTellersTellerIdCashiersCashierIdSettleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cashier(self, body, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Update Cashier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cashier(body, teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutTellersTellerIdCashiersCashierIdRequest body: (required)
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: PutTellersTellerIdCashiersCashierIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cashier_with_http_info(body, teller_id, cashier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cashier_with_http_info(body, teller_id, cashier_id, **kwargs)  # noqa: E501
            return data

    def update_cashier_with_http_info(self, body, teller_id, cashier_id, **kwargs):  # noqa: E501
        """Update Cashier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cashier_with_http_info(body, teller_id, cashier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutTellersTellerIdCashiersCashierIdRequest body: (required)
        :param int teller_id: tellerId (required)
        :param int cashier_id: cashierId (required)
        :return: PutTellersTellerIdCashiersCashierIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'teller_id', 'cashier_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cashier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_cashier`")  # noqa: E501
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `update_cashier`")  # noqa: E501
        # verify the required parameter 'cashier_id' is set
        if ('cashier_id' not in params or
                params['cashier_id'] is None):
            raise ValueError("Missing the required parameter `cashier_id` when calling `update_cashier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501
        if 'cashier_id' in params:
            path_params['cashierId'] = params['cashier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}/cashiers/{cashierId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutTellersTellerIdCashiersCashierIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_teller(self, body, teller_id, **kwargs):  # noqa: E501
        """Update teller  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_teller(body, teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutTellersRequest body: (required)
        :param int teller_id: tellerId (required)
        :return: PutTellersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_teller_with_http_info(body, teller_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_teller_with_http_info(body, teller_id, **kwargs)  # noqa: E501
            return data

    def update_teller_with_http_info(self, body, teller_id, **kwargs):  # noqa: E501
        """Update teller  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_teller_with_http_info(body, teller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutTellersRequest body: (required)
        :param int teller_id: tellerId (required)
        :return: PutTellersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'teller_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_teller" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_teller`")  # noqa: E501
        # verify the required parameter 'teller_id' is set
        if ('teller_id' not in params or
                params['teller_id'] is None):
            raise ValueError("Missing the required parameter `teller_id` when calling `update_teller`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'teller_id' in params:
            path_params['tellerId'] = params['teller_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tellers/{tellerId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutTellersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
