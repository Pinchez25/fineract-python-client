# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class ClientTransactionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def retrieve_all_client_transactions(self, client_id, **kwargs):  # noqa: E501
        """List Client Transactions  # noqa: E501

        The list capability of client transaction can support pagination.  Example Requests:  clients/189/transactions  clients/189/transactions?offset=10&limit=50  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_client_transactions(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId (required)
        :param int offset: offset
        :param int limit: limit
        :return: GetClientsClientIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_client_transactions_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_client_transactions_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def retrieve_all_client_transactions_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """List Client Transactions  # noqa: E501

        The list capability of client transaction can support pagination.  Example Requests:  clients/189/transactions  clients/189/transactions?offset=10&limit=50  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_client_transactions_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId (required)
        :param int offset: offset
        :param int limit: limit
        :return: GetClientsClientIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_client_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `retrieve_all_client_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/clients/{clientId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetClientsClientIdTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all_client_transactions1(self, client_external_id, **kwargs):  # noqa: E501
        """List Client Transactions  # noqa: E501

        The list capability of client transaction can support pagination.  Example Requests:  clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions  clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?offset=10&limit=50  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_client_transactions1(client_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_external_id: clientExternalId (required)
        :param int offset: offset
        :param int limit: limit
        :return: GetClientsClientIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_client_transactions1_with_http_info(client_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_client_transactions1_with_http_info(client_external_id, **kwargs)  # noqa: E501
            return data

    def retrieve_all_client_transactions1_with_http_info(self, client_external_id, **kwargs):  # noqa: E501
        """List Client Transactions  # noqa: E501

        The list capability of client transaction can support pagination.  Example Requests:  clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions  clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?offset=10&limit=50  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_client_transactions1_with_http_info(client_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_external_id: clientExternalId (required)
        :param int offset: offset
        :param int limit: limit
        :return: GetClientsClientIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_external_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_client_transactions1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_external_id' is set
        if ('client_external_id' not in params or
                params['client_external_id'] is None):
            raise ValueError("Missing the required parameter `client_external_id` when calling `retrieve_all_client_transactions1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_external_id' in params:
            path_params['clientExternalId'] = params['client_external_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/clients/external-id/{clientExternalId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetClientsClientIdTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_client_transaction(self, client_id, transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Client Transaction  # noqa: E501

        Example Requests: clients/1/transactions/1   clients/1/transactions/1?fields=id,officeName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_client_transaction(client_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId (required)
        :param int transaction_id: transactionId (required)
        :return: GetClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_client_transaction_with_http_info(client_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_client_transaction_with_http_info(client_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def retrieve_client_transaction_with_http_info(self, client_id, transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Client Transaction  # noqa: E501

        Example Requests: clients/1/transactions/1   clients/1/transactions/1?fields=id,officeName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_client_transaction_with_http_info(client_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId (required)
        :param int transaction_id: transactionId (required)
        :return: GetClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_client_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `retrieve_client_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `retrieve_client_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/clients/{clientId}/transactions/{transactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetClientsClientIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_client_transaction1(self, client_id, transaction_external_id, **kwargs):  # noqa: E501
        """Retrieve a Client Transaction  # noqa: E501

        Example Requests: clients/1/transactions/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854   clients/1/transactions/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?fields=id,officeName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_client_transaction1(client_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :return: GetClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_client_transaction1_with_http_info(client_id, transaction_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_client_transaction1_with_http_info(client_id, transaction_external_id, **kwargs)  # noqa: E501
            return data

    def retrieve_client_transaction1_with_http_info(self, client_id, transaction_external_id, **kwargs):  # noqa: E501
        """Retrieve a Client Transaction  # noqa: E501

        Example Requests: clients/1/transactions/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854   clients/1/transactions/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?fields=id,officeName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_client_transaction1_with_http_info(client_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :return: GetClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'transaction_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_client_transaction1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `retrieve_client_transaction1`")  # noqa: E501
        # verify the required parameter 'transaction_external_id' is set
        if ('transaction_external_id' not in params or
                params['transaction_external_id'] is None):
            raise ValueError("Missing the required parameter `transaction_external_id` when calling `retrieve_client_transaction1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'transaction_external_id' in params:
            path_params['transactionExternalId'] = params['transaction_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/clients/{clientId}/transactions/external-id/{transactionExternalId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetClientsClientIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_client_transaction2(self, client_external_id, transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Client Transaction  # noqa: E501

        Example Requests: clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/1   clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/1?fields=id,officeName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_client_transaction2(client_external_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_external_id: clientExternalId (required)
        :param int transaction_id: transactionId (required)
        :return: GetClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_client_transaction2_with_http_info(client_external_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_client_transaction2_with_http_info(client_external_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def retrieve_client_transaction2_with_http_info(self, client_external_id, transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Client Transaction  # noqa: E501

        Example Requests: clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/1   clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/1?fields=id,officeName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_client_transaction2_with_http_info(client_external_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_external_id: clientExternalId (required)
        :param int transaction_id: transactionId (required)
        :return: GetClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_external_id', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_client_transaction2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_external_id' is set
        if ('client_external_id' not in params or
                params['client_external_id'] is None):
            raise ValueError("Missing the required parameter `client_external_id` when calling `retrieve_client_transaction2`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `retrieve_client_transaction2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_external_id' in params:
            path_params['clientExternalId'] = params['client_external_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/clients/external-id/{clientExternalId}/transactions/{transactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetClientsClientIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_client_transaction3(self, client_external_id, transaction_external_id, **kwargs):  # noqa: E501
        """Retrieve a Client Transaction  # noqa: E501

        Example Requests: clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854   clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?fields=id,officeName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_client_transaction3(client_external_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_external_id: clientExternalId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :return: GetClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_client_transaction3_with_http_info(client_external_id, transaction_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_client_transaction3_with_http_info(client_external_id, transaction_external_id, **kwargs)  # noqa: E501
            return data

    def retrieve_client_transaction3_with_http_info(self, client_external_id, transaction_external_id, **kwargs):  # noqa: E501
        """Retrieve a Client Transaction  # noqa: E501

        Example Requests: clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854   clients/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?fields=id,officeName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_client_transaction3_with_http_info(client_external_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_external_id: clientExternalId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :return: GetClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_external_id', 'transaction_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_client_transaction3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_external_id' is set
        if ('client_external_id' not in params or
                params['client_external_id'] is None):
            raise ValueError("Missing the required parameter `client_external_id` when calling `retrieve_client_transaction3`")  # noqa: E501
        # verify the required parameter 'transaction_external_id' is set
        if ('transaction_external_id' not in params or
                params['transaction_external_id'] is None):
            raise ValueError("Missing the required parameter `transaction_external_id` when calling `retrieve_client_transaction3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_external_id' in params:
            path_params['clientExternalId'] = params['client_external_id']  # noqa: E501
        if 'transaction_external_id' in params:
            path_params['transactionExternalId'] = params['transaction_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/clients/external-id/{clientExternalId}/transactions/external-id/{transactionExternalId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetClientsClientIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undo_client_transaction(self, client_id, transaction_id, **kwargs):  # noqa: E501
        """Undo a Client Transaction  # noqa: E501

        Undoes a Client Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_client_transaction(client_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId (required)
        :param int transaction_id: transactionId (required)
        :param str command: command
        :return: PostClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.undo_client_transaction_with_http_info(client_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.undo_client_transaction_with_http_info(client_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def undo_client_transaction_with_http_info(self, client_id, transaction_id, **kwargs):  # noqa: E501
        """Undo a Client Transaction  # noqa: E501

        Undoes a Client Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_client_transaction_with_http_info(client_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId (required)
        :param int transaction_id: transactionId (required)
        :param str command: command
        :return: PostClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'transaction_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undo_client_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `undo_client_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `undo_client_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/clients/{clientId}/transactions/{transactionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostClientsClientIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undo_client_transaction1(self, client_id, transaction_external_id, **kwargs):  # noqa: E501
        """Undo a Client Transaction  # noqa: E501

        Undoes a Client Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_client_transaction1(client_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :param str command: command
        :return: PostClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.undo_client_transaction1_with_http_info(client_id, transaction_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.undo_client_transaction1_with_http_info(client_id, transaction_external_id, **kwargs)  # noqa: E501
            return data

    def undo_client_transaction1_with_http_info(self, client_id, transaction_external_id, **kwargs):  # noqa: E501
        """Undo a Client Transaction  # noqa: E501

        Undoes a Client Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_client_transaction1_with_http_info(client_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :param str command: command
        :return: PostClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'transaction_external_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undo_client_transaction1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `undo_client_transaction1`")  # noqa: E501
        # verify the required parameter 'transaction_external_id' is set
        if ('transaction_external_id' not in params or
                params['transaction_external_id'] is None):
            raise ValueError("Missing the required parameter `transaction_external_id` when calling `undo_client_transaction1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'transaction_external_id' in params:
            path_params['transactionExternalId'] = params['transaction_external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/clients/{clientId}/transactions/external-id/{transactionExternalId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostClientsClientIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undo_client_transaction2(self, client_external_id, transaction_id, **kwargs):  # noqa: E501
        """Undo a Client Transaction  # noqa: E501

        Undoes a Client Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_client_transaction2(client_external_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_external_id: clientExternalId (required)
        :param int transaction_id: transactionId (required)
        :param str command: command
        :return: PostClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.undo_client_transaction2_with_http_info(client_external_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.undo_client_transaction2_with_http_info(client_external_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def undo_client_transaction2_with_http_info(self, client_external_id, transaction_id, **kwargs):  # noqa: E501
        """Undo a Client Transaction  # noqa: E501

        Undoes a Client Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_client_transaction2_with_http_info(client_external_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_external_id: clientExternalId (required)
        :param int transaction_id: transactionId (required)
        :param str command: command
        :return: PostClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_external_id', 'transaction_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undo_client_transaction2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_external_id' is set
        if ('client_external_id' not in params or
                params['client_external_id'] is None):
            raise ValueError("Missing the required parameter `client_external_id` when calling `undo_client_transaction2`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `undo_client_transaction2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_external_id' in params:
            path_params['clientExternalId'] = params['client_external_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/clients/external-id/{clientExternalId}/transactions/{transactionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostClientsClientIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undo_client_transaction3(self, client_external_id, transaction_external_id, **kwargs):  # noqa: E501
        """Undo a Client Transaction  # noqa: E501

        Undoes a Client Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_client_transaction3(client_external_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_external_id: clientExternalId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :param str command: command
        :return: PostClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.undo_client_transaction3_with_http_info(client_external_id, transaction_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.undo_client_transaction3_with_http_info(client_external_id, transaction_external_id, **kwargs)  # noqa: E501
            return data

    def undo_client_transaction3_with_http_info(self, client_external_id, transaction_external_id, **kwargs):  # noqa: E501
        """Undo a Client Transaction  # noqa: E501

        Undoes a Client Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_client_transaction3_with_http_info(client_external_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_external_id: clientExternalId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :param str command: command
        :return: PostClientsClientIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_external_id', 'transaction_external_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undo_client_transaction3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_external_id' is set
        if ('client_external_id' not in params or
                params['client_external_id'] is None):
            raise ValueError("Missing the required parameter `client_external_id` when calling `undo_client_transaction3`")  # noqa: E501
        # verify the required parameter 'transaction_external_id' is set
        if ('transaction_external_id' not in params or
                params['transaction_external_id'] is None):
            raise ValueError("Missing the required parameter `transaction_external_id` when calling `undo_client_transaction3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_external_id' in params:
            path_params['clientExternalId'] = params['client_external_id']  # noqa: E501
        if 'transaction_external_id' in params:
            path_params['transactionExternalId'] = params['transaction_external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/clients/external-id/{clientExternalId}/transactions/external-id/{transactionExternalId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostClientsClientIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
