# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class LoanTransactionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adjust_loan_transaction(self, body, loan_id, transaction_id, **kwargs):  # noqa: E501
        """Adjust a Transaction  # noqa: E501

        Note: there is no need to specify command={transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_loan_transaction(body, loan_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsTransactionIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param int transaction_id: transactionId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adjust_loan_transaction_with_http_info(body, loan_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.adjust_loan_transaction_with_http_info(body, loan_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def adjust_loan_transaction_with_http_info(self, body, loan_id, transaction_id, **kwargs):  # noqa: E501
        """Adjust a Transaction  # noqa: E501

        Note: there is no need to specify command={transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_loan_transaction_with_http_info(body, loan_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsTransactionIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param int transaction_id: transactionId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'transaction_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adjust_loan_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adjust_loan_transaction`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `adjust_loan_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `adjust_loan_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/transactions/{transactionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adjust_loan_transaction1(self, body, loan_id, external_transaction_id, **kwargs):  # noqa: E501
        """Adjust a Transaction  # noqa: E501

        Note: there is no need to specify command={transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_loan_transaction1(body, loan_id, external_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsTransactionIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param str external_transaction_id: externalTransactionId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adjust_loan_transaction1_with_http_info(body, loan_id, external_transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.adjust_loan_transaction1_with_http_info(body, loan_id, external_transaction_id, **kwargs)  # noqa: E501
            return data

    def adjust_loan_transaction1_with_http_info(self, body, loan_id, external_transaction_id, **kwargs):  # noqa: E501
        """Adjust a Transaction  # noqa: E501

        Note: there is no need to specify command={transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_loan_transaction1_with_http_info(body, loan_id, external_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsTransactionIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param str external_transaction_id: externalTransactionId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'external_transaction_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adjust_loan_transaction1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adjust_loan_transaction1`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `adjust_loan_transaction1`")  # noqa: E501
        # verify the required parameter 'external_transaction_id' is set
        if ('external_transaction_id' not in params or
                params['external_transaction_id'] is None):
            raise ValueError("Missing the required parameter `external_transaction_id` when calling `adjust_loan_transaction1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'external_transaction_id' in params:
            path_params['externalTransactionId'] = params['external_transaction_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/transactions/external-id/{externalTransactionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adjust_loan_transaction2(self, body, loan_external_id, transaction_id, **kwargs):  # noqa: E501
        """Adjust a Transaction  # noqa: E501

        Note: there is no need to specify command={transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_loan_transaction2(body, loan_external_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsTransactionIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param int transaction_id: transactionId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adjust_loan_transaction2_with_http_info(body, loan_external_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.adjust_loan_transaction2_with_http_info(body, loan_external_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def adjust_loan_transaction2_with_http_info(self, body, loan_external_id, transaction_id, **kwargs):  # noqa: E501
        """Adjust a Transaction  # noqa: E501

        Note: there is no need to specify command={transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_loan_transaction2_with_http_info(body, loan_external_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsTransactionIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param int transaction_id: transactionId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'transaction_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adjust_loan_transaction2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adjust_loan_transaction2`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `adjust_loan_transaction2`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `adjust_loan_transaction2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/transactions/{transactionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adjust_loan_transaction3(self, body, loan_external_id, external_transaction_id, **kwargs):  # noqa: E501
        """Adjust a Transaction  # noqa: E501

        Note: there is no need to specify command={transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_loan_transaction3(body, loan_external_id, external_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsTransactionIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str external_transaction_id: externalTransactionId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adjust_loan_transaction3_with_http_info(body, loan_external_id, external_transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.adjust_loan_transaction3_with_http_info(body, loan_external_id, external_transaction_id, **kwargs)  # noqa: E501
            return data

    def adjust_loan_transaction3_with_http_info(self, body, loan_external_id, external_transaction_id, **kwargs):  # noqa: E501
        """Adjust a Transaction  # noqa: E501

        Note: there is no need to specify command={transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_loan_transaction3_with_http_info(body, loan_external_id, external_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsTransactionIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str external_transaction_id: externalTransactionId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'external_transaction_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adjust_loan_transaction3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adjust_loan_transaction3`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `adjust_loan_transaction3`")  # noqa: E501
        # verify the required parameter 'external_transaction_id' is set
        if ('external_transaction_id' not in params or
                params['external_transaction_id'] is None):
            raise ValueError("Missing the required parameter `external_transaction_id` when calling `adjust_loan_transaction3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'external_transaction_id' in params:
            path_params['externalTransactionId'] = params['external_transaction_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/transactions/external-id/{externalTransactionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_loan_transaction(self, body, loan_id, **kwargs):  # noqa: E501
        """Significant Loan Transactions  # noqa: E501

        This API covers the major loan transaction functionality  Example Requests:  loans/1/transactions?command=repayment | Make a Repayment |  loans/1/transactions?command=merchantIssuedRefund | Merchant Issued Refund |  loans/1/transactions?command=payoutRefund | Payout Refund |  loans/1/transactions?command=goodwillCredit | Goodwil Credit |  loans/1/transactions?command=chargeRefund | Charge Refund |  loans/1/transactions?command=waiveinterest | Waive Interest |  loans/1/transactions?command=writeoff | Write-off Loan |  loans/1/transactions?command=close-rescheduled | Close Rescheduled Loan |  loans/1/transactions?command=close | Close Loan |  loans/1/transactions?command=undowriteoff | Undo Loan Write-off |  loans/1/transactions?command=recoverypayment | Make Recovery Payment |  loans/1/transactions?command=refundByCash | Make a Refund of an Active Loan by Cash |  loans/1/transactions?command=foreclosure | Foreclosure of an Active Loan |  loans/1/transactions?command=creditBalanceRefund | Credit Balance Refund |   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=charge-off | Charge-off Loan |   loans/1/transactions?command=downPayment | Down Payment |     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_transaction(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsRequest body: (required)
        :param int loan_id: loanId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_loan_transaction_with_http_info(body, loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_loan_transaction_with_http_info(body, loan_id, **kwargs)  # noqa: E501
            return data

    def execute_loan_transaction_with_http_info(self, body, loan_id, **kwargs):  # noqa: E501
        """Significant Loan Transactions  # noqa: E501

        This API covers the major loan transaction functionality  Example Requests:  loans/1/transactions?command=repayment | Make a Repayment |  loans/1/transactions?command=merchantIssuedRefund | Merchant Issued Refund |  loans/1/transactions?command=payoutRefund | Payout Refund |  loans/1/transactions?command=goodwillCredit | Goodwil Credit |  loans/1/transactions?command=chargeRefund | Charge Refund |  loans/1/transactions?command=waiveinterest | Waive Interest |  loans/1/transactions?command=writeoff | Write-off Loan |  loans/1/transactions?command=close-rescheduled | Close Rescheduled Loan |  loans/1/transactions?command=close | Close Loan |  loans/1/transactions?command=undowriteoff | Undo Loan Write-off |  loans/1/transactions?command=recoverypayment | Make Recovery Payment |  loans/1/transactions?command=refundByCash | Make a Refund of an Active Loan by Cash |  loans/1/transactions?command=foreclosure | Foreclosure of an Active Loan |  loans/1/transactions?command=creditBalanceRefund | Credit Balance Refund |   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=charge-off | Charge-off Loan |   loans/1/transactions?command=downPayment | Down Payment |     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_transaction_with_http_info(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsRequest body: (required)
        :param int loan_id: loanId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_loan_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_loan_transaction`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `execute_loan_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/transactions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_loan_transaction1(self, body, loan_external_id, **kwargs):  # noqa: E501
        """Significant Loan Transactions  # noqa: E501

        This API covers the major loan transaction functionality  Example Requests:  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=repayment | Make a Repayment |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=merchantIssuedRefund | Merchant Issued Refund |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=payoutRefund | Payout Refund |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=goodwillCredit | Goodwil Credit |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=chargeRefund | Charge Refund |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=waiveinterest | Waive Interest |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=writeoff | Write-off Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=close-rescheduled | Close Rescheduled Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=close | Close Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=undowriteoff | Undo Loan Write-off |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=recoverypayment | Make Recovery Payment |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=refundByCash | Make a Refund of an Active Loan by Cash |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=foreclosure | Foreclosure of an Active Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=creditBalanceRefund | Credit Balance Refund |   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=charge-off | Charge-off Loan |   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=downPayment | Down Payment |     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_transaction1(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_loan_transaction1_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_loan_transaction1_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
            return data

    def execute_loan_transaction1_with_http_info(self, body, loan_external_id, **kwargs):  # noqa: E501
        """Significant Loan Transactions  # noqa: E501

        This API covers the major loan transaction functionality  Example Requests:  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=repayment | Make a Repayment |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=merchantIssuedRefund | Merchant Issued Refund |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=payoutRefund | Payout Refund |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=goodwillCredit | Goodwil Credit |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=chargeRefund | Charge Refund |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=waiveinterest | Waive Interest |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=writeoff | Write-off Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=close-rescheduled | Close Rescheduled Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=close | Close Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=undowriteoff | Undo Loan Write-off |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=recoverypayment | Make Recovery Payment |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=refundByCash | Make a Refund of an Active Loan by Cash |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=foreclosure | Foreclosure of an Active Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=creditBalanceRefund | Credit Balance Refund |   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=charge-off | Charge-off Loan |   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command=downPayment | Down Payment |     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_loan_transaction1_with_http_info(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdTransactionsRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str command: command
        :return: PostLoansLoanIdTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_loan_transaction1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_loan_transaction1`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `execute_loan_transaction1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/transactions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_transaction(self, loan_id, transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Transaction Details  # noqa: E501

        Retrieves a Transaction Details  Example Request:  loans/5/transactions/3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction(loan_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param int transaction_id: transactionId (required)
        :param str fields: Optional Loan Transaction attribute list to be in the response
        :return: GetLoansLoanIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_transaction_with_http_info(loan_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_transaction_with_http_info(loan_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def retrieve_transaction_with_http_info(self, loan_id, transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Transaction Details  # noqa: E501

        Retrieves a Transaction Details  Example Request:  loans/5/transactions/3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_with_http_info(loan_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param int transaction_id: transactionId (required)
        :param str fields: Optional Loan Transaction attribute list to be in the response
        :return: GetLoansLoanIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id', 'transaction_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `retrieve_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `retrieve_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/transactions/{transactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_transaction_by_loan_external_id_and_transaction_external_id(self, loan_external_id, external_transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Transaction Details  # noqa: E501

        Retrieves a Transaction Details  Example Request:  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/external-id/5dd80a7c-ccba-4446-b378-01eb6f53e871  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_by_loan_external_id_and_transaction_external_id(loan_external_id, external_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param str external_transaction_id: externalTransactionId (required)
        :param str fields: Optional Loan Transaction attribute list to be in the response
        :return: GetLoansLoanIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_transaction_by_loan_external_id_and_transaction_external_id_with_http_info(loan_external_id, external_transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_transaction_by_loan_external_id_and_transaction_external_id_with_http_info(loan_external_id, external_transaction_id, **kwargs)  # noqa: E501
            return data

    def retrieve_transaction_by_loan_external_id_and_transaction_external_id_with_http_info(self, loan_external_id, external_transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Transaction Details  # noqa: E501

        Retrieves a Transaction Details  Example Request:  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/external-id/5dd80a7c-ccba-4446-b378-01eb6f53e871  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_by_loan_external_id_and_transaction_external_id_with_http_info(loan_external_id, external_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param str external_transaction_id: externalTransactionId (required)
        :param str fields: Optional Loan Transaction attribute list to be in the response
        :return: GetLoansLoanIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id', 'external_transaction_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_transaction_by_loan_external_id_and_transaction_external_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `retrieve_transaction_by_loan_external_id_and_transaction_external_id`")  # noqa: E501
        # verify the required parameter 'external_transaction_id' is set
        if ('external_transaction_id' not in params or
                params['external_transaction_id'] is None):
            raise ValueError("Missing the required parameter `external_transaction_id` when calling `retrieve_transaction_by_loan_external_id_and_transaction_external_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'external_transaction_id' in params:
            path_params['externalTransactionId'] = params['external_transaction_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/transactions/external-id/{externalTransactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_transaction_by_loan_external_id_and_transaction_id(self, loan_external_id, transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Transaction Details  # noqa: E501

        Retrieves a Transaction Details  Example Request:  loans/5/transactions/3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_by_loan_external_id_and_transaction_id(loan_external_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param int transaction_id: transactionId (required)
        :param str fields: Optional Loan Transaction attribute list to be in the response
        :return: GetLoansLoanIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_transaction_by_loan_external_id_and_transaction_id_with_http_info(loan_external_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_transaction_by_loan_external_id_and_transaction_id_with_http_info(loan_external_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def retrieve_transaction_by_loan_external_id_and_transaction_id_with_http_info(self, loan_external_id, transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Transaction Details  # noqa: E501

        Retrieves a Transaction Details  Example Request:  loans/5/transactions/3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_by_loan_external_id_and_transaction_id_with_http_info(loan_external_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param int transaction_id: transactionId (required)
        :param str fields: Optional Loan Transaction attribute list to be in the response
        :return: GetLoansLoanIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id', 'transaction_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_transaction_by_loan_external_id_and_transaction_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `retrieve_transaction_by_loan_external_id_and_transaction_id`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `retrieve_transaction_by_loan_external_id_and_transaction_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/transactions/{transactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_transaction_by_transaction_external_id(self, loan_id, external_transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Transaction Details  # noqa: E501

        Retrieves a Transaction Details  Example Request:  loans/5/transactions/external-id/5dd80a7c-ccba-4446-b378-01eb6f53e871  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_by_transaction_external_id(loan_id, external_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param str external_transaction_id: externalTransactionId (required)
        :param str fields: Optional Loan Transaction attribute list to be in the response
        :return: GetLoansLoanIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_transaction_by_transaction_external_id_with_http_info(loan_id, external_transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_transaction_by_transaction_external_id_with_http_info(loan_id, external_transaction_id, **kwargs)  # noqa: E501
            return data

    def retrieve_transaction_by_transaction_external_id_with_http_info(self, loan_id, external_transaction_id, **kwargs):  # noqa: E501
        """Retrieve a Transaction Details  # noqa: E501

        Retrieves a Transaction Details  Example Request:  loans/5/transactions/external-id/5dd80a7c-ccba-4446-b378-01eb6f53e871  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_by_transaction_external_id_with_http_info(loan_id, external_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param str external_transaction_id: externalTransactionId (required)
        :param str fields: Optional Loan Transaction attribute list to be in the response
        :return: GetLoansLoanIdTransactionsTransactionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id', 'external_transaction_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_transaction_by_transaction_external_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `retrieve_transaction_by_transaction_external_id`")  # noqa: E501
        # verify the required parameter 'external_transaction_id' is set
        if ('external_transaction_id' not in params or
                params['external_transaction_id'] is None):
            raise ValueError("Missing the required parameter `external_transaction_id` when calling `retrieve_transaction_by_transaction_external_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'external_transaction_id' in params:
            path_params['externalTransactionId'] = params['external_transaction_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/transactions/external-id/{externalTransactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdTransactionsTransactionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_transaction_template(self, loan_id, **kwargs):  # noqa: E501
        """Retrieve Loan Transaction Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Requests:  loans/1/transactions/template?command=repaymentloans/1/transactions/template?command=merchantIssuedRefundloans/1/transactions/template?command=payoutRefundloans/1/transactions/template?command=goodwillCredit loans/1/transactions/template?command=waiveinterest loans/1/transactions/template?command=writeoff loans/1/transactions/template?command=close-rescheduled loans/1/transactions/template?command=close loans/1/transactions/template?command=disburse loans/1/transactions/template?command=disburseToSavings loans/1/transactions/template?command=recoverypayment loans/1/transactions/template?command=prepayLoan loans/1/transactions/template?command=refundbycash loans/1/transactions/template?command=refundbytransfer loans/1/transactions/template?command=foreclosure loans/1/transactions/template?command=interestPaymentWaiver loans/1/transactions/template?command=creditBalanceRefund (returned 'amount' field will have the overpaid value) loans/1/transactions/template?command=charge-off loans/1/transactions/template?command=downPayment   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_template(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param str command: command
        :param str date_format: dateFormat
        :param DateParam transaction_date: transactionDate
        :param str locale: locale
        :return: GetLoansLoanIdTransactionsTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_transaction_template_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_transaction_template_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def retrieve_transaction_template_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """Retrieve Loan Transaction Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Requests:  loans/1/transactions/template?command=repaymentloans/1/transactions/template?command=merchantIssuedRefundloans/1/transactions/template?command=payoutRefundloans/1/transactions/template?command=goodwillCredit loans/1/transactions/template?command=waiveinterest loans/1/transactions/template?command=writeoff loans/1/transactions/template?command=close-rescheduled loans/1/transactions/template?command=close loans/1/transactions/template?command=disburse loans/1/transactions/template?command=disburseToSavings loans/1/transactions/template?command=recoverypayment loans/1/transactions/template?command=prepayLoan loans/1/transactions/template?command=refundbycash loans/1/transactions/template?command=refundbytransfer loans/1/transactions/template?command=foreclosure loans/1/transactions/template?command=interestPaymentWaiver loans/1/transactions/template?command=creditBalanceRefund (returned 'amount' field will have the overpaid value) loans/1/transactions/template?command=charge-off loans/1/transactions/template?command=downPayment   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_template_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param str command: command
        :param str date_format: dateFormat
        :param DateParam transaction_date: transactionDate
        :param str locale: locale
        :return: GetLoansLoanIdTransactionsTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id', 'command', 'date_format', 'transaction_date', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_transaction_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `retrieve_transaction_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'transaction_date' in params:
            query_params.append(('transactionDate', params['transaction_date']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/transactions/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdTransactionsTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_transaction_template1(self, loan_external_id, **kwargs):  # noqa: E501
        """Retrieve Loan Transaction Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Requests:  loans/1/transactions/template?command=repaymentloans/1/transactions/template?command=merchantIssuedRefundloans/1/transactions/template?command=payoutRefundloans/1/transactions/template?command=goodwillCredit loans/1/transactions/template?command=waiveinterest loans/1/transactions/template?command=writeoff loans/1/transactions/template?command=close-rescheduled loans/1/transactions/template?command=close loans/1/transactions/template?command=disburse loans/1/transactions/template?command=disburseToSavings loans/1/transactions/template?command=recoverypayment loans/1/transactions/template?command=prepayLoan loans/1/transactions/template?command=refundbycash loans/1/transactions/template?command=refundbytransfer loans/1/transactions/template?command=foreclosure loans/1/transactions/template?command=interestPaymentWaiver loans/1/transactions/template?command=creditBalanceRefund (returned 'amount' field will have the overpaid value) loans/1/transactions/template?command=charge-off loans/1/transactions/template?command=downPayment   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_template1(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param str command: command
        :param str date_format: dateFormat
        :param DateParam transaction_date: transactionDate
        :param str locale: locale
        :return: GetLoansLoanIdTransactionsTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_transaction_template1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_transaction_template1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
            return data

    def retrieve_transaction_template1_with_http_info(self, loan_external_id, **kwargs):  # noqa: E501
        """Retrieve Loan Transaction Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Requests:  loans/1/transactions/template?command=repaymentloans/1/transactions/template?command=merchantIssuedRefundloans/1/transactions/template?command=payoutRefundloans/1/transactions/template?command=goodwillCredit loans/1/transactions/template?command=waiveinterest loans/1/transactions/template?command=writeoff loans/1/transactions/template?command=close-rescheduled loans/1/transactions/template?command=close loans/1/transactions/template?command=disburse loans/1/transactions/template?command=disburseToSavings loans/1/transactions/template?command=recoverypayment loans/1/transactions/template?command=prepayLoan loans/1/transactions/template?command=refundbycash loans/1/transactions/template?command=refundbytransfer loans/1/transactions/template?command=foreclosure loans/1/transactions/template?command=interestPaymentWaiver loans/1/transactions/template?command=creditBalanceRefund (returned 'amount' field will have the overpaid value) loans/1/transactions/template?command=charge-off loans/1/transactions/template?command=downPayment   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_transaction_template1_with_http_info(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param str command: command
        :param str date_format: dateFormat
        :param DateParam transaction_date: transactionDate
        :param str locale: locale
        :return: GetLoansLoanIdTransactionsTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id', 'command', 'date_format', 'transaction_date', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_transaction_template1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `retrieve_transaction_template1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'transaction_date' in params:
            query_params.append(('transactionDate', params['transaction_date']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/transactions/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdTransactionsTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undo_waive_charge(self, body, loan_id, transaction_id, **kwargs):  # noqa: E501
        """Undo a Waive Charge Transaction  # noqa: E501

        Undo a Waive Charge Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_waive_charge(body, loan_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutChargeTransactionChangesRequest body: (required)
        :param int loan_id: loanId (required)
        :param int transaction_id: transactionId (required)
        :return: PutChargeTransactionChangesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.undo_waive_charge_with_http_info(body, loan_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.undo_waive_charge_with_http_info(body, loan_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def undo_waive_charge_with_http_info(self, body, loan_id, transaction_id, **kwargs):  # noqa: E501
        """Undo a Waive Charge Transaction  # noqa: E501

        Undo a Waive Charge Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_waive_charge_with_http_info(body, loan_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutChargeTransactionChangesRequest body: (required)
        :param int loan_id: loanId (required)
        :param int transaction_id: transactionId (required)
        :return: PutChargeTransactionChangesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undo_waive_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `undo_waive_charge`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `undo_waive_charge`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `undo_waive_charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/transactions/{transactionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutChargeTransactionChangesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undo_waive_charge1(self, body, loan_id, transaction_external_id, **kwargs):  # noqa: E501
        """Undo a Waive Charge Transaction  # noqa: E501

        Undo a Waive Charge Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_waive_charge1(body, loan_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutChargeTransactionChangesRequest body: (required)
        :param int loan_id: loanId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :return: PutChargeTransactionChangesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.undo_waive_charge1_with_http_info(body, loan_id, transaction_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.undo_waive_charge1_with_http_info(body, loan_id, transaction_external_id, **kwargs)  # noqa: E501
            return data

    def undo_waive_charge1_with_http_info(self, body, loan_id, transaction_external_id, **kwargs):  # noqa: E501
        """Undo a Waive Charge Transaction  # noqa: E501

        Undo a Waive Charge Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_waive_charge1_with_http_info(body, loan_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutChargeTransactionChangesRequest body: (required)
        :param int loan_id: loanId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :return: PutChargeTransactionChangesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'transaction_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undo_waive_charge1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `undo_waive_charge1`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `undo_waive_charge1`")  # noqa: E501
        # verify the required parameter 'transaction_external_id' is set
        if ('transaction_external_id' not in params or
                params['transaction_external_id'] is None):
            raise ValueError("Missing the required parameter `transaction_external_id` when calling `undo_waive_charge1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501
        if 'transaction_external_id' in params:
            path_params['transactionExternalId'] = params['transaction_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/transactions/external-id/{transactionExternalId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutChargeTransactionChangesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undo_waive_charge2(self, body, loan_external_id, transaction_id, **kwargs):  # noqa: E501
        """Undo a Waive Charge Transaction  # noqa: E501

        Undo a Waive Charge Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_waive_charge2(body, loan_external_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutChargeTransactionChangesRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param int transaction_id: transactionId (required)
        :return: PutChargeTransactionChangesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.undo_waive_charge2_with_http_info(body, loan_external_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.undo_waive_charge2_with_http_info(body, loan_external_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def undo_waive_charge2_with_http_info(self, body, loan_external_id, transaction_id, **kwargs):  # noqa: E501
        """Undo a Waive Charge Transaction  # noqa: E501

        Undo a Waive Charge Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_waive_charge2_with_http_info(body, loan_external_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutChargeTransactionChangesRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param int transaction_id: transactionId (required)
        :return: PutChargeTransactionChangesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undo_waive_charge2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `undo_waive_charge2`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `undo_waive_charge2`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `undo_waive_charge2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/transactions/{transactionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutChargeTransactionChangesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undo_waive_charge3(self, body, loan_external_id, transaction_external_id, **kwargs):  # noqa: E501
        """Undo a Waive Charge Transaction  # noqa: E501

        Undo a Waive Charge Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_waive_charge3(body, loan_external_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutChargeTransactionChangesRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :return: PutChargeTransactionChangesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.undo_waive_charge3_with_http_info(body, loan_external_id, transaction_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.undo_waive_charge3_with_http_info(body, loan_external_id, transaction_external_id, **kwargs)  # noqa: E501
            return data

    def undo_waive_charge3_with_http_info(self, body, loan_external_id, transaction_external_id, **kwargs):  # noqa: E501
        """Undo a Waive Charge Transaction  # noqa: E501

        Undo a Waive Charge Transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undo_waive_charge3_with_http_info(body, loan_external_id, transaction_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutChargeTransactionChangesRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str transaction_external_id: transactionExternalId (required)
        :return: PutChargeTransactionChangesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'transaction_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undo_waive_charge3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `undo_waive_charge3`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `undo_waive_charge3`")  # noqa: E501
        # verify the required parameter 'transaction_external_id' is set
        if ('transaction_external_id' not in params or
                params['transaction_external_id'] is None):
            raise ValueError("Missing the required parameter `transaction_external_id` when calling `undo_waive_charge3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501
        if 'transaction_external_id' in params:
            path_params['transactionExternalId'] = params['transaction_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/transactions/external-id/{transactionExternalId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutChargeTransactionChangesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
