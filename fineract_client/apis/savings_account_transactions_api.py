# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class SavingsAccountTransactionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adjust_transaction1(self, body, savings_id, transaction_id, **kwargs):  # noqa: E501
        """Undo/Reverse/Modify/Release Amount transaction API  # noqa: E501

        Undo/Reverse/Modify/Release Amount transaction API  Example Requests:   savingsaccounts/{savingsId}/transactions/{transactionId}?command=reverse  Accepted command = undo, reverse, modify, releaseAmount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_transaction1(body, savings_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSavingsAccountBulkReversalTransactionsRequest body: (required)
        :param int savings_id: (required)
        :param int transaction_id: (required)
        :param str command:
        :return: list[PostSavingsAccountBulkReversalTransactionsRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adjust_transaction1_with_http_info(body, savings_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.adjust_transaction1_with_http_info(body, savings_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def adjust_transaction1_with_http_info(self, body, savings_id, transaction_id, **kwargs):  # noqa: E501
        """Undo/Reverse/Modify/Release Amount transaction API  # noqa: E501

        Undo/Reverse/Modify/Release Amount transaction API  Example Requests:   savingsaccounts/{savingsId}/transactions/{transactionId}?command=reverse  Accepted command = undo, reverse, modify, releaseAmount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_transaction1_with_http_info(body, savings_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSavingsAccountBulkReversalTransactionsRequest body: (required)
        :param int savings_id: (required)
        :param int transaction_id: (required)
        :param str command:
        :return: list[PostSavingsAccountBulkReversalTransactionsRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'savings_id', 'transaction_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adjust_transaction1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adjust_transaction1`")  # noqa: E501
        # verify the required parameter 'savings_id' is set
        if ('savings_id' not in params or
                params['savings_id'] is None):
            raise ValueError("Missing the required parameter `savings_id` when calling `adjust_transaction1`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `adjust_transaction1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'savings_id' in params:
            path_params['savingsId'] = params['savings_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/savingsaccounts/{savingsId}/transactions/{transactionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PostSavingsAccountBulkReversalTransactionsRequest]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def advanced_query1(self, savings_id, **kwargs):  # noqa: E501
        """Advanced search Savings Account Transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_query1(savings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int savings_id: savingsId (required)
        :param PagedLocalRequestAdvancedQueryRequest body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.advanced_query1_with_http_info(savings_id, **kwargs)  # noqa: E501
        else:
            (data) = self.advanced_query1_with_http_info(savings_id, **kwargs)  # noqa: E501
            return data

    def advanced_query1_with_http_info(self, savings_id, **kwargs):  # noqa: E501
        """Advanced search Savings Account Transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_query1_with_http_info(savings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int savings_id: savingsId (required)
        :param PagedLocalRequestAdvancedQueryRequest body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['savings_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method advanced_query1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'savings_id' is set
        if ('savings_id' not in params or
                params['savings_id'] is None):
            raise ValueError("Missing the required parameter `savings_id` when calling `advanced_query1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'savings_id' in params:
            path_params['savingsId'] = params['savings_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/savingsaccounts/{savingsId}/transactions/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_one24(self, savings_id, transaction_id, **kwargs):  # noqa: E501
        """retrieve_one24  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one24(savings_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int savings_id: (required)
        :param int transaction_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_one24_with_http_info(savings_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_one24_with_http_info(savings_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def retrieve_one24_with_http_info(self, savings_id, transaction_id, **kwargs):  # noqa: E501
        """retrieve_one24  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one24_with_http_info(savings_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int savings_id: (required)
        :param int transaction_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['savings_id', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_one24" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'savings_id' is set
        if ('savings_id' not in params or
                params['savings_id'] is None):
            raise ValueError("Missing the required parameter `savings_id` when calling `retrieve_one24`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `retrieve_one24`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'savings_id' in params:
            path_params['savingsId'] = params['savings_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/savingsaccounts/{savingsId}/transactions/{transactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_template19(self, savings_id, **kwargs):  # noqa: E501
        """retrieve_template19  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_template19(savings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int savings_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_template19_with_http_info(savings_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_template19_with_http_info(savings_id, **kwargs)  # noqa: E501
            return data

    def retrieve_template19_with_http_info(self, savings_id, **kwargs):  # noqa: E501
        """retrieve_template19  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_template19_with_http_info(savings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int savings_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['savings_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_template19" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'savings_id' is set
        if ('savings_id' not in params or
                params['savings_id'] is None):
            raise ValueError("Missing the required parameter `savings_id` when calling `retrieve_template19`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'savings_id' in params:
            path_params['savingsId'] = params['savings_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/savingsaccounts/{savingsId}/transactions/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_transactions(self, savings_id, **kwargs):  # noqa: E501
        """Search Savings Account Transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_transactions(savings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int savings_id: savings account id (required)
        :param str from_date: minimum value date (inclusive)
        :param str to_date: maximum value date (inclusive)
        :param str from_submitted_date: minimum booking date (inclusive)
        :param str to_submitted_date: maximum booking date (inclusive)
        :param float from_amount: minimum transaction amount (inclusive)
        :param float to_amount: maximum transaction amount (inclusive)
        :param str types: transaction types
        :param bool credit: credit
        :param bool debit: debit
        :param int offset: offset
        :param int limit: limit
        :param str order_by: sort properties
        :param str sort_order: sort direction
        :param str locale: locale
        :param str date_format: date format
        :return: SavingsAccountTransactionsSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_transactions_with_http_info(savings_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_transactions_with_http_info(savings_id, **kwargs)  # noqa: E501
            return data

    def search_transactions_with_http_info(self, savings_id, **kwargs):  # noqa: E501
        """Search Savings Account Transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_transactions_with_http_info(savings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int savings_id: savings account id (required)
        :param str from_date: minimum value date (inclusive)
        :param str to_date: maximum value date (inclusive)
        :param str from_submitted_date: minimum booking date (inclusive)
        :param str to_submitted_date: maximum booking date (inclusive)
        :param float from_amount: minimum transaction amount (inclusive)
        :param float to_amount: maximum transaction amount (inclusive)
        :param str types: transaction types
        :param bool credit: credit
        :param bool debit: debit
        :param int offset: offset
        :param int limit: limit
        :param str order_by: sort properties
        :param str sort_order: sort direction
        :param str locale: locale
        :param str date_format: date format
        :return: SavingsAccountTransactionsSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['savings_id', 'from_date', 'to_date', 'from_submitted_date', 'to_submitted_date', 'from_amount', 'to_amount', 'types', 'credit', 'debit', 'offset', 'limit', 'order_by', 'sort_order', 'locale', 'date_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'savings_id' is set
        if ('savings_id' not in params or
                params['savings_id'] is None):
            raise ValueError("Missing the required parameter `savings_id` when calling `search_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'savings_id' in params:
            path_params['savingsId'] = params['savings_id']  # noqa: E501

        query_params = []
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'from_submitted_date' in params:
            query_params.append(('fromSubmittedDate', params['from_submitted_date']))  # noqa: E501
        if 'to_submitted_date' in params:
            query_params.append(('toSubmittedDate', params['to_submitted_date']))  # noqa: E501
        if 'from_amount' in params:
            query_params.append(('fromAmount', params['from_amount']))  # noqa: E501
        if 'to_amount' in params:
            query_params.append(('toAmount', params['to_amount']))  # noqa: E501
        if 'types' in params:
            query_params.append(('types', params['types']))  # noqa: E501
        if 'credit' in params:
            query_params.append(('credit', params['credit']))  # noqa: E501
        if 'debit' in params:
            query_params.append(('debit', params['debit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/savingsaccounts/{savingsId}/transactions/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SavingsAccountTransactionsSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transaction2(self, body, savings_id, **kwargs):  # noqa: E501
        """transaction2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transaction2(body, savings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSavingsAccountTransactionsRequest body: (required)
        :param int savings_id: (required)
        :param str command:
        :return: PostSavingsAccountTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transaction2_with_http_info(body, savings_id, **kwargs)  # noqa: E501
        else:
            (data) = self.transaction2_with_http_info(body, savings_id, **kwargs)  # noqa: E501
            return data

    def transaction2_with_http_info(self, body, savings_id, **kwargs):  # noqa: E501
        """transaction2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transaction2_with_http_info(body, savings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSavingsAccountTransactionsRequest body: (required)
        :param int savings_id: (required)
        :param str command:
        :return: PostSavingsAccountTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'savings_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transaction2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `transaction2`")  # noqa: E501
        # verify the required parameter 'savings_id' is set
        if ('savings_id' not in params or
                params['savings_id'] is None):
            raise ValueError("Missing the required parameter `savings_id` when calling `transaction2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'savings_id' in params:
            path_params['savingsId'] = params['savings_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/savingsaccounts/{savingsId}/transactions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostSavingsAccountTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
