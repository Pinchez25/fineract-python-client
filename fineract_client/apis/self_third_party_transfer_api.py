# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class SelfThirdPartyTransferApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add(self, body, **kwargs):  # noqa: E501
        """Add TPT Beneficiary  # noqa: E501

        Api to add third party beneficiary linked to current user.  Parameter Definitions  name : Nick name for beneficiary, should be unique for an self service user  officeName : Office Name of beneficiary(not id)  accountNumber : Account Number of beneficiary(not id)  transferLimit : Each transfer initiated to this account will not exceed this amount  Example Requests:  /self/beneficiaries/tpt  Mandatory Fields: name, officeName, accountNumber, accountType  Optional Fields: transferLimit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSelfBeneficiariesTPTRequest body: (required)
        :return: PostSelfBeneficiariesTPTResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add TPT Beneficiary  # noqa: E501

        Api to add third party beneficiary linked to current user.  Parameter Definitions  name : Nick name for beneficiary, should be unique for an self service user  officeName : Office Name of beneficiary(not id)  accountNumber : Account Number of beneficiary(not id)  transferLimit : Each transfer initiated to this account will not exceed this amount  Example Requests:  /self/beneficiaries/tpt  Mandatory Fields: name, officeName, accountNumber, accountType  Optional Fields: transferLimit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSelfBeneficiariesTPTRequest body: (required)
        :return: PostSelfBeneficiariesTPTResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/self/beneficiaries/tpt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostSelfBeneficiariesTPTResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete22(self, beneficiary_id, **kwargs):  # noqa: E501
        """Delete TPT Beneficiary  # noqa: E501

        Api to delete third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete22(beneficiary_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int beneficiary_id: (required)
        :return: DeleteSelfBeneficiariesTPTBeneficiaryIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete22_with_http_info(beneficiary_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete22_with_http_info(beneficiary_id, **kwargs)  # noqa: E501
            return data

    def delete22_with_http_info(self, beneficiary_id, **kwargs):  # noqa: E501
        """Delete TPT Beneficiary  # noqa: E501

        Api to delete third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete22_with_http_info(beneficiary_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int beneficiary_id: (required)
        :return: DeleteSelfBeneficiariesTPTBeneficiaryIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['beneficiary_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete22" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'beneficiary_id' is set
        if ('beneficiary_id' not in params or
                params['beneficiary_id'] is None):
            raise ValueError("Missing the required parameter `beneficiary_id` when calling `delete22`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'beneficiary_id' in params:
            path_params['beneficiaryId'] = params['beneficiary_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/self/beneficiaries/tpt/{beneficiaryId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteSelfBeneficiariesTPTBeneficiaryIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all35(self, **kwargs):  # noqa: E501
        """Get All TPT Beneficiary  # noqa: E501

        Api to get all third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all35(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GetSelfBeneficiariesTPTResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all35_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all35_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all35_with_http_info(self, **kwargs):  # noqa: E501
        """Get All TPT Beneficiary  # noqa: E501

        Api to get all third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all35_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GetSelfBeneficiariesTPTResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all35" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/self/beneficiaries/tpt', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSelfBeneficiariesTPTResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template16(self, **kwargs):  # noqa: E501
        """Beneficiary Third Party Transfer Template  # noqa: E501

        Returns Account Type enumerations. Self User is expected to know office name and account number to be able to add beneficiary.  Example Requests:  /self/beneficiaries/tpt/template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template16(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSelfBeneficiariesTPTTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template16_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.template16_with_http_info(**kwargs)  # noqa: E501
            return data

    def template16_with_http_info(self, **kwargs):  # noqa: E501
        """Beneficiary Third Party Transfer Template  # noqa: E501

        Returns Account Type enumerations. Self User is expected to know office name and account number to be able to add beneficiary.  Example Requests:  /self/beneficiaries/tpt/template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template16_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSelfBeneficiariesTPTTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template16" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/self/beneficiaries/tpt/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSelfBeneficiariesTPTTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update23(self, body, beneficiary_id, **kwargs):  # noqa: E501
        """Update TPT Beneficiary  # noqa: E501

        Api to update third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}  Optional Fields: name, transferLimit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update23(body, beneficiary_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSelfBeneficiariesTPTBeneficiaryIdRequest body: (required)
        :param int beneficiary_id: beneficiaryId (required)
        :return: PutSelfBeneficiariesTPTBeneficiaryIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update23_with_http_info(body, beneficiary_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update23_with_http_info(body, beneficiary_id, **kwargs)  # noqa: E501
            return data

    def update23_with_http_info(self, body, beneficiary_id, **kwargs):  # noqa: E501
        """Update TPT Beneficiary  # noqa: E501

        Api to update third party beneficiary linked to current user.  Example Requests:  /self/beneficiaries/tpt/{beneficiaryId}  Optional Fields: name, transferLimit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update23_with_http_info(body, beneficiary_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSelfBeneficiariesTPTBeneficiaryIdRequest body: (required)
        :param int beneficiary_id: beneficiaryId (required)
        :return: PutSelfBeneficiariesTPTBeneficiaryIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'beneficiary_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update23" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update23`")  # noqa: E501
        # verify the required parameter 'beneficiary_id' is set
        if ('beneficiary_id' not in params or
                params['beneficiary_id'] is None):
            raise ValueError("Missing the required parameter `beneficiary_id` when calling `update23`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'beneficiary_id' in params:
            path_params['beneficiaryId'] = params['beneficiary_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/self/beneficiaries/tpt/{beneficiaryId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutSelfBeneficiariesTPTBeneficiaryIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
