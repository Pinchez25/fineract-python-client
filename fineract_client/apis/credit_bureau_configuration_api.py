# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class CreditBureauConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_organisation_credit_bureau(self, organisation_credit_bureau_id, **kwargs):  # noqa: E501
        """add_organisation_credit_bureau  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_organisation_credit_bureau(organisation_credit_bureau_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organisation_credit_bureau_id: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_organisation_credit_bureau_with_http_info(organisation_credit_bureau_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_organisation_credit_bureau_with_http_info(organisation_credit_bureau_id, **kwargs)  # noqa: E501
            return data

    def add_organisation_credit_bureau_with_http_info(self, organisation_credit_bureau_id, **kwargs):  # noqa: E501
        """add_organisation_credit_bureau  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_organisation_credit_bureau_with_http_info(organisation_credit_bureau_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organisation_credit_bureau_id: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_credit_bureau_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_organisation_credit_bureau" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation_credit_bureau_id' is set
        if ('organisation_credit_bureau_id' not in params or
                params['organisation_credit_bureau_id'] is None):
            raise ValueError("Missing the required parameter `organisation_credit_bureau_id` when calling `add_organisation_credit_bureau`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organisation_credit_bureau_id' in params:
            path_params['organisationCreditBureauId'] = params['organisation_credit_bureau_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/organisationCreditBureau/{organisationCreditBureauId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_credit_bureau_configuration(self, credit_bureau_id, **kwargs):  # noqa: E501
        """create_credit_bureau_configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credit_bureau_configuration(credit_bureau_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int credit_bureau_id: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_credit_bureau_configuration_with_http_info(credit_bureau_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_credit_bureau_configuration_with_http_info(credit_bureau_id, **kwargs)  # noqa: E501
            return data

    def create_credit_bureau_configuration_with_http_info(self, credit_bureau_id, **kwargs):  # noqa: E501
        """create_credit_bureau_configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credit_bureau_configuration_with_http_info(credit_bureau_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int credit_bureau_id: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credit_bureau_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credit_bureau_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credit_bureau_id' is set
        if ('credit_bureau_id' not in params or
                params['credit_bureau_id'] is None):
            raise ValueError("Missing the required parameter `credit_bureau_id` when calling `create_credit_bureau_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'credit_bureau_id' in params:
            path_params['creditBureauId'] = params['credit_bureau_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/configuration/{creditBureauId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_credit_bureau_loan_product_mapping(self, organisation_credit_bureau_id, **kwargs):  # noqa: E501
        """create_credit_bureau_loan_product_mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credit_bureau_loan_product_mapping(organisation_credit_bureau_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organisation_credit_bureau_id: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_credit_bureau_loan_product_mapping_with_http_info(organisation_credit_bureau_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_credit_bureau_loan_product_mapping_with_http_info(organisation_credit_bureau_id, **kwargs)  # noqa: E501
            return data

    def create_credit_bureau_loan_product_mapping_with_http_info(self, organisation_credit_bureau_id, **kwargs):  # noqa: E501
        """create_credit_bureau_loan_product_mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credit_bureau_loan_product_mapping_with_http_info(organisation_credit_bureau_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organisation_credit_bureau_id: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_credit_bureau_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credit_bureau_loan_product_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation_credit_bureau_id' is set
        if ('organisation_credit_bureau_id' not in params or
                params['organisation_credit_bureau_id'] is None):
            raise ValueError("Missing the required parameter `organisation_credit_bureau_id` when calling `create_credit_bureau_loan_product_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organisation_credit_bureau_id' in params:
            path_params['organisationCreditBureauId'] = params['organisation_credit_bureau_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/mappings/{organisationCreditBureauId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_loan_products(self, **kwargs):  # noqa: E501
        """fetch_loan_products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_loan_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetch_loan_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.fetch_loan_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def fetch_loan_products_with_http_info(self, **kwargs):  # noqa: E501
        """fetch_loan_products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_loan_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_loan_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/loanProduct', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mapping_by_loan_product_id(self, loan_product_id, **kwargs):  # noqa: E501
        """fetch_mapping_by_loan_product_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mapping_by_loan_product_id(loan_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_product_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetch_mapping_by_loan_product_id_with_http_info(loan_product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.fetch_mapping_by_loan_product_id_with_http_info(loan_product_id, **kwargs)  # noqa: E501
            return data

    def fetch_mapping_by_loan_product_id_with_http_info(self, loan_product_id, **kwargs):  # noqa: E501
        """fetch_mapping_by_loan_product_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mapping_by_loan_product_id_with_http_info(loan_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_product_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mapping_by_loan_product_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_product_id' is set
        if ('loan_product_id' not in params or
                params['loan_product_id'] is None):
            raise ValueError("Missing the required parameter `loan_product_id` when calling `fetch_mapping_by_loan_product_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_product_id' in params:
            path_params['loanProductId'] = params['loan_product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/loanProduct/{loanProductId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_configuration(self, organisation_credit_bureau_id, **kwargs):  # noqa: E501
        """get_configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_configuration(organisation_credit_bureau_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organisation_credit_bureau_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_configuration_with_http_info(organisation_credit_bureau_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_configuration_with_http_info(organisation_credit_bureau_id, **kwargs)  # noqa: E501
            return data

    def get_configuration_with_http_info(self, organisation_credit_bureau_id, **kwargs):  # noqa: E501
        """get_configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_configuration_with_http_info(organisation_credit_bureau_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organisation_credit_bureau_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_credit_bureau_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation_credit_bureau_id' is set
        if ('organisation_credit_bureau_id' not in params or
                params['organisation_credit_bureau_id'] is None):
            raise ValueError("Missing the required parameter `organisation_credit_bureau_id` when calling `get_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organisation_credit_bureau_id' in params:
            path_params['organisationCreditBureauId'] = params['organisation_credit_bureau_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/config/{organisationCreditBureauId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_credit_bureau(self, **kwargs):  # noqa: E501
        """get_credit_bureau  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_bureau(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_credit_bureau_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_credit_bureau_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_credit_bureau_with_http_info(self, **kwargs):  # noqa: E501
        """get_credit_bureau  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_bureau_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_bureau" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_credit_bureau_loan_product_mapping(self, **kwargs):  # noqa: E501
        """get_credit_bureau_loan_product_mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_bureau_loan_product_mapping(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_credit_bureau_loan_product_mapping_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_credit_bureau_loan_product_mapping_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_credit_bureau_loan_product_mapping_with_http_info(self, **kwargs):  # noqa: E501
        """get_credit_bureau_loan_product_mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_bureau_loan_product_mapping_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_bureau_loan_product_mapping" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/mappings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organisation_credit_bureau(self, **kwargs):  # noqa: E501
        """get_organisation_credit_bureau  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organisation_credit_bureau(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organisation_credit_bureau_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_organisation_credit_bureau_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_organisation_credit_bureau_with_http_info(self, **kwargs):  # noqa: E501
        """get_organisation_credit_bureau  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organisation_credit_bureau_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organisation_credit_bureau" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/organisationCreditBureau', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_credit_bureau(self, **kwargs):  # noqa: E501
        """update_credit_bureau  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_credit_bureau(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_credit_bureau_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_credit_bureau_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_credit_bureau_with_http_info(self, **kwargs):  # noqa: E501
        """update_credit_bureau  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_credit_bureau_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_credit_bureau" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/organisationCreditBureau', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_credit_bureau_configuration(self, configuration_id, **kwargs):  # noqa: E501
        """update_credit_bureau_configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_credit_bureau_configuration(configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int configuration_id: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_credit_bureau_configuration_with_http_info(configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_credit_bureau_configuration_with_http_info(configuration_id, **kwargs)  # noqa: E501
            return data

    def update_credit_bureau_configuration_with_http_info(self, configuration_id, **kwargs):  # noqa: E501
        """update_credit_bureau_configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_credit_bureau_configuration_with_http_info(configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int configuration_id: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configuration_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_credit_bureau_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configuration_id' is set
        if ('configuration_id' not in params or
                params['configuration_id'] is None):
            raise ValueError("Missing the required parameter `configuration_id` when calling `update_credit_bureau_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'configuration_id' in params:
            path_params['configurationId'] = params['configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/configuration/{configurationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_credit_bureau_loan_product_mapping(self, **kwargs):  # noqa: E501
        """update_credit_bureau_loan_product_mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_credit_bureau_loan_product_mapping(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_credit_bureau_loan_product_mapping_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_credit_bureau_loan_product_mapping_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_credit_bureau_loan_product_mapping_with_http_info(self, **kwargs):  # noqa: E501
        """update_credit_bureau_loan_product_mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_credit_bureau_loan_product_mapping_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_credit_bureau_loan_product_mapping" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CreditBureauConfiguration/mappings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
