# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class HolidaysApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_new_holiday(self, body, **kwargs):  # noqa: E501
        """Create a Holiday  # noqa: E501

        Mandatory Fields: name, description, fromDate, toDate, repaymentsRescheduledTo, offices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_holiday(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostHolidaysRequest body: (required)
        :return: PostHolidaysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_holiday_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_holiday_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_new_holiday_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Holiday  # noqa: E501

        Mandatory Fields: name, description, fromDate, toDate, repaymentsRescheduledTo, offices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_holiday_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostHolidaysRequest body: (required)
        :return: PostHolidaysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_holiday" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_new_holiday`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holidays', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostHolidaysResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete7(self, holiday_id, **kwargs):  # noqa: E501
        """Delete a Holiday  # noqa: E501

        This API allows to delete a holiday. This is a soft delete the deleted holiday status is marked as deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete7(holiday_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int holiday_id: holidayId (required)
        :return: DeleteHolidaysHolidayIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete7_with_http_info(holiday_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete7_with_http_info(holiday_id, **kwargs)  # noqa: E501
            return data

    def delete7_with_http_info(self, holiday_id, **kwargs):  # noqa: E501
        """Delete a Holiday  # noqa: E501

        This API allows to delete a holiday. This is a soft delete the deleted holiday status is marked as deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete7_with_http_info(holiday_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int holiday_id: holidayId (required)
        :return: DeleteHolidaysHolidayIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['holiday_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete7" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'holiday_id' is set
        if ('holiday_id' not in params or
                params['holiday_id'] is None):
            raise ValueError("Missing the required parameter `holiday_id` when calling `delete7`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_id' in params:
            path_params['holidayId'] = params['holiday_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holidays/{holidayId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteHolidaysHolidayIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handle_commands1(self, body, holiday_id, **kwargs):  # noqa: E501
        """Activate a Holiday  # noqa: E501

        Always Holidays are created in pending state. This API allows to activate a holiday.  Only the active holidays are considered for rescheduling the loan repayment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handle_commands1(body, holiday_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostHolidaysHolidayIdRequest body: (required)
        :param int holiday_id: holidayId (required)
        :param str command: command
        :return: PostHolidaysHolidayIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.handle_commands1_with_http_info(body, holiday_id, **kwargs)  # noqa: E501
        else:
            (data) = self.handle_commands1_with_http_info(body, holiday_id, **kwargs)  # noqa: E501
            return data

    def handle_commands1_with_http_info(self, body, holiday_id, **kwargs):  # noqa: E501
        """Activate a Holiday  # noqa: E501

        Always Holidays are created in pending state. This API allows to activate a holiday.  Only the active holidays are considered for rescheduling the loan repayment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handle_commands1_with_http_info(body, holiday_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostHolidaysHolidayIdRequest body: (required)
        :param int holiday_id: holidayId (required)
        :param str command: command
        :return: PostHolidaysHolidayIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'holiday_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handle_commands1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `handle_commands1`")  # noqa: E501
        # verify the required parameter 'holiday_id' is set
        if ('holiday_id' not in params or
                params['holiday_id'] is None):
            raise ValueError("Missing the required parameter `holiday_id` when calling `handle_commands1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_id' in params:
            path_params['holidayId'] = params['holiday_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holidays/{holidayId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostHolidaysHolidayIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all_holidays(self, **kwargs):  # noqa: E501
        """List Holidays  # noqa: E501

        Example Requests:  holidays?officeId=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_holidays(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id: officeId
        :param DateParam from_date: fromDate
        :param DateParam to_date: toDate
        :param str locale: locale
        :param str date_format: dateFormat
        :return: list[GetHolidaysResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_holidays_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_holidays_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all_holidays_with_http_info(self, **kwargs):  # noqa: E501
        """List Holidays  # noqa: E501

        Example Requests:  holidays?officeId=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_holidays_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id: officeId
        :param DateParam from_date: fromDate
        :param DateParam to_date: toDate
        :param str locale: locale
        :param str date_format: dateFormat
        :return: list[GetHolidaysResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office_id', 'from_date', 'to_date', 'locale', 'date_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_holidays" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office_id' in params:
            query_params.append(('officeId', params['office_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holidays', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetHolidaysResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_one7(self, holiday_id, **kwargs):  # noqa: E501
        """Retrieve a Holiday  # noqa: E501

        Example Requests:  holidays/1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one7(holiday_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int holiday_id: holidayId (required)
        :return: GetHolidaysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_one7_with_http_info(holiday_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_one7_with_http_info(holiday_id, **kwargs)  # noqa: E501
            return data

    def retrieve_one7_with_http_info(self, holiday_id, **kwargs):  # noqa: E501
        """Retrieve a Holiday  # noqa: E501

        Example Requests:  holidays/1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one7_with_http_info(holiday_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int holiday_id: holidayId (required)
        :return: GetHolidaysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['holiday_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_one7" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'holiday_id' is set
        if ('holiday_id' not in params or
                params['holiday_id'] is None):
            raise ValueError("Missing the required parameter `holiday_id` when calling `retrieve_one7`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_id' in params:
            path_params['holidayId'] = params['holiday_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holidays/{holidayId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHolidaysResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_repayment_schedule_updation_tye_options(self, **kwargs):  # noqa: E501
        """retrieve_repayment_schedule_updation_tye_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_repayment_schedule_updation_tye_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_repayment_schedule_updation_tye_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_repayment_schedule_updation_tye_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_repayment_schedule_updation_tye_options_with_http_info(self, **kwargs):  # noqa: E501
        """retrieve_repayment_schedule_updation_tye_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_repayment_schedule_updation_tye_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_repayment_schedule_updation_tye_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holidays/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update6(self, body, holiday_id, **kwargs):  # noqa: E501
        """Update a Holiday  # noqa: E501

        If a holiday is in pending state (created and not activated) then all fields are allowed to modify. Once holidays become active only name and descriptions are allowed to modify.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update6(body, holiday_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutHolidaysHolidayIdRequest body: (required)
        :param int holiday_id: holidayId (required)
        :return: PutHolidaysHolidayIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update6_with_http_info(body, holiday_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update6_with_http_info(body, holiday_id, **kwargs)  # noqa: E501
            return data

    def update6_with_http_info(self, body, holiday_id, **kwargs):  # noqa: E501
        """Update a Holiday  # noqa: E501

        If a holiday is in pending state (created and not activated) then all fields are allowed to modify. Once holidays become active only name and descriptions are allowed to modify.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update6_with_http_info(body, holiday_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutHolidaysHolidayIdRequest body: (required)
        :param int holiday_id: holidayId (required)
        :return: PutHolidaysHolidayIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'holiday_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update6`")  # noqa: E501
        # verify the required parameter 'holiday_id' is set
        if ('holiday_id' not in params or
                params['holiday_id'] is None):
            raise ValueError("Missing the required parameter `holiday_id` when calling `update6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_id' in params:
            path_params['holidayId'] = params['holiday_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holidays/{holidayId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutHolidaysHolidayIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
