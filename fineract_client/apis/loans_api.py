# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class LoansApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def calculate_loan_schedule_or_submit_loan_application(self, body, **kwargs):  # noqa: E501
        """Calculate loan repayment schedule | Submit a new Loan Application  # noqa: E501

        It calculates the loan repayment Schedule Submits a new loan application Mandatory Fields: clientId, productId, principal, loanTermFrequency, loanTermFrequencyType, loanType, numberOfRepayments, repaymentEvery, repaymentFrequencyType, interestRatePerPeriod, amortizationType, interestType, interestCalculationPeriodType, transactionProcessingStrategyCode, expectedDisbursementDate, submittedOnDate, loanType Optional Fields: graceOnPrincipalPayment, graceOnInterestPayment, graceOnInterestCharged, linkAccountId, allowPartialPeriodInterestCalcualtion, fixedEmiAmount, maxOutstandingLoanBalance, disbursementData, graceOnArrearsAgeing, createStandingInstructionAtDisbursement (requires linkedAccountId if set to true) Additional Mandatory Fields if interest recalculation is enabled for product and Rest frequency not same as repayment period: recalculationRestFrequencyDate Additional Mandatory Fields if interest recalculation with interest/fee compounding is enabled for product and compounding frequency not same as repayment period: recalculationCompoundingFrequencyDate Additional Mandatory Field if Entity-Datatable Check is enabled for the entity of type loan: datatables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calculate_loan_schedule_or_submit_loan_application(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansRequest body: (required)
        :param str command: command
        :return: PostLoansResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.calculate_loan_schedule_or_submit_loan_application_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.calculate_loan_schedule_or_submit_loan_application_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def calculate_loan_schedule_or_submit_loan_application_with_http_info(self, body, **kwargs):  # noqa: E501
        """Calculate loan repayment schedule | Submit a new Loan Application  # noqa: E501

        It calculates the loan repayment Schedule Submits a new loan application Mandatory Fields: clientId, productId, principal, loanTermFrequency, loanTermFrequencyType, loanType, numberOfRepayments, repaymentEvery, repaymentFrequencyType, interestRatePerPeriod, amortizationType, interestType, interestCalculationPeriodType, transactionProcessingStrategyCode, expectedDisbursementDate, submittedOnDate, loanType Optional Fields: graceOnPrincipalPayment, graceOnInterestPayment, graceOnInterestCharged, linkAccountId, allowPartialPeriodInterestCalcualtion, fixedEmiAmount, maxOutstandingLoanBalance, disbursementData, graceOnArrearsAgeing, createStandingInstructionAtDisbursement (requires linkedAccountId if set to true) Additional Mandatory Fields if interest recalculation is enabled for product and Rest frequency not same as repayment period: recalculationRestFrequencyDate Additional Mandatory Fields if interest recalculation with interest/fee compounding is enabled for product and compounding frequency not same as repayment period: recalculationCompoundingFrequencyDate Additional Mandatory Field if Entity-Datatable Check is enabled for the entity of type loan: datatables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calculate_loan_schedule_or_submit_loan_application_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansRequest body: (required)
        :param str command: command
        :return: PostLoansResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculate_loan_schedule_or_submit_loan_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `calculate_loan_schedule_or_submit_loan_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_loan_delinquency_action(self, body, loan_id, **kwargs):  # noqa: E501
        """Adds a new delinquency action for a loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_loan_delinquency_action(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansDelinquencyActionRequest body: (required)
        :param int loan_id: loanId (required)
        :return: PostLoansDelinquencyActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_loan_delinquency_action_with_http_info(body, loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_loan_delinquency_action_with_http_info(body, loan_id, **kwargs)  # noqa: E501
            return data

    def create_loan_delinquency_action_with_http_info(self, body, loan_id, **kwargs):  # noqa: E501
        """Adds a new delinquency action for a loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_loan_delinquency_action_with_http_info(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansDelinquencyActionRequest body: (required)
        :param int loan_id: loanId (required)
        :return: PostLoansDelinquencyActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_loan_delinquency_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_loan_delinquency_action`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `create_loan_delinquency_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/delinquency-actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansDelinquencyActionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_loan_delinquency_action1(self, body, loan_external_id, **kwargs):  # noqa: E501
        """Adds a new delinquency action for a loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_loan_delinquency_action1(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansDelinquencyActionRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :return: PostLoansDelinquencyActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_loan_delinquency_action1_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_loan_delinquency_action1_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
            return data

    def create_loan_delinquency_action1_with_http_info(self, body, loan_external_id, **kwargs):  # noqa: E501
        """Adds a new delinquency action for a loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_loan_delinquency_action1_with_http_info(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansDelinquencyActionRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :return: PostLoansDelinquencyActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_loan_delinquency_action1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_loan_delinquency_action1`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `create_loan_delinquency_action1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/delinquency-actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansDelinquencyActionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_loan_application(self, loan_id, **kwargs):  # noqa: E501
        """Delete a Loan Application  # noqa: E501

        Note: Only loans in \"Submitted and awaiting approval\" status can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_application(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: DeleteLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_loan_application_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_loan_application_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def delete_loan_application_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """Delete a Loan Application  # noqa: E501

        Note: Only loans in \"Submitted and awaiting approval\" status can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_application_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: DeleteLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_loan_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `delete_loan_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoansLoanIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_loan_application1(self, loan_external_id, **kwargs):  # noqa: E501
        """Delete a Loan Application  # noqa: E501

        Note: Only loans in \"Submitted and awaiting approval\" status can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_application1(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :return: DeleteLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_loan_application1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_loan_application1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
            return data

    def delete_loan_application1_with_http_info(self, loan_external_id, **kwargs):  # noqa: E501
        """Delete a Loan Application  # noqa: E501

        Note: Only loans in \"Submitted and awaiting approval\" status can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_loan_application1_with_http_info(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :return: DeleteLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_loan_application1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `delete_loan_application1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoansLoanIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_delinquency_tag_history(self, loan_id, **kwargs):  # noqa: E501
        """Retrieve the Loan Delinquency Tag history using the Loan Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_delinquency_tag_history(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: list[GetDelinquencyTagHistoryResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_delinquency_tag_history_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_delinquency_tag_history_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def get_delinquency_tag_history_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """Retrieve the Loan Delinquency Tag history using the Loan Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_delinquency_tag_history_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: list[GetDelinquencyTagHistoryResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_delinquency_tag_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `get_delinquency_tag_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/delinquencytags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetDelinquencyTagHistoryResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_delinquency_tag_history1(self, loan_external_id, **kwargs):  # noqa: E501
        """Retrieve the Loan Delinquency Tag history using the Loan Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_delinquency_tag_history1(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :return: list[GetDelinquencyTagHistoryResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_delinquency_tag_history1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_delinquency_tag_history1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
            return data

    def get_delinquency_tag_history1_with_http_info(self, loan_external_id, **kwargs):  # noqa: E501
        """Retrieve the Loan Delinquency Tag history using the Loan Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_delinquency_tag_history1_with_http_info(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :return: list[GetDelinquencyTagHistoryResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_delinquency_tag_history1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `get_delinquency_tag_history1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/delinquencytags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetDelinquencyTagHistoryResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_glim_repayment_template(self, glim_id, **kwargs):  # noqa: E501
        """get_glim_repayment_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_glim_repayment_template(glim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int glim_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_glim_repayment_template_with_http_info(glim_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_glim_repayment_template_with_http_info(glim_id, **kwargs)  # noqa: E501
            return data

    def get_glim_repayment_template_with_http_info(self, glim_id, **kwargs):  # noqa: E501
        """get_glim_repayment_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_glim_repayment_template_with_http_info(glim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int glim_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['glim_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_glim_repayment_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'glim_id' is set
        if ('glim_id' not in params or
                params['glim_id'] is None):
            raise ValueError("Missing the required parameter `glim_id` when calling `get_glim_repayment_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'glim_id' in params:
            path_params['glimId'] = params['glim_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/glimAccount/{glimId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loan_delinquency_actions(self, loan_id, **kwargs):  # noqa: E501
        """Retrieve delinquency actions related to the loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loan_delinquency_actions(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: list[GetDelinquencyActionsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loan_delinquency_actions_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_loan_delinquency_actions_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def get_loan_delinquency_actions_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """Retrieve delinquency actions related to the loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loan_delinquency_actions_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: list[GetDelinquencyActionsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loan_delinquency_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `get_loan_delinquency_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/delinquency-actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetDelinquencyActionsResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loan_delinquency_actions1(self, loan_external_id, **kwargs):  # noqa: E501
        """Retrieve delinquency actions related to the loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loan_delinquency_actions1(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :return: list[GetDelinquencyActionsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loan_delinquency_actions1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_loan_delinquency_actions1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
            return data

    def get_loan_delinquency_actions1_with_http_info(self, loan_external_id, **kwargs):  # noqa: E501
        """Retrieve delinquency actions related to the loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loan_delinquency_actions1_with_http_info(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :return: list[GetDelinquencyActionsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loan_delinquency_actions1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `get_loan_delinquency_actions1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/delinquency-actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetDelinquencyActionsResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loan_repayment_template(self, **kwargs):  # noqa: E501
        """get_loan_repayment_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loan_repayment_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id:
        :param str date_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loan_repayment_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loan_repayment_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loan_repayment_template_with_http_info(self, **kwargs):  # noqa: E501
        """get_loan_repayment_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loan_repayment_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id:
        :param str date_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office_id', 'date_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loan_repayment_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office_id' in params:
            query_params.append(('officeId', params['office_id']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.ms-excel'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/repayments/downloadtemplate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loans_template(self, **kwargs):  # noqa: E501
        """get_loans_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loans_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id:
        :param int staff_id:
        :param str date_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loans_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loans_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loans_template_with_http_info(self, **kwargs):  # noqa: E501
        """get_loans_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loans_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id:
        :param int staff_id:
        :param str date_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office_id', 'staff_id', 'date_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loans_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office_id' in params:
            query_params.append(('officeId', params['office_id']))  # noqa: E501
        if 'staff_id' in params:
            query_params.append(('staffId', params['staff_id']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.ms-excel'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/downloadtemplate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def glim_state_transitions(self, body, glim_id, **kwargs):  # noqa: E501
        """Approve GLIM Application | Undo GLIM Application Approval | Reject GLIM Application | Disburse Loan Disburse Loan To Savings Account | Undo Loan Disbursal  # noqa: E501

        Approve GLIM Application: Mandatory Fields: approvedOnDate Optional Fields: approvedLoanAmount and expectedDisbursementDate Approves the GLIM application  Undo GLIM Application Approval: Undoes the GLIM Application Approval  Reject GLIM Application: Mandatory Fields: rejectedOnDate Allows you to reject the GLIM application  Disburse Loan: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the Loan  Disburse Loan To Savings Account: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the loan to Saving Account  Undo Loan Disbursal: Undoes the Loan Disbursal   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.glim_state_transitions(body, glim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdRequest body: (required)
        :param int glim_id: (required)
        :param str command:
        :return: PostLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.glim_state_transitions_with_http_info(body, glim_id, **kwargs)  # noqa: E501
        else:
            (data) = self.glim_state_transitions_with_http_info(body, glim_id, **kwargs)  # noqa: E501
            return data

    def glim_state_transitions_with_http_info(self, body, glim_id, **kwargs):  # noqa: E501
        """Approve GLIM Application | Undo GLIM Application Approval | Reject GLIM Application | Disburse Loan Disburse Loan To Savings Account | Undo Loan Disbursal  # noqa: E501

        Approve GLIM Application: Mandatory Fields: approvedOnDate Optional Fields: approvedLoanAmount and expectedDisbursementDate Approves the GLIM application  Undo GLIM Application Approval: Undoes the GLIM Application Approval  Reject GLIM Application: Mandatory Fields: rejectedOnDate Allows you to reject the GLIM application  Disburse Loan: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the Loan  Disburse Loan To Savings Account: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the loan to Saving Account  Undo Loan Disbursal: Undoes the Loan Disbursal   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.glim_state_transitions_with_http_info(body, glim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdRequest body: (required)
        :param int glim_id: (required)
        :param str command:
        :return: PostLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'glim_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method glim_state_transitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `glim_state_transitions`")  # noqa: E501
        # verify the required parameter 'glim_id' is set
        if ('glim_id' not in params or
                params['glim_id'] is None):
            raise ValueError("Missing the required parameter `glim_id` when calling `glim_state_transitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'glim_id' in params:
            path_params['glimId'] = params['glim_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/glimAccount/{glimId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_loan_application(self, body, loan_id, **kwargs):  # noqa: E501
        """Modify a loan application  # noqa: E501

        Loan application can only be modified when in 'Submitted and pending approval' state. Once the application is approved, the details cannot be changed using this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_loan_application(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param str command: command
        :return: PutLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_loan_application_with_http_info(body, loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_loan_application_with_http_info(body, loan_id, **kwargs)  # noqa: E501
            return data

    def modify_loan_application_with_http_info(self, body, loan_id, **kwargs):  # noqa: E501
        """Modify a loan application  # noqa: E501

        Loan application can only be modified when in 'Submitted and pending approval' state. Once the application is approved, the details cannot be changed using this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_loan_application_with_http_info(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param str command: command
        :return: PutLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_loan_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_loan_application`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `modify_loan_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutLoansLoanIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_loan_application1(self, body, loan_external_id, **kwargs):  # noqa: E501
        """Modify a loan application  # noqa: E501

        Loan application can only be modified when in 'Submitted and pending approval' state. Once the application is approved, the details cannot be changed using this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_loan_application1(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str command: command
        :return: PutLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_loan_application1_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_loan_application1_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
            return data

    def modify_loan_application1_with_http_info(self, body, loan_external_id, **kwargs):  # noqa: E501
        """Modify a loan application  # noqa: E501

        Loan application can only be modified when in 'Submitted and pending approval' state. Once the application is approved, the details cannot be changed using this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_loan_application1_with_http_info(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutLoansLoanIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str command: command
        :return: PutLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_loan_application1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_loan_application1`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `modify_loan_application1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutLoansLoanIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_loan_repayment_template(self, **kwargs):  # noqa: E501
        """post_loan_repayment_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loan_repayment_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_format:
        :param str locale:
        :param str uploaded_input_stream:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_loan_repayment_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_loan_repayment_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_loan_repayment_template_with_http_info(self, **kwargs):  # noqa: E501
        """post_loan_repayment_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loan_repayment_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_format:
        :param str locale:
        :param str uploaded_input_stream:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_format', 'locale', 'uploaded_input_stream']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_loan_repayment_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date_format' in params:
            form_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'locale' in params:
            form_params.append(('locale', params['locale']))  # noqa: E501
        if 'uploaded_input_stream' in params:
            local_var_files['uploadedInputStream'] = params['uploaded_input_stream']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/repayments/uploadtemplate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_loan_template(self, **kwargs):  # noqa: E501
        """post_loan_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loan_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_format:
        :param str locale:
        :param str uploaded_input_stream:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_loan_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_loan_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_loan_template_with_http_info(self, **kwargs):  # noqa: E501
        """post_loan_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loan_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_format:
        :param str locale:
        :param str uploaded_input_stream:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_format', 'locale', 'uploaded_input_stream']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_loan_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date_format' in params:
            form_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'locale' in params:
            form_params.append(('locale', params['locale']))  # noqa: E501
        if 'uploaded_input_stream' in params:
            local_var_files['uploadedInputStream'] = params['uploaded_input_stream']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/uploadtemplate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all27(self, **kwargs):  # noqa: E501
        """List Loans  # noqa: E501

        The list capability of loans can support pagination and sorting. Example Requests:  loans  loans?fields=accountNo  loans?offset=10&limit=50  loans?orderBy=accountNo&sortOrder=DESC  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all27(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: externalId
        :param int offset: offset
        :param int limit: limit
        :param str order_by: orderBy
        :param str sort_order: sortOrder
        :param str account_no: accountNo
        :param str status: status
        :return: GetLoansResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all27_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all27_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all27_with_http_info(self, **kwargs):  # noqa: E501
        """List Loans  # noqa: E501

        The list capability of loans can support pagination and sorting. Example Requests:  loans  loans?fields=accountNo  loans?offset=10&limit=50  loans?orderBy=accountNo&sortOrder=DESC  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all27_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: externalId
        :param int offset: offset
        :param int limit: limit
        :param str order_by: orderBy
        :param str sort_order: sortOrder
        :param str account_no: accountNo
        :param str status: status
        :return: GetLoansResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_id', 'offset', 'limit', 'order_by', 'sort_order', 'account_no', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all27" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'external_id' in params:
            query_params.append(('externalId', params['external_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'account_no' in params:
            query_params.append(('accountNo', params['account_no']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_approval_template(self, loan_id, **kwargs):  # noqa: E501
        """retrieve_approval_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_approval_template(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param str template_type: templateType
        :return: GetLoansApprovalTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_approval_template_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_approval_template_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def retrieve_approval_template_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """retrieve_approval_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_approval_template_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param str template_type: templateType
        :return: GetLoansApprovalTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id', 'template_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_approval_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `retrieve_approval_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []
        if 'template_type' in params:
            query_params.append(('templateType', params['template_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansApprovalTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_approval_template1(self, loan_external_id, **kwargs):  # noqa: E501
        """retrieve_approval_template1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_approval_template1(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param str template_type: templateType
        :return: GetLoansApprovalTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_approval_template1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_approval_template1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
            return data

    def retrieve_approval_template1_with_http_info(self, loan_external_id, **kwargs):  # noqa: E501
        """retrieve_approval_template1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_approval_template1_with_http_info(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param str template_type: templateType
        :return: GetLoansApprovalTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id', 'template_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_approval_template1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `retrieve_approval_template1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []
        if 'template_type' in params:
            query_params.append(('templateType', params['template_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansApprovalTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_loan(self, loan_id, **kwargs):  # noqa: E501
        """Retrieve a Loan  # noqa: E501

        Note: template=true parameter doesn't apply to this resource.Example Requests:  loans/1   loans/1?fields=id,principal,annualInterestRate   loans/1?associations=all  loans/1?associations=all&exclude=guarantors   loans/1?fields=id,principal,annualInterestRate&associations=repaymentSchedule,transactions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param bool staff_in_selected_office_only: staffInSelectedOfficeOnly
        :param str associations: Loan object relations to be included in the response
        :param str exclude: Optional Loan object relation list to be filtered in the response
        :param str fields: Optional Loan attribute list to be in the response
        :return: GetLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_loan_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_loan_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def retrieve_loan_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """Retrieve a Loan  # noqa: E501

        Note: template=true parameter doesn't apply to this resource.Example Requests:  loans/1   loans/1?fields=id,principal,annualInterestRate   loans/1?associations=all  loans/1?associations=all&exclude=guarantors   loans/1?fields=id,principal,annualInterestRate&associations=repaymentSchedule,transactions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param bool staff_in_selected_office_only: staffInSelectedOfficeOnly
        :param str associations: Loan object relations to be included in the response
        :param str exclude: Optional Loan object relation list to be filtered in the response
        :param str fields: Optional Loan attribute list to be in the response
        :return: GetLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id', 'staff_in_selected_office_only', 'associations', 'exclude', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_loan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `retrieve_loan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []
        if 'staff_in_selected_office_only' in params:
            query_params.append(('staffInSelectedOfficeOnly', params['staff_in_selected_office_only']))  # noqa: E501
        if 'associations' in params:
            query_params.append(('associations', params['associations']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_loan1(self, loan_external_id, **kwargs):  # noqa: E501
        """Retrieve a Loan  # noqa: E501

        Note: template=true parameter doesn't apply to this resource.Example Requests:  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?fields=id,principal,annualInterestRate   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?associations=all  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?associations=all&exclude=guarantors   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?fields=id,principal,annualInterestRate&associations=repaymentSchedule,transactions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan1(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param bool staff_in_selected_office_only: staffInSelectedOfficeOnly
        :param str associations: Loan object relations to be included in the response
        :param str exclude: Optional Loan object relation list to be filtered in the response
        :param str fields: Optional Loan attribute list to be in the response
        :return: GetLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_loan1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_loan1_with_http_info(loan_external_id, **kwargs)  # noqa: E501
            return data

    def retrieve_loan1_with_http_info(self, loan_external_id, **kwargs):  # noqa: E501
        """Retrieve a Loan  # noqa: E501

        Note: template=true parameter doesn't apply to this resource.Example Requests:  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?fields=id,principal,annualInterestRate   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?associations=all  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?associations=all&exclude=guarantors   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854?fields=id,principal,annualInterestRate&associations=repaymentSchedule,transactions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_loan1_with_http_info(loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_external_id: loanExternalId (required)
        :param bool staff_in_selected_office_only: staffInSelectedOfficeOnly
        :param str associations: Loan object relations to be included in the response
        :param str exclude: Optional Loan object relation list to be filtered in the response
        :param str fields: Optional Loan attribute list to be in the response
        :return: GetLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_external_id', 'staff_in_selected_office_only', 'associations', 'exclude', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_loan1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `retrieve_loan1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []
        if 'staff_in_selected_office_only' in params:
            query_params.append(('staffInSelectedOfficeOnly', params['staff_in_selected_office_only']))  # noqa: E501
        if 'associations' in params:
            query_params.append(('associations', params['associations']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansLoanIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def state_transitions(self, body, loan_id, **kwargs):  # noqa: E501
        """Approve Loan Application | Recover Loan Guarantee | Undo Loan Application Approval | Assign a Loan Officer | Unassign a Loan Officer | Reject Loan Application | Applicant Withdraws from Loan Application | Disburse Loan Disburse Loan To Savings Account | Undo Loan Disbursal  # noqa: E501

        Approve Loan Application: Mandatory Fields: approvedOnDate Optional Fields: approvedLoanAmount and expectedDisbursementDate Approves the loan application  Recover Loan Guarantee: Recovers the loan guarantee  Undo Loan Application Approval: Undoes the Loan Application Approval  Assign a Loan Officer: Allows you to assign Loan Officer for existing Loan.  Unassign a Loan Officer: Allows you to unassign the Loan Officer.  Reject Loan Application: Mandatory Fields: rejectedOnDate Allows you to reject the loan application  Applicant Withdraws from Loan Application: Mandatory Fields: withdrawnOnDate Allows the applicant to withdraw the loan application  Disburse Loan: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the Loan  Disburse Loan To Savings Account: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the loan to Saving Account  Undo Loan Disbursal: Undoes the Loan Disbursal Showing request and response for Assign a Loan Officer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.state_transitions(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param str command: command
        :return: PostLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.state_transitions_with_http_info(body, loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.state_transitions_with_http_info(body, loan_id, **kwargs)  # noqa: E501
            return data

    def state_transitions_with_http_info(self, body, loan_id, **kwargs):  # noqa: E501
        """Approve Loan Application | Recover Loan Guarantee | Undo Loan Application Approval | Assign a Loan Officer | Unassign a Loan Officer | Reject Loan Application | Applicant Withdraws from Loan Application | Disburse Loan Disburse Loan To Savings Account | Undo Loan Disbursal  # noqa: E501

        Approve Loan Application: Mandatory Fields: approvedOnDate Optional Fields: approvedLoanAmount and expectedDisbursementDate Approves the loan application  Recover Loan Guarantee: Recovers the loan guarantee  Undo Loan Application Approval: Undoes the Loan Application Approval  Assign a Loan Officer: Allows you to assign Loan Officer for existing Loan.  Unassign a Loan Officer: Allows you to unassign the Loan Officer.  Reject Loan Application: Mandatory Fields: rejectedOnDate Allows you to reject the loan application  Applicant Withdraws from Loan Application: Mandatory Fields: withdrawnOnDate Allows the applicant to withdraw the loan application  Disburse Loan: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the Loan  Disburse Loan To Savings Account: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the loan to Saving Account  Undo Loan Disbursal: Undoes the Loan Disbursal Showing request and response for Assign a Loan Officer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.state_transitions_with_http_info(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdRequest body: (required)
        :param int loan_id: loanId (required)
        :param str command: command
        :return: PostLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method state_transitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `state_transitions`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `state_transitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/{loanId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def state_transitions1(self, body, loan_external_id, **kwargs):  # noqa: E501
        """Approve Loan Application | Recover Loan Guarantee | Undo Loan Application Approval | Assign a Loan Officer | Unassign a Loan Officer | Reject Loan Application | Applicant Withdraws from Loan Application | Disburse Loan Disburse Loan To Savings Account | Undo Loan Disbursal  # noqa: E501

        Approve Loan Application: Mandatory Fields: approvedOnDate Optional Fields: approvedLoanAmount and expectedDisbursementDate Approves the loan application  Recover Loan Guarantee: Recovers the loan guarantee  Undo Loan Application Approval: Undoes the Loan Application Approval  Assign a Loan Officer: Allows you to assign Loan Officer for existing Loan.  Unassign a Loan Officer: Allows you to unassign the Loan Officer.  Reject Loan Application: Mandatory Fields: rejectedOnDate Allows you to reject the loan application  Applicant Withdraws from Loan Application: Mandatory Fields: withdrawnOnDate Allows the applicant to withdraw the loan application  Disburse Loan: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the Loan  Disburse Loan To Savings Account: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the loan to Saving Account  Undo Loan Disbursal: Undoes the Loan Disbursal Showing request and response for Assign a Loan Officer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.state_transitions1(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str command: command
        :return: PostLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.state_transitions1_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.state_transitions1_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
            return data

    def state_transitions1_with_http_info(self, body, loan_external_id, **kwargs):  # noqa: E501
        """Approve Loan Application | Recover Loan Guarantee | Undo Loan Application Approval | Assign a Loan Officer | Unassign a Loan Officer | Reject Loan Application | Applicant Withdraws from Loan Application | Disburse Loan Disburse Loan To Savings Account | Undo Loan Disbursal  # noqa: E501

        Approve Loan Application: Mandatory Fields: approvedOnDate Optional Fields: approvedLoanAmount and expectedDisbursementDate Approves the loan application  Recover Loan Guarantee: Recovers the loan guarantee  Undo Loan Application Approval: Undoes the Loan Application Approval  Assign a Loan Officer: Allows you to assign Loan Officer for existing Loan.  Unassign a Loan Officer: Allows you to unassign the Loan Officer.  Reject Loan Application: Mandatory Fields: rejectedOnDate Allows you to reject the loan application  Applicant Withdraws from Loan Application: Mandatory Fields: withdrawnOnDate Allows the applicant to withdraw the loan application  Disburse Loan: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the Loan  Disburse Loan To Savings Account: Mandatory Fields: actualDisbursementDate Optional Fields: transactionAmount and fixedEmiAmount Disburses the loan to Saving Account  Undo Loan Disbursal: Undoes the Loan Disbursal Showing request and response for Assign a Loan Officer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.state_transitions1_with_http_info(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoansLoanIdRequest body: (required)
        :param str loan_external_id: loanExternalId (required)
        :param str command: command
        :return: PostLoansLoanIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method state_transitions1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `state_transitions1`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `state_transitions1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/external-id/{loanExternalId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoansLoanIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template10(self, **kwargs):  # noqa: E501
        """Retrieve Loan Details Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Requests:  loans/template?templateType=individual&clientId=1   loans/template?templateType=individual&clientId=1&productId=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template10(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId
        :param int group_id: groupId
        :param int product_id: productId
        :param str template_type: templateType
        :param bool staff_in_selected_office_only: staffInSelectedOfficeOnly
        :param bool active_only: activeOnly
        :return: GetLoansTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template10_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.template10_with_http_info(**kwargs)  # noqa: E501
            return data

    def template10_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve Loan Details Template  # noqa: E501

        This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Requests:  loans/template?templateType=individual&clientId=1   loans/template?templateType=individual&clientId=1&productId=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template10_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_id: clientId
        :param int group_id: groupId
        :param int product_id: productId
        :param str template_type: templateType
        :param bool staff_in_selected_office_only: staffInSelectedOfficeOnly
        :param bool active_only: activeOnly
        :return: GetLoansTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'group_id', 'product_id', 'template_type', 'staff_in_selected_office_only', 'active_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template10" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('productId', params['product_id']))  # noqa: E501
        if 'template_type' in params:
            query_params.append(('templateType', params['template_type']))  # noqa: E501
        if 'staff_in_selected_office_only' in params:
            query_params.append(('staffInSelectedOfficeOnly', params['staff_in_selected_office_only']))  # noqa: E501
        if 'active_only' in params:
            query_params.append(('activeOnly', params['active_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/loans/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoansTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
