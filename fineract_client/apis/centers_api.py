# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class CentersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate2(self, body, center_id, **kwargs):  # noqa: E501
        """Activate a Center | Generate Collection Sheet | Save Collection Sheet | Close a Center | Associate Groups | Disassociate Groups  # noqa: E501

        Activate a Center:  Centers can be created in a Pending state. This API exists to enable center activation. If the center happens to be already active, this API will result in an error.  Close a Center:  Centers can be closed if they don't have any non-closed groups or saving accounts. If the Center has any active groups or savings accounts, this API will result in an error.  Associate Groups:  This API allows associating existing groups to a center. The groups are listed from the office to which the center is associated. If group(s) is already associated with a center, this API will result in an error.  Disassociate Groups:  This API allows to disassociate groups from a center.  Generate Collection Sheet:  This Api retrieves repayment details of all jlg loans under a center as on a specified meeting date.  Save Collection Sheet:  This Api allows the loan officer to perform bulk repayments of JLG loans for a center on a given meeting date.  Showing Request/Response for Close a Center  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate2(body, center_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCentersCenterIdRequest body: (required)
        :param int center_id: centerId (required)
        :param str command: command
        :return: PostCentersCenterIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate2_with_http_info(body, center_id, **kwargs)  # noqa: E501
        else:
            (data) = self.activate2_with_http_info(body, center_id, **kwargs)  # noqa: E501
            return data

    def activate2_with_http_info(self, body, center_id, **kwargs):  # noqa: E501
        """Activate a Center | Generate Collection Sheet | Save Collection Sheet | Close a Center | Associate Groups | Disassociate Groups  # noqa: E501

        Activate a Center:  Centers can be created in a Pending state. This API exists to enable center activation. If the center happens to be already active, this API will result in an error.  Close a Center:  Centers can be closed if they don't have any non-closed groups or saving accounts. If the Center has any active groups or savings accounts, this API will result in an error.  Associate Groups:  This API allows associating existing groups to a center. The groups are listed from the office to which the center is associated. If group(s) is already associated with a center, this API will result in an error.  Disassociate Groups:  This API allows to disassociate groups from a center.  Generate Collection Sheet:  This Api retrieves repayment details of all jlg loans under a center as on a specified meeting date.  Save Collection Sheet:  This Api allows the loan officer to perform bulk repayments of JLG loans for a center on a given meeting date.  Showing Request/Response for Close a Center  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate2_with_http_info(body, center_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCentersCenterIdRequest body: (required)
        :param int center_id: centerId (required)
        :param str command: command
        :return: PostCentersCenterIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'center_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `activate2`")  # noqa: E501
        # verify the required parameter 'center_id' is set
        if ('center_id' not in params or
                params['center_id'] is None):
            raise ValueError("Missing the required parameter `center_id` when calling `activate2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'center_id' in params:
            path_params['centerId'] = params['center_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/centers/{centerId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostCentersCenterIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create7(self, body, **kwargs):  # noqa: E501
        """Create a Center  # noqa: E501

        Creates a Center  Mandatory Fields: name, officeId, active, activationDate (if active=true)  Optional Fields: externalId, staffId, groupMembers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create7(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCentersRequest body: (required)
        :return: PostCentersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create7_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create7_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create7_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Center  # noqa: E501

        Creates a Center  Mandatory Fields: name, officeId, active, activationDate (if active=true)  Optional Fields: externalId, staffId, groupMembers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create7_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCentersRequest body: (required)
        :return: PostCentersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create7" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create7`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/centers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostCentersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete11(self, center_id, **kwargs):  # noqa: E501
        """Delete a Center  # noqa: E501

        A Center can be deleted if it is in pending state and has no association - groups, loans or savings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete11(center_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int center_id: centerId (required)
        :return: DeleteCentersCenterIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete11_with_http_info(center_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete11_with_http_info(center_id, **kwargs)  # noqa: E501
            return data

    def delete11_with_http_info(self, center_id, **kwargs):  # noqa: E501
        """Delete a Center  # noqa: E501

        A Center can be deleted if it is in pending state and has no association - groups, loans or savings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete11_with_http_info(center_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int center_id: centerId (required)
        :return: DeleteCentersCenterIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['center_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete11" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'center_id' is set
        if ('center_id' not in params or
                params['center_id'] is None):
            raise ValueError("Missing the required parameter `center_id` when calling `delete11`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'center_id' in params:
            path_params['centerId'] = params['center_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/centers/{centerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteCentersCenterIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_centers_template(self, **kwargs):  # noqa: E501
        """get_centers_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_centers_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id:
        :param int staff_id:
        :param str date_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_centers_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_centers_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_centers_template_with_http_info(self, **kwargs):  # noqa: E501
        """get_centers_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_centers_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id:
        :param int staff_id:
        :param str date_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office_id', 'staff_id', 'date_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_centers_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office_id' in params:
            query_params.append(('officeId', params['office_id']))  # noqa: E501
        if 'staff_id' in params:
            query_params.append(('staffId', params['staff_id']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.ms-excel'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/centers/downloadtemplate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_centers_template(self, **kwargs):  # noqa: E501
        """post_centers_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_centers_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_format:
        :param str locale:
        :param str uploaded_input_stream:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_centers_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_centers_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_centers_template_with_http_info(self, **kwargs):  # noqa: E501
        """post_centers_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_centers_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_format:
        :param str locale:
        :param str uploaded_input_stream:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_format', 'locale', 'uploaded_input_stream']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_centers_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'date_format' in params:
            form_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'locale' in params:
            form_params.append(('locale', params['locale']))  # noqa: E501
        if 'uploaded_input_stream' in params:
            local_var_files['uploadedInputStream'] = params['uploaded_input_stream']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/centers/uploadtemplate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all23(self, **kwargs):  # noqa: E501
        """List Centers  # noqa: E501

        The default implementation supports pagination and sorting with the default pagination size set to 200 records. The parameter limit with description -1 will return all entries.  Example Requests:    centers    centers?fields=name,officeName,joinedDate    centers?offset=10&limit=50    centers?orderBy=name&sortOrder=DESC  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all23(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id: officeId
        :param int staff_id: staffId
        :param str external_id: externalId
        :param str name: name
        :param str under_hierarchy: underHierarchy
        :param bool paged: paged
        :param int offset: offset
        :param int limit: limit
        :param str order_by: orderBy
        :param str sort_order: sortOrder
        :param DateParam meeting_date: meetingDate
        :param str date_format: dateFormat
        :param str locale: locale
        :return: GetCentersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all23_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all23_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all23_with_http_info(self, **kwargs):  # noqa: E501
        """List Centers  # noqa: E501

        The default implementation supports pagination and sorting with the default pagination size set to 200 records. The parameter limit with description -1 will return all entries.  Example Requests:    centers    centers?fields=name,officeName,joinedDate    centers?offset=10&limit=50    centers?orderBy=name&sortOrder=DESC  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all23_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int office_id: officeId
        :param int staff_id: staffId
        :param str external_id: externalId
        :param str name: name
        :param str under_hierarchy: underHierarchy
        :param bool paged: paged
        :param int offset: offset
        :param int limit: limit
        :param str order_by: orderBy
        :param str sort_order: sortOrder
        :param DateParam meeting_date: meetingDate
        :param str date_format: dateFormat
        :param str locale: locale
        :return: GetCentersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office_id', 'staff_id', 'external_id', 'name', 'under_hierarchy', 'paged', 'offset', 'limit', 'order_by', 'sort_order', 'meeting_date', 'date_format', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all23" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office_id' in params:
            query_params.append(('officeId', params['office_id']))  # noqa: E501
        if 'staff_id' in params:
            query_params.append(('staffId', params['staff_id']))  # noqa: E501
        if 'external_id' in params:
            query_params.append(('externalId', params['external_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'under_hierarchy' in params:
            query_params.append(('underHierarchy', params['under_hierarchy']))  # noqa: E501
        if 'paged' in params:
            query_params.append(('paged', params['paged']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'meeting_date' in params:
            query_params.append(('meetingDate', params['meeting_date']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('dateFormat', params['date_format']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/centers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCentersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_group_account(self, center_id, **kwargs):  # noqa: E501
        """Retrieve Center accounts overview  # noqa: E501

        An example of how a savings summary for a Center can be provided. This is requested in a specific use case of the reference application.  It is quite reasonable to add resources like this to simplify User Interface development.    Example Requests:    centers/9/accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_group_account(center_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int center_id: centerId (required)
        :return: GetCentersCenterIdAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_group_account_with_http_info(center_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_group_account_with_http_info(center_id, **kwargs)  # noqa: E501
            return data

    def retrieve_group_account_with_http_info(self, center_id, **kwargs):  # noqa: E501
        """Retrieve Center accounts overview  # noqa: E501

        An example of how a savings summary for a Center can be provided. This is requested in a specific use case of the reference application.  It is quite reasonable to add resources like this to simplify User Interface development.    Example Requests:    centers/9/accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_group_account_with_http_info(center_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int center_id: centerId (required)
        :return: GetCentersCenterIdAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['center_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_group_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'center_id' is set
        if ('center_id' not in params or
                params['center_id'] is None):
            raise ValueError("Missing the required parameter `center_id` when calling `retrieve_group_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'center_id' in params:
            path_params['centerId'] = params['center_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/centers/{centerId}/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCentersCenterIdAccountsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_one14(self, center_id, **kwargs):  # noqa: E501
        """Retrieve a Center  # noqa: E501

        Retrieves a Center  Example Requests:    centers/1    centers/1?associations=groupMembers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one14(center_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int center_id: centerId (required)
        :param bool staff_in_selected_office_only: staffInSelectedOfficeOnly
        :return: GetCentersCenterIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_one14_with_http_info(center_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_one14_with_http_info(center_id, **kwargs)  # noqa: E501
            return data

    def retrieve_one14_with_http_info(self, center_id, **kwargs):  # noqa: E501
        """Retrieve a Center  # noqa: E501

        Retrieves a Center  Example Requests:    centers/1    centers/1?associations=groupMembers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one14_with_http_info(center_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int center_id: centerId (required)
        :param bool staff_in_selected_office_only: staffInSelectedOfficeOnly
        :return: GetCentersCenterIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['center_id', 'staff_in_selected_office_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_one14" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'center_id' is set
        if ('center_id' not in params or
                params['center_id'] is None):
            raise ValueError("Missing the required parameter `center_id` when calling `retrieve_one14`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'center_id' in params:
            path_params['centerId'] = params['center_id']  # noqa: E501

        query_params = []
        if 'staff_in_selected_office_only' in params:
            query_params.append(('staffInSelectedOfficeOnly', params['staff_in_selected_office_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/centers/{centerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCentersCenterIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_template6(self, **kwargs):  # noqa: E501
        """Retrieve a Center Template  # noqa: E501

        Retrieves a Center Template  Example Requests:    centers/template    centers/template?officeId=2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_template6(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str command: command
        :param int office_id: officeId
        :param bool staff_in_selected_office_only: staffInSelectedOfficeOnly
        :return: GetCentersTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_template6_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_template6_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_template6_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a Center Template  # noqa: E501

        Retrieves a Center Template  Example Requests:    centers/template    centers/template?officeId=2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_template6_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str command: command
        :param int office_id: officeId
        :param bool staff_in_selected_office_only: staffInSelectedOfficeOnly
        :return: GetCentersTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command', 'office_id', 'staff_in_selected_office_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_template6" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501
        if 'office_id' in params:
            query_params.append(('officeId', params['office_id']))  # noqa: E501
        if 'staff_in_selected_office_only' in params:
            query_params.append(('staffInSelectedOfficeOnly', params['staff_in_selected_office_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/centers/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCentersTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update12(self, body, center_id, **kwargs):  # noqa: E501
        """Update a Center  # noqa: E501

        Updates a Center  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update12(body, center_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutCentersCenterIdRequest body: (required)
        :param int center_id: centerId (required)
        :return: PutCentersCenterIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update12_with_http_info(body, center_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update12_with_http_info(body, center_id, **kwargs)  # noqa: E501
            return data

    def update12_with_http_info(self, body, center_id, **kwargs):  # noqa: E501
        """Update a Center  # noqa: E501

        Updates a Center  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update12_with_http_info(body, center_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutCentersCenterIdRequest body: (required)
        :param int center_id: centerId (required)
        :return: PutCentersCenterIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'center_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update12" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update12`")  # noqa: E501
        # verify the required parameter 'center_id' is set
        if ('center_id' not in params or
                params['center_id'] is None):
            raise ValueError("Missing the required parameter `center_id` when calling `update12`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'center_id' in params:
            path_params['centerId'] = params['center_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/centers/{centerId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutCentersCenterIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
