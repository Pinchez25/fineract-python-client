# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class CodesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_code(self, body, **kwargs):  # noqa: E501
        """Create a Code  # noqa: E501

        Creates a code. Codes created through api are always 'user defined' and so system defined is marked as false.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_code(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCodesRequest body: (required)
        :return: PostCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_code_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_code_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_code_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Code  # noqa: E501

        Creates a code. Codes created through api are always 'user defined' and so system defined is marked as false.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_code_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCodesRequest body: (required)
        :return: PostCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/codes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostCodesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_code(self, code_id, **kwargs):  # noqa: E501
        """Delete a Code  # noqa: E501

        Deletes a code if it is not system defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_code(code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int code_id: codeId (required)
        :return: DeleteCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_code_with_http_info(code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_code_with_http_info(code_id, **kwargs)  # noqa: E501
            return data

    def delete_code_with_http_info(self, code_id, **kwargs):  # noqa: E501
        """Delete a Code  # noqa: E501

        Deletes a code if it is not system defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_code_with_http_info(code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int code_id: codeId (required)
        :return: DeleteCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code_id' is set
        if ('code_id' not in params or
                params['code_id'] is None):
            raise ValueError("Missing the required parameter `code_id` when calling `delete_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code_id' in params:
            path_params['codeId'] = params['code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/codes/{codeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteCodesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_code(self, code_id, **kwargs):  # noqa: E501
        """Retrieve a Code  # noqa: E501

        Returns the details of a Code.  Example Requests:  codes/1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_code(code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int code_id: codeId (required)
        :return: GetCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_code_with_http_info(code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_code_with_http_info(code_id, **kwargs)  # noqa: E501
            return data

    def retrieve_code_with_http_info(self, code_id, **kwargs):  # noqa: E501
        """Retrieve a Code  # noqa: E501

        Returns the details of a Code.  Example Requests:  codes/1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_code_with_http_info(code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int code_id: codeId (required)
        :return: GetCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code_id' is set
        if ('code_id' not in params or
                params['code_id'] is None):
            raise ValueError("Missing the required parameter `code_id` when calling `retrieve_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code_id' in params:
            path_params['codeId'] = params['code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/codes/{codeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCodesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_codes(self, **kwargs):  # noqa: E501
        """Retrieve Codes  # noqa: E501

        Returns the list of codes.  Example Requests:  codes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_codes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GetCodesResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_codes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_codes_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_codes_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve Codes  # noqa: E501

        Returns the list of codes.  Example Requests:  codes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_codes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GetCodesResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_codes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/codes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetCodesResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_code(self, body, code_id, **kwargs):  # noqa: E501
        """Update a Code  # noqa: E501

        Updates the details of a code if it is not system defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_code(body, code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutCodesRequest body: (required)
        :param int code_id: codeId (required)
        :return: PutCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_code_with_http_info(body, code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_code_with_http_info(body, code_id, **kwargs)  # noqa: E501
            return data

    def update_code_with_http_info(self, body, code_id, **kwargs):  # noqa: E501
        """Update a Code  # noqa: E501

        Updates the details of a code if it is not system defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_code_with_http_info(body, code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutCodesRequest body: (required)
        :param int code_id: codeId (required)
        :return: PutCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_code`")  # noqa: E501
        # verify the required parameter 'code_id' is set
        if ('code_id' not in params or
                params['code_id'] is None):
            raise ValueError("Missing the required parameter `code_id` when calling `update_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code_id' in params:
            path_params['codeId'] = params['code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/codes/{codeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutCodesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
