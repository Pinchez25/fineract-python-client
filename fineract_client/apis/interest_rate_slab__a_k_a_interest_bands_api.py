# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class InterestRateSlabAKAInterestBandsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create9(self, body, chart_id, **kwargs):  # noqa: E501
        """Create a Slab  # noqa: E501

        Creates a new interest rate slab for an interest rate chart. Mandatory Fields periodType, fromPeriod, annualInterestRate Optional Fields toPeriod and description Example Requests:  interestratecharts/1/chartslabs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create9(body, chart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostInterestRateChartsChartIdChartSlabsRequest body: (required)
        :param int chart_id: chartId (required)
        :return: PostInterestRateChartsChartIdChartSlabsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create9_with_http_info(body, chart_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create9_with_http_info(body, chart_id, **kwargs)  # noqa: E501
            return data

    def create9_with_http_info(self, body, chart_id, **kwargs):  # noqa: E501
        """Create a Slab  # noqa: E501

        Creates a new interest rate slab for an interest rate chart. Mandatory Fields periodType, fromPeriod, annualInterestRate Optional Fields toPeriod and description Example Requests:  interestratecharts/1/chartslabs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create9_with_http_info(body, chart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostInterestRateChartsChartIdChartSlabsRequest body: (required)
        :param int chart_id: chartId (required)
        :return: PostInterestRateChartsChartIdChartSlabsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'chart_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create9" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create9`")  # noqa: E501
        # verify the required parameter 'chart_id' is set
        if ('chart_id' not in params or
                params['chart_id'] is None):
            raise ValueError("Missing the required parameter `chart_id` when calling `create9`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chart_id' in params:
            path_params['chartId'] = params['chart_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interestratecharts/{chartId}/chartslabs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostInterestRateChartsChartIdChartSlabsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete13(self, chart_id, chart_slab_id, **kwargs):  # noqa: E501
        """Delete a Slab  # noqa: E501

        Delete a Slab from a chart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete13(chart_id, chart_slab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int chart_id: chartId (required)
        :param int chart_slab_id: chartSlabId (required)
        :return: DeleteInterestRateChartsChartIdChartSlabsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete13_with_http_info(chart_id, chart_slab_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete13_with_http_info(chart_id, chart_slab_id, **kwargs)  # noqa: E501
            return data

    def delete13_with_http_info(self, chart_id, chart_slab_id, **kwargs):  # noqa: E501
        """Delete a Slab  # noqa: E501

        Delete a Slab from a chart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete13_with_http_info(chart_id, chart_slab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int chart_id: chartId (required)
        :param int chart_slab_id: chartSlabId (required)
        :return: DeleteInterestRateChartsChartIdChartSlabsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chart_id', 'chart_slab_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete13" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chart_id' is set
        if ('chart_id' not in params or
                params['chart_id'] is None):
            raise ValueError("Missing the required parameter `chart_id` when calling `delete13`")  # noqa: E501
        # verify the required parameter 'chart_slab_id' is set
        if ('chart_slab_id' not in params or
                params['chart_slab_id'] is None):
            raise ValueError("Missing the required parameter `chart_slab_id` when calling `delete13`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chart_id' in params:
            path_params['chartId'] = params['chart_id']  # noqa: E501
        if 'chart_slab_id' in params:
            path_params['chartSlabId'] = params['chart_slab_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interestratecharts/{chartId}/chartslabs/{chartSlabId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteInterestRateChartsChartIdChartSlabsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all25(self, chart_id, **kwargs):  # noqa: E501
        """Retrieve all Slabs  # noqa: E501

        Retrieve list of slabs associated with a chart  Example Requests:  interestratecharts/1/chartslabs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all25(chart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int chart_id: chartId (required)
        :return: list[GetInterestRateChartsChartIdChartSlabsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all25_with_http_info(chart_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all25_with_http_info(chart_id, **kwargs)  # noqa: E501
            return data

    def retrieve_all25_with_http_info(self, chart_id, **kwargs):  # noqa: E501
        """Retrieve all Slabs  # noqa: E501

        Retrieve list of slabs associated with a chart  Example Requests:  interestratecharts/1/chartslabs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all25_with_http_info(chart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int chart_id: chartId (required)
        :return: list[GetInterestRateChartsChartIdChartSlabsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chart_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all25" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chart_id' is set
        if ('chart_id' not in params or
                params['chart_id'] is None):
            raise ValueError("Missing the required parameter `chart_id` when calling `retrieve_all25`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chart_id' in params:
            path_params['chartId'] = params['chart_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interestratecharts/{chartId}/chartslabs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetInterestRateChartsChartIdChartSlabsResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_one16(self, chart_id, chart_slab_id, **kwargs):  # noqa: E501
        """Retrieve a Slab  # noqa: E501

        Retrieve a slab associated with an Interest rate chart  Example Requests:  interestratecharts/1/chartslabs/1   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one16(chart_id, chart_slab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int chart_id: chartId (required)
        :param int chart_slab_id: chartSlabId (required)
        :return: GetInterestRateChartsChartIdChartSlabsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_one16_with_http_info(chart_id, chart_slab_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_one16_with_http_info(chart_id, chart_slab_id, **kwargs)  # noqa: E501
            return data

    def retrieve_one16_with_http_info(self, chart_id, chart_slab_id, **kwargs):  # noqa: E501
        """Retrieve a Slab  # noqa: E501

        Retrieve a slab associated with an Interest rate chart  Example Requests:  interestratecharts/1/chartslabs/1   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_one16_with_http_info(chart_id, chart_slab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int chart_id: chartId (required)
        :param int chart_slab_id: chartSlabId (required)
        :return: GetInterestRateChartsChartIdChartSlabsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chart_id', 'chart_slab_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_one16" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chart_id' is set
        if ('chart_id' not in params or
                params['chart_id'] is None):
            raise ValueError("Missing the required parameter `chart_id` when calling `retrieve_one16`")  # noqa: E501
        # verify the required parameter 'chart_slab_id' is set
        if ('chart_slab_id' not in params or
                params['chart_slab_id'] is None):
            raise ValueError("Missing the required parameter `chart_slab_id` when calling `retrieve_one16`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chart_id' in params:
            path_params['chartId'] = params['chart_id']  # noqa: E501
        if 'chart_slab_id' in params:
            path_params['chartSlabId'] = params['chart_slab_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interestratecharts/{chartId}/chartslabs/{chartSlabId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInterestRateChartsChartIdChartSlabsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template8(self, chart_id, **kwargs):  # noqa: E501
        """template8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template8(chart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int chart_id: chartId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.template8_with_http_info(chart_id, **kwargs)  # noqa: E501
        else:
            (data) = self.template8_with_http_info(chart_id, **kwargs)  # noqa: E501
            return data

    def template8_with_http_info(self, chart_id, **kwargs):  # noqa: E501
        """template8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.template8_with_http_info(chart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int chart_id: chartId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chart_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template8" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chart_id' is set
        if ('chart_id' not in params or
                params['chart_id'] is None):
            raise ValueError("Missing the required parameter `chart_id` when calling `template8`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chart_id' in params:
            path_params['chartId'] = params['chart_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interestratecharts/{chartId}/chartslabs/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update14(self, body, chart_id, chart_slab_id, **kwargs):  # noqa: E501
        """Update a Slab  # noqa: E501

        It updates the Slab from chart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update14(body, chart_id, chart_slab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest body: (required)
        :param int chart_id: chartId (required)
        :param int chart_slab_id: chartSlabId (required)
        :return: PutInterestRateChartsChartIdChartSlabsChartSlabIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update14_with_http_info(body, chart_id, chart_slab_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update14_with_http_info(body, chart_id, chart_slab_id, **kwargs)  # noqa: E501
            return data

    def update14_with_http_info(self, body, chart_id, chart_slab_id, **kwargs):  # noqa: E501
        """Update a Slab  # noqa: E501

        It updates the Slab from chart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update14_with_http_info(body, chart_id, chart_slab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutInterestRateChartsChartIdChartSlabsChartSlabIdRequest body: (required)
        :param int chart_id: chartId (required)
        :param int chart_slab_id: chartSlabId (required)
        :return: PutInterestRateChartsChartIdChartSlabsChartSlabIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'chart_id', 'chart_slab_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update14" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update14`")  # noqa: E501
        # verify the required parameter 'chart_id' is set
        if ('chart_id' not in params or
                params['chart_id'] is None):
            raise ValueError("Missing the required parameter `chart_id` when calling `update14`")  # noqa: E501
        # verify the required parameter 'chart_slab_id' is set
        if ('chart_slab_id' not in params or
                params['chart_slab_id'] is None):
            raise ValueError("Missing the required parameter `chart_slab_id` when calling `update14`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chart_id' in params:
            path_params['chartId'] = params['chart_id']  # noqa: E501
        if 'chart_slab_id' in params:
            path_params['chartSlabId'] = params['chart_slab_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interestratecharts/{chartId}/chartslabs/{chartSlabId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutInterestRateChartsChartIdChartSlabsChartSlabIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
