# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class InterOperationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_quote(self, body, **kwargs):  # noqa: E501
        """Calculate Interoperation Quote  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quote(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropQuoteRequestData body: (required)
        :return: InteropQuoteResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_quote_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_quote_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_quote_with_http_info(self, body, **kwargs):  # noqa: E501
        """Calculate Interoperation Quote  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quote_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropQuoteRequestData body: (required)
        :return: InteropQuoteResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_quote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_quote`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/quotes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropQuoteResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_transaction_request(self, body, **kwargs):  # noqa: E501
        """Allow Interoperation Transaction Request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transaction_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropTransactionRequestData body: (required)
        :return: InteropTransactionRequestResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_transaction_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_transaction_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_transaction_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Allow Interoperation Transaction Request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transaction_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropTransactionRequestData body: (required)
        :return: InteropTransactionRequestResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_transaction_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_transaction_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropTransactionRequestResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_account_identifier(self, body, id_type, id_value, **kwargs):  # noqa: E501
        """Allow Interoperation Identifier registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_account_identifier(body, id_type, id_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropIdentifierRequestData body: (required)
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_account_identifier_with_http_info(body, id_type, id_value, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_account_identifier_with_http_info(body, id_type, id_value, **kwargs)  # noqa: E501
            return data

    def delete_account_identifier_with_http_info(self, body, id_type, id_value, **kwargs):  # noqa: E501
        """Allow Interoperation Identifier registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_account_identifier_with_http_info(body, id_type, id_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropIdentifierRequestData body: (required)
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id_type', 'id_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_account_identifier`")  # noqa: E501
        # verify the required parameter 'id_type' is set
        if ('id_type' not in params or
                params['id_type'] is None):
            raise ValueError("Missing the required parameter `id_type` when calling `delete_account_identifier`")  # noqa: E501
        # verify the required parameter 'id_value' is set
        if ('id_value' not in params or
                params['id_value'] is None):
            raise ValueError("Missing the required parameter `id_value` when calling `delete_account_identifier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_type' in params:
            path_params['idType'] = params['id_type']  # noqa: E501
        if 'id_value' in params:
            path_params['idValue'] = params['id_value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/parties/{idType}/{idValue}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropIdentifierAccountResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_account_identifier1(self, body, id_type, id_value, sub_id_or_type, **kwargs):  # noqa: E501
        """Allow Interoperation Identifier registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_account_identifier1(body, id_type, id_value, sub_id_or_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropIdentifierRequestData body: (required)
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :param str sub_id_or_type: subIdOrType (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_account_identifier1_with_http_info(body, id_type, id_value, sub_id_or_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_account_identifier1_with_http_info(body, id_type, id_value, sub_id_or_type, **kwargs)  # noqa: E501
            return data

    def delete_account_identifier1_with_http_info(self, body, id_type, id_value, sub_id_or_type, **kwargs):  # noqa: E501
        """Allow Interoperation Identifier registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_account_identifier1_with_http_info(body, id_type, id_value, sub_id_or_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropIdentifierRequestData body: (required)
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :param str sub_id_or_type: subIdOrType (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id_type', 'id_value', 'sub_id_or_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_identifier1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_account_identifier1`")  # noqa: E501
        # verify the required parameter 'id_type' is set
        if ('id_type' not in params or
                params['id_type'] is None):
            raise ValueError("Missing the required parameter `id_type` when calling `delete_account_identifier1`")  # noqa: E501
        # verify the required parameter 'id_value' is set
        if ('id_value' not in params or
                params['id_value'] is None):
            raise ValueError("Missing the required parameter `id_value` when calling `delete_account_identifier1`")  # noqa: E501
        # verify the required parameter 'sub_id_or_type' is set
        if ('sub_id_or_type' not in params or
                params['sub_id_or_type'] is None):
            raise ValueError("Missing the required parameter `sub_id_or_type` when calling `delete_account_identifier1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_type' in params:
            path_params['idType'] = params['id_type']  # noqa: E501
        if 'id_value' in params:
            path_params['idValue'] = params['id_value']  # noqa: E501
        if 'sub_id_or_type' in params:
            path_params['subIdOrType'] = params['sub_id_or_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/parties/{idType}/{idValue}/{subIdOrType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropIdentifierAccountResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disburse_loan(self, account_id, **kwargs):  # noqa: E501
        """Disburse Loan by Account Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disburse_loan(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disburse_loan_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.disburse_loan_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def disburse_loan_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Disburse Loan by Account Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disburse_loan_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disburse_loan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `disburse_loan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/transactions/{accountId}/disburse', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_by_identifier(self, id_type, id_value, **kwargs):  # noqa: E501
        """Query Interoperation Account by secondary identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_by_identifier(id_type, id_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_by_identifier_with_http_info(id_type, id_value, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_by_identifier_with_http_info(id_type, id_value, **kwargs)  # noqa: E501
            return data

    def get_account_by_identifier_with_http_info(self, id_type, id_value, **kwargs):  # noqa: E501
        """Query Interoperation Account by secondary identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_by_identifier_with_http_info(id_type, id_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_type', 'id_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_by_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_type' is set
        if ('id_type' not in params or
                params['id_type'] is None):
            raise ValueError("Missing the required parameter `id_type` when calling `get_account_by_identifier`")  # noqa: E501
        # verify the required parameter 'id_value' is set
        if ('id_value' not in params or
                params['id_value'] is None):
            raise ValueError("Missing the required parameter `id_value` when calling `get_account_by_identifier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_type' in params:
            path_params['idType'] = params['id_type']  # noqa: E501
        if 'id_value' in params:
            path_params['idValue'] = params['id_value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/parties/{idType}/{idValue}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropIdentifierAccountResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_by_identifier1(self, id_type, id_value, sub_id_or_type, **kwargs):  # noqa: E501
        """Query Interoperation Account by secondary identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_by_identifier1(id_type, id_value, sub_id_or_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :param str sub_id_or_type: subIdOrType (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_by_identifier1_with_http_info(id_type, id_value, sub_id_or_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_by_identifier1_with_http_info(id_type, id_value, sub_id_or_type, **kwargs)  # noqa: E501
            return data

    def get_account_by_identifier1_with_http_info(self, id_type, id_value, sub_id_or_type, **kwargs):  # noqa: E501
        """Query Interoperation Account by secondary identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_by_identifier1_with_http_info(id_type, id_value, sub_id_or_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :param str sub_id_or_type: subIdOrType (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_type', 'id_value', 'sub_id_or_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_by_identifier1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_type' is set
        if ('id_type' not in params or
                params['id_type'] is None):
            raise ValueError("Missing the required parameter `id_type` when calling `get_account_by_identifier1`")  # noqa: E501
        # verify the required parameter 'id_value' is set
        if ('id_value' not in params or
                params['id_value'] is None):
            raise ValueError("Missing the required parameter `id_value` when calling `get_account_by_identifier1`")  # noqa: E501
        # verify the required parameter 'sub_id_or_type' is set
        if ('sub_id_or_type' not in params or
                params['sub_id_or_type'] is None):
            raise ValueError("Missing the required parameter `sub_id_or_type` when calling `get_account_by_identifier1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_type' in params:
            path_params['idType'] = params['id_type']  # noqa: E501
        if 'id_value' in params:
            path_params['idValue'] = params['id_value']  # noqa: E501
        if 'sub_id_or_type' in params:
            path_params['subIdOrType'] = params['sub_id_or_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/parties/{idType}/{idValue}/{subIdOrType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropIdentifierAccountResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_details(self, account_id, **kwargs):  # noqa: E501
        """Query Interoperation Account details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_details(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: InteropAccountData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_details_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_details_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_account_details_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Query Interoperation Account details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_details_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: InteropAccountData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/accounts/{accountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropAccountData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_identifiers(self, account_id, **kwargs):  # noqa: E501
        """Query Interoperation secondary identifiers by Account Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_identifiers(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: InteropIdentifiersResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_identifiers_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_identifiers_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_account_identifiers_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Query Interoperation secondary identifiers by Account Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_identifiers_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: InteropIdentifiersResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_identifiers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_identifiers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/accounts/{accountId}/identifiers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropIdentifiersResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_transactions(self, account_id, **kwargs):  # noqa: E501
        """Query transactions by Account Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_transactions(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :param bool debit: debit
        :param bool credit: credit
        :param str from_booking_date_time: fromBookingDateTime
        :param str to_booking_date_time: toBookingDateTime
        :return: InteropTransactionsData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_transactions_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_transactions_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_account_transactions_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Query transactions by Account Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_transactions_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :param bool debit: debit
        :param bool credit: credit
        :param str from_booking_date_time: fromBookingDateTime
        :param str to_booking_date_time: toBookingDateTime
        :return: InteropTransactionsData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'debit', 'credit', 'from_booking_date_time', 'to_booking_date_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'debit' in params:
            query_params.append(('debit', params['debit']))  # noqa: E501
        if 'credit' in params:
            query_params.append(('credit', params['credit']))  # noqa: E501
        if 'from_booking_date_time' in params:
            query_params.append(('fromBookingDateTime', params['from_booking_date_time']))  # noqa: E501
        if 'to_booking_date_time' in params:
            query_params.append(('toBookingDateTime', params['to_booking_date_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/accounts/{accountId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropTransactionsData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_kyc(self, account_id, **kwargs):  # noqa: E501
        """Query KYC by Account Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_kyc(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: InteropKycResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_kyc_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_kyc_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_client_kyc_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Query KYC by Account Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_kyc_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: InteropKycResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_kyc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_client_kyc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/accounts/{accountId}/kyc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropKycResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_quote(self, transaction_code, quote_code, **kwargs):  # noqa: E501
        """Query Interoperation Quote  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quote(transaction_code, quote_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_code: transactionCode (required)
        :param str quote_code: quoteCode (required)
        :return: InteropQuoteResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_quote_with_http_info(transaction_code, quote_code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_quote_with_http_info(transaction_code, quote_code, **kwargs)  # noqa: E501
            return data

    def get_quote_with_http_info(self, transaction_code, quote_code, **kwargs):  # noqa: E501
        """Query Interoperation Quote  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quote_with_http_info(transaction_code, quote_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_code: transactionCode (required)
        :param str quote_code: quoteCode (required)
        :return: InteropQuoteResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_code', 'quote_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_code' is set
        if ('transaction_code' not in params or
                params['transaction_code'] is None):
            raise ValueError("Missing the required parameter `transaction_code` when calling `get_quote`")  # noqa: E501
        # verify the required parameter 'quote_code' is set
        if ('quote_code' not in params or
                params['quote_code'] is None):
            raise ValueError("Missing the required parameter `quote_code` when calling `get_quote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_code' in params:
            path_params['transactionCode'] = params['transaction_code']  # noqa: E501
        if 'quote_code' in params:
            path_params['quoteCode'] = params['quote_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/transactions/{transactionCode}/quotes/{quoteCode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropQuoteResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_request(self, transaction_code, request_code, **kwargs):  # noqa: E501
        """Query Interoperation Transaction Request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_request(transaction_code, request_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_code: transactionCode (required)
        :param str request_code: requestCode (required)
        :return: InteropTransactionRequestResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transaction_request_with_http_info(transaction_code, request_code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_request_with_http_info(transaction_code, request_code, **kwargs)  # noqa: E501
            return data

    def get_transaction_request_with_http_info(self, transaction_code, request_code, **kwargs):  # noqa: E501
        """Query Interoperation Transaction Request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_request_with_http_info(transaction_code, request_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_code: transactionCode (required)
        :param str request_code: requestCode (required)
        :return: InteropTransactionRequestResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_code', 'request_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_code' is set
        if ('transaction_code' not in params or
                params['transaction_code'] is None):
            raise ValueError("Missing the required parameter `transaction_code` when calling `get_transaction_request`")  # noqa: E501
        # verify the required parameter 'request_code' is set
        if ('request_code' not in params or
                params['request_code'] is None):
            raise ValueError("Missing the required parameter `request_code` when calling `get_transaction_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_code' in params:
            path_params['transactionCode'] = params['transaction_code']  # noqa: E501
        if 'request_code' in params:
            path_params['requestCode'] = params['request_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/transactions/{transactionCode}/requests/{requestCode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropTransactionRequestResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transfer(self, transaction_code, transfer_code, **kwargs):  # noqa: E501
        """Query Interoperation Transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transfer(transaction_code, transfer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_code: transactionCode (required)
        :param str transfer_code: transferCode (required)
        :return: InteropTransferResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transfer_with_http_info(transaction_code, transfer_code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transfer_with_http_info(transaction_code, transfer_code, **kwargs)  # noqa: E501
            return data

    def get_transfer_with_http_info(self, transaction_code, transfer_code, **kwargs):  # noqa: E501
        """Query Interoperation Transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transfer_with_http_info(transaction_code, transfer_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_code: transactionCode (required)
        :param str transfer_code: transferCode (required)
        :return: InteropTransferResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_code', 'transfer_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_code' is set
        if ('transaction_code' not in params or
                params['transaction_code'] is None):
            raise ValueError("Missing the required parameter `transaction_code` when calling `get_transfer`")  # noqa: E501
        # verify the required parameter 'transfer_code' is set
        if ('transfer_code' not in params or
                params['transfer_code'] is None):
            raise ValueError("Missing the required parameter `transfer_code` when calling `get_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_code' in params:
            path_params['transactionCode'] = params['transaction_code']  # noqa: E501
        if 'transfer_code' in params:
            path_params['transferCode'] = params['transfer_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/transactions/{transactionCode}/transfers/{transferCode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropTransferResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def health(self, **kwargs):  # noqa: E501
        """Query Interoperation Health Request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.health(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.health_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.health_with_http_info(**kwargs)  # noqa: E501
            return data

    def health_with_http_info(self, **kwargs):  # noqa: E501
        """Query Interoperation Health Request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.health_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method health" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def loan_repayment(self, account_id, **kwargs):  # noqa: E501
        """Disburse Loan by Account Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.loan_repayment(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.loan_repayment_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.loan_repayment_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def loan_repayment_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Disburse Loan by Account Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.loan_repayment_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loan_repayment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `loan_repayment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/transactions/{accountId}/loanrepayment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_transfer(self, body, **kwargs):  # noqa: E501
        """Prepare Interoperation Transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_transfer(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropTransferRequestData body: (required)
        :param str action: action
        :return: InteropTransferResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.perform_transfer_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_transfer_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def perform_transfer_with_http_info(self, body, **kwargs):  # noqa: E501
        """Prepare Interoperation Transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_transfer_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropTransferRequestData body: (required)
        :param str action: action
        :return: InteropTransferResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `perform_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropTransferResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_account_identifier(self, body, id_type, id_value, **kwargs):  # noqa: E501
        """Interoperation Identifier registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_account_identifier(body, id_type, id_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropIdentifierRequestData body: (required)
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_account_identifier_with_http_info(body, id_type, id_value, **kwargs)  # noqa: E501
        else:
            (data) = self.register_account_identifier_with_http_info(body, id_type, id_value, **kwargs)  # noqa: E501
            return data

    def register_account_identifier_with_http_info(self, body, id_type, id_value, **kwargs):  # noqa: E501
        """Interoperation Identifier registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_account_identifier_with_http_info(body, id_type, id_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropIdentifierRequestData body: (required)
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id_type', 'id_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_account_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_account_identifier`")  # noqa: E501
        # verify the required parameter 'id_type' is set
        if ('id_type' not in params or
                params['id_type'] is None):
            raise ValueError("Missing the required parameter `id_type` when calling `register_account_identifier`")  # noqa: E501
        # verify the required parameter 'id_value' is set
        if ('id_value' not in params or
                params['id_value'] is None):
            raise ValueError("Missing the required parameter `id_value` when calling `register_account_identifier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_type' in params:
            path_params['idType'] = params['id_type']  # noqa: E501
        if 'id_value' in params:
            path_params['idValue'] = params['id_value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/parties/{idType}/{idValue}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropIdentifierAccountResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_account_identifier1(self, body, id_type, id_value, sub_id_or_type, **kwargs):  # noqa: E501
        """Interoperation Identifier registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_account_identifier1(body, id_type, id_value, sub_id_or_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropIdentifierRequestData body: (required)
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :param str sub_id_or_type: subIdOrType (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_account_identifier1_with_http_info(body, id_type, id_value, sub_id_or_type, **kwargs)  # noqa: E501
        else:
            (data) = self.register_account_identifier1_with_http_info(body, id_type, id_value, sub_id_or_type, **kwargs)  # noqa: E501
            return data

    def register_account_identifier1_with_http_info(self, body, id_type, id_value, sub_id_or_type, **kwargs):  # noqa: E501
        """Interoperation Identifier registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_account_identifier1_with_http_info(body, id_type, id_value, sub_id_or_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InteropIdentifierRequestData body: (required)
        :param str id_type: idType (required)
        :param str id_value: idValue (required)
        :param str sub_id_or_type: subIdOrType (required)
        :return: InteropIdentifierAccountResponseData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id_type', 'id_value', 'sub_id_or_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_account_identifier1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_account_identifier1`")  # noqa: E501
        # verify the required parameter 'id_type' is set
        if ('id_type' not in params or
                params['id_type'] is None):
            raise ValueError("Missing the required parameter `id_type` when calling `register_account_identifier1`")  # noqa: E501
        # verify the required parameter 'id_value' is set
        if ('id_value' not in params or
                params['id_value'] is None):
            raise ValueError("Missing the required parameter `id_value` when calling `register_account_identifier1`")  # noqa: E501
        # verify the required parameter 'sub_id_or_type' is set
        if ('sub_id_or_type' not in params or
                params['sub_id_or_type'] is None):
            raise ValueError("Missing the required parameter `sub_id_or_type` when calling `register_account_identifier1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_type' in params:
            path_params['idType'] = params['id_type']  # noqa: E501
        if 'id_value' in params:
            path_params['idValue'] = params['id_value']  # noqa: E501
        if 'sub_id_or_type' in params:
            path_params['subIdOrType'] = params['sub_id_or_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/interoperation/parties/{idType}/{idValue}/{subIdOrType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InteropIdentifierAccountResponseData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
