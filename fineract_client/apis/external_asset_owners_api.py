# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fineract_client.api_client import ApiClient


class ExternalAssetOwnersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_active_transfer(self, **kwargs):  # noqa: E501
        """Retrieve Active Asset Owner Transfer  # noqa: E501

        Retrieve Active External Asset Owner Transfer by transferExternalId, loanId or loanExternalId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_transfer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transfer_external_id: transferExternalId
        :param int loan_id: loanId
        :param str loan_external_id: loanExternalId
        :return: ExternalTransferData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_active_transfer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_active_transfer_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_active_transfer_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve Active Asset Owner Transfer  # noqa: E501

        Retrieve Active External Asset Owner Transfer by transferExternalId, loanId or loanExternalId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_transfer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transfer_external_id: transferExternalId
        :param int loan_id: loanId
        :param str loan_external_id: loanExternalId
        :return: ExternalTransferData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transfer_external_id', 'loan_id', 'loan_external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_active_transfer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'transfer_external_id' in params:
            query_params.append(('transferExternalId', params['transfer_external_id']))  # noqa: E501
        if 'loan_id' in params:
            query_params.append(('loanId', params['loan_id']))  # noqa: E501
        if 'loan_external_id' in params:
            query_params.append(('loanExternalId', params['loan_external_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/external-asset-owners/transfers/active-transfer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExternalTransferData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_journal_entries_of_owner(self, owner_external_id, **kwargs):  # noqa: E501
        """Retrieve Journal Entries of Owner  # noqa: E501

        Retrieve Journal entries of owner by owner externalId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journal_entries_of_owner(owner_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_external_id: ownerExternalId (required)
        :param int offset: offset
        :param int limit: limit
        :return: ExternalOwnerJournalEntryData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_journal_entries_of_owner_with_http_info(owner_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_journal_entries_of_owner_with_http_info(owner_external_id, **kwargs)  # noqa: E501
            return data

    def get_journal_entries_of_owner_with_http_info(self, owner_external_id, **kwargs):  # noqa: E501
        """Retrieve Journal Entries of Owner  # noqa: E501

        Retrieve Journal entries of owner by owner externalId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journal_entries_of_owner_with_http_info(owner_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_external_id: ownerExternalId (required)
        :param int offset: offset
        :param int limit: limit
        :return: ExternalOwnerJournalEntryData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_external_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_journal_entries_of_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_external_id' is set
        if ('owner_external_id' not in params or
                params['owner_external_id'] is None):
            raise ValueError("Missing the required parameter `owner_external_id` when calling `get_journal_entries_of_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_external_id' in params:
            path_params['ownerExternalId'] = params['owner_external_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/external-asset-owners/owners/external-id/{ownerExternalId}/journal-entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExternalOwnerJournalEntryData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_journal_entries_of_transfer(self, transfer_id, **kwargs):  # noqa: E501
        """Retrieve Journal Entries of Transfer  # noqa: E501

        Retrieve Journal entries of transfer by transferId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journal_entries_of_transfer(transfer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int transfer_id: transferId (required)
        :param int offset: offset
        :param int limit: limit
        :return: ExternalOwnerTransferJournalEntryData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_journal_entries_of_transfer_with_http_info(transfer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_journal_entries_of_transfer_with_http_info(transfer_id, **kwargs)  # noqa: E501
            return data

    def get_journal_entries_of_transfer_with_http_info(self, transfer_id, **kwargs):  # noqa: E501
        """Retrieve Journal Entries of Transfer  # noqa: E501

        Retrieve Journal entries of transfer by transferId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journal_entries_of_transfer_with_http_info(transfer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int transfer_id: transferId (required)
        :param int offset: offset
        :param int limit: limit
        :return: ExternalOwnerTransferJournalEntryData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transfer_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_journal_entries_of_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transfer_id' is set
        if ('transfer_id' not in params or
                params['transfer_id'] is None):
            raise ValueError("Missing the required parameter `transfer_id` when calling `get_journal_entries_of_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transfer_id' in params:
            path_params['transferId'] = params['transfer_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/external-asset-owners/transfers/{transferId}/journal-entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExternalOwnerTransferJournalEntryData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transfers(self, **kwargs):  # noqa: E501
        """Retrieve External Asset Owner Transfers  # noqa: E501

        Retrieve External Asset Owner Transfer items by transferExternalId, loanId or loanExternalId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transfers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transfer_external_id: transferExternalId
        :param int loan_id: loanId
        :param str loan_external_id: loanExternalId
        :param int offset: offset
        :param int limit: limit
        :return: PageExternalTransferData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transfers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_transfers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_transfers_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve External Asset Owner Transfers  # noqa: E501

        Retrieve External Asset Owner Transfer items by transferExternalId, loanId or loanExternalId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transfers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transfer_external_id: transferExternalId
        :param int loan_id: loanId
        :param str loan_external_id: loanExternalId
        :param int offset: offset
        :param int limit: limit
        :return: PageExternalTransferData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transfer_external_id', 'loan_id', 'loan_external_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transfers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'transfer_external_id' in params:
            query_params.append(('transferExternalId', params['transfer_external_id']))  # noqa: E501
        if 'loan_id' in params:
            query_params.append(('loanId', params['loan_id']))  # noqa: E501
        if 'loan_external_id' in params:
            query_params.append(('loanExternalId', params['loan_external_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/external-asset-owners/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageExternalTransferData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_investor_data(self, **kwargs):  # noqa: E501
        """Search External Asset Owner Transfers by text or date ranges to settlement or effective dates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_investor_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PagedRequestExternalAssetOwnerSearchRequest body:
        :return: PageExternalTransferData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_investor_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_investor_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_investor_data_with_http_info(self, **kwargs):  # noqa: E501
        """Search External Asset Owner Transfers by text or date ranges to settlement or effective dates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_investor_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PagedRequestExternalAssetOwnerSearchRequest body:
        :return: PageExternalTransferData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_investor_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/external-asset-owners/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageExternalTransferData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_request_with_id(self, id, **kwargs):  # noqa: E501
        """transfer_request_with_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_request_with_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str command: command
        :return: PostInitiateTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transfer_request_with_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_request_with_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def transfer_request_with_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """transfer_request_with_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_request_with_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str command: command
        :return: PostInitiateTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_request_with_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `transfer_request_with_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/external-asset-owners/transfers/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostInitiateTransferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_request_with_id1(self, external_id, **kwargs):  # noqa: E501
        """transfer_request_with_id1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_request_with_id1(external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: (required)
        :param str command: command
        :return: PostInitiateTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transfer_request_with_id1_with_http_info(external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_request_with_id1_with_http_info(external_id, **kwargs)  # noqa: E501
            return data

    def transfer_request_with_id1_with_http_info(self, external_id, **kwargs):  # noqa: E501
        """transfer_request_with_id1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_request_with_id1_with_http_info(external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: (required)
        :param str command: command
        :return: PostInitiateTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_request_with_id1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_id' is set
        if ('external_id' not in params or
                params['external_id'] is None):
            raise ValueError("Missing the required parameter `external_id` when calling `transfer_request_with_id1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'external_id' in params:
            path_params['externalId'] = params['external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/external-asset-owners/transfers/external-id/{externalId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostInitiateTransferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_request_with_loan_external_id(self, body, loan_external_id, **kwargs):  # noqa: E501
        """transfer_request_with_loan_external_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_request_with_loan_external_id(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostInitiateTransferRequest body: (required)
        :param str loan_external_id: (required)
        :param str command: command
        :return: PostInitiateTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transfer_request_with_loan_external_id_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_request_with_loan_external_id_with_http_info(body, loan_external_id, **kwargs)  # noqa: E501
            return data

    def transfer_request_with_loan_external_id_with_http_info(self, body, loan_external_id, **kwargs):  # noqa: E501
        """transfer_request_with_loan_external_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_request_with_loan_external_id_with_http_info(body, loan_external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostInitiateTransferRequest body: (required)
        :param str loan_external_id: (required)
        :param str command: command
        :return: PostInitiateTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_external_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_request_with_loan_external_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `transfer_request_with_loan_external_id`")  # noqa: E501
        # verify the required parameter 'loan_external_id' is set
        if ('loan_external_id' not in params or
                params['loan_external_id'] is None):
            raise ValueError("Missing the required parameter `loan_external_id` when calling `transfer_request_with_loan_external_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_external_id' in params:
            path_params['loanExternalId'] = params['loan_external_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/external-asset-owners/transfers/loans/external-id/{loanExternalId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostInitiateTransferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_request_with_loan_id(self, body, loan_id, **kwargs):  # noqa: E501
        """transfer_request_with_loan_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_request_with_loan_id(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostInitiateTransferRequest body: (required)
        :param int loan_id: (required)
        :param str command: command
        :return: PostInitiateTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transfer_request_with_loan_id_with_http_info(body, loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_request_with_loan_id_with_http_info(body, loan_id, **kwargs)  # noqa: E501
            return data

    def transfer_request_with_loan_id_with_http_info(self, body, loan_id, **kwargs):  # noqa: E501
        """transfer_request_with_loan_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_request_with_loan_id_with_http_info(body, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostInitiateTransferRequest body: (required)
        :param int loan_id: (required)
        :param str command: command
        :return: PostInitiateTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'loan_id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_request_with_loan_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `transfer_request_with_loan_id`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `transfer_request_with_loan_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tenantid']  # noqa: E501

        return self.api_client.call_api(
            '/v1/external-asset-owners/transfers/loans/{loanId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostInitiateTransferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
