# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.calendar_data import CalendarData

class TestCalendarData(unittest.TestCase):
    """CalendarData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CalendarData:
        """Test CalendarData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CalendarData`
        """
        model = CalendarData()
        if include_optional:
            return CalendarData(
                calendar_instance_id = 56,
                calendar_type_options = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                center_id = '',
                created_by_user_id = 56,
                created_by_username = '',
                created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                date_format = '',
                description = '',
                duration = 56,
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                entity_id = 56,
                entity_type = fineract_client.models.enum_option_data.EnumOptionData(
                    code = '', 
                    id = 56, 
                    value = '', ),
                entity_type_options = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                first_reminder = 56,
                frequency = fineract_client.models.enum_option_data.EnumOptionData(
                    code = '', 
                    id = 56, 
                    value = '', ),
                frequency_nth_day_type_options = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                frequency_options = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                human_readable = '',
                id = 56,
                interval = 56,
                last_updated_by_user_id = 56,
                last_updated_by_username = '',
                last_updated_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                locale = '',
                location = '',
                meeting_time = fineract_client.models.local_time.LocalTime(
                    hour = 56, 
                    minute = 56, 
                    nano = 56, 
                    second = 56, ),
                next_ten_recurring_dates = [
                    datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
                    ],
                recent_eligible_meeting_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                recurrence = '',
                recurring_dates = [
                    datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
                    ],
                remind_by = fineract_client.models.enum_option_data.EnumOptionData(
                    code = '', 
                    id = 56, 
                    value = '', ),
                remind_by_options = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                repeating = True,
                repeats_on_day = fineract_client.models.enum_option_data.EnumOptionData(
                    code = '', 
                    id = 56, 
                    value = '', ),
                repeats_on_day_of_month = 56,
                repeats_on_day_options = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                repeats_on_nth_day_of_month = fineract_client.models.enum_option_data.EnumOptionData(
                    code = '', 
                    id = 56, 
                    value = '', ),
                row_index = 56,
                second_reminder = 56,
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                title = '',
                type = fineract_client.models.enum_option_data.EnumOptionData(
                    code = '', 
                    id = 56, 
                    value = '', ),
                type_id = ''
            )
        else:
            return CalendarData(
        )
        """

    def testCalendarData(self):
        """Test CalendarData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
