# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.accounting_rule_data import AccountingRuleData

class TestAccountingRuleData(unittest.TestCase):
    """AccountingRuleData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccountingRuleData:
        """Test AccountingRuleData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountingRuleData`
        """
        model = AccountingRuleData()
        if include_optional:
            return AccountingRuleData(
                allow_multiple_credit_entries = True,
                allow_multiple_debit_entries = True,
                allowed_accounts = [
                    fineract_client.models.gl_account_data.GLAccountData(
                        account_type_options = [
                            fineract_client.models.enum_option_data.EnumOptionData(
                                code = '', 
                                id = 56, 
                                value = '', )
                            ], 
                        allowed_assets_tag_options = [
                            fineract_client.models.code_value_data.CodeValueData(
                                active = True, 
                                description = '', 
                                id = 56, 
                                mandatory = True, 
                                name = '', 
                                position = 56, )
                            ], 
                        allowed_equity_tag_options = [
                            fineract_client.models.code_value_data.CodeValueData(
                                active = True, 
                                description = '', 
                                id = 56, 
                                mandatory = True, 
                                name = '', 
                                position = 56, )
                            ], 
                        allowed_expenses_tag_options = [
                            
                            ], 
                        allowed_income_tag_options = [
                            
                            ], 
                        allowed_liabilities_tag_options = [
                            
                            ], 
                        asset_header_account_options = [
                            fineract_client.models.gl_account_data.GLAccountData(
                                description = '', 
                                disabled = True, 
                                equity_header_account_options = [
                                    
                                    ], 
                                expense_header_account_options = [
                                    
                                    ], 
                                gl_code = '', 
                                id = 56, 
                                income_header_account_options = [
                                    
                                    ], 
                                liability_header_account_options = [
                                    
                                    ], 
                                manual_entries_allowed = True, 
                                name = '', 
                                name_decorated = '', 
                                organization_running_balance = 56, 
                                parent_id = 56, 
                                row_index = 56, 
                                tag_id = , 
                                type = fineract_client.models.enum_option_data.EnumOptionData(
                                    code = '', 
                                    id = 56, 
                                    value = '', ), 
                                usage = , 
                                usage_options = [
                                    
                                    ], )
                            ], 
                        description = '', 
                        disabled = True, 
                        equity_header_account_options = [
                            
                            ], 
                        expense_header_account_options = [
                            
                            ], 
                        gl_code = '', 
                        id = 56, 
                        income_header_account_options = [
                            
                            ], 
                        liability_header_account_options = [
                            
                            ], 
                        manual_entries_allowed = True, 
                        name = '', 
                        name_decorated = '', 
                        organization_running_balance = 56, 
                        parent_id = 56, 
                        row_index = 56, 
                        tag_id = , 
                        type = , 
                        usage = , 
                        usage_options = [
                            
                            ], )
                    ],
                allowed_credit_tag_options = [
                    fineract_client.models.code_value_data.CodeValueData(
                        active = True, 
                        description = '', 
                        id = 56, 
                        mandatory = True, 
                        name = '', 
                        position = 56, )
                    ],
                allowed_debit_tag_options = [
                    fineract_client.models.code_value_data.CodeValueData(
                        active = True, 
                        description = '', 
                        id = 56, 
                        mandatory = True, 
                        name = '', 
                        position = 56, )
                    ],
                allowed_offices = [
                    fineract_client.models.office_data.OfficeData(
                        date_format = '', 
                        external_id = fineract_client.models.external_id.ExternalId(
                            empty = True, 
                            value = '', ), 
                        hierarchy = '', 
                        id = 56, 
                        locale = '', 
                        name = '', 
                        name_decorated = '', 
                        opening_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        parent_id = 56, 
                        parent_name = '', 
                        row_index = 56, )
                    ],
                credit_accounts = [
                    fineract_client.models.gl_account_data_for_lookup.GLAccountDataForLookup(
                        gl_code = '', 
                        id = 56, 
                        name = '', )
                    ],
                credit_tags = [
                    fineract_client.models.accounting_tag_rule_data.AccountingTagRuleData(
                        id = 56, 
                        tag = fineract_client.models.code_value_data.CodeValueData(
                            active = True, 
                            description = '', 
                            id = 56, 
                            mandatory = True, 
                            name = '', 
                            position = 56, ), 
                        transaction_type = fineract_client.models.enum_option_data.EnumOptionData(
                            code = '', 
                            id = 56, 
                            value = '', ), )
                    ],
                debit_accounts = [
                    fineract_client.models.gl_account_data_for_lookup.GLAccountDataForLookup(
                        gl_code = '', 
                        id = 56, 
                        name = '', )
                    ],
                debit_tags = [
                    fineract_client.models.accounting_tag_rule_data.AccountingTagRuleData(
                        id = 56, 
                        tag = fineract_client.models.code_value_data.CodeValueData(
                            active = True, 
                            description = '', 
                            id = 56, 
                            mandatory = True, 
                            name = '', 
                            position = 56, ), 
                        transaction_type = fineract_client.models.enum_option_data.EnumOptionData(
                            code = '', 
                            id = 56, 
                            value = '', ), )
                    ],
                description = '',
                id = 56,
                name = '',
                office_id = 56,
                office_name = '',
                system_defined = True
            )
        else:
            return AccountingRuleData(
        )
        """

    def testAccountingRuleData(self):
        """Test AccountingRuleData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
