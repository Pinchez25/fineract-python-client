# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_recurring_deposit_accounts_recurring_deposit_account_id_transactions_template_response import GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse

class TestGetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse(unittest.TestCase):
    """GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse:
        """Test GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse`
        """
        model = GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse()
        if include_optional:
            return GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse(
                account_id = 1,
                account_no = '000000001',
                amount = 100000,
                currency = fineract_client.models.get_recurring_currency.GetRecurringCurrency(
                    code = 'USD', 
                    decimal_places = 4, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    in_multiples_of = 100, 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                var_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                id = 1,
                payment_type_options = [],
                reversed = False,
                transaction_type = fineract_client.models.get_recurring_transaction_type.GetRecurringTransactionType(
                    approve_transfer = False, 
                    code = 'savingsAccountTransactionType.deposit', 
                    deposit = True, 
                    description = 'Deposit', 
                    fee_deduction = False, 
                    id = 1, 
                    initiate_transfer = False, 
                    interest_posting = False, 
                    overdraft_fee = True, 
                    overdraft_interest = False, 
                    reject_transfer = False, 
                    withdraw_transfer = False, 
                    withdrawal = False, 
                    writtenoff = False, )
            )
        else:
            return GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse(
        )
        """

    def testGetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse(self):
        """Test GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
