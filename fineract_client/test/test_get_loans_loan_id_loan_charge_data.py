# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loans_loan_id_loan_charge_data import GetLoansLoanIdLoanChargeData

class TestGetLoansLoanIdLoanChargeData(unittest.TestCase):
    """GetLoansLoanIdLoanChargeData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoansLoanIdLoanChargeData:
        """Test GetLoansLoanIdLoanChargeData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoansLoanIdLoanChargeData`
        """
        model = GetLoansLoanIdLoanChargeData()
        if include_optional:
            return GetLoansLoanIdLoanChargeData(
                amount = 102,
                amount_or_percentage = 102,
                amount_outstanding = 102,
                amount_paid = 12,
                amount_percentage_applied_to = 13.56,
                amount_waived = 14,
                amount_written_off = 102,
                charge_calculation_type = fineract_client.models.get_loans_loan_id_enum_option_data.GetLoansLoanIdEnumOptionData(
                    code = 'chargeTimeType.specifiedDueDate', 
                    id = 2, 
                    value = 'Specified due date', ),
                charge_id = 5,
                charge_payable = False,
                charge_payment_mode = fineract_client.models.get_loans_loan_id_enum_option_data.GetLoansLoanIdEnumOptionData(
                    code = 'chargeTimeType.specifiedDueDate', 
                    id = 2, 
                    value = 'Specified due date', ),
                charge_time_type = fineract_client.models.get_loans_loan_id_enum_option_data.GetLoansLoanIdEnumOptionData(
                    code = 'chargeTimeType.specifiedDueDate', 
                    id = 2, 
                    value = 'Specified due date', ),
                currency = fineract_client.models.get_loans_loan_id_currency.GetLoansLoanIdCurrency(
                    code = 'UGX', 
                    decimal_places = 2, 
                    display_label = 'Uganda Shilling (USh)', 
                    display_symbol = 'USh', 
                    name = 'Uganda Shilling', 
                    name_code = 'currency.UGX', ),
                due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                id = 3,
                installment_charge_data = [
                    fineract_client.models.get_loans_loan_id_loan_installment_charge_data.GetLoansLoanIdLoanInstallmentChargeData(
                        amount = 13.56, 
                        amount_accrued = 13.56, 
                        amount_outstanding = 13.56, 
                        amount_unrecognized = 13.56, 
                        amount_waived = 13.56, 
                        due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        installment_number = 2, 
                        paid = False, 
                        waived = False, )
                    ],
                loan_id = 3,
                max_cap = 30,
                min_cap = 30,
                name = 'snooze fee',
                paid = False,
                penalty = False,
                percentage = 3.4,
                waived = False
            )
        else:
            return GetLoansLoanIdLoanChargeData(
        )
        """

    def testGetLoansLoanIdLoanChargeData(self):
        """Test GetLoansLoanIdLoanChargeData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
