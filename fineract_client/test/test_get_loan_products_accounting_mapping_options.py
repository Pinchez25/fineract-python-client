# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loan_products_accounting_mapping_options import GetLoanProductsAccountingMappingOptions

class TestGetLoanProductsAccountingMappingOptions(unittest.TestCase):
    """GetLoanProductsAccountingMappingOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoanProductsAccountingMappingOptions:
        """Test GetLoanProductsAccountingMappingOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoanProductsAccountingMappingOptions`
        """
        model = GetLoanProductsAccountingMappingOptions()
        if include_optional:
            return GetLoanProductsAccountingMappingOptions(
                asset_account_options = [
                    fineract_client.models.get_loan_products_asset_account_options.GetLoanProductsAssetAccountOptions(
                        disabled = False, 
                        gl_code = '02', 
                        id = 2, 
                        manual_entries_allowed = True, 
                        name = 'Loan portfolio', 
                        name_decorated = 'Loan portfolio', 
                        organization_running_balance = 60000, 
                        tag_id = fineract_client.models.get_loan_products_liability_tag_id.GetLoanProductsLiabilityTagId(
                            id = 0, ), 
                        type = fineract_client.models.get_loan_products_liability_type.GetLoanProductsLiabilityType(
                            code = 'accountType.liability', 
                            description = 'LIABILITY', 
                            id = 2, ), 
                        usage = fineract_client.models.get_loan_products_liability_usage.GetLoanProductsLiabilityUsage(
                            code = 'accountUsage.detail', 
                            description = 'DETAIL', 
                            id = 1, ), )
                    ],
                expense_account_options = [
                    fineract_client.models.get_loan_products_expense_account_options.GetLoanProductsExpenseAccountOptions(
                        disabled = False, 
                        gl_code = '12', 
                        id = 10, 
                        manual_entries_allowed = True, 
                        name = 'loans written off 2', 
                        name_decorated = 'loans written off 2', 
                        organization_running_balance = 0, 
                        tag_id = fineract_client.models.get_loan_products_liability_tag_id.GetLoanProductsLiabilityTagId(
                            id = 0, ), 
                        type = fineract_client.models.get_loan_products_expense_type.GetLoanProductsExpenseType(
                            code = 'accountType.expense', 
                            description = 'EXPENSE', 
                            id = 5, ), 
                        usage = fineract_client.models.get_loan_products_liability_usage.GetLoanProductsLiabilityUsage(
                            code = 'accountUsage.detail', 
                            description = 'DETAIL', 
                            id = 1, ), )
                    ],
                income_account_options = [
                    fineract_client.models.get_loan_products_income_account_options.GetLoanProductsIncomeAccountOptions(
                        disabled = False, 
                        gl_code = '04', 
                        id = 4, 
                        manual_entries_allowed = True, 
                        name = 'income from interest', 
                        name_decorated = 'income from interest', 
                        organization_running_balance = 19, 
                        tag_id = fineract_client.models.get_loan_products_liability_tag_id.GetLoanProductsLiabilityTagId(
                            id = 0, ), 
                        type = fineract_client.models.get_loan_products_income_type.GetLoanProductsIncomeType(
                            code = 'accountType.income', 
                            description = 'INCOME', 
                            id = 4, ), 
                        usage = fineract_client.models.get_loan_products_liability_usage.GetLoanProductsLiabilityUsage(
                            code = 'accountUsage.detail', 
                            description = 'DETAIL', 
                            id = 1, ), )
                    ],
                liability_account_options = [
                    fineract_client.models.get_loan_products_liability_account_options.GetLoanProductsLiabilityAccountOptions(
                        disabled = False, 
                        gl_code = '13', 
                        id = 11, 
                        manual_entries_allowed = True, 
                        name = 'over payment', 
                        name_decorated = 'over payment', 
                        organization_running_balance = 0, 
                        tag_id = fineract_client.models.get_loan_products_liability_tag_id.GetLoanProductsLiabilityTagId(
                            id = 0, ), 
                        type = fineract_client.models.get_loan_products_liability_type.GetLoanProductsLiabilityType(
                            code = 'accountType.liability', 
                            description = 'LIABILITY', 
                            id = 2, ), 
                        usage = fineract_client.models.get_loan_products_liability_usage.GetLoanProductsLiabilityUsage(
                            code = 'accountUsage.detail', 
                            description = 'DETAIL', 
                            id = 1, ), )
                    ]
            )
        else:
            return GetLoanProductsAccountingMappingOptions(
        )
        """

    def testGetLoanProductsAccountingMappingOptions(self):
        """Test GetLoanProductsAccountingMappingOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
