# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loans_loan_id_loan_transaction_enum_data import GetLoansLoanIdLoanTransactionEnumData

class TestGetLoansLoanIdLoanTransactionEnumData(unittest.TestCase):
    """GetLoansLoanIdLoanTransactionEnumData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoansLoanIdLoanTransactionEnumData:
        """Test GetLoansLoanIdLoanTransactionEnumData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoansLoanIdLoanTransactionEnumData`
        """
        model = GetLoansLoanIdLoanTransactionEnumData()
        if include_optional:
            return GetLoansLoanIdLoanTransactionEnumData(
                accrual = False,
                approve_transfer = False,
                charge_adjustment = False,
                charge_payment = False,
                chargeoff = False,
                code = 'loanTransactionType.repayment',
                contra = False,
                credit_balance_refund = False,
                disbursement = False,
                goodwill_credit = False,
                id = 1,
                initiate_transfer = False,
                merchant_issued_refund = False,
                payout_refund = False,
                recovery_repayment = False,
                refund = False,
                refund_for_active_loans = False,
                reject_transfer = False,
                repayment = True,
                repayment_at_disbursement = False,
                value = '2',
                waive_charges = False,
                waive_interest = False,
                withdraw_transfer = False,
                write_off = False
            )
        else:
            return GetLoansLoanIdLoanTransactionEnumData(
        )
        """

    def testGetLoansLoanIdLoanTransactionEnumData(self):
        """Test GetLoansLoanIdLoanTransactionEnumData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
