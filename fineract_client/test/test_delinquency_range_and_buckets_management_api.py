# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.api.delinquency_range_and_buckets_management_api import DelinquencyRangeAndBucketsManagementApi


class TestDelinquencyRangeAndBucketsManagementApi(unittest.TestCase):
    """DelinquencyRangeAndBucketsManagementApi unit test stubs"""

    def setUp(self) -> None:
        self.api = DelinquencyRangeAndBucketsManagementApi()

    def tearDown(self) -> None:
        pass

    def test_create_delinquency_bucket(self) -> None:
        """Test case for create_delinquency_bucket

        Create Delinquency Bucket
        """
        pass

    def test_create_delinquency_range(self) -> None:
        """Test case for create_delinquency_range

        Create Delinquency Range
        """
        pass

    def test_delete_delinquency_bucket(self) -> None:
        """Test case for delete_delinquency_bucket

        Delete Delinquency Bucket based on the Id
        """
        pass

    def test_delete_delinquency_range(self) -> None:
        """Test case for delete_delinquency_range

        Update Delinquency Range based on the Id
        """
        pass

    def test_get_delinquency_bucket(self) -> None:
        """Test case for get_delinquency_bucket

        Retrieve a specific Delinquency Bucket based on the Id
        """
        pass

    def test_get_delinquency_buckets(self) -> None:
        """Test case for get_delinquency_buckets

        List all Delinquency Buckets
        """
        pass

    def test_get_delinquency_range(self) -> None:
        """Test case for get_delinquency_range

        Retrieve a specific Delinquency Range based on the Id
        """
        pass

    def test_get_delinquency_ranges(self) -> None:
        """Test case for get_delinquency_ranges

        List all Delinquency Ranges
        """
        pass

    def test_update_delinquency_bucket(self) -> None:
        """Test case for update_delinquency_bucket

        Update Delinquency Bucket based on the Id
        """
        pass

    def test_update_delinquency_range(self) -> None:
        """Test case for update_delinquency_range

        Update Delinquency Range based on the Id
        """
        pass


if __name__ == '__main__':
    unittest.main()
