# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loan_products_response import GetLoanProductsResponse

class TestGetLoanProductsResponse(unittest.TestCase):
    """GetLoanProductsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoanProductsResponse:
        """Test GetLoanProductsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoanProductsResponse`
        """
        model = GetLoanProductsResponse()
        if include_optional:
            return GetLoanProductsResponse(
                accounting_rule = fineract_client.models.get_loan_products_accounting_rule.GetLoanProductsAccountingRule(
                    code = 'accountingRuleType.cash', 
                    description = 'CASH BASED', 
                    id = 2, ),
                amortization_type = fineract_client.models.get_loan_products_amortization_type.GetLoanProductsAmortizationType(
                    code = 'amortizationType.equal.installments', 
                    description = 'Equal installments', 
                    id = 1, ),
                annual_interest_rate = 15,
                currency = fineract_client.models.get_loan_products_currency.GetLoanProductsCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    in_multiples_of = 0, 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                days_in_month_type = fineract_client.models.get_loans_products_days_in_month_type.GetLoansProductsDaysInMonthType(
                    code = 'DaysInMonthType.days360', 
                    description = '30 Days', 
                    id = 30, ),
                days_in_year_type = fineract_client.models.get_loans_products_days_in_year_type.GetLoansProductsDaysInYearType(
                    code = 'DaysInYearType.days360', 
                    description = '360 Days', 
                    id = 360, ),
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                fixed_length = 10,
                fixed_principal_percentage_per_installment = 5.5,
                id = 1,
                include_in_borrower_cycle = False,
                interest_calculation_period_type = fineract_client.models.get_loans_products_interest_calculation_period_type.GetLoansProductsInterestCalculationPeriodType(
                    code = 'interestCalculationPeriodType.same.as.repayment.period', 
                    description = 'Same as repayment period', 
                    id = 1, ),
                interest_rate_frequency_type = fineract_client.models.get_loan_products_interest_rate_frequency_type.GetLoanProductsInterestRateFrequencyType(
                    code = 'interestRateFrequency.periodFrequencyType.months', 
                    description = 'Per month', 
                    id = 2, ),
                interest_rate_per_period = 15,
                interest_rate_variations_for_borrower_cycle = [],
                interest_recalculation_data = fineract_client.models.get_loan_products_interest_recalculation_data.GetLoanProductsInterestRecalculationData(
                    allow_compounding_on_eod = True, 
                    id = 3, 
                    interest_recalculation_compounding_frequency_type = fineract_client.models.get_loan_products_interest_recalculation_compounding_frequency_type.GetLoanProductsInterestRecalculationCompoundingFrequencyType(
                        code = 'interestRecalculationFrequencyType.same.as.repayment.period', 
                        description = 'Same as repayment period', 
                        id = 1, ), 
                    interest_recalculation_compounding_type = fineract_client.models.get_loan_products_interest_recalculation_compounding_type.GetLoanProductsInterestRecalculationCompoundingType(
                        code = 'interestRecalculationCompoundingMethod.fee', 
                        description = 'Fee', 
                        id = 2, ), 
                    is_arrears_based_on_original_schedule = True, 
                    is_compounding_to_be_posted_as_transaction = True, 
                    pre_closure_interest_calculation_strategy = fineract_client.models.get_loan_products_pre_closure_interest_calculation_strategy.GetLoanProductsPreClosureInterestCalculationStrategy(
                        code = 'loanPreClosureInterestCalculationStrategy.tillPreClosureDate', 
                        description = 'Till preclose Date', 
                        id = 1, ), 
                    product_id = 1, 
                    recalculation_compounding_frequency_interval = 1, 
                    recalculation_compounding_frequency_on_day_type = 1, 
                    recalculation_rest_frequency_interval = 1, 
                    recalculation_rest_frequency_type = fineract_client.models.get_loan_products_interest_recalculation_compounding_frequency_type.GetLoanProductsInterestRecalculationCompoundingFrequencyType(
                        code = 'interestRecalculationFrequencyType.same.as.repayment.period', 
                        description = 'Same as repayment period', 
                        id = 1, ), 
                    reschedule_strategy_type = fineract_client.models.get_loan_products_reschedule_strategy_type.GetLoanProductsRescheduleStrategyType(
                        code = 'loanRescheduleStrategyMethod.reduce.number.of.installments', 
                        description = 'Reduce number of installments', 
                        id = 2, ), ),
                interest_type = fineract_client.models.get_loan_products_interest_type.GetLoanProductsInterestType(
                    code = 'interestType.flat', 
                    description = 'Flat', 
                    id = 1, ),
                is_interest_recalculation_enabled = True,
                max_number_of_repayments = 15,
                max_principal = 15000,
                min_number_of_repayments = 5,
                min_principal = 5000,
                name = 'personal loan product',
                number_of_repayment_variations_for_borrower_cycle = [],
                number_of_repayments = 10,
                principal = 10000,
                principal_threshold_for_last_instalment = 0,
                principal_variations_for_borrower_cycle = [],
                repayment_every = 7,
                repayment_frequency_type = fineract_client.models.get_loan_products_repayment_frequency_type.GetLoanProductsRepaymentFrequencyType(
                    code = 'repaymentFrequency.periodFrequencyType.days', 
                    description = 'Days', 
                    id = 0, ),
                repayment_start_date_type = fineract_client.models.get_loan_products_repayment_start_date_type.GetLoanProductsRepaymentStartDateType(
                    code = 'repaymentStartDateType.disbursementDate', 
                    description = 'Disbursement Date', 
                    id = 1, ),
                short_name = 'pe1',
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                status = 'loanProduct.active',
                supported_interest_refund_types = [
                    fineract_client.models.string_enum_option_data.StringEnumOptionData(
                        code = '', 
                        id = '', 
                        value = '', )
                    ],
                transaction_processing_strategy = 'mifos-standard-strategy',
                transaction_processing_strategy_name = 'Mifos style',
                use_borrower_cycle = False
            )
        else:
            return GetLoanProductsResponse(
        )
        """

    def testGetLoanProductsResponse(self):
        """Test GetLoanProductsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
