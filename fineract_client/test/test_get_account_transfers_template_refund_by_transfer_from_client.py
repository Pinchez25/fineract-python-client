# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_account_transfers_template_refund_by_transfer_from_client import GetAccountTransfersTemplateRefundByTransferFromClient

class TestGetAccountTransfersTemplateRefundByTransferFromClient(unittest.TestCase):
    """GetAccountTransfersTemplateRefundByTransferFromClient unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetAccountTransfersTemplateRefundByTransferFromClient:
        """Test GetAccountTransfersTemplateRefundByTransferFromClient
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetAccountTransfersTemplateRefundByTransferFromClient`
        """
        model = GetAccountTransfersTemplateRefundByTransferFromClient()
        if include_optional:
            return GetAccountTransfersTemplateRefundByTransferFromClient(
                account_no = 1,
                activation_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                active = True,
                client_classification = None,
                client_type = None,
                display_name = 'Daniel Owusu',
                firstname = 'Daniel',
                gender = None,
                groups = None,
                id = 1,
                lastname = 'Owusu',
                office_id = 1,
                office_name = 'Head Office',
                status = fineract_client.models.get_account_transfers_status.GetAccountTransfersStatus(
                    code = 'clientStatusType.active', 
                    description = 'Active', 
                    id = 300, ),
                timeline = fineract_client.models.get_account_transfers_timeline.GetAccountTransfersTimeline(
                    activated_by_firstname = 'App', 
                    activated_by_lastname = 'Administrator', 
                    activated_by_username = 'mifos', 
                    activated_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    submitted_by_firstname = 'App', 
                    submitted_by_lastname = 'Administrator', 
                    submitted_by_username = 'mifos', 
                    submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
            )
        else:
            return GetAccountTransfersTemplateRefundByTransferFromClient(
        )
        """

    def testGetAccountTransfersTemplateRefundByTransferFromClient(self):
        """Test GetAccountTransfersTemplateRefundByTransferFromClient"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
