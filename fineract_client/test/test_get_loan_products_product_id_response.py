# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loan_products_product_id_response import GetLoanProductsProductIdResponse

class TestGetLoanProductsProductIdResponse(unittest.TestCase):
    """GetLoanProductsProductIdResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoanProductsProductIdResponse:
        """Test GetLoanProductsProductIdResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoanProductsProductIdResponse`
        """
        model = GetLoanProductsProductIdResponse()
        if include_optional:
            return GetLoanProductsProductIdResponse(
                accounting_mappings = fineract_client.models.get_loan_accounting_mappings.GetLoanAccountingMappings(
                    charge_off_expense_account = fineract_client.models.get_gl_account_mapping.GetGlAccountMapping(
                        gl_code = '012-34-65', 
                        id = 10, 
                        name = 'Cash Account', ), 
                    charge_off_fraud_expense_account = fineract_client.models.get_gl_account_mapping.GetGlAccountMapping(
                        gl_code = '012-34-65', 
                        id = 10, 
                        name = 'Cash Account', ), 
                    fund_source_account = , 
                    goodwill_credit_account = , 
                    income_from_charge_off_fees_account = , 
                    income_from_charge_off_interest_account = , 
                    income_from_charge_off_penalty_account = , 
                    income_from_fee_account = , 
                    income_from_goodwill_credit_fees_account = , 
                    income_from_goodwill_credit_interest_account = , 
                    income_from_goodwill_credit_penalty_account = , 
                    income_from_penalty_account = , 
                    income_from_recovery_account = , 
                    interest_on_loan_account = , 
                    loan_portfolio_account = , 
                    overpayment_liability_account = , 
                    receivable_fee_account = , 
                    receivable_interest_account = , 
                    receivable_penalty_account = , 
                    transfers_in_suspense_account = , 
                    write_off_account = , ),
                accounting_rule = fineract_client.models.get_loan_products_accounting_rule.GetLoanProductsAccountingRule(
                    code = 'accountingRuleType.cash', 
                    description = 'CASH BASED', 
                    id = 2, ),
                allow_approved_disbursed_amounts_over_applied = True,
                allow_partial_period_interest_calculation = False,
                allow_variable_installments = False,
                amortization_type = fineract_client.models.get_loan_products_amortization_type.GetLoanProductsAmortizationType(
                    code = 'amortizationType.equal.installments', 
                    description = 'Equal installments', 
                    id = 1, ),
                annual_interest_rate = 60,
                can_define_installment_amount = False,
                can_use_for_topup = False,
                charges = [],
                credit_allocation = [],
                currency = fineract_client.models.get_loan_products_currency.GetLoanProductsCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    in_multiples_of = 0, 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                delinquency_bucket = fineract_client.models.get_delinquency_buckets_response.GetDelinquencyBucketsResponse(
                    id = 1, 
                    name = 'Delinquent Bucket Set 1', 
                    ranges = [
                        fineract_client.models.get_delinquency_ranges_response.GetDelinquencyRangesResponse(
                            classification = 'Delinquent 1', 
                            id = 1, 
                            maximum_age_days = 3, 
                            minimum_age_days = 1, )
                        ], ),
                delinquency_bucket_options = [
                    fineract_client.models.get_delinquency_buckets_response.GetDelinquencyBucketsResponse(
                        id = 1, 
                        name = 'Delinquent Bucket Set 1', 
                        ranges = [
                            fineract_client.models.get_delinquency_ranges_response.GetDelinquencyRangesResponse(
                                classification = 'Delinquent 1', 
                                id = 1, 
                                maximum_age_days = 3, 
                                minimum_age_days = 1, )
                            ], )
                    ],
                description = 'sample description',
                disallow_expected_disbursements = True,
                disbursed_amount_percentage_for_down_payment = 5.5,
                due_days_for_repayment_event = 3,
                enable_accrual_activity_posting = False,
                enable_auto_repayment_for_down_payment = False,
                enable_down_payment = False,
                enable_installment_level_delinquency = False,
                fee_to_income_account_mappings = [
                    fineract_client.models.get_loan_fee_to_income_account_mappings.GetLoanFeeToIncomeAccountMappings(
                        charge = fineract_client.models.get_loan_charge.GetLoanCharge(
                            active = False, 
                            id = 1, 
                            name = 'flat install', 
                            penalty = False, ), 
                        charge_id = 10, 
                        income_account = fineract_client.models.get_gl_account_mapping.GetGlAccountMapping(
                            gl_code = '012-34-65', 
                            id = 10, 
                            name = 'Cash Account', ), 
                        income_account_id = 39, )
                    ],
                fixed_length = 10,
                fixed_principal_percentage_per_installment = 5.5,
                id = 11,
                in_arrears_tolerance = 3,
                include_in_borrower_cycle = True,
                interest_calculation_period_type = fineract_client.models.get_loans_products_interest_calculation_period_type.GetLoansProductsInterestCalculationPeriodType(
                    code = 'interestCalculationPeriodType.same.as.repayment.period', 
                    description = 'Same as repayment period', 
                    id = 1, ),
                interest_rate_frequency_type = fineract_client.models.get_loan_products_interest_rate_frequency_type.GetLoanProductsInterestRateFrequencyType(
                    code = 'interestRateFrequency.periodFrequencyType.months', 
                    description = 'Per month', 
                    id = 2, ),
                interest_rate_per_period = 5,
                interest_rate_variations_for_borrower_cycle = [],
                interest_recalculation_data = fineract_client.models.get_loan_products_interest_recalculation_data.GetLoanProductsInterestRecalculationData(
                    allow_compounding_on_eod = True, 
                    id = 3, 
                    interest_recalculation_compounding_frequency_type = fineract_client.models.get_loan_products_interest_recalculation_compounding_frequency_type.GetLoanProductsInterestRecalculationCompoundingFrequencyType(
                        code = 'interestRecalculationFrequencyType.same.as.repayment.period', 
                        description = 'Same as repayment period', 
                        id = 1, ), 
                    interest_recalculation_compounding_type = fineract_client.models.get_loan_products_interest_recalculation_compounding_type.GetLoanProductsInterestRecalculationCompoundingType(
                        code = 'interestRecalculationCompoundingMethod.fee', 
                        description = 'Fee', 
                        id = 2, ), 
                    is_arrears_based_on_original_schedule = True, 
                    is_compounding_to_be_posted_as_transaction = True, 
                    pre_closure_interest_calculation_strategy = fineract_client.models.get_loan_products_pre_closure_interest_calculation_strategy.GetLoanProductsPreClosureInterestCalculationStrategy(
                        code = 'loanPreClosureInterestCalculationStrategy.tillPreClosureDate', 
                        description = 'Till preclose Date', 
                        id = 1, ), 
                    product_id = 1, 
                    recalculation_compounding_frequency_interval = 1, 
                    recalculation_compounding_frequency_on_day_type = 1, 
                    recalculation_rest_frequency_interval = 1, 
                    recalculation_rest_frequency_type = fineract_client.models.get_loan_products_interest_recalculation_compounding_frequency_type.GetLoanProductsInterestRecalculationCompoundingFrequencyType(
                        code = 'interestRecalculationFrequencyType.same.as.repayment.period', 
                        description = 'Same as repayment period', 
                        id = 1, ), 
                    reschedule_strategy_type = fineract_client.models.get_loan_products_reschedule_strategy_type.GetLoanProductsRescheduleStrategyType(
                        code = 'loanRescheduleStrategyMethod.reduce.number.of.installments', 
                        description = 'Reduce number of installments', 
                        id = 2, ), ),
                interest_type = fineract_client.models.get_loan_products_interest_template_type.GetLoanProductsInterestTemplateType(
                    code = 'interestType.declining.balance', 
                    description = 'Declining Balance', 
                    id = 0, ),
                is_floating_interest_rate_calculation_allowed = False,
                is_interest_recalculation_enabled = False,
                is_linked_to_floating_interest_rates = False,
                is_rates_enabled = False,
                loan_schedule_processing_type = fineract_client.models.enum_option_data.EnumOptionData(
                    code = '', 
                    id = 56, 
                    value = '', ),
                loan_schedule_type = fineract_client.models.enum_option_data.EnumOptionData(
                    code = '', 
                    id = 56, 
                    value = '', ),
                max_interest_rate_per_period = 10,
                max_number_of_repayments = 10,
                max_principal = 15000,
                max_tranche_count = 3,
                maximum_gap = 1,
                min_interest_rate_per_period = 0,
                min_number_of_repayments = 5,
                min_principal = 2000,
                minimum_gap = 0,
                multi_disburse_loan = True,
                name = 'advanced accounting',
                number_of_repayment_variations_for_borrower_cycle = [],
                number_of_repayments = 7,
                outstanding_loan_balance = 36000,
                over_applied_calculation_type = 'flat',
                over_due_days_for_repayment_event = 3,
                overdue_days_for_npa = 2,
                payment_allocation = [],
                payment_channel_to_fund_source_mappings = [
                    fineract_client.models.get_loan_payment_channel_to_fund_source_mappings.GetLoanPaymentChannelToFundSourceMappings(
                        fund_source_account_id = 39, 
                        payment_type_id = 10, )
                    ],
                principal = 10000,
                principal_threshold_for_last_instalment = 50,
                products_principal_variations_for_borrower_cycle = [
                    fineract_client.models.get_loan_products_principal_variations_for_borrower_cycle.GetLoanProductsPrincipalVariationsForBorrowerCycle(
                        borrower_cycle_number = 1, 
                        default_value = 15000, 
                        id = 21, 
                        max_value = 20000, 
                        min_value = 2000, 
                        param_type = fineract_client.models.get_loan_products_param_type.GetLoanProductsParamType(
                            code = 'LoanProductParamType.principal', 
                            description = 'principal', 
                            id = 1, ), 
                        value_condition_type = fineract_client.models.get_loan_products_value_condition_type.GetLoanProductsValueConditionType(
                            code = 'LoanProductValueConditionType.equal', 
                            description = 'equals', 
                            id = 2, ), )
                    ],
                repayment_every = 7,
                repayment_frequency_type = fineract_client.models.get_loan_products_repayment_frequency_type.GetLoanProductsRepaymentFrequencyType(
                    code = 'repaymentFrequency.periodFrequencyType.days', 
                    description = 'Days', 
                    id = 0, ),
                repayment_start_date_type = fineract_client.models.get_loan_products_repayment_start_date_type.GetLoanProductsRepaymentStartDateType(
                    code = 'repaymentStartDateType.disbursementDate', 
                    description = 'Disbursement Date', 
                    id = 1, ),
                short_name = 'ad11',
                status = 'loanProduct.active',
                supported_interest_refund_types = [
                    fineract_client.models.string_enum_option_data.StringEnumOptionData(
                        code = '', 
                        id = '', 
                        value = '', )
                    ],
                transaction_processing_strategy_code = 'mifos-standard-strategy',
                transaction_processing_strategy_name = 'Mifos style',
                use_borrower_cycle = True
            )
        else:
            return GetLoanProductsProductIdResponse(
        )
        """

    def testGetLoanProductsProductIdResponse(self):
        """Test GetLoanProductsProductIdResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
