# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_savings_products_charge_options import GetSavingsProductsChargeOptions

class TestGetSavingsProductsChargeOptions(unittest.TestCase):
    """GetSavingsProductsChargeOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSavingsProductsChargeOptions:
        """Test GetSavingsProductsChargeOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSavingsProductsChargeOptions`
        """
        model = GetSavingsProductsChargeOptions()
        if include_optional:
            return GetSavingsProductsChargeOptions(
                active = True,
                amount = 200,
                charge_applies_to = fineract_client.models.get_savings_products_charge_applies_to.GetSavingsProductsChargeAppliesTo(
                    code = 'chargeAppliesTo.savings', 
                    description = 'Savings', 
                    id = 2, ),
                charge_calculation_type = fineract_client.models.get_savings_charge_calculation_type.GetSavingsChargeCalculationType(
                    code = 'chargeCalculationType.flat', 
                    description = 'Flat', 
                    id = 1, ),
                charge_payment_mode = fineract_client.models.get_savings_charge_payment_mode.GetSavingsChargePaymentMode(
                    code = 'chargepaymentmode.regular', 
                    description = 'chargepaymentmode.regular', 
                    id = 0, ),
                charge_time_type = fineract_client.models.get_savings_charge_time_type.GetSavingsChargeTimeType(
                    code = 'chargeTimeType.specifiedDueDate', 
                    description = 'Specified due date', 
                    id = 1, ),
                currency = fineract_client.models.get_savings_currency.GetSavingsCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                id = 4,
                name = 'Savings charge 1',
                penalty = False
            )
        else:
            return GetSavingsProductsChargeOptions(
        )
        """

    def testGetSavingsProductsChargeOptions(self):
        """Test GetSavingsProductsChargeOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
