# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_account_transfers_template_response import GetAccountTransfersTemplateResponse

class TestGetAccountTransfersTemplateResponse(unittest.TestCase):
    """GetAccountTransfersTemplateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetAccountTransfersTemplateResponse:
        """Test GetAccountTransfersTemplateResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetAccountTransfersTemplateResponse`
        """
        model = GetAccountTransfersTemplateResponse()
        if include_optional:
            return GetAccountTransfersTemplateResponse(
                from_account_type = fineract_client.models.get_account_transfers_from_account_type.GetAccountTransfersFromAccountType(
                    code = 'accountType.savings', 
                    description = 'Savings Account', 
                    id = 2, ),
                from_account_type_options = [
                    fineract_client.models.get_account_transfers_from_account_type_options.GetAccountTransfersFromAccountTypeOptions(
                        code = 'accountType.savings', 
                        description = 'Savings Account', 
                        id = 2, )
                    ],
                from_client_options = [
                    fineract_client.models.get_account_transfers_from_client_options.GetAccountTransfersFromClientOptions(
                        display_name = 'Small shop', 
                        id = 1, 
                        office_id = 1, 
                        office_name = 'HO', )
                    ],
                from_office = fineract_client.models.get_account_transfers_from_office.GetAccountTransfersFromOffice(
                    external_id = '1', 
                    hierarchy = '.', 
                    id = 1, 
                    name = 'HO', 
                    name_decorated = 'HO', 
                    opening_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                from_office_options = [
                    fineract_client.models.get_account_transfers_from_office_options.GetAccountTransfersFromOfficeOptions(
                        id = 1, 
                        name = 'HO', 
                        name_decorated = 'HO', )
                    ],
                to_account_type_options = [
                    fineract_client.models.get_account_transfers_to_account_type_options.GetAccountTransfersToAccountTypeOptions(
                        code = 'accountType.savings', 
                        description = 'Savings Account', 
                        id = 2, )
                    ],
                to_office_options = [
                    fineract_client.models.get_account_transfers_to_office_options.GetAccountTransfersToOfficeOptions(
                        id = 1, 
                        name = 'HO', 
                        name_decorated = 'HO', )
                    ],
                transfer_amount = 0,
                transfer_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
            )
        else:
            return GetAccountTransfersTemplateResponse(
        )
        """

    def testGetAccountTransfersTemplateResponse(self):
        """Test GetAccountTransfersTemplateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
