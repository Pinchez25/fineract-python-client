# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_savings_account_transactions_page_item import GetSavingsAccountTransactionsPageItem

class TestGetSavingsAccountTransactionsPageItem(unittest.TestCase):
    """GetSavingsAccountTransactionsPageItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSavingsAccountTransactionsPageItem:
        """Test GetSavingsAccountTransactionsPageItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSavingsAccountTransactionsPageItem`
        """
        model = GetSavingsAccountTransactionsPageItem()
        if include_optional:
            return GetSavingsAccountTransactionsPageItem(
                account_id = 1,
                account_no = '000000001',
                amount = 500,
                charges_paid_by_data = [
                    fineract_client.models.get_savings_account_charges_paid_by_data.GetSavingsAccountChargesPaidByData(
                        amount = 0, 
                        charge_id = 1, )
                    ],
                currency = fineract_client.models.get_transactions_currency.GetTransactionsCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    is_multiples_of = 0, 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                var_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                entry_type = 'CREDIT',
                id = 1,
                interested_posted_as_on = False,
                is_manual_transaction = False,
                is_reversal = False,
                lien_transaction = False,
                original_transaction_id = 0,
                payment_detail_data = fineract_client.models.get_transactions_payment_detail_data.GetTransactionsPaymentDetailData(
                    account_number = 'acc123', 
                    bank_number = 'ban123', 
                    check_number = 'che123', 
                    id = 1, 
                    payment_type = fineract_client.models.get_payment_type_data.GetPaymentTypeData(
                        id = 1, 
                        is_system_defined = False, 
                        name = 'Money Transfer', ), 
                    receipt_number = 'rec123', 
                    routing_code = 'rou123', ),
                release_transaction_id = 0,
                reversed = False,
                running_balance = 500,
                submitted_by_username = 'mifos',
                submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                transaction_type = fineract_client.models.get_transcation_enum_data.GetTranscationEnumData(
                    amount_hold = False, 
                    amount_release = False, 
                    approve_transfer = False, 
                    code = 'savingsAccountTransactionType.deposit', 
                    deposit = True, 
                    dividend_payout = False, 
                    escheat = False, 
                    fee_deduction = False, 
                    id = 1, 
                    initiate_transfer = False, 
                    interest_posting = False, 
                    overdraft_fee = True, 
                    overdraft_interest = False, 
                    reject_transfer = False, 
                    value = 'Deposit', 
                    withdraw_transfer = False, 
                    withdrawal = False, 
                    withhold_tax = False, 
                    writtenoff = False, )
            )
        else:
            return GetSavingsAccountTransactionsPageItem(
        )
        """

    def testGetSavingsAccountTransactionsPageItem(self):
        """Test GetSavingsAccountTransactionsPageItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
