# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_savings_accounts_response import GetSavingsAccountsResponse

class TestGetSavingsAccountsResponse(unittest.TestCase):
    """GetSavingsAccountsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSavingsAccountsResponse:
        """Test GetSavingsAccountsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSavingsAccountsResponse`
        """
        model = GetSavingsAccountsResponse()
        if include_optional:
            return GetSavingsAccountsResponse(
                page_items = [
                    fineract_client.models.get_savings_page_items.GetSavingsPageItems(
                        account_no = '000000001', 
                        client_id = 1, 
                        client_name = 'small business', 
                        currency = fineract_client.models.get_savings_currency.GetSavingsCurrency(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        field_officer_id = 0, 
                        id = 1, 
                        interest_calculation_days_in_year_type = fineract_client.models.get_savings_interest_calculation_days_in_year_type.GetSavingsInterestCalculationDaysInYearType(
                            code = 'savingsInterestCalculationDaysInYearType.days365', 
                            id = 365, 
                            value = '365 Days', ), 
                        interest_calculation_type = fineract_client.models.get_savings_interest_calculation_type.GetSavingsInterestCalculationType(
                            code = 'savingsInterestCalculationType.dailybalance', 
                            id = 1, 
                            value = 'Daily Balance', ), 
                        interest_compounding_period_type = fineract_client.models.get_savings_interest_compounding_period_type.GetSavingsInterestCompoundingPeriodType(
                            code = 'savings.interest.period.savingsCompoundingInterestPeriodType.daily', 
                            id = 1, 
                            value = 'Daily', ), 
                        interest_posting_period_type = fineract_client.models.get_savings_interest_posting_period_type.GetSavingsInterestPostingPeriodType(
                            code = 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly', 
                            id = 4, 
                            value = 'Monthly', ), 
                        nominal_annual_interest_rate = 5, 
                        savings_product_id = 1, 
                        savings_product_name = 'Passbook Savings', 
                        status = fineract_client.models.get_savings_status.GetSavingsStatus(
                            active = False, 
                            approved = False, 
                            closed = False, 
                            code = 'savingsAccountStatusType.submitted.and.pending.approval', 
                            id = 100, 
                            rejected = False, 
                            submitted_and_pending_approval = True, 
                            value = 'Submitted and pending approval', 
                            withdrawn_by_applicant = False, ), 
                        summary = fineract_client.models.get_savings_summary.GetSavingsSummary(
                            account_balance = 0, ), 
                        timeline = fineract_client.models.get_savings_timeline.GetSavingsTimeline(
                            activated_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            approved_by_firstname = 'name', 
                            approved_by_lastname = 'lastname', 
                            approved_by_username = 'mifos', 
                            approved_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            submitted_by_firstname = 'name', 
                            submitted_by_lastname = 'lastname', 
                            submitted_by_username = 'username', 
                            submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), )
                    ],
                total_filtered_records = 1
            )
        else:
            return GetSavingsAccountsResponse(
        )
        """

    def testGetSavingsAccountsResponse(self):
        """Test GetSavingsAccountsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
