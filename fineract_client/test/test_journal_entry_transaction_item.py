# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.journal_entry_transaction_item import JournalEntryTransactionItem

class TestJournalEntryTransactionItem(unittest.TestCase):
    """JournalEntryTransactionItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JournalEntryTransactionItem:
        """Test JournalEntryTransactionItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JournalEntryTransactionItem`
        """
        model = JournalEntryTransactionItem()
        if include_optional:
            return JournalEntryTransactionItem(
                amount = 100,
                comments = 'Manual entry',
                created_by_user_id = 1,
                created_by_user_name = 'mifos',
                created_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                currency = fineract_client.models.currency_item.CurrencyItem(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    in_multiples_of = 100, 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                entity_id = 1,
                entity_type = fineract_client.models.enum_option_type.EnumOptionType(
                    code = 'accountType.asset', 
                    id = 2, 
                    value = 'ASSET', ),
                entry_type = fineract_client.models.enum_option_type.EnumOptionType(
                    code = 'accountType.asset', 
                    id = 2, 
                    value = 'ASSET', ),
                gl_account_code = '0123-4567',
                gl_account_id = 10,
                gl_account_name = 'Cash Account',
                gl_account_type = fineract_client.models.enum_option_type.EnumOptionType(
                    code = 'accountType.asset', 
                    id = 2, 
                    value = 'ASSET', ),
                id = 1,
                manual_entry = False,
                office_id = 1,
                office_name = 'Head Office',
                office_running_balance = 1234.56,
                organization_running_balance = 1234.56,
                reference_number = 'QWERTY',
                reversed = False,
                running_balance_computed = False,
                submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                transaction_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                transaction_details = fineract_client.models.transaction_details.TransactionDetails(
                    note_data = fineract_client.models.get_resource_type_resource_id_notes_response.GetResourceTypeResourceIdNotesResponse(
                        client_id = 1, 
                        created_by_id = 1, 
                        created_by_username = 'mifos', 
                        created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = 2, 
                        note = 'First note edited', 
                        note_type = fineract_client.models.get_notes_note_type.GetNotesNoteType(
                            code = 'noteType.client', 
                            description = 'Client note', 
                            id = 100, ), 
                        updated_by_id = 1, 
                        updated_by_username = 'mifos', 
                        updated_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    payment_details = fineract_client.models.payment_detail_data.PaymentDetailData(
                        account_number = 'acc123', 
                        bank_number = 'ban123', 
                        check_number = 'che123', 
                        id = 62, 
                        payment_type = fineract_client.models.payment_type.PaymentType(
                            id = 11, 
                            is_system_defined = True, 
                            name = 'DOWN_PAYMENT', ), 
                        receipt_number = 'rec123', 
                        routing_code = 'rou123', ), 
                    transaction_id = 2, 
                    transaction_type = fineract_client.models.enum_option_type.EnumOptionType(
                        code = 'accountType.asset', 
                        id = 2, 
                        value = 'ASSET', ), ),
                transaction_id = 'L12'
            )
        else:
            return JournalEntryTransactionItem(
        )
        """

    def testJournalEntryTransactionItem(self):
        """Test JournalEntryTransactionItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
