# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loans_loan_id_response import GetLoansLoanIdResponse

class TestGetLoansLoanIdResponse(unittest.TestCase):
    """GetLoansLoanIdResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoansLoanIdResponse:
        """Test GetLoansLoanIdResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoansLoanIdResponse`
        """
        model = GetLoansLoanIdResponse()
        if include_optional:
            return GetLoansLoanIdResponse(
                account_no = '000000001',
                amortization_type = fineract_client.models.get_loans_loan_id_amortization_type.GetLoansLoanIdAmortizationType(
                    code = 'amortizationType.equal.installments', 
                    description = 'Equal installments', 
                    id = 1, ),
                annual_interest_rate = 24,
                approved_principal = 1000,
                charged_off = False,
                charges = [
                    fineract_client.models.get_loans_loan_id_loan_charge_data.GetLoansLoanIdLoanChargeData(
                        amount = 102, 
                        amount_or_percentage = 102, 
                        amount_outstanding = 102, 
                        amount_paid = 12, 
                        amount_percentage_applied_to = 13.56, 
                        amount_waived = 14, 
                        amount_written_off = 102, 
                        charge_calculation_type = fineract_client.models.get_loans_loan_id_enum_option_data.GetLoansLoanIdEnumOptionData(
                            code = 'chargeTimeType.specifiedDueDate', 
                            id = 2, 
                            value = 'Specified due date', ), 
                        charge_id = 5, 
                        charge_payable = False, 
                        charge_payment_mode = fineract_client.models.get_loans_loan_id_enum_option_data.GetLoansLoanIdEnumOptionData(
                            code = 'chargeTimeType.specifiedDueDate', 
                            id = 2, 
                            value = 'Specified due date', ), 
                        charge_time_type = , 
                        currency = fineract_client.models.get_loans_loan_id_currency.GetLoansLoanIdCurrency(
                            code = 'UGX', 
                            decimal_places = 2, 
                            display_label = 'Uganda Shilling (USh)', 
                            display_symbol = 'USh', 
                            name = 'Uganda Shilling', 
                            name_code = 'currency.UGX', ), 
                        due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        id = 3, 
                        installment_charge_data = [
                            fineract_client.models.get_loans_loan_id_loan_installment_charge_data.GetLoansLoanIdLoanInstallmentChargeData(
                                amount = 13.56, 
                                amount_accrued = 13.56, 
                                amount_outstanding = 13.56, 
                                amount_unrecognized = 13.56, 
                                amount_waived = 13.56, 
                                due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                installment_number = 2, 
                                paid = False, 
                                waived = False, )
                            ], 
                        loan_id = 3, 
                        max_cap = 30, 
                        min_cap = 30, 
                        name = 'snooze fee', 
                        paid = False, 
                        penalty = False, 
                        percentage = 3.4, 
                        waived = False, )
                    ],
                client_external_id = '5e77989e-aa11-11bc-b109-0242ac120004',
                client_id = 1,
                client_name = 'Kampala first Client',
                client_office_id = 2,
                currency = fineract_client.models.get_loans_loan_id_currency.GetLoansLoanIdCurrency(
                    code = 'UGX', 
                    decimal_places = 2, 
                    display_label = 'Uganda Shilling (USh)', 
                    display_symbol = 'USh', 
                    name = 'Uganda Shilling', 
                    name_code = 'currency.UGX', ),
                delinquency_range = fineract_client.models.get_delinquency_ranges_response.GetDelinquencyRangesResponse(
                    classification = 'Delinquent 1', 
                    id = 1, 
                    maximum_age_days = 3, 
                    minimum_age_days = 1, ),
                delinquent = fineract_client.models.get_loans_loan_id_delinquency_summary.GetLoansLoanIdDelinquencySummary(
                    available_disbursement_amount = 100, 
                    delinquency_pause_periods = [
                        fineract_client.models.get_loans_loan_id_delinquency_pause_period.GetLoansLoanIdDelinquencyPausePeriod(
                            active = True, 
                            pause_period_end = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            pause_period_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                        ], 
                    delinquent_amount = 100, 
                    delinquent_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    delinquent_days = 4, 
                    delinquent_fee = 6, 
                    delinquent_interest = 10, 
                    delinquent_penalty = 4, 
                    delinquent_principal = 80, 
                    installment_level_delinquency = [
                        fineract_client.models.get_loans_loan_id_loan_installment_level_delinquency.GetLoansLoanIdLoanInstallmentLevelDelinquency(
                            classification = 'Delinquency Range 3 to 5 days', 
                            delinquent_amount = 250, 
                            maximum_age_days = 5, 
                            minimum_age_days = 3, 
                            range_id = 112, )
                        ], 
                    last_payment_amount = 100, 
                    last_payment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    last_repayment_amount = 100, 
                    last_repayment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    next_payment_due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    past_due_days = 12, ),
                disallow_expected_disbursements = False,
                disbursed_amount_percentage_for_down_payment = 0,
                disbursement_details = [
                    fineract_client.models.get_loans_loan_id_disbursement_details.GetLoansLoanIdDisbursementDetails(
                        actual_disbursement_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        approved_principal = 22000, 
                        charge_amount = 22000, 
                        date_format = 'dd MMMM yyyy', 
                        expected_disbursement_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        id = 71, 
                        loan_charge_id = '1', 
                        locale = 'de_DE', 
                        net_disbursal_amount = 22000, 
                        note = 'some note', 
                        principal = 22000, 
                        waived_charge_amount = 22000, )
                    ],
                enable_auto_repayment_for_down_payment = False,
                enable_down_payment = False,
                enable_installment_level_delinquency = False,
                external_id = '95174ff9-1a75-4d72-a413-6f9b1cb988b7',
                fixed_length = 1,
                fixed_principal_percentage_per_installment = 5.5,
                fraud = False,
                id = 1,
                in_arrears_tolerance = 3,
                interest_calculation_period_type = fineract_client.models.get_loans_loan_id_interest_calculation_period_type.GetLoansLoanIdInterestCalculationPeriodType(
                    code = 'interestCalculationPeriodType.same.as.repayment.period', 
                    description = 'Same as repayment period', 
                    id = 1, ),
                interest_rate_frequency_type = fineract_client.models.get_loans_loan_id_interest_rate_frequency_type.GetLoansLoanIdInterestRateFrequencyType(
                    code = 'interestRateFrequency.periodFrequencyType.years', 
                    description = 'Per year', 
                    id = 3, ),
                interest_rate_per_period = 24,
                interest_type = fineract_client.models.get_loans_loan_id_interest_type.GetLoansLoanIdInterestType(
                    code = 'interestType.flat', 
                    description = 'Flat', 
                    id = 1, ),
                is_floating_interest_rate = False,
                last_closed_business_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                loan_officer_id = 2,
                loan_officer_name = 'LoanOfficer, Kampala',
                loan_product_description = 'Typical Kampala loan product with cash accounting enabled for testing.',
                loan_product_id = 1,
                loan_product_name = 'Kampala Product (with cash accounting)',
                loan_purpose_id = 22,
                loan_purpose_name = 'option.HousingImprovement',
                loan_schedule_processing_type = fineract_client.models.enum_option_data.EnumOptionData(
                    code = '', 
                    id = 56, 
                    value = '', ),
                loan_schedule_type = fineract_client.models.enum_option_data.EnumOptionData(
                    code = '', 
                    id = 56, 
                    value = '', ),
                loan_type = fineract_client.models.get_loans_loan_id_loan_type.GetLoansLoanIdLoanType(
                    code = 'loanType.individual', 
                    description = 'Individual', 
                    id = 1, ),
                net_disbursal_amount = 200,
                number_of_repayments = 12,
                overpaid_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                principal = 1000000,
                proposed_principal = 1001,
                repayment_every = 1,
                repayment_frequency_type = fineract_client.models.get_loans_loan_id_repayment_frequency_type.GetLoansLoanIdRepaymentFrequencyType(
                    code = 'repaymentFrequency.periodFrequencyType.months', 
                    description = 'Months', 
                    id = 2, ),
                repayment_schedule = fineract_client.models.get_loans_loan_id_repayment_schedule.GetLoansLoanIdRepaymentSchedule(
                    currency = fineract_client.models.get_loans_loan_id_currency.GetLoansLoanIdCurrency(
                        code = 'UGX', 
                        decimal_places = 2, 
                        display_label = 'Uganda Shilling (USh)', 
                        display_symbol = 'USh', 
                        name = 'Uganda Shilling', 
                        name_code = 'currency.UGX', ), 
                    loan_term_in_days = 30, 
                    periods = [
                        fineract_client.models.get_loans_loan_id_repayment_period.GetLoansLoanIdRepaymentPeriod(
                            complete = True, 
                            days_in_period = 30, 
                            down_payment_period = True, 
                            due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            fee_charges_due = 0, 
                            fee_charges_outstanding = 20, 
                            fee_charges_paid = 20, 
                            fee_charges_waived = 20, 
                            fee_charges_written_off = 20, 
                            from_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            interest_due = 0, 
                            interest_original_due = 0, 
                            interest_outstanding = 0, 
                            interest_paid = 0, 
                            interest_waived = 0, 
                            interest_written_off = 0, 
                            obligations_met_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            penalty_charges_due = 20, 
                            penalty_charges_outstanding = 20, 
                            penalty_charges_paid = 20, 
                            penalty_charges_waived = 20, 
                            penalty_charges_written_off = 20, 
                            period = 1, 
                            principal_due = 200, 
                            principal_loan_balance_outstanding = 20, 
                            principal_original_due = 200, 
                            principal_outstanding = 20, 
                            principal_paid = 200, 
                            principal_written_off = 0, 
                            total_actual_cost_of_loan_for_period = 20, 
                            total_credits = 2, 
                            total_due_for_period = 20, 
                            total_installment_amount_for_period = 200, 
                            total_original_due_for_period = 20, 
                            total_outstanding_for_period = 200, 
                            total_paid_for_period = 20, 
                            total_paid_in_advance_for_period = 20, 
                            total_paid_late_for_period = 20, 
                            total_waived_for_period = 20, 
                            total_written_off_for_period = 20, )
                        ], 
                    total_fee_charges_charged = 0, 
                    total_interest_charged = 0, 
                    total_outstanding = 0, 
                    total_paid_in_advance = 200, 
                    total_paid_late = 0, 
                    total_penalty_charges_charged = 0, 
                    total_principal_disbursed = 200, 
                    total_principal_expected = 200, 
                    total_principal_paid = 200, 
                    total_repayment_expected = 200, 
                    total_waived = 0, 
                    total_written_off = 0, ),
                status = fineract_client.models.get_loans_loan_id_status.GetLoansLoanIdStatus(
                    active = True, 
                    closed = False, 
                    closed_obligations_met = False, 
                    closed_rescheduled = False, 
                    closed_written_off = False, 
                    code = 'loanStatusType.active', 
                    description = 'Active', 
                    id = 300, 
                    overpaid = False, 
                    pending_approval = False, 
                    waiting_for_disbursal = False, ),
                summary = fineract_client.models.get_loans_loan_id_summary.GetLoansLoanIdSummary(
                    can_disburse = False, 
                    charge_off_reason = 'reason', 
                    charge_off_reason_id = 1, 
                    currency = fineract_client.models.get_loans_loan_id_currency.GetLoansLoanIdCurrency(
                        code = 'UGX', 
                        decimal_places = 2, 
                        display_label = 'Uganda Shilling (USh)', 
                        display_symbol = 'USh', 
                        name = 'Uganda Shilling', 
                        name_code = 'currency.UGX', ), 
                    disbursement_details = [
                        fineract_client.models.get_loans_loan_id_disbursement_details.GetLoansLoanIdDisbursementDetails(
                            actual_disbursement_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            approved_principal = 22000, 
                            charge_amount = 22000, 
                            date_format = 'dd MMMM yyyy', 
                            expected_disbursement_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            id = 71, 
                            loan_charge_id = '1', 
                            locale = 'de_DE', 
                            net_disbursal_amount = 22000, 
                            note = 'some note', 
                            principal = 22000, 
                            waived_charge_amount = 22000, )
                        ], 
                    emi_amount_variations = [
                        fineract_client.models.get_loans_loan_id_emi_variations.GetLoansLoanIdEmiVariations()
                        ], 
                    fee_adjustments = 0, 
                    fee_charges_charged = 18000, 
                    fee_charges_due_at_disbursement_charged = 0, 
                    fee_charges_outstanding = 18000, 
                    fee_charges_overdue = 15000, 
                    fee_charges_paid = 0, 
                    fee_charges_waived = 0, 
                    fee_charges_written_off = 0, 
                    fixed_emi_amount = 1100, 
                    in_arrears = True, 
                    interest_charged = 240000, 
                    interest_outstanding = 240000, 
                    interest_overdue = 200000, 
                    interest_paid = 0, 
                    interest_waived = 0, 
                    interest_written_off = 0, 
                    is_npa = False, 
                    linked_account = fineract_client.models.get_loans_loan_id_linked_account.GetLoansLoanIdLinkedAccount(
                        account_no = 1, 
                        id = 1, ), 
                    max_outstanding_loan_balance = 35000, 
                    overdue_charges = [
                        fineract_client.models.get_loans_loan_id_overdue_charges.GetLoansLoanIdOverdueCharges(
                            active = True, 
                            amount = 3, 
                            charge_applies_to = fineract_client.models.get_loan_charge_template_charge_applies_to.GetLoanChargeTemplateChargeAppliesTo(
                                code = 'chargeAppliesTo.loan', 
                                description = 'Loan', 
                                id = 1, ), 
                            charge_calculation_type = fineract_client.models.get_loans_loan_id_charge_calculation_type.GetLoansLoanIdChargeCalculationType(
                                code = 'chargeCalculationType.percent.of.amount', 
                                description = '% Amount', 
                                id = 2, ), 
                            charge_payment_mode = fineract_client.models.get_loans_loan_id_charge_payment_mode.GetLoansLoanIdChargePaymentMode(
                                code = 'chargepaymentmode.regular', 
                                description = 'Regular', 
                                id = 0, ), 
                            charge_time_type = fineract_client.models.get_loans_loan_id_charge_time_type.GetLoansLoanIdChargeTimeType(
                                code = 'chargeTimeType.overdueInstallment', 
                                description = 'overdue fees', 
                                id = 9, ), 
                            fee_frequency = fineract_client.models.get_loans_loan_id_fee_frequency.GetLoansLoanIdFeeFrequency(
                                code = 'feeFrequencyperiodFrequencyType.weeks', 
                                description = 'Weeks', 
                                id = 1, ), 
                            fee_interval = 2, 
                            id = 20, 
                            name = 'overdraft penality', 
                            penalty = True, )
                        ], 
                    overdue_since_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    penalty_adjustments = 0, 
                    penalty_charges_charged = 0, 
                    penalty_charges_outstanding = 0, 
                    penalty_charges_overdue = 0, 
                    penalty_charges_paid = 0, 
                    penalty_charges_waived = 0, 
                    penalty_charges_written_off = 0, 
                    principal_adjustments = 0, 
                    principal_disbursed = 1000000, 
                    principal_outstanding = 1000000, 
                    principal_overdue = 833333.3, 
                    principal_paid = 0, 
                    principal_written_off = 0, 
                    total_charge_adjustment = 0, 
                    total_charge_adjustment_reversed = 0, 
                    total_chargeback = 0, 
                    total_cost_of_loan = 0, 
                    total_credit_balance_refund = 0, 
                    total_credit_balance_refund_reversed = 0, 
                    total_expected_cost_of_loan = 258000, 
                    total_expected_repayment = 1258000, 
                    total_goodwill_credit = 0, 
                    total_goodwill_credit_reversed = 0, 
                    total_interest_payment_waiver = 0, 
                    total_interest_refund = 0, 
                    total_merchant_refund = 0, 
                    total_merchant_refund_reversed = 0, 
                    total_outstanding = 1258000, 
                    total_overdue = 1048333.3, 
                    total_payout_refund = 0, 
                    total_payout_refund_reversed = 0, 
                    total_recovered = 2456.3, 
                    total_repayment = 0, 
                    total_repayment_transaction = 0, 
                    total_repayment_transaction_reversed = 0, 
                    total_unpaid_payable_due_interest = 0, 
                    total_unpaid_payable_not_due_interest = 0, 
                    total_waived = 0, 
                    total_written_off = 0, 
                    writeoff_reason = 'reason', 
                    writeoff_reason_id = 1, ),
                term_frequency = 12,
                term_period_frequency_type = fineract_client.models.get_loans_loan_id_term_period_frequency_type.GetLoansLoanIdTermPeriodFrequencyType(
                    code = 'termFrequency.periodFrequencyType.months', 
                    description = 'Months', 
                    id = 2, ),
                timeline = fineract_client.models.get_loans_loan_id_timeline.GetLoansLoanIdTimeline(
                    actual_disbursement_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    actual_maturity_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    approved_by_firstname = 'App', 
                    approved_by_lastname = 'Administrator', 
                    approved_by_username = 'admin', 
                    approved_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    charged_off_by_firstname = 'App', 
                    charged_off_by_lastname = 'Administrator', 
                    charged_off_by_username = 'admin', 
                    charged_off_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    closed_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    disbursed_by_firstname = 'App', 
                    disbursed_by_lastname = 'Administrator', 
                    disbursed_by_username = 'admin', 
                    expected_disbursement_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    expected_maturity_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    submitted_by_firstname = 'App', 
                    submitted_by_lastname = 'Administrator', 
                    submitted_by_username = 'admin', 
                    submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                total_overpaid = 250,
                transaction_processing_strategy_code = 'mifos-standard-strategy',
                transactions = [
                    fineract_client.models.get_loans_loan_id_transactions.GetLoansLoanIdTransactions(
                        account_id = 7327, 
                        account_number = 'acct123', 
                        amount = 100, 
                        bank_number = 34645568, 
                        check_number = 10001, 
                        currency = fineract_client.models.get_loans_loan_id_currency.GetLoansLoanIdCurrency(
                            code = 'UGX', 
                            decimal_places = 2, 
                            display_label = 'Uganda Shilling (USh)', 
                            display_symbol = 'USh', 
                            name = 'Uganda Shilling', 
                            name_code = 'currency.UGX', ), 
                        date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        date_format = 'dd MMMM yyyy', 
                        external_id = '3', 
                        fee_charges_portion = 100, 
                        fixed_emi_amount = 100, 
                        id = 1, 
                        interest_portion = 100, 
                        loan_charge_paid_by_list = [
                            fineract_client.models.get_loans_loan_id_loan_charge_paid_by_data.GetLoansLoanIdLoanChargePaidByData(
                                amount = 100, 
                                charge_id = 1, 
                                id = 11, 
                                installment_number = 9679, 
                                name = 'name', 
                                transaction_id = 636, )
                            ], 
                        loan_repayment_schedule_installments = [
                            fineract_client.models.get_loans_loan_id_loan_repayment_schedule_installment_data.GetLoansLoanIdLoanRepaymentScheduleInstallmentData(
                                amount = 100, 
                                date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                id = 1, 
                                installment_id = 11, )
                            ], 
                        locale = 'de_DE', 
                        manually_reversed = True, 
                        net_disbursal_amount = 100, 
                        number_of_repayments = 4, 
                        office_id = 1, 
                        office_name = 'Head Office', 
                        outstanding_loan_balance = 100, 
                        overpayment_portion = 100, 
                        payment_detail_data = fineract_client.models.get_loans_loan_id_payment_detail_data.GetLoansLoanIdPaymentDetailData(
                            account_number = 'acc123', 
                            bank_number = 'ban123', 
                            check_number = 'che123', 
                            id = 62, 
                            payment_type = fineract_client.models.get_loans_loan_id_payment_type.GetLoansLoanIdPaymentType(
                                description = 'Cash Payment', 
                                id = 11, 
                                is_cash_payment = True, 
                                name = 'Cash', 
                                position = 0, ), 
                            receipt_number = 'rec123', 
                            routing_code = 'rou123', ), 
                        payment_type_id = 101, 
                        payment_type_options = [
                            fineract_client.models.get_loans_loan_id_payment_type.GetLoansLoanIdPaymentType(
                                description = 'Cash Payment', 
                                id = 11, 
                                is_cash_payment = True, 
                                name = 'Cash', 
                                position = 0, )
                            ], 
                        penalty_charges_portion = 100, 
                        possible_next_repayment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        principal_portion = 100, 
                        receipt_number = 67863, 
                        reversal_external_id = '95174ff9-1a75-4d72-a413-6f9b1cb988b7', 
                        reversed_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        routing_code = 6337, 
                        submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        transaction_amount = 100, 
                        transaction_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        transaction_relations = [
                            fineract_client.models.get_loans_loan_id_loan_transaction_relation.GetLoansLoanIdLoanTransactionRelation(
                                amount = 100, 
                                from_loan_transaction = 1, 
                                relation_type = 'CHARGEBACK', 
                                to_loan_charge = 10, 
                                to_loan_transaction = 10, )
                            ], 
                        transaction_type = 'repayment', 
                        type = fineract_client.models.get_loans_loan_id_loan_transaction_enum_data.GetLoansLoanIdLoanTransactionEnumData(
                            accrual = False, 
                            approve_transfer = False, 
                            charge_adjustment = False, 
                            charge_payment = False, 
                            chargeoff = False, 
                            code = 'loanTransactionType.repayment', 
                            contra = False, 
                            credit_balance_refund = False, 
                            disbursement = False, 
                            goodwill_credit = False, 
                            id = 1, 
                            initiate_transfer = False, 
                            merchant_issued_refund = False, 
                            payout_refund = False, 
                            recovery_repayment = False, 
                            refund = False, 
                            refund_for_active_loans = False, 
                            reject_transfer = False, 
                            repayment = True, 
                            repayment_at_disbursement = False, 
                            value = '2', 
                            waive_charges = False, 
                            waive_interest = False, 
                            withdraw_transfer = False, 
                            write_off = False, ), 
                        unrecognized_income_portion = 100, 
                        write_off_reason_options = [
                            fineract_client.models.get_loans_loan_id_code_value_data.GetLoansLoanIdCodeValueData(
                                active = True, 
                                description = 'code description', 
                                id = 1, 
                                mandatory = False, 
                                name = 'code name', 
                                position = 0, )
                            ], )
                    ]
            )
        else:
            return GetLoansLoanIdResponse(
        )
        """

    def testGetLoansLoanIdResponse(self):
        """Test GetLoansLoanIdResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
