# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.put_loan_products_product_id_request import PutLoanProductsProductIdRequest

class TestPutLoanProductsProductIdRequest(unittest.TestCase):
    """PutLoanProductsProductIdRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PutLoanProductsProductIdRequest:
        """Test PutLoanProductsProductIdRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PutLoanProductsProductIdRequest`
        """
        model = PutLoanProductsProductIdRequest()
        if include_optional:
            return PutLoanProductsProductIdRequest(
                account_moves_out_of_npa_only_on_arrears_completion = False,
                accounting_rule = 3,
                allow_approved_disbursed_amounts_over_applied = True,
                allow_attribute_overrides = fineract_client.models.allow_attribute_overrides.AllowAttributeOverrides(
                    amortization_type = True, 
                    grace_on_arrears_ageing = True, 
                    grace_on_principal_and_interest_payment = True, 
                    in_arrears_tolerance = True, 
                    interest_calculation_period_type = True, 
                    interest_type = True, 
                    repayment_every = True, 
                    transaction_processing_strategy_code = True, ),
                allow_compounding_on_eod = False,
                allow_partial_period_interest_calcualtion = True,
                allow_variable_installments = False,
                amortization_type = 1,
                can_define_installment_amount = True,
                can_use_for_topup = False,
                charge_off_expense_account_id = 12,
                charge_off_fraud_expense_account_id = 13,
                charges = [
                    fineract_client.models.charge_data.ChargeData(
                        id = 1, )
                    ],
                close_date = '10 July 2022',
                credit_allocation = [],
                currency_code = 'USD',
                date_format = 'dd MMMM yyyy',
                days_in_month_type = 1,
                days_in_year_type = 1,
                delinquency_bucket_id = 1,
                description = 'non-interest bearing product',
                digits_after_decimal = 2,
                disallow_expected_disbursements = True,
                disbursed_amount_percentage_for_down_payment = 5.5,
                due_days_for_repayment_event = 3,
                enable_accrual_activity_posting = False,
                enable_auto_repayment_for_down_payment = False,
                enable_down_payment = False,
                enable_installment_level_delinquency = False,
                fee_to_income_account_mappings = [
                    fineract_client.models.get_loan_fee_to_income_account_mappings.GetLoanFeeToIncomeAccountMappings(
                        charge = fineract_client.models.get_loan_charge.GetLoanCharge(
                            active = False, 
                            id = 1, 
                            name = 'flat install', 
                            penalty = False, ), 
                        charge_id = 10, 
                        income_account = fineract_client.models.get_gl_account_mapping.GetGlAccountMapping(
                            gl_code = '012-34-65', 
                            id = 10, 
                            name = 'Cash Account', ), 
                        income_account_id = 39, )
                    ],
                fixed_length = 56,
                fixed_principal_percentage_per_installment = 5.5,
                fund_id = 3,
                fund_source_account_id = 4,
                goodwill_credit_account_id = 48,
                grace_on_arrears_ageing = 3,
                grace_on_interest_payment = 3,
                grace_on_principal_payment = 3,
                hold_guarantee_funds = False,
                in_arrears_tolerance = 90,
                in_multiples_of = 1,
                include_in_borrower_cycle = False,
                income_from_charge_off_fees_account_id = 11,
                income_from_charge_off_interest_account_id = 20,
                income_from_charge_off_penalty_account_id = 11,
                income_from_fee_account_id = 37,
                income_from_goodwill_credit_fees_account_id = 11,
                income_from_goodwill_credit_interest_account_id = 20,
                income_from_goodwill_credit_penalty_account_id = 11,
                income_from_penalty_account_id = 35,
                income_from_recovery_account_id = 15,
                installment_amount_in_multiples_of = 1,
                interest_calculation_period_type = 1,
                interest_on_loan_account_id = 34,
                interest_rate_frequency_type = 2,
                interest_rate_per_period = 1.75,
                interest_rate_variations_for_borrower_cycle = [],
                interest_recalculation_compounding_method = 1,
                interest_type = 0,
                is_arrears_based_on_original_schedule = False,
                is_compounding_to_be_posted_as_transaction = False,
                is_equal_amortization = False,
                is_interest_recalculation_enabled = False,
                is_linked_to_floating_interest_rates = False,
                loan_portfolio_account_id = 8,
                loan_schedule_processing_type = 'HORIZONTAL',
                loan_schedule_type = 'CUMULATIVE',
                locale = 'en_GB',
                max_interest_rate_per_period = 23.4,
                max_number_of_repayments = 1,
                max_principal = 15000,
                max_tranche_count = 3,
                min_interest_rate_per_period = 0,
                min_number_of_repayments = 1,
                min_principal = 5000,
                minimum_days_between_disbursal_and_first_repayment = 30,
                multi_disburse_loan = True,
                name = 'LP Accrual Accounting',
                number_of_repayment_variations_for_borrower_cycle = [],
                number_of_repayments = 12,
                outstanding_loan_balance = 36000,
                over_applied_calculation_type = 'percentage',
                over_applied_number = 50,
                over_due_days_for_repayment_event = 3,
                overdue_days_for_npa = 179,
                overpayment_liability_account_id = 2,
                payment_allocation = [],
                payment_channel_to_fund_source_mappings = [
                    fineract_client.models.get_loan_payment_channel_to_fund_source_mappings.GetLoanPaymentChannelToFundSourceMappings(
                        fund_source_account_id = 39, 
                        payment_type_id = 10, )
                    ],
                penalty_to_income_account_mappings = [
                    fineract_client.models.charge_to_gl_account_mapper.ChargeToGLAccountMapper(
                        charge = fineract_client.models.charge_data.ChargeData(
                            id = 1, ), 
                        income_account = fineract_client.models.gl_account_data.GLAccountData(
                            account_type_options = [
                                fineract_client.models.enum_option_data.EnumOptionData(
                                    code = '', 
                                    id = 56, 
                                    value = '', )
                                ], 
                            allowed_assets_tag_options = [
                                fineract_client.models.code_value_data.CodeValueData(
                                    active = True, 
                                    description = '', 
                                    id = 56, 
                                    mandatory = True, 
                                    name = '', 
                                    position = 56, )
                                ], 
                            allowed_equity_tag_options = [
                                fineract_client.models.code_value_data.CodeValueData(
                                    active = True, 
                                    description = '', 
                                    id = 56, 
                                    mandatory = True, 
                                    name = '', 
                                    position = 56, )
                                ], 
                            allowed_expenses_tag_options = [
                                
                                ], 
                            allowed_income_tag_options = [
                                
                                ], 
                            allowed_liabilities_tag_options = [
                                
                                ], 
                            asset_header_account_options = [
                                fineract_client.models.gl_account_data.GLAccountData(
                                    description = '', 
                                    disabled = True, 
                                    equity_header_account_options = [
                                        
                                        ], 
                                    expense_header_account_options = [
                                        
                                        ], 
                                    gl_code = '', 
                                    id = 56, 
                                    income_header_account_options = [
                                        
                                        ], 
                                    liability_header_account_options = [
                                        
                                        ], 
                                    manual_entries_allowed = True, 
                                    name = '', 
                                    name_decorated = '', 
                                    organization_running_balance = 56, 
                                    parent_id = 56, 
                                    row_index = 56, 
                                    tag_id = , 
                                    type = fineract_client.models.enum_option_data.EnumOptionData(
                                        code = '', 
                                        id = 56, 
                                        value = '', ), 
                                    usage = , 
                                    usage_options = [
                                        
                                        ], )
                                ], 
                            description = '', 
                            disabled = True, 
                            equity_header_account_options = [
                                
                                ], 
                            expense_header_account_options = [
                                
                                ], 
                            gl_code = '', 
                            id = 56, 
                            income_header_account_options = [
                                
                                ], 
                            liability_header_account_options = [
                                
                                ], 
                            manual_entries_allowed = True, 
                            name = '', 
                            name_decorated = '', 
                            organization_running_balance = 56, 
                            parent_id = 56, 
                            row_index = 56, 
                            tag_id = , 
                            type = , 
                            usage = , 
                            usage_options = [
                                
                                ], ), )
                    ],
                pre_closure_interest_calculation_strategy = 1,
                principal = 10000,
                principal_threshold_for_last_installment = 50,
                principal_variations_for_borrower_cycle = [],
                rates = [
                    fineract_client.models.rate_data.RateData(
                        active = False, 
                        id = 1, 
                        name = 'some name', 
                        percentage = 20, 
                        product_apply = fineract_client.models.enum_option_data.EnumOptionData(
                            code = '', 
                            id = 56, 
                            value = '', ), )
                    ],
                recalculation_compounding_frequency_interval = 1,
                recalculation_compounding_frequency_on_day_type = 1,
                recalculation_compounding_frequency_type = 1,
                recalculation_rest_frequency_interval = 1,
                recalculation_rest_frequency_type = 50,
                receivable_fee_account_id = 11,
                receivable_interest_account_id = 9,
                receivable_penalty_account_id = 10,
                repayment_every = 1,
                repayment_frequency_type = 2,
                repayment_start_date_type = 1,
                reschedule_strategy_method = 2,
                short_name = 'LPAA',
                start_date = '10 July 2022',
                supported_interest_refund_types = [
                    ''
                    ],
                transaction_processing_strategy_code = 'mifos-standard-strategy',
                transfers_in_suspense_account_id = 5,
                use_borrower_cycle = False,
                write_off_account_id = 41
            )
        else:
            return PutLoanProductsProductIdRequest(
        )
        """

    def testPutLoanProductsProductIdRequest(self):
        """Test PutLoanProductsProductIdRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
