# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loan_reschedule_request_response import GetLoanRescheduleRequestResponse

class TestGetLoanRescheduleRequestResponse(unittest.TestCase):
    """GetLoanRescheduleRequestResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoanRescheduleRequestResponse:
        """Test GetLoanRescheduleRequestResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoanRescheduleRequestResponse`
        """
        model = GetLoanRescheduleRequestResponse()
        if include_optional:
            return GetLoanRescheduleRequestResponse(
                client_id = 15,
                client_name = 'clientName',
                id = 1,
                loan_account_number = '000000018',
                loan_id = 18,
                loan_term_variations_data = [
                    fineract_client.models.loan_term_variations_data.LoanTermVariationsData(
                        date_value = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        decimal_value = 100, 
                        id = 1, 
                        is_processed = True, 
                        is_specific_to_installment = True, 
                        term_type = fineract_client.models.loan_term_type_options.LoanTermTypeOptions(
                            code = 'loanTermType.dueDate', 
                            id = 2, 
                            value = 'dueDate', ), 
                        term_variation_applicable_from = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                recalculate_interest = False,
                reschedule_from_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                reschedule_from_installment = 1,
                reschedule_reason_code_value = fineract_client.models.reschedule_reasons_code_value.RescheduleReasonsCodeValue(
                    active = True, 
                    id = 1, 
                    mandatory = False, 
                    name = 'reason', ),
                reschedule_reason_comment = 'rescheduleReasonComment',
                status_enum = fineract_client.models.get_loan_reschedule_request_status.GetLoanRescheduleRequestStatus(
                    approved = False, 
                    code = 'loanStatusType.submitted.and.pending.approval', 
                    id = 100, 
                    pending_approval = True, 
                    rejected = False, 
                    value = 'Submitted and pending approval', ),
                timeline = fineract_client.models.reschedule_reasons_timeline.RescheduleReasonsTimeline(
                    approved_by_firstname = 'App', 
                    approved_by_lastname = 'Administrator', 
                    approved_by_username = 'mifos', 
                    approved_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    submitted_by_firstname = 'App', 
                    submitted_by_lastname = 'Administrator', 
                    submitted_by_username = 'mifos', 
                    submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
            )
        else:
            return GetLoanRescheduleRequestResponse(
        )
        """

    def testGetLoanRescheduleRequestResponse(self):
        """Test GetLoanRescheduleRequestResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
