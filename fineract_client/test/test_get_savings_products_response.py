# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_savings_products_response import GetSavingsProductsResponse

class TestGetSavingsProductsResponse(unittest.TestCase):
    """GetSavingsProductsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSavingsProductsResponse:
        """Test GetSavingsProductsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSavingsProductsResponse`
        """
        model = GetSavingsProductsResponse()
        if include_optional:
            return GetSavingsProductsResponse(
                accounting_rule = fineract_client.models.get_savings_products_accounting_rule.GetSavingsProductsAccountingRule(
                    code = 'accountingRuleType.cash', 
                    id = 2, 
                    value = 'CASH BASED', ),
                currency = fineract_client.models.get_savings_currency.GetSavingsCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                description = 'gtasga',
                id = 1,
                interest_calculation_days_in_year_type = fineract_client.models.get_savings_products_interest_calculation_days_in_year_type.GetSavingsProductsInterestCalculationDaysInYearType(
                    code = 'savingsInterestCalculationDaysInYearType.days365', 
                    id = 365, 
                    value = '365 Days', ),
                interest_calculation_type = fineract_client.models.get_savings_products_interest_calculation_type.GetSavingsProductsInterestCalculationType(
                    code = 'savingsInterestCalculationType.dailybalance', 
                    id = 1, 
                    value = 'Daily Balance', ),
                interest_compounding_period_type = fineract_client.models.get_savings_products_interest_compounding_period_type.GetSavingsProductsInterestCompoundingPeriodType(
                    code = 'savings.interest.period.savingsCompoundingInterestPeriodType.daily', 
                    id = 1, 
                    value = 'Daily', ),
                interest_posting_period_type = fineract_client.models.get_savings_products_interest_posting_period_type.GetSavingsProductsInterestPostingPeriodType(
                    code = 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly', 
                    id = 4, 
                    value = 'Monthly', ),
                name = 'Savings product',
                nominal_annual_interest_rate = 5,
                short_name = 'sa1',
                withdrawal_fee_for_transfers = False
            )
        else:
            return GetSavingsProductsResponse(
        )
        """

    def testGetSavingsProductsResponse(self):
        """Test GetSavingsProductsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
