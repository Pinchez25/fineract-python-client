# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.savings_account_charges_paid_by_data import SavingsAccountChargesPaidByData

class TestSavingsAccountChargesPaidByData(unittest.TestCase):
    """SavingsAccountChargesPaidByData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SavingsAccountChargesPaidByData:
        """Test SavingsAccountChargesPaidByData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SavingsAccountChargesPaidByData`
        """
        model = SavingsAccountChargesPaidByData()
        if include_optional:
            return SavingsAccountChargesPaidByData(
                amount = 1.337,
                charge_id = 56,
                fee_charge = True,
                penalty_charge = True,
                savings_account_charge_data = fineract_client.models.savings_account_charge_data.SavingsAccountChargeData(
                    account_id = 56, 
                    amount = 1.337, 
                    amount_or_percentage = 1.337, 
                    amount_outstanding = 1.337, 
                    amount_paid = 1.337, 
                    amount_percentage_applied_to = 1.337, 
                    amount_waived = 1.337, 
                    amount_written_off = 1.337, 
                    annual_fee = True, 
                    charge_calculation_type = fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', ), 
                    charge_data = fineract_client.models.charge_data.ChargeData(
                        id = 1, ), 
                    charge_id = 56, 
                    charge_options = [
                        fineract_client.models.charge_data.ChargeData(
                            id = 1, )
                        ], 
                    charge_time_type = fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', ), 
                    currency = fineract_client.models.currency_data.CurrencyData(
                        code = '', 
                        decimal_places = 56, 
                        display_label = '', 
                        display_symbol = '', 
                        in_multiples_of = 56, 
                        name = '', 
                        name_code = '', ), 
                    due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    fee_charge = True, 
                    fee_interval = 56, 
                    fee_on_month_day = fineract_client.models.charge_fee_on_month_day.Charge_feeOnMonthDay(
                        day_of_month = 56, 
                        month = 'JANUARY', 
                        month_value = 56, ), 
                    free_withdrawal_charge_frequency = 56, 
                    id = 56, 
                    inactivation_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    is_active = True, 
                    is_free_withdrawal = True, 
                    name = '', 
                    penalty = True, 
                    percentage = 1.337, 
                    restart_frequency = 56, 
                    restart_frequency_enum = 56, 
                    savings_activation = True, 
                    withdrawal_fee = True, )
            )
        else:
            return SavingsAccountChargesPaidByData(
        )
        """

    def testSavingsAccountChargesPaidByData(self):
        """Test SavingsAccountChargesPaidByData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
