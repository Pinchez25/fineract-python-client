# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loan_products_template_response import GetLoanProductsTemplateResponse

class TestGetLoanProductsTemplateResponse(unittest.TestCase):
    """GetLoanProductsTemplateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoanProductsTemplateResponse:
        """Test GetLoanProductsTemplateResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoanProductsTemplateResponse`
        """
        model = GetLoanProductsTemplateResponse()
        if include_optional:
            return GetLoanProductsTemplateResponse(
                accounting_mapping_options = fineract_client.models.get_loan_products_accounting_mapping_options.GetLoanProductsAccountingMappingOptions(
                    asset_account_options = [
                        fineract_client.models.get_loan_products_asset_account_options.GetLoanProductsAssetAccountOptions(
                            disabled = False, 
                            gl_code = '02', 
                            id = 2, 
                            manual_entries_allowed = True, 
                            name = 'Loan portfolio', 
                            name_decorated = 'Loan portfolio', 
                            organization_running_balance = 60000, 
                            tag_id = fineract_client.models.get_loan_products_liability_tag_id.GetLoanProductsLiabilityTagId(
                                id = 0, ), 
                            type = fineract_client.models.get_loan_products_liability_type.GetLoanProductsLiabilityType(
                                code = 'accountType.liability', 
                                description = 'LIABILITY', 
                                id = 2, ), 
                            usage = fineract_client.models.get_loan_products_liability_usage.GetLoanProductsLiabilityUsage(
                                code = 'accountUsage.detail', 
                                description = 'DETAIL', 
                                id = 1, ), )
                        ], 
                    expense_account_options = [
                        fineract_client.models.get_loan_products_expense_account_options.GetLoanProductsExpenseAccountOptions(
                            disabled = False, 
                            gl_code = '12', 
                            id = 10, 
                            manual_entries_allowed = True, 
                            name = 'loans written off 2', 
                            name_decorated = 'loans written off 2', 
                            organization_running_balance = 0, )
                        ], 
                    income_account_options = [
                        fineract_client.models.get_loan_products_income_account_options.GetLoanProductsIncomeAccountOptions(
                            disabled = False, 
                            gl_code = '04', 
                            id = 4, 
                            manual_entries_allowed = True, 
                            name = 'income from interest', 
                            name_decorated = 'income from interest', 
                            organization_running_balance = 19, )
                        ], 
                    liability_account_options = [
                        fineract_client.models.get_loan_products_liability_account_options.GetLoanProductsLiabilityAccountOptions(
                            disabled = False, 
                            gl_code = '13', 
                            id = 11, 
                            manual_entries_allowed = True, 
                            name = 'over payment', 
                            name_decorated = 'over payment', 
                            organization_running_balance = 0, )
                        ], ),
                accounting_rule = fineract_client.models.get_loan_products_accounting_rule.GetLoanProductsAccountingRule(
                    code = 'accountingRuleType.cash', 
                    description = 'CASH BASED', 
                    id = 2, ),
                accounting_rule_options = [
                    fineract_client.models.get_loan_products_accounting_rule.GetLoanProductsAccountingRule(
                        code = 'accountingRuleType.cash', 
                        description = 'CASH BASED', 
                        id = 2, )
                    ],
                advanced_payment_allocation_future_installment_allocation_rules = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                advanced_payment_allocation_transaction_types = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                advanced_payment_allocation_types = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                amortization_type = fineract_client.models.get_loan_products_amortization_type.GetLoanProductsAmortizationType(
                    code = 'amortizationType.equal.installments', 
                    description = 'Equal installments', 
                    id = 1, ),
                amortization_type_options = [
                    fineract_client.models.get_loan_products_amortization_type.GetLoanProductsAmortizationType(
                        code = 'amortizationType.equal.installments', 
                        description = 'Equal installments', 
                        id = 1, )
                    ],
                charge_options = [
                    fineract_client.models.get_loan_products_charge_options.GetLoanProductsChargeOptions(
                        active = True, 
                        amount = 100, 
                        charge_applies_to = fineract_client.models.get_loan_products_charge_applies_to.GetLoanProductsChargeAppliesTo(
                            code = 'chargeAppliesTo.loan', 
                            description = 'Loan', 
                            id = 1, ), 
                        charge_calculation_type = fineract_client.models.get_loan_charge_calculation_type.GetLoanChargeCalculationType(
                            code = 'chargeCalculationType.flat', 
                            description = 'Flat', 
                            id = 1, ), 
                        charge_payment_mode = fineract_client.models.get_loans_charge_payment_mode.GetLoansChargePaymentMode(
                            code = 'chargepaymentmode.regular', 
                            description = 'Regular', 
                            id = 0, ), 
                        charge_time_type = fineract_client.models.get_loan_charge_time_type.GetLoanChargeTimeType(
                            code = 'chargeTimeType.disbursement', 
                            description = 'Disbursement', 
                            id = 1, ), 
                        currency = fineract_client.models.get_loan_products_currency_options.GetLoanProductsCurrencyOptions(
                            code = 'USD', 
                            decimal_places = 2, 
                            display_label = 'US Dollar ($)', 
                            display_symbol = '$', 
                            name = 'US Dollar', 
                            name_code = 'currency.USD', ), 
                        id = 5, 
                        name = 'des charges', 
                        penalty = False, )
                    ],
                credit_allocation_allocation_types = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                credit_allocation_transaction_types = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                currency = fineract_client.models.get_loan_products_template_currency.GetLoanProductsTemplateCurrency(
                    code = 'USD', 
                    decimal_places = 0, 
                    display_label = '[]', 
                    display_symbol = '$', 
                    in_multiples_of = 0, 
                    name = 'Usa dollar', 
                    name_code = 'USD', ),
                currency_options = [
                    fineract_client.models.get_loan_products_currency_options.GetLoanProductsCurrencyOptions(
                        code = 'USD', 
                        decimal_places = 2, 
                        display_label = 'US Dollar ($)', 
                        display_symbol = '$', 
                        name = 'US Dollar', 
                        name_code = 'currency.USD', )
                    ],
                days_in_month_type = fineract_client.models.get_loans_products_days_in_month_template_type.GetLoansProductsDaysInMonthTemplateType(
                    code = 'DaysInMonthType.actual', 
                    description = 'Actual', 
                    id = 1, ),
                days_in_month_type_options = [
                    fineract_client.models.get_loans_products_days_in_month_template_type.GetLoansProductsDaysInMonthTemplateType(
                        code = 'DaysInMonthType.actual', 
                        description = 'Actual', 
                        id = 1, )
                    ],
                days_in_year_type = fineract_client.models.get_loan_products_days_in_year_template_type.GetLoanProductsDaysInYearTemplateType(
                    code = 'DaysInYearType.actual', 
                    description = 'Actual', 
                    id = 1, ),
                days_in_year_type_options = [
                    fineract_client.models.get_loan_products_interest_template_type.GetLoanProductsInterestTemplateType(
                        code = 'interestType.declining.balance', 
                        description = 'Declining Balance', 
                        id = 0, )
                    ],
                include_in_borrower_cycle = False,
                interest_calculation_period_type = fineract_client.models.get_loans_products_interest_calculation_period_type.GetLoansProductsInterestCalculationPeriodType(
                    code = 'interestCalculationPeriodType.same.as.repayment.period', 
                    description = 'Same as repayment period', 
                    id = 1, ),
                interest_calculation_period_type_options = [
                    fineract_client.models.get_loans_products_interest_calculation_period_type.GetLoansProductsInterestCalculationPeriodType(
                        code = 'interestCalculationPeriodType.same.as.repayment.period', 
                        description = 'Same as repayment period', 
                        id = 1, )
                    ],
                interest_rate_frequency_type = fineract_client.models.get_loan_products_interest_rate_template_frequency_type.GetLoanProductsInterestRateTemplateFrequencyType(
                    code = 'interestRateFrequency.periodFrequencyType.months', 
                    description = 'Per month', 
                    id = 2, ),
                interest_rate_frequency_type_options = [
                    fineract_client.models.get_loan_products_interest_rate_template_frequency_type.GetLoanProductsInterestRateTemplateFrequencyType(
                        code = 'interestRateFrequency.periodFrequencyType.months', 
                        description = 'Per month', 
                        id = 2, )
                    ],
                interest_rate_variations_for_borrower_cycle = [],
                interest_recalculation_compounding_type_options = [
                    fineract_client.models.get_loan_products_interest_recalculation_compounding_type.GetLoanProductsInterestRecalculationCompoundingType(
                        code = 'interestRecalculationCompoundingMethod.fee', 
                        description = 'Fee', 
                        id = 2, )
                    ],
                interest_recalculation_data = fineract_client.models.get_loan_products_interest_recalculation_template_data.GetLoanProductsInterestRecalculationTemplateData(
                    interest_recalculation_compounding_type = fineract_client.models.get_loan_products_interest_recalculation_compounding_type.GetLoanProductsInterestRecalculationCompoundingType(
                        code = 'interestRecalculationCompoundingMethod.fee', 
                        description = 'Fee', 
                        id = 2, ), 
                    pre_closure_interest_calculation_strategy = fineract_client.models.get_loan_products_pre_closure_interest_calculation_strategy.GetLoanProductsPreClosureInterestCalculationStrategy(
                        code = 'loanPreClosureInterestCalculationStrategy.tillPreClosureDate', 
                        description = 'Till preclose Date', 
                        id = 1, ), 
                    reschedule_strategy_type = fineract_client.models.get_loan_products_reschedule_strategy_type.GetLoanProductsRescheduleStrategyType(
                        code = 'loanRescheduleStrategyMethod.reduce.number.of.installments', 
                        description = 'Reduce number of installments', 
                        id = 2, ), ),
                interest_recalculation_frequency_type_options = [
                    fineract_client.models.get_loan_products_interest_recalculation_compounding_frequency_type.GetLoanProductsInterestRecalculationCompoundingFrequencyType(
                        code = 'interestRecalculationFrequencyType.same.as.repayment.period', 
                        description = 'Same as repayment period', 
                        id = 1, )
                    ],
                interest_type = fineract_client.models.get_loan_products_interest_template_type.GetLoanProductsInterestTemplateType(
                    code = 'interestType.declining.balance', 
                    description = 'Declining Balance', 
                    id = 0, ),
                interest_type_options = [
                    fineract_client.models.get_loan_products_interest_template_type.GetLoanProductsInterestTemplateType(
                        code = 'interestType.declining.balance', 
                        description = 'Declining Balance', 
                        id = 0, )
                    ],
                is_interest_recalculation_enabled = False,
                loan_schedule_processing_type_options = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                loan_schedule_type_options = [
                    fineract_client.models.enum_option_data.EnumOptionData(
                        code = '', 
                        id = 56, 
                        value = '', )
                    ],
                number_of_repayment_variations_for_borrower_cycle = [],
                payment_type_options = [
                    fineract_client.models.get_loan_products_payment_type_options.GetLoanProductsPaymentTypeOptions(
                        id = 10, 
                        name = 'check', 
                        position = 1, )
                    ],
                pre_closure_interest_calculation_strategy_options = [
                    fineract_client.models.get_loan_products_pre_closure_interest_calculation_strategy.GetLoanProductsPreClosureInterestCalculationStrategy(
                        code = 'loanPreClosureInterestCalculationStrategy.tillPreClosureDate', 
                        description = 'Till preclose Date', 
                        id = 1, )
                    ],
                principal_variations_for_borrower_cycle = [],
                repayment_frequency_type = fineract_client.models.get_loan_products_repayment_template_frequency_type.GetLoanProductsRepaymentTemplateFrequencyType(
                    code = 'repaymentFrequency.periodFrequencyType.months', 
                    description = 'Months', 
                    id = 2, ),
                repayment_frequency_type_options = [
                    fineract_client.models.get_loan_products_repayment_template_frequency_type.GetLoanProductsRepaymentTemplateFrequencyType(
                        code = 'repaymentFrequency.periodFrequencyType.months', 
                        description = 'Months', 
                        id = 2, )
                    ],
                repayment_start_date_type_options = [
                    fineract_client.models.get_loan_products_repayment_start_date_type.GetLoanProductsRepaymentStartDateType(
                        code = 'repaymentStartDateType.disbursementDate', 
                        description = 'Disbursement Date', 
                        id = 1, )
                    ],
                reschedule_strategy_type_options = [
                    fineract_client.models.get_loan_products_reschedule_strategy_type.GetLoanProductsRescheduleStrategyType(
                        code = 'loanRescheduleStrategyMethod.reduce.number.of.installments', 
                        description = 'Reduce number of installments', 
                        id = 2, )
                    ],
                supported_interest_refund_types = [
                    fineract_client.models.string_enum_option_data.StringEnumOptionData(
                        code = '', 
                        id = '', 
                        value = '', )
                    ],
                supported_interest_refund_types_options = [
                    fineract_client.models.string_enum_option_data.StringEnumOptionData(
                        code = '', 
                        id = '', 
                        value = '', )
                    ],
                transaction_processing_strategy_options = [
                    fineract_client.models.get_loan_products_transaction_processing_strategy_options.GetLoanProductsTransactionProcessingStrategyOptions(
                        code = 'mifos-standard-strategy', 
                        id = 1, 
                        name = 'Penalties, Fees, Interest, Principal order', )
                    ],
                use_borrower_cycle = False,
                value_condition_type_options = [
                    fineract_client.models.get_loan_products_value_condition_type_options.GetLoanProductsValueConditionTypeOptions(
                        code = 'mifos-standard-strategyLoanProductValueConditionType.equal', 
                        description = 'equals', 
                        id = 2, )
                    ]
            )
        else:
            return GetLoanProductsTemplateResponse(
        )
        """

    def testGetLoanProductsTemplateResponse(self):
        """Test GetLoanProductsTemplateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
