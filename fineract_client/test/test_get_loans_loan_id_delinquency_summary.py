# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_loans_loan_id_delinquency_summary import GetLoansLoanIdDelinquencySummary

class TestGetLoansLoanIdDelinquencySummary(unittest.TestCase):
    """GetLoansLoanIdDelinquencySummary unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetLoansLoanIdDelinquencySummary:
        """Test GetLoansLoanIdDelinquencySummary
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetLoansLoanIdDelinquencySummary`
        """
        model = GetLoansLoanIdDelinquencySummary()
        if include_optional:
            return GetLoansLoanIdDelinquencySummary(
                available_disbursement_amount = 100,
                delinquency_pause_periods = [
                    fineract_client.models.get_loans_loan_id_delinquency_pause_period.GetLoansLoanIdDelinquencyPausePeriod(
                        active = True, 
                        pause_period_end = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        pause_period_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                delinquent_amount = 100,
                delinquent_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                delinquent_days = 4,
                delinquent_fee = 6,
                delinquent_interest = 10,
                delinquent_penalty = 4,
                delinquent_principal = 80,
                installment_level_delinquency = [
                    fineract_client.models.get_loans_loan_id_loan_installment_level_delinquency.GetLoansLoanIdLoanInstallmentLevelDelinquency(
                        classification = 'Delinquency Range 3 to 5 days', 
                        delinquent_amount = 250, 
                        maximum_age_days = 5, 
                        minimum_age_days = 3, 
                        range_id = 112, )
                    ],
                last_payment_amount = 100,
                last_payment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                last_repayment_amount = 100,
                last_repayment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                next_payment_due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                past_due_days = 12
            )
        else:
            return GetLoansLoanIdDelinquencySummary(
        )
        """

    def testGetLoansLoanIdDelinquencySummary(self):
        """Test GetLoansLoanIdDelinquencySummary"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
