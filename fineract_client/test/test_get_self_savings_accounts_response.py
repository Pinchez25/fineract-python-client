# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.get_self_savings_accounts_response import GetSelfSavingsAccountsResponse

class TestGetSelfSavingsAccountsResponse(unittest.TestCase):
    """GetSelfSavingsAccountsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSelfSavingsAccountsResponse:
        """Test GetSelfSavingsAccountsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSelfSavingsAccountsResponse`
        """
        model = GetSelfSavingsAccountsResponse()
        if include_optional:
            return GetSelfSavingsAccountsResponse(
                account_no = 1,
                client_id = 1,
                client_name = 'small business',
                currency = fineract_client.models.get_self_savings_currency.GetSelfSavingsCurrency(
                    code = 'USD', 
                    decimal_places = 2, 
                    display_label = 'US Dollar ($)', 
                    display_symbol = '$', 
                    name = 'US Dollar', 
                    name_code = 'currency.USD', ),
                field_officer_id = 0,
                id = 1,
                interest_calculation_days_in_year_type = fineract_client.models.get_self_savings_interest_calculation_days_in_year_type.GetSelfSavingsInterestCalculationDaysInYearType(
                    code = 'savingsInterestCalculationDaysInYearType.days365', 
                    description = '365 Days', 
                    id = 365, ),
                interest_calculation_type = fineract_client.models.get_self_savings_interest_calculation_type.GetSelfSavingsInterestCalculationType(
                    code = 'savingsInterestCalculationType.dailybalance', 
                    description = 'Daily Balance', 
                    id = 1, ),
                interest_compounding_period_type = fineract_client.models.get_self_savings_interest_compounding_period_type.GetSelfSavingsInterestCompoundingPeriodType(
                    code = 'savings.interest.period.savingsCompoundingInterestPeriodType.daily', 
                    description = 'Daily', 
                    id = 1, ),
                interest_posting_period_type = fineract_client.models.get_self_savings_interest_posting_period_type.GetSelfSavingsInterestPostingPeriodType(
                    code = 'savings.interest.posting.period.savingsPostingInterestPeriodType.monthly', 
                    description = 'Monthly', 
                    id = 4, ),
                nominal_annual_interest_rate = 5,
                savings_product_id = 1,
                savings_product_name = 'Passbook Savings',
                status = fineract_client.models.get_self_savings_status.GetSelfSavingsStatus(
                    active = False, 
                    approved = False, 
                    closed = False, 
                    code = 'savingsAccountStatusType.submitted.and.pending.approval', 
                    description = 'Submitted and pending approval', 
                    id = 100, 
                    rejected = False, 
                    submitted_and_pending_approval = True, 
                    withdrawn_by_applicant = False, ),
                summary = fineract_client.models.get_self_savings_summary.GetSelfSavingsSummary(
                    account_balance = 0, 
                    currency = fineract_client.models.get_self_savings_currency.GetSelfSavingsCurrency(
                        code = 'USD', 
                        decimal_places = 2, 
                        display_label = 'US Dollar ($)', 
                        display_symbol = '$', 
                        name = 'US Dollar', 
                        name_code = 'currency.USD', ), ),
                timeline = fineract_client.models.get_self_savings_timeline.GetSelfSavingsTimeline(
                    submitted_on_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
            )
        else:
            return GetSelfSavingsAccountsResponse(
        )
        """

    def testGetSelfSavingsAccountsResponse(self):
        """Test GetSelfSavingsAccountsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
