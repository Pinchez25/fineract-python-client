# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.

    The version of the OpenAPI document: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fineract_client.models.savings_account_transaction_enum_data import SavingsAccountTransactionEnumData

class TestSavingsAccountTransactionEnumData(unittest.TestCase):
    """SavingsAccountTransactionEnumData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SavingsAccountTransactionEnumData:
        """Test SavingsAccountTransactionEnumData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SavingsAccountTransactionEnumData`
        """
        model = SavingsAccountTransactionEnumData()
        if include_optional:
            return SavingsAccountTransactionEnumData(
                accrual = True,
                amount_hold = True,
                amount_release = True,
                annual_fee = True,
                approve_transfer = True,
                charge_transaction = True,
                code = '',
                credit = True,
                debit = True,
                deposit = True,
                deposit_or_withdrawal = True,
                dividend_payout = True,
                entry_type = 'CREDIT',
                escheat = True,
                fee_deduction = True,
                id = 56,
                income_from_interest = True,
                initiate_transfer = True,
                interest_posting = True,
                over_draft_interest_posting = True,
                overdraft_fee = True,
                overdraft_interest = True,
                pay_charge = True,
                reject_transfer = True,
                transaction_type_enum = 'INVALID',
                value = '',
                withdraw_transfer = True,
                withdrawal = True,
                withdrawal_fee = True,
                withhold_tax = True,
                writtenoff = True
            )
        else:
            return SavingsAccountTransactionEnumData(
        )
        """

    def testSavingsAccountTransactionEnumData(self):
        """Test SavingsAccountTransactionEnumData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
