# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'actor_id': 'int',
        'content': 'str',
        'created_at': 'str',
        'id': 'int',
        'is_read': 'bool',
        'is_system_generated': 'bool',
        'object_id': 'int',
        'object_type': 'str',
        'office_id': 'int',
        'tenant_identifier': 'str',
        'user_ids': 'list[int]'
    }

    attribute_map = {
        'action': 'action',
        'actor_id': 'actorId',
        'content': 'content',
        'created_at': 'createdAt',
        'id': 'id',
        'is_read': 'isRead',
        'is_system_generated': 'isSystemGenerated',
        'object_id': 'objectId',
        'object_type': 'objectType',
        'office_id': 'officeId',
        'tenant_identifier': 'tenantIdentifier',
        'user_ids': 'userIds'
    }

    def __init__(self, action=None, actor_id=None, content=None, created_at=None, id=None, is_read=None, is_system_generated=None, object_id=None, object_type=None, office_id=None, tenant_identifier=None, user_ids=None):  # noqa: E501
        """GetNotification - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._actor_id = None
        self._content = None
        self._created_at = None
        self._id = None
        self._is_read = None
        self._is_system_generated = None
        self._object_id = None
        self._object_type = None
        self._office_id = None
        self._tenant_identifier = None
        self._user_ids = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if actor_id is not None:
            self.actor_id = actor_id
        if content is not None:
            self.content = content
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if is_read is not None:
            self.is_read = is_read
        if is_system_generated is not None:
            self.is_system_generated = is_system_generated
        if object_id is not None:
            self.object_id = object_id
        if object_type is not None:
            self.object_type = object_type
        if office_id is not None:
            self.office_id = office_id
        if tenant_identifier is not None:
            self.tenant_identifier = tenant_identifier
        if user_ids is not None:
            self.user_ids = user_ids

    @property
    def action(self):
        """Gets the action of this GetNotification.  # noqa: E501


        :return: The action of this GetNotification.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this GetNotification.


        :param action: The action of this GetNotification.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def actor_id(self):
        """Gets the actor_id of this GetNotification.  # noqa: E501


        :return: The actor_id of this GetNotification.  # noqa: E501
        :rtype: int
        """
        return self._actor_id

    @actor_id.setter
    def actor_id(self, actor_id):
        """Sets the actor_id of this GetNotification.


        :param actor_id: The actor_id of this GetNotification.  # noqa: E501
        :type: int
        """

        self._actor_id = actor_id

    @property
    def content(self):
        """Gets the content of this GetNotification.  # noqa: E501


        :return: The content of this GetNotification.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GetNotification.


        :param content: The content of this GetNotification.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def created_at(self):
        """Gets the created_at of this GetNotification.  # noqa: E501


        :return: The created_at of this GetNotification.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetNotification.


        :param created_at: The created_at of this GetNotification.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this GetNotification.  # noqa: E501


        :return: The id of this GetNotification.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetNotification.


        :param id: The id of this GetNotification.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_read(self):
        """Gets the is_read of this GetNotification.  # noqa: E501


        :return: The is_read of this GetNotification.  # noqa: E501
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this GetNotification.


        :param is_read: The is_read of this GetNotification.  # noqa: E501
        :type: bool
        """

        self._is_read = is_read

    @property
    def is_system_generated(self):
        """Gets the is_system_generated of this GetNotification.  # noqa: E501


        :return: The is_system_generated of this GetNotification.  # noqa: E501
        :rtype: bool
        """
        return self._is_system_generated

    @is_system_generated.setter
    def is_system_generated(self, is_system_generated):
        """Sets the is_system_generated of this GetNotification.


        :param is_system_generated: The is_system_generated of this GetNotification.  # noqa: E501
        :type: bool
        """

        self._is_system_generated = is_system_generated

    @property
    def object_id(self):
        """Gets the object_id of this GetNotification.  # noqa: E501


        :return: The object_id of this GetNotification.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this GetNotification.


        :param object_id: The object_id of this GetNotification.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this GetNotification.  # noqa: E501


        :return: The object_type of this GetNotification.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this GetNotification.


        :param object_type: The object_type of this GetNotification.  # noqa: E501
        :type: str
        """

        self._object_type = object_type

    @property
    def office_id(self):
        """Gets the office_id of this GetNotification.  # noqa: E501


        :return: The office_id of this GetNotification.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this GetNotification.


        :param office_id: The office_id of this GetNotification.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def tenant_identifier(self):
        """Gets the tenant_identifier of this GetNotification.  # noqa: E501


        :return: The tenant_identifier of this GetNotification.  # noqa: E501
        :rtype: str
        """
        return self._tenant_identifier

    @tenant_identifier.setter
    def tenant_identifier(self, tenant_identifier):
        """Sets the tenant_identifier of this GetNotification.


        :param tenant_identifier: The tenant_identifier of this GetNotification.  # noqa: E501
        :type: str
        """

        self._tenant_identifier = tenant_identifier

    @property
    def user_ids(self):
        """Gets the user_ids of this GetNotification.  # noqa: E501


        :return: The user_ids of this GetNotification.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this GetNotification.


        :param user_ids: The user_ids of this GetNotification.  # noqa: E501
        :type: list[int]
        """

        self._user_ids = user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
