# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_no': 'str',
        'activation_date': 'date',
        'active': 'bool',
        'address': 'list[AddressData]',
        'client_classification': 'CodeValueData',
        'client_classification_id': 'int',
        'client_classification_options': 'list[CodeValueData]',
        'client_collateral_managements': 'list[ClientCollateralManagementData]',
        'client_legal_form_options': 'list[EnumOptionData]',
        'client_non_person_constitution_options': 'list[CodeValueData]',
        'client_non_person_details': 'ClientNonPersonData',
        'client_non_person_main_business_line_options': 'list[CodeValueData]',
        'client_type': 'CodeValueData',
        'client_type_id': 'int',
        'client_type_options': 'list[CodeValueData]',
        'datatables': 'list[DatatableData]',
        'date_format': 'str',
        'date_of_birth': 'date',
        'display_name': 'str',
        'email_address': 'str',
        'external_id': 'ExternalId',
        'family_member_options': 'ClientFamilyMembersData',
        'firstname': 'str',
        'fullname': 'str',
        'gender': 'CodeValueData',
        'gender_id': 'int',
        'gender_options': 'list[CodeValueData]',
        'groups': 'list[GroupGeneralData]',
        'id': 'int',
        'image_id': 'int',
        'image_present': 'bool',
        'is_address_enabled': 'bool',
        'is_staff': 'bool',
        'lastname': 'str',
        'legal_form': 'EnumOptionData',
        'legal_form_id': 'int',
        'locale': 'str',
        'middlename': 'str',
        'mobile_no': 'str',
        'narrations': 'list[CodeValueData]',
        'office_id': 'int',
        'office_name': 'str',
        'office_options': 'list[OfficeData]',
        'row_index': 'int',
        'saving_account_options': 'list[SavingsAccountData]',
        'saving_product_options': 'list[SavingsProductData]',
        'savings_account_id': 'int',
        'savings_product_id': 'int',
        'savings_product_name': 'str',
        'staff_id': 'int',
        'staff_name': 'str',
        'staff_options': 'list[StaffData]',
        'status': 'EnumOptionData',
        'sub_status': 'CodeValueData',
        'submitted_on_date': 'date',
        'timeline': 'ClientTimelineData',
        'transfer_to_office_id': 'int',
        'transfer_to_office_name': 'str'
    }

    attribute_map = {
        'account_no': 'accountNo',
        'activation_date': 'activationDate',
        'active': 'active',
        'address': 'address',
        'client_classification': 'clientClassification',
        'client_classification_id': 'clientClassificationId',
        'client_classification_options': 'clientClassificationOptions',
        'client_collateral_managements': 'clientCollateralManagements',
        'client_legal_form_options': 'clientLegalFormOptions',
        'client_non_person_constitution_options': 'clientNonPersonConstitutionOptions',
        'client_non_person_details': 'clientNonPersonDetails',
        'client_non_person_main_business_line_options': 'clientNonPersonMainBusinessLineOptions',
        'client_type': 'clientType',
        'client_type_id': 'clientTypeId',
        'client_type_options': 'clientTypeOptions',
        'datatables': 'datatables',
        'date_format': 'dateFormat',
        'date_of_birth': 'dateOfBirth',
        'display_name': 'displayName',
        'email_address': 'emailAddress',
        'external_id': 'externalId',
        'family_member_options': 'familyMemberOptions',
        'firstname': 'firstname',
        'fullname': 'fullname',
        'gender': 'gender',
        'gender_id': 'genderId',
        'gender_options': 'genderOptions',
        'groups': 'groups',
        'id': 'id',
        'image_id': 'imageId',
        'image_present': 'imagePresent',
        'is_address_enabled': 'isAddressEnabled',
        'is_staff': 'isStaff',
        'lastname': 'lastname',
        'legal_form': 'legalForm',
        'legal_form_id': 'legalFormId',
        'locale': 'locale',
        'middlename': 'middlename',
        'mobile_no': 'mobileNo',
        'narrations': 'narrations',
        'office_id': 'officeId',
        'office_name': 'officeName',
        'office_options': 'officeOptions',
        'row_index': 'rowIndex',
        'saving_account_options': 'savingAccountOptions',
        'saving_product_options': 'savingProductOptions',
        'savings_account_id': 'savingsAccountId',
        'savings_product_id': 'savingsProductId',
        'savings_product_name': 'savingsProductName',
        'staff_id': 'staffId',
        'staff_name': 'staffName',
        'staff_options': 'staffOptions',
        'status': 'status',
        'sub_status': 'subStatus',
        'submitted_on_date': 'submittedOnDate',
        'timeline': 'timeline',
        'transfer_to_office_id': 'transferToOfficeId',
        'transfer_to_office_name': 'transferToOfficeName'
    }

    def __init__(self, account_no=None, activation_date=None, active=None, address=None, client_classification=None, client_classification_id=None, client_classification_options=None, client_collateral_managements=None, client_legal_form_options=None, client_non_person_constitution_options=None, client_non_person_details=None, client_non_person_main_business_line_options=None, client_type=None, client_type_id=None, client_type_options=None, datatables=None, date_format=None, date_of_birth=None, display_name=None, email_address=None, external_id=None, family_member_options=None, firstname=None, fullname=None, gender=None, gender_id=None, gender_options=None, groups=None, id=None, image_id=None, image_present=None, is_address_enabled=None, is_staff=None, lastname=None, legal_form=None, legal_form_id=None, locale=None, middlename=None, mobile_no=None, narrations=None, office_id=None, office_name=None, office_options=None, row_index=None, saving_account_options=None, saving_product_options=None, savings_account_id=None, savings_product_id=None, savings_product_name=None, staff_id=None, staff_name=None, staff_options=None, status=None, sub_status=None, submitted_on_date=None, timeline=None, transfer_to_office_id=None, transfer_to_office_name=None):  # noqa: E501
        """ClientData - a model defined in Swagger"""  # noqa: E501
        self._account_no = None
        self._activation_date = None
        self._active = None
        self._address = None
        self._client_classification = None
        self._client_classification_id = None
        self._client_classification_options = None
        self._client_collateral_managements = None
        self._client_legal_form_options = None
        self._client_non_person_constitution_options = None
        self._client_non_person_details = None
        self._client_non_person_main_business_line_options = None
        self._client_type = None
        self._client_type_id = None
        self._client_type_options = None
        self._datatables = None
        self._date_format = None
        self._date_of_birth = None
        self._display_name = None
        self._email_address = None
        self._external_id = None
        self._family_member_options = None
        self._firstname = None
        self._fullname = None
        self._gender = None
        self._gender_id = None
        self._gender_options = None
        self._groups = None
        self._id = None
        self._image_id = None
        self._image_present = None
        self._is_address_enabled = None
        self._is_staff = None
        self._lastname = None
        self._legal_form = None
        self._legal_form_id = None
        self._locale = None
        self._middlename = None
        self._mobile_no = None
        self._narrations = None
        self._office_id = None
        self._office_name = None
        self._office_options = None
        self._row_index = None
        self._saving_account_options = None
        self._saving_product_options = None
        self._savings_account_id = None
        self._savings_product_id = None
        self._savings_product_name = None
        self._staff_id = None
        self._staff_name = None
        self._staff_options = None
        self._status = None
        self._sub_status = None
        self._submitted_on_date = None
        self._timeline = None
        self._transfer_to_office_id = None
        self._transfer_to_office_name = None
        self.discriminator = None
        if account_no is not None:
            self.account_no = account_no
        if activation_date is not None:
            self.activation_date = activation_date
        if active is not None:
            self.active = active
        if address is not None:
            self.address = address
        if client_classification is not None:
            self.client_classification = client_classification
        if client_classification_id is not None:
            self.client_classification_id = client_classification_id
        if client_classification_options is not None:
            self.client_classification_options = client_classification_options
        if client_collateral_managements is not None:
            self.client_collateral_managements = client_collateral_managements
        if client_legal_form_options is not None:
            self.client_legal_form_options = client_legal_form_options
        if client_non_person_constitution_options is not None:
            self.client_non_person_constitution_options = client_non_person_constitution_options
        if client_non_person_details is not None:
            self.client_non_person_details = client_non_person_details
        if client_non_person_main_business_line_options is not None:
            self.client_non_person_main_business_line_options = client_non_person_main_business_line_options
        if client_type is not None:
            self.client_type = client_type
        if client_type_id is not None:
            self.client_type_id = client_type_id
        if client_type_options is not None:
            self.client_type_options = client_type_options
        if datatables is not None:
            self.datatables = datatables
        if date_format is not None:
            self.date_format = date_format
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if display_name is not None:
            self.display_name = display_name
        if email_address is not None:
            self.email_address = email_address
        if external_id is not None:
            self.external_id = external_id
        if family_member_options is not None:
            self.family_member_options = family_member_options
        if firstname is not None:
            self.firstname = firstname
        if fullname is not None:
            self.fullname = fullname
        if gender is not None:
            self.gender = gender
        if gender_id is not None:
            self.gender_id = gender_id
        if gender_options is not None:
            self.gender_options = gender_options
        if groups is not None:
            self.groups = groups
        if id is not None:
            self.id = id
        if image_id is not None:
            self.image_id = image_id
        if image_present is not None:
            self.image_present = image_present
        if is_address_enabled is not None:
            self.is_address_enabled = is_address_enabled
        if is_staff is not None:
            self.is_staff = is_staff
        if lastname is not None:
            self.lastname = lastname
        if legal_form is not None:
            self.legal_form = legal_form
        if legal_form_id is not None:
            self.legal_form_id = legal_form_id
        if locale is not None:
            self.locale = locale
        if middlename is not None:
            self.middlename = middlename
        if mobile_no is not None:
            self.mobile_no = mobile_no
        if narrations is not None:
            self.narrations = narrations
        if office_id is not None:
            self.office_id = office_id
        if office_name is not None:
            self.office_name = office_name
        if office_options is not None:
            self.office_options = office_options
        if row_index is not None:
            self.row_index = row_index
        if saving_account_options is not None:
            self.saving_account_options = saving_account_options
        if saving_product_options is not None:
            self.saving_product_options = saving_product_options
        if savings_account_id is not None:
            self.savings_account_id = savings_account_id
        if savings_product_id is not None:
            self.savings_product_id = savings_product_id
        if savings_product_name is not None:
            self.savings_product_name = savings_product_name
        if staff_id is not None:
            self.staff_id = staff_id
        if staff_name is not None:
            self.staff_name = staff_name
        if staff_options is not None:
            self.staff_options = staff_options
        if status is not None:
            self.status = status
        if sub_status is not None:
            self.sub_status = sub_status
        if submitted_on_date is not None:
            self.submitted_on_date = submitted_on_date
        if timeline is not None:
            self.timeline = timeline
        if transfer_to_office_id is not None:
            self.transfer_to_office_id = transfer_to_office_id
        if transfer_to_office_name is not None:
            self.transfer_to_office_name = transfer_to_office_name

    @property
    def account_no(self):
        """Gets the account_no of this ClientData.  # noqa: E501


        :return: The account_no of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._account_no

    @account_no.setter
    def account_no(self, account_no):
        """Sets the account_no of this ClientData.


        :param account_no: The account_no of this ClientData.  # noqa: E501
        :type: str
        """

        self._account_no = account_no

    @property
    def activation_date(self):
        """Gets the activation_date of this ClientData.  # noqa: E501


        :return: The activation_date of this ClientData.  # noqa: E501
        :rtype: date
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this ClientData.


        :param activation_date: The activation_date of this ClientData.  # noqa: E501
        :type: date
        """

        self._activation_date = activation_date

    @property
    def active(self):
        """Gets the active of this ClientData.  # noqa: E501


        :return: The active of this ClientData.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ClientData.


        :param active: The active of this ClientData.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def address(self):
        """Gets the address of this ClientData.  # noqa: E501


        :return: The address of this ClientData.  # noqa: E501
        :rtype: list[AddressData]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ClientData.


        :param address: The address of this ClientData.  # noqa: E501
        :type: list[AddressData]
        """

        self._address = address

    @property
    def client_classification(self):
        """Gets the client_classification of this ClientData.  # noqa: E501


        :return: The client_classification of this ClientData.  # noqa: E501
        :rtype: CodeValueData
        """
        return self._client_classification

    @client_classification.setter
    def client_classification(self, client_classification):
        """Sets the client_classification of this ClientData.


        :param client_classification: The client_classification of this ClientData.  # noqa: E501
        :type: CodeValueData
        """

        self._client_classification = client_classification

    @property
    def client_classification_id(self):
        """Gets the client_classification_id of this ClientData.  # noqa: E501


        :return: The client_classification_id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._client_classification_id

    @client_classification_id.setter
    def client_classification_id(self, client_classification_id):
        """Sets the client_classification_id of this ClientData.


        :param client_classification_id: The client_classification_id of this ClientData.  # noqa: E501
        :type: int
        """

        self._client_classification_id = client_classification_id

    @property
    def client_classification_options(self):
        """Gets the client_classification_options of this ClientData.  # noqa: E501


        :return: The client_classification_options of this ClientData.  # noqa: E501
        :rtype: list[CodeValueData]
        """
        return self._client_classification_options

    @client_classification_options.setter
    def client_classification_options(self, client_classification_options):
        """Sets the client_classification_options of this ClientData.


        :param client_classification_options: The client_classification_options of this ClientData.  # noqa: E501
        :type: list[CodeValueData]
        """

        self._client_classification_options = client_classification_options

    @property
    def client_collateral_managements(self):
        """Gets the client_collateral_managements of this ClientData.  # noqa: E501


        :return: The client_collateral_managements of this ClientData.  # noqa: E501
        :rtype: list[ClientCollateralManagementData]
        """
        return self._client_collateral_managements

    @client_collateral_managements.setter
    def client_collateral_managements(self, client_collateral_managements):
        """Sets the client_collateral_managements of this ClientData.


        :param client_collateral_managements: The client_collateral_managements of this ClientData.  # noqa: E501
        :type: list[ClientCollateralManagementData]
        """

        self._client_collateral_managements = client_collateral_managements

    @property
    def client_legal_form_options(self):
        """Gets the client_legal_form_options of this ClientData.  # noqa: E501


        :return: The client_legal_form_options of this ClientData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._client_legal_form_options

    @client_legal_form_options.setter
    def client_legal_form_options(self, client_legal_form_options):
        """Sets the client_legal_form_options of this ClientData.


        :param client_legal_form_options: The client_legal_form_options of this ClientData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._client_legal_form_options = client_legal_form_options

    @property
    def client_non_person_constitution_options(self):
        """Gets the client_non_person_constitution_options of this ClientData.  # noqa: E501


        :return: The client_non_person_constitution_options of this ClientData.  # noqa: E501
        :rtype: list[CodeValueData]
        """
        return self._client_non_person_constitution_options

    @client_non_person_constitution_options.setter
    def client_non_person_constitution_options(self, client_non_person_constitution_options):
        """Sets the client_non_person_constitution_options of this ClientData.


        :param client_non_person_constitution_options: The client_non_person_constitution_options of this ClientData.  # noqa: E501
        :type: list[CodeValueData]
        """

        self._client_non_person_constitution_options = client_non_person_constitution_options

    @property
    def client_non_person_details(self):
        """Gets the client_non_person_details of this ClientData.  # noqa: E501


        :return: The client_non_person_details of this ClientData.  # noqa: E501
        :rtype: ClientNonPersonData
        """
        return self._client_non_person_details

    @client_non_person_details.setter
    def client_non_person_details(self, client_non_person_details):
        """Sets the client_non_person_details of this ClientData.


        :param client_non_person_details: The client_non_person_details of this ClientData.  # noqa: E501
        :type: ClientNonPersonData
        """

        self._client_non_person_details = client_non_person_details

    @property
    def client_non_person_main_business_line_options(self):
        """Gets the client_non_person_main_business_line_options of this ClientData.  # noqa: E501


        :return: The client_non_person_main_business_line_options of this ClientData.  # noqa: E501
        :rtype: list[CodeValueData]
        """
        return self._client_non_person_main_business_line_options

    @client_non_person_main_business_line_options.setter
    def client_non_person_main_business_line_options(self, client_non_person_main_business_line_options):
        """Sets the client_non_person_main_business_line_options of this ClientData.


        :param client_non_person_main_business_line_options: The client_non_person_main_business_line_options of this ClientData.  # noqa: E501
        :type: list[CodeValueData]
        """

        self._client_non_person_main_business_line_options = client_non_person_main_business_line_options

    @property
    def client_type(self):
        """Gets the client_type of this ClientData.  # noqa: E501


        :return: The client_type of this ClientData.  # noqa: E501
        :rtype: CodeValueData
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this ClientData.


        :param client_type: The client_type of this ClientData.  # noqa: E501
        :type: CodeValueData
        """

        self._client_type = client_type

    @property
    def client_type_id(self):
        """Gets the client_type_id of this ClientData.  # noqa: E501


        :return: The client_type_id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._client_type_id

    @client_type_id.setter
    def client_type_id(self, client_type_id):
        """Sets the client_type_id of this ClientData.


        :param client_type_id: The client_type_id of this ClientData.  # noqa: E501
        :type: int
        """

        self._client_type_id = client_type_id

    @property
    def client_type_options(self):
        """Gets the client_type_options of this ClientData.  # noqa: E501


        :return: The client_type_options of this ClientData.  # noqa: E501
        :rtype: list[CodeValueData]
        """
        return self._client_type_options

    @client_type_options.setter
    def client_type_options(self, client_type_options):
        """Sets the client_type_options of this ClientData.


        :param client_type_options: The client_type_options of this ClientData.  # noqa: E501
        :type: list[CodeValueData]
        """

        self._client_type_options = client_type_options

    @property
    def datatables(self):
        """Gets the datatables of this ClientData.  # noqa: E501


        :return: The datatables of this ClientData.  # noqa: E501
        :rtype: list[DatatableData]
        """
        return self._datatables

    @datatables.setter
    def datatables(self, datatables):
        """Sets the datatables of this ClientData.


        :param datatables: The datatables of this ClientData.  # noqa: E501
        :type: list[DatatableData]
        """

        self._datatables = datatables

    @property
    def date_format(self):
        """Gets the date_format of this ClientData.  # noqa: E501


        :return: The date_format of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this ClientData.


        :param date_format: The date_format of this ClientData.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this ClientData.  # noqa: E501


        :return: The date_of_birth of this ClientData.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this ClientData.


        :param date_of_birth: The date_of_birth of this ClientData.  # noqa: E501
        :type: date
        """

        self._date_of_birth = date_of_birth

    @property
    def display_name(self):
        """Gets the display_name of this ClientData.  # noqa: E501


        :return: The display_name of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ClientData.


        :param display_name: The display_name of this ClientData.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email_address(self):
        """Gets the email_address of this ClientData.  # noqa: E501


        :return: The email_address of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this ClientData.


        :param email_address: The email_address of this ClientData.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def external_id(self):
        """Gets the external_id of this ClientData.  # noqa: E501


        :return: The external_id of this ClientData.  # noqa: E501
        :rtype: ExternalId
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ClientData.


        :param external_id: The external_id of this ClientData.  # noqa: E501
        :type: ExternalId
        """

        self._external_id = external_id

    @property
    def family_member_options(self):
        """Gets the family_member_options of this ClientData.  # noqa: E501


        :return: The family_member_options of this ClientData.  # noqa: E501
        :rtype: ClientFamilyMembersData
        """
        return self._family_member_options

    @family_member_options.setter
    def family_member_options(self, family_member_options):
        """Sets the family_member_options of this ClientData.


        :param family_member_options: The family_member_options of this ClientData.  # noqa: E501
        :type: ClientFamilyMembersData
        """

        self._family_member_options = family_member_options

    @property
    def firstname(self):
        """Gets the firstname of this ClientData.  # noqa: E501


        :return: The firstname of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this ClientData.


        :param firstname: The firstname of this ClientData.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def fullname(self):
        """Gets the fullname of this ClientData.  # noqa: E501


        :return: The fullname of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this ClientData.


        :param fullname: The fullname of this ClientData.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def gender(self):
        """Gets the gender of this ClientData.  # noqa: E501


        :return: The gender of this ClientData.  # noqa: E501
        :rtype: CodeValueData
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ClientData.


        :param gender: The gender of this ClientData.  # noqa: E501
        :type: CodeValueData
        """

        self._gender = gender

    @property
    def gender_id(self):
        """Gets the gender_id of this ClientData.  # noqa: E501


        :return: The gender_id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._gender_id

    @gender_id.setter
    def gender_id(self, gender_id):
        """Sets the gender_id of this ClientData.


        :param gender_id: The gender_id of this ClientData.  # noqa: E501
        :type: int
        """

        self._gender_id = gender_id

    @property
    def gender_options(self):
        """Gets the gender_options of this ClientData.  # noqa: E501


        :return: The gender_options of this ClientData.  # noqa: E501
        :rtype: list[CodeValueData]
        """
        return self._gender_options

    @gender_options.setter
    def gender_options(self, gender_options):
        """Sets the gender_options of this ClientData.


        :param gender_options: The gender_options of this ClientData.  # noqa: E501
        :type: list[CodeValueData]
        """

        self._gender_options = gender_options

    @property
    def groups(self):
        """Gets the groups of this ClientData.  # noqa: E501


        :return: The groups of this ClientData.  # noqa: E501
        :rtype: list[GroupGeneralData]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ClientData.


        :param groups: The groups of this ClientData.  # noqa: E501
        :type: list[GroupGeneralData]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this ClientData.  # noqa: E501


        :return: The id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientData.


        :param id: The id of this ClientData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_id(self):
        """Gets the image_id of this ClientData.  # noqa: E501


        :return: The image_id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ClientData.


        :param image_id: The image_id of this ClientData.  # noqa: E501
        :type: int
        """

        self._image_id = image_id

    @property
    def image_present(self):
        """Gets the image_present of this ClientData.  # noqa: E501


        :return: The image_present of this ClientData.  # noqa: E501
        :rtype: bool
        """
        return self._image_present

    @image_present.setter
    def image_present(self, image_present):
        """Sets the image_present of this ClientData.


        :param image_present: The image_present of this ClientData.  # noqa: E501
        :type: bool
        """

        self._image_present = image_present

    @property
    def is_address_enabled(self):
        """Gets the is_address_enabled of this ClientData.  # noqa: E501


        :return: The is_address_enabled of this ClientData.  # noqa: E501
        :rtype: bool
        """
        return self._is_address_enabled

    @is_address_enabled.setter
    def is_address_enabled(self, is_address_enabled):
        """Sets the is_address_enabled of this ClientData.


        :param is_address_enabled: The is_address_enabled of this ClientData.  # noqa: E501
        :type: bool
        """

        self._is_address_enabled = is_address_enabled

    @property
    def is_staff(self):
        """Gets the is_staff of this ClientData.  # noqa: E501


        :return: The is_staff of this ClientData.  # noqa: E501
        :rtype: bool
        """
        return self._is_staff

    @is_staff.setter
    def is_staff(self, is_staff):
        """Sets the is_staff of this ClientData.


        :param is_staff: The is_staff of this ClientData.  # noqa: E501
        :type: bool
        """

        self._is_staff = is_staff

    @property
    def lastname(self):
        """Gets the lastname of this ClientData.  # noqa: E501


        :return: The lastname of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this ClientData.


        :param lastname: The lastname of this ClientData.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def legal_form(self):
        """Gets the legal_form of this ClientData.  # noqa: E501


        :return: The legal_form of this ClientData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this ClientData.


        :param legal_form: The legal_form of this ClientData.  # noqa: E501
        :type: EnumOptionData
        """

        self._legal_form = legal_form

    @property
    def legal_form_id(self):
        """Gets the legal_form_id of this ClientData.  # noqa: E501


        :return: The legal_form_id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._legal_form_id

    @legal_form_id.setter
    def legal_form_id(self, legal_form_id):
        """Sets the legal_form_id of this ClientData.


        :param legal_form_id: The legal_form_id of this ClientData.  # noqa: E501
        :type: int
        """

        self._legal_form_id = legal_form_id

    @property
    def locale(self):
        """Gets the locale of this ClientData.  # noqa: E501


        :return: The locale of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this ClientData.


        :param locale: The locale of this ClientData.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def middlename(self):
        """Gets the middlename of this ClientData.  # noqa: E501


        :return: The middlename of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._middlename

    @middlename.setter
    def middlename(self, middlename):
        """Sets the middlename of this ClientData.


        :param middlename: The middlename of this ClientData.  # noqa: E501
        :type: str
        """

        self._middlename = middlename

    @property
    def mobile_no(self):
        """Gets the mobile_no of this ClientData.  # noqa: E501


        :return: The mobile_no of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._mobile_no

    @mobile_no.setter
    def mobile_no(self, mobile_no):
        """Sets the mobile_no of this ClientData.


        :param mobile_no: The mobile_no of this ClientData.  # noqa: E501
        :type: str
        """

        self._mobile_no = mobile_no

    @property
    def narrations(self):
        """Gets the narrations of this ClientData.  # noqa: E501


        :return: The narrations of this ClientData.  # noqa: E501
        :rtype: list[CodeValueData]
        """
        return self._narrations

    @narrations.setter
    def narrations(self, narrations):
        """Sets the narrations of this ClientData.


        :param narrations: The narrations of this ClientData.  # noqa: E501
        :type: list[CodeValueData]
        """

        self._narrations = narrations

    @property
    def office_id(self):
        """Gets the office_id of this ClientData.  # noqa: E501


        :return: The office_id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this ClientData.


        :param office_id: The office_id of this ClientData.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def office_name(self):
        """Gets the office_name of this ClientData.  # noqa: E501


        :return: The office_name of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._office_name

    @office_name.setter
    def office_name(self, office_name):
        """Sets the office_name of this ClientData.


        :param office_name: The office_name of this ClientData.  # noqa: E501
        :type: str
        """

        self._office_name = office_name

    @property
    def office_options(self):
        """Gets the office_options of this ClientData.  # noqa: E501


        :return: The office_options of this ClientData.  # noqa: E501
        :rtype: list[OfficeData]
        """
        return self._office_options

    @office_options.setter
    def office_options(self, office_options):
        """Sets the office_options of this ClientData.


        :param office_options: The office_options of this ClientData.  # noqa: E501
        :type: list[OfficeData]
        """

        self._office_options = office_options

    @property
    def row_index(self):
        """Gets the row_index of this ClientData.  # noqa: E501


        :return: The row_index of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._row_index

    @row_index.setter
    def row_index(self, row_index):
        """Sets the row_index of this ClientData.


        :param row_index: The row_index of this ClientData.  # noqa: E501
        :type: int
        """

        self._row_index = row_index

    @property
    def saving_account_options(self):
        """Gets the saving_account_options of this ClientData.  # noqa: E501


        :return: The saving_account_options of this ClientData.  # noqa: E501
        :rtype: list[SavingsAccountData]
        """
        return self._saving_account_options

    @saving_account_options.setter
    def saving_account_options(self, saving_account_options):
        """Sets the saving_account_options of this ClientData.


        :param saving_account_options: The saving_account_options of this ClientData.  # noqa: E501
        :type: list[SavingsAccountData]
        """

        self._saving_account_options = saving_account_options

    @property
    def saving_product_options(self):
        """Gets the saving_product_options of this ClientData.  # noqa: E501


        :return: The saving_product_options of this ClientData.  # noqa: E501
        :rtype: list[SavingsProductData]
        """
        return self._saving_product_options

    @saving_product_options.setter
    def saving_product_options(self, saving_product_options):
        """Sets the saving_product_options of this ClientData.


        :param saving_product_options: The saving_product_options of this ClientData.  # noqa: E501
        :type: list[SavingsProductData]
        """

        self._saving_product_options = saving_product_options

    @property
    def savings_account_id(self):
        """Gets the savings_account_id of this ClientData.  # noqa: E501


        :return: The savings_account_id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._savings_account_id

    @savings_account_id.setter
    def savings_account_id(self, savings_account_id):
        """Sets the savings_account_id of this ClientData.


        :param savings_account_id: The savings_account_id of this ClientData.  # noqa: E501
        :type: int
        """

        self._savings_account_id = savings_account_id

    @property
    def savings_product_id(self):
        """Gets the savings_product_id of this ClientData.  # noqa: E501


        :return: The savings_product_id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._savings_product_id

    @savings_product_id.setter
    def savings_product_id(self, savings_product_id):
        """Sets the savings_product_id of this ClientData.


        :param savings_product_id: The savings_product_id of this ClientData.  # noqa: E501
        :type: int
        """

        self._savings_product_id = savings_product_id

    @property
    def savings_product_name(self):
        """Gets the savings_product_name of this ClientData.  # noqa: E501


        :return: The savings_product_name of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._savings_product_name

    @savings_product_name.setter
    def savings_product_name(self, savings_product_name):
        """Sets the savings_product_name of this ClientData.


        :param savings_product_name: The savings_product_name of this ClientData.  # noqa: E501
        :type: str
        """

        self._savings_product_name = savings_product_name

    @property
    def staff_id(self):
        """Gets the staff_id of this ClientData.  # noqa: E501


        :return: The staff_id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this ClientData.


        :param staff_id: The staff_id of this ClientData.  # noqa: E501
        :type: int
        """

        self._staff_id = staff_id

    @property
    def staff_name(self):
        """Gets the staff_name of this ClientData.  # noqa: E501


        :return: The staff_name of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._staff_name

    @staff_name.setter
    def staff_name(self, staff_name):
        """Sets the staff_name of this ClientData.


        :param staff_name: The staff_name of this ClientData.  # noqa: E501
        :type: str
        """

        self._staff_name = staff_name

    @property
    def staff_options(self):
        """Gets the staff_options of this ClientData.  # noqa: E501


        :return: The staff_options of this ClientData.  # noqa: E501
        :rtype: list[StaffData]
        """
        return self._staff_options

    @staff_options.setter
    def staff_options(self, staff_options):
        """Sets the staff_options of this ClientData.


        :param staff_options: The staff_options of this ClientData.  # noqa: E501
        :type: list[StaffData]
        """

        self._staff_options = staff_options

    @property
    def status(self):
        """Gets the status of this ClientData.  # noqa: E501


        :return: The status of this ClientData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClientData.


        :param status: The status of this ClientData.  # noqa: E501
        :type: EnumOptionData
        """

        self._status = status

    @property
    def sub_status(self):
        """Gets the sub_status of this ClientData.  # noqa: E501


        :return: The sub_status of this ClientData.  # noqa: E501
        :rtype: CodeValueData
        """
        return self._sub_status

    @sub_status.setter
    def sub_status(self, sub_status):
        """Sets the sub_status of this ClientData.


        :param sub_status: The sub_status of this ClientData.  # noqa: E501
        :type: CodeValueData
        """

        self._sub_status = sub_status

    @property
    def submitted_on_date(self):
        """Gets the submitted_on_date of this ClientData.  # noqa: E501


        :return: The submitted_on_date of this ClientData.  # noqa: E501
        :rtype: date
        """
        return self._submitted_on_date

    @submitted_on_date.setter
    def submitted_on_date(self, submitted_on_date):
        """Sets the submitted_on_date of this ClientData.


        :param submitted_on_date: The submitted_on_date of this ClientData.  # noqa: E501
        :type: date
        """

        self._submitted_on_date = submitted_on_date

    @property
    def timeline(self):
        """Gets the timeline of this ClientData.  # noqa: E501


        :return: The timeline of this ClientData.  # noqa: E501
        :rtype: ClientTimelineData
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this ClientData.


        :param timeline: The timeline of this ClientData.  # noqa: E501
        :type: ClientTimelineData
        """

        self._timeline = timeline

    @property
    def transfer_to_office_id(self):
        """Gets the transfer_to_office_id of this ClientData.  # noqa: E501


        :return: The transfer_to_office_id of this ClientData.  # noqa: E501
        :rtype: int
        """
        return self._transfer_to_office_id

    @transfer_to_office_id.setter
    def transfer_to_office_id(self, transfer_to_office_id):
        """Sets the transfer_to_office_id of this ClientData.


        :param transfer_to_office_id: The transfer_to_office_id of this ClientData.  # noqa: E501
        :type: int
        """

        self._transfer_to_office_id = transfer_to_office_id

    @property
    def transfer_to_office_name(self):
        """Gets the transfer_to_office_name of this ClientData.  # noqa: E501


        :return: The transfer_to_office_name of this ClientData.  # noqa: E501
        :rtype: str
        """
        return self._transfer_to_office_name

    @transfer_to_office_name.setter
    def transfer_to_office_name(self, transfer_to_office_name):
        """Sets the transfer_to_office_name of this ClientData.


        :param transfer_to_office_name: The transfer_to_office_name of this ClientData.  # noqa: E501
        :type: str
        """

        self._transfer_to_office_name = transfer_to_office_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
