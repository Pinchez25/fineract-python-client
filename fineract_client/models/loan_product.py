# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moves_out_of_npa_only_on_arrears_completion': 'bool',
        'accounting_disabled': 'bool',
        'accounting_rule': 'int',
        'allow_approved_disbursed_amounts_over_applied': 'bool',
        'allow_variabe_installments': 'bool',
        'arrears_based_on_original_schedule': 'bool',
        'borrower_cycle_variations': 'list[LoanProductBorrowerCycleVariations]',
        'can_define_installment_amount': 'bool',
        'can_use_for_topup': 'bool',
        'cash_based_accounting_enabled': 'bool',
        'charges': 'list[Charge]',
        'close_date': 'date',
        'credit_allocation_rules': 'list[LoanProductCreditAllocationRule]',
        'currency': 'MonetaryCurrency',
        'delinquency_bucket': 'DelinquencyBucket',
        'description': 'str',
        'disallow_expected_disbursements': 'bool',
        'due_days_for_repayment_event': 'int',
        'enable_installment_level_delinquency': 'bool',
        'equal_amortization': 'bool',
        'external_id': 'ExternalId',
        'fixed_principal_percentage_per_installment': 'float',
        'floating_rates': 'LoanProductFloatingRates',
        'fund': 'Fund',
        'hold_guarantee_funds': 'bool',
        'id': 'int',
        'include_in_borrower_cycle': 'bool',
        'installment_amount_in_multiples_of': 'int',
        'interest_period_frequency_type': 'str',
        'interest_recalculation_enabled': 'bool',
        'linked_to_floating_interest_rate': 'bool',
        'loan_configurable_attributes': 'LoanProductConfigurableAttributes',
        'loan_product_guarantee_details': 'LoanProductGuaranteeDetails',
        'loan_product_min_max_constraints': 'LoanProductMinMaxConstraints',
        'loan_product_related_detail': 'LoanProductRelatedDetail',
        'loan_product_tranche_details': 'LoanProductTrancheDetails',
        'max_nominal_interest_rate_per_period': 'float',
        'max_number_of_repayments': 'int',
        'max_principal_amount': 'Money',
        'min_nominal_interest_rate_per_period': 'float',
        'min_number_of_repayments': 'int',
        'min_principal_amount': 'Money',
        'minimum_days_between_disbursal_and_first_repayment': 'int',
        'multi_disburse_loan': 'bool',
        'name': 'str',
        'new': 'bool',
        'nominal_interest_rate_per_period': 'float',
        'number_of_repayments': 'int',
        'over_applied_calculation_type': 'str',
        'over_applied_number': 'int',
        'over_due_days_for_repayment_event': 'int',
        'overdue_days_for_npa': 'int',
        'payment_allocation_rules': 'list[LoanProductPaymentAllocationRule]',
        'periodic_accrual_accounting_enabled': 'bool',
        'principal_amount': 'Money',
        'principal_threshold_for_last_installment': 'float',
        'product_interest_recalculation_details': 'LoanProductInterestRecalculationDetails',
        'rates': 'list[Rate]',
        'repayment_start_date_type': 'str',
        'short_name': 'str',
        'start_date': 'date',
        'sync_expected_with_disbursement_date': 'bool',
        'transaction_processing_strategy_code': 'str',
        'transaction_processing_strategy_name': 'str',
        'upfront_accrual_accounting_enabled': 'bool',
        'use_borrower_cycle': 'bool',
        'variable_installment_config': 'LoanProductVariableInstallmentConfig'
    }

    attribute_map = {
        'account_moves_out_of_npa_only_on_arrears_completion': 'accountMovesOutOfNPAOnlyOnArrearsCompletion',
        'accounting_disabled': 'accountingDisabled',
        'accounting_rule': 'accountingRule',
        'allow_approved_disbursed_amounts_over_applied': 'allowApprovedDisbursedAmountsOverApplied',
        'allow_variabe_installments': 'allowVariabeInstallments',
        'arrears_based_on_original_schedule': 'arrearsBasedOnOriginalSchedule',
        'borrower_cycle_variations': 'borrowerCycleVariations',
        'can_define_installment_amount': 'canDefineInstallmentAmount',
        'can_use_for_topup': 'canUseForTopup',
        'cash_based_accounting_enabled': 'cashBasedAccountingEnabled',
        'charges': 'charges',
        'close_date': 'closeDate',
        'credit_allocation_rules': 'creditAllocationRules',
        'currency': 'currency',
        'delinquency_bucket': 'delinquencyBucket',
        'description': 'description',
        'disallow_expected_disbursements': 'disallowExpectedDisbursements',
        'due_days_for_repayment_event': 'dueDaysForRepaymentEvent',
        'enable_installment_level_delinquency': 'enableInstallmentLevelDelinquency',
        'equal_amortization': 'equalAmortization',
        'external_id': 'externalId',
        'fixed_principal_percentage_per_installment': 'fixedPrincipalPercentagePerInstallment',
        'floating_rates': 'floatingRates',
        'fund': 'fund',
        'hold_guarantee_funds': 'holdGuaranteeFunds',
        'id': 'id',
        'include_in_borrower_cycle': 'includeInBorrowerCycle',
        'installment_amount_in_multiples_of': 'installmentAmountInMultiplesOf',
        'interest_period_frequency_type': 'interestPeriodFrequencyType',
        'interest_recalculation_enabled': 'interestRecalculationEnabled',
        'linked_to_floating_interest_rate': 'linkedToFloatingInterestRate',
        'loan_configurable_attributes': 'loanConfigurableAttributes',
        'loan_product_guarantee_details': 'loanProductGuaranteeDetails',
        'loan_product_min_max_constraints': 'loanProductMinMaxConstraints',
        'loan_product_related_detail': 'loanProductRelatedDetail',
        'loan_product_tranche_details': 'loanProductTrancheDetails',
        'max_nominal_interest_rate_per_period': 'maxNominalInterestRatePerPeriod',
        'max_number_of_repayments': 'maxNumberOfRepayments',
        'max_principal_amount': 'maxPrincipalAmount',
        'min_nominal_interest_rate_per_period': 'minNominalInterestRatePerPeriod',
        'min_number_of_repayments': 'minNumberOfRepayments',
        'min_principal_amount': 'minPrincipalAmount',
        'minimum_days_between_disbursal_and_first_repayment': 'minimumDaysBetweenDisbursalAndFirstRepayment',
        'multi_disburse_loan': 'multiDisburseLoan',
        'name': 'name',
        'new': 'new',
        'nominal_interest_rate_per_period': 'nominalInterestRatePerPeriod',
        'number_of_repayments': 'numberOfRepayments',
        'over_applied_calculation_type': 'overAppliedCalculationType',
        'over_applied_number': 'overAppliedNumber',
        'over_due_days_for_repayment_event': 'overDueDaysForRepaymentEvent',
        'overdue_days_for_npa': 'overdueDaysForNPA',
        'payment_allocation_rules': 'paymentAllocationRules',
        'periodic_accrual_accounting_enabled': 'periodicAccrualAccountingEnabled',
        'principal_amount': 'principalAmount',
        'principal_threshold_for_last_installment': 'principalThresholdForLastInstallment',
        'product_interest_recalculation_details': 'productInterestRecalculationDetails',
        'rates': 'rates',
        'repayment_start_date_type': 'repaymentStartDateType',
        'short_name': 'shortName',
        'start_date': 'startDate',
        'sync_expected_with_disbursement_date': 'syncExpectedWithDisbursementDate',
        'transaction_processing_strategy_code': 'transactionProcessingStrategyCode',
        'transaction_processing_strategy_name': 'transactionProcessingStrategyName',
        'upfront_accrual_accounting_enabled': 'upfrontAccrualAccountingEnabled',
        'use_borrower_cycle': 'useBorrowerCycle',
        'variable_installment_config': 'variableInstallmentConfig'
    }

    def __init__(self, account_moves_out_of_npa_only_on_arrears_completion=None, accounting_disabled=None, accounting_rule=None, allow_approved_disbursed_amounts_over_applied=None, allow_variabe_installments=None, arrears_based_on_original_schedule=None, borrower_cycle_variations=None, can_define_installment_amount=None, can_use_for_topup=None, cash_based_accounting_enabled=None, charges=None, close_date=None, credit_allocation_rules=None, currency=None, delinquency_bucket=None, description=None, disallow_expected_disbursements=None, due_days_for_repayment_event=None, enable_installment_level_delinquency=None, equal_amortization=None, external_id=None, fixed_principal_percentage_per_installment=None, floating_rates=None, fund=None, hold_guarantee_funds=None, id=None, include_in_borrower_cycle=None, installment_amount_in_multiples_of=None, interest_period_frequency_type=None, interest_recalculation_enabled=None, linked_to_floating_interest_rate=None, loan_configurable_attributes=None, loan_product_guarantee_details=None, loan_product_min_max_constraints=None, loan_product_related_detail=None, loan_product_tranche_details=None, max_nominal_interest_rate_per_period=None, max_number_of_repayments=None, max_principal_amount=None, min_nominal_interest_rate_per_period=None, min_number_of_repayments=None, min_principal_amount=None, minimum_days_between_disbursal_and_first_repayment=None, multi_disburse_loan=None, name=None, new=None, nominal_interest_rate_per_period=None, number_of_repayments=None, over_applied_calculation_type=None, over_applied_number=None, over_due_days_for_repayment_event=None, overdue_days_for_npa=None, payment_allocation_rules=None, periodic_accrual_accounting_enabled=None, principal_amount=None, principal_threshold_for_last_installment=None, product_interest_recalculation_details=None, rates=None, repayment_start_date_type=None, short_name=None, start_date=None, sync_expected_with_disbursement_date=None, transaction_processing_strategy_code=None, transaction_processing_strategy_name=None, upfront_accrual_accounting_enabled=None, use_borrower_cycle=None, variable_installment_config=None):  # noqa: E501
        """LoanProduct - a model defined in Swagger"""  # noqa: E501
        self._account_moves_out_of_npa_only_on_arrears_completion = None
        self._accounting_disabled = None
        self._accounting_rule = None
        self._allow_approved_disbursed_amounts_over_applied = None
        self._allow_variabe_installments = None
        self._arrears_based_on_original_schedule = None
        self._borrower_cycle_variations = None
        self._can_define_installment_amount = None
        self._can_use_for_topup = None
        self._cash_based_accounting_enabled = None
        self._charges = None
        self._close_date = None
        self._credit_allocation_rules = None
        self._currency = None
        self._delinquency_bucket = None
        self._description = None
        self._disallow_expected_disbursements = None
        self._due_days_for_repayment_event = None
        self._enable_installment_level_delinquency = None
        self._equal_amortization = None
        self._external_id = None
        self._fixed_principal_percentage_per_installment = None
        self._floating_rates = None
        self._fund = None
        self._hold_guarantee_funds = None
        self._id = None
        self._include_in_borrower_cycle = None
        self._installment_amount_in_multiples_of = None
        self._interest_period_frequency_type = None
        self._interest_recalculation_enabled = None
        self._linked_to_floating_interest_rate = None
        self._loan_configurable_attributes = None
        self._loan_product_guarantee_details = None
        self._loan_product_min_max_constraints = None
        self._loan_product_related_detail = None
        self._loan_product_tranche_details = None
        self._max_nominal_interest_rate_per_period = None
        self._max_number_of_repayments = None
        self._max_principal_amount = None
        self._min_nominal_interest_rate_per_period = None
        self._min_number_of_repayments = None
        self._min_principal_amount = None
        self._minimum_days_between_disbursal_and_first_repayment = None
        self._multi_disburse_loan = None
        self._name = None
        self._new = None
        self._nominal_interest_rate_per_period = None
        self._number_of_repayments = None
        self._over_applied_calculation_type = None
        self._over_applied_number = None
        self._over_due_days_for_repayment_event = None
        self._overdue_days_for_npa = None
        self._payment_allocation_rules = None
        self._periodic_accrual_accounting_enabled = None
        self._principal_amount = None
        self._principal_threshold_for_last_installment = None
        self._product_interest_recalculation_details = None
        self._rates = None
        self._repayment_start_date_type = None
        self._short_name = None
        self._start_date = None
        self._sync_expected_with_disbursement_date = None
        self._transaction_processing_strategy_code = None
        self._transaction_processing_strategy_name = None
        self._upfront_accrual_accounting_enabled = None
        self._use_borrower_cycle = None
        self._variable_installment_config = None
        self.discriminator = None
        if account_moves_out_of_npa_only_on_arrears_completion is not None:
            self.account_moves_out_of_npa_only_on_arrears_completion = account_moves_out_of_npa_only_on_arrears_completion
        if accounting_disabled is not None:
            self.accounting_disabled = accounting_disabled
        if accounting_rule is not None:
            self.accounting_rule = accounting_rule
        if allow_approved_disbursed_amounts_over_applied is not None:
            self.allow_approved_disbursed_amounts_over_applied = allow_approved_disbursed_amounts_over_applied
        if allow_variabe_installments is not None:
            self.allow_variabe_installments = allow_variabe_installments
        if arrears_based_on_original_schedule is not None:
            self.arrears_based_on_original_schedule = arrears_based_on_original_schedule
        if borrower_cycle_variations is not None:
            self.borrower_cycle_variations = borrower_cycle_variations
        if can_define_installment_amount is not None:
            self.can_define_installment_amount = can_define_installment_amount
        if can_use_for_topup is not None:
            self.can_use_for_topup = can_use_for_topup
        if cash_based_accounting_enabled is not None:
            self.cash_based_accounting_enabled = cash_based_accounting_enabled
        if charges is not None:
            self.charges = charges
        if close_date is not None:
            self.close_date = close_date
        if credit_allocation_rules is not None:
            self.credit_allocation_rules = credit_allocation_rules
        if currency is not None:
            self.currency = currency
        if delinquency_bucket is not None:
            self.delinquency_bucket = delinquency_bucket
        if description is not None:
            self.description = description
        if disallow_expected_disbursements is not None:
            self.disallow_expected_disbursements = disallow_expected_disbursements
        if due_days_for_repayment_event is not None:
            self.due_days_for_repayment_event = due_days_for_repayment_event
        if enable_installment_level_delinquency is not None:
            self.enable_installment_level_delinquency = enable_installment_level_delinquency
        if equal_amortization is not None:
            self.equal_amortization = equal_amortization
        if external_id is not None:
            self.external_id = external_id
        if fixed_principal_percentage_per_installment is not None:
            self.fixed_principal_percentage_per_installment = fixed_principal_percentage_per_installment
        if floating_rates is not None:
            self.floating_rates = floating_rates
        if fund is not None:
            self.fund = fund
        if hold_guarantee_funds is not None:
            self.hold_guarantee_funds = hold_guarantee_funds
        if id is not None:
            self.id = id
        if include_in_borrower_cycle is not None:
            self.include_in_borrower_cycle = include_in_borrower_cycle
        if installment_amount_in_multiples_of is not None:
            self.installment_amount_in_multiples_of = installment_amount_in_multiples_of
        if interest_period_frequency_type is not None:
            self.interest_period_frequency_type = interest_period_frequency_type
        if interest_recalculation_enabled is not None:
            self.interest_recalculation_enabled = interest_recalculation_enabled
        if linked_to_floating_interest_rate is not None:
            self.linked_to_floating_interest_rate = linked_to_floating_interest_rate
        if loan_configurable_attributes is not None:
            self.loan_configurable_attributes = loan_configurable_attributes
        if loan_product_guarantee_details is not None:
            self.loan_product_guarantee_details = loan_product_guarantee_details
        if loan_product_min_max_constraints is not None:
            self.loan_product_min_max_constraints = loan_product_min_max_constraints
        if loan_product_related_detail is not None:
            self.loan_product_related_detail = loan_product_related_detail
        if loan_product_tranche_details is not None:
            self.loan_product_tranche_details = loan_product_tranche_details
        if max_nominal_interest_rate_per_period is not None:
            self.max_nominal_interest_rate_per_period = max_nominal_interest_rate_per_period
        if max_number_of_repayments is not None:
            self.max_number_of_repayments = max_number_of_repayments
        if max_principal_amount is not None:
            self.max_principal_amount = max_principal_amount
        if min_nominal_interest_rate_per_period is not None:
            self.min_nominal_interest_rate_per_period = min_nominal_interest_rate_per_period
        if min_number_of_repayments is not None:
            self.min_number_of_repayments = min_number_of_repayments
        if min_principal_amount is not None:
            self.min_principal_amount = min_principal_amount
        if minimum_days_between_disbursal_and_first_repayment is not None:
            self.minimum_days_between_disbursal_and_first_repayment = minimum_days_between_disbursal_and_first_repayment
        if multi_disburse_loan is not None:
            self.multi_disburse_loan = multi_disburse_loan
        if name is not None:
            self.name = name
        if new is not None:
            self.new = new
        if nominal_interest_rate_per_period is not None:
            self.nominal_interest_rate_per_period = nominal_interest_rate_per_period
        if number_of_repayments is not None:
            self.number_of_repayments = number_of_repayments
        if over_applied_calculation_type is not None:
            self.over_applied_calculation_type = over_applied_calculation_type
        if over_applied_number is not None:
            self.over_applied_number = over_applied_number
        if over_due_days_for_repayment_event is not None:
            self.over_due_days_for_repayment_event = over_due_days_for_repayment_event
        if overdue_days_for_npa is not None:
            self.overdue_days_for_npa = overdue_days_for_npa
        if payment_allocation_rules is not None:
            self.payment_allocation_rules = payment_allocation_rules
        if periodic_accrual_accounting_enabled is not None:
            self.periodic_accrual_accounting_enabled = periodic_accrual_accounting_enabled
        if principal_amount is not None:
            self.principal_amount = principal_amount
        if principal_threshold_for_last_installment is not None:
            self.principal_threshold_for_last_installment = principal_threshold_for_last_installment
        if product_interest_recalculation_details is not None:
            self.product_interest_recalculation_details = product_interest_recalculation_details
        if rates is not None:
            self.rates = rates
        if repayment_start_date_type is not None:
            self.repayment_start_date_type = repayment_start_date_type
        if short_name is not None:
            self.short_name = short_name
        if start_date is not None:
            self.start_date = start_date
        if sync_expected_with_disbursement_date is not None:
            self.sync_expected_with_disbursement_date = sync_expected_with_disbursement_date
        if transaction_processing_strategy_code is not None:
            self.transaction_processing_strategy_code = transaction_processing_strategy_code
        if transaction_processing_strategy_name is not None:
            self.transaction_processing_strategy_name = transaction_processing_strategy_name
        if upfront_accrual_accounting_enabled is not None:
            self.upfront_accrual_accounting_enabled = upfront_accrual_accounting_enabled
        if use_borrower_cycle is not None:
            self.use_borrower_cycle = use_borrower_cycle
        if variable_installment_config is not None:
            self.variable_installment_config = variable_installment_config

    @property
    def account_moves_out_of_npa_only_on_arrears_completion(self):
        """Gets the account_moves_out_of_npa_only_on_arrears_completion of this LoanProduct.  # noqa: E501


        :return: The account_moves_out_of_npa_only_on_arrears_completion of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._account_moves_out_of_npa_only_on_arrears_completion

    @account_moves_out_of_npa_only_on_arrears_completion.setter
    def account_moves_out_of_npa_only_on_arrears_completion(self, account_moves_out_of_npa_only_on_arrears_completion):
        """Sets the account_moves_out_of_npa_only_on_arrears_completion of this LoanProduct.


        :param account_moves_out_of_npa_only_on_arrears_completion: The account_moves_out_of_npa_only_on_arrears_completion of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._account_moves_out_of_npa_only_on_arrears_completion = account_moves_out_of_npa_only_on_arrears_completion

    @property
    def accounting_disabled(self):
        """Gets the accounting_disabled of this LoanProduct.  # noqa: E501


        :return: The accounting_disabled of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._accounting_disabled

    @accounting_disabled.setter
    def accounting_disabled(self, accounting_disabled):
        """Sets the accounting_disabled of this LoanProduct.


        :param accounting_disabled: The accounting_disabled of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._accounting_disabled = accounting_disabled

    @property
    def accounting_rule(self):
        """Gets the accounting_rule of this LoanProduct.  # noqa: E501


        :return: The accounting_rule of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._accounting_rule

    @accounting_rule.setter
    def accounting_rule(self, accounting_rule):
        """Sets the accounting_rule of this LoanProduct.


        :param accounting_rule: The accounting_rule of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._accounting_rule = accounting_rule

    @property
    def allow_approved_disbursed_amounts_over_applied(self):
        """Gets the allow_approved_disbursed_amounts_over_applied of this LoanProduct.  # noqa: E501


        :return: The allow_approved_disbursed_amounts_over_applied of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._allow_approved_disbursed_amounts_over_applied

    @allow_approved_disbursed_amounts_over_applied.setter
    def allow_approved_disbursed_amounts_over_applied(self, allow_approved_disbursed_amounts_over_applied):
        """Sets the allow_approved_disbursed_amounts_over_applied of this LoanProduct.


        :param allow_approved_disbursed_amounts_over_applied: The allow_approved_disbursed_amounts_over_applied of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._allow_approved_disbursed_amounts_over_applied = allow_approved_disbursed_amounts_over_applied

    @property
    def allow_variabe_installments(self):
        """Gets the allow_variabe_installments of this LoanProduct.  # noqa: E501


        :return: The allow_variabe_installments of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._allow_variabe_installments

    @allow_variabe_installments.setter
    def allow_variabe_installments(self, allow_variabe_installments):
        """Sets the allow_variabe_installments of this LoanProduct.


        :param allow_variabe_installments: The allow_variabe_installments of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._allow_variabe_installments = allow_variabe_installments

    @property
    def arrears_based_on_original_schedule(self):
        """Gets the arrears_based_on_original_schedule of this LoanProduct.  # noqa: E501


        :return: The arrears_based_on_original_schedule of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._arrears_based_on_original_schedule

    @arrears_based_on_original_schedule.setter
    def arrears_based_on_original_schedule(self, arrears_based_on_original_schedule):
        """Sets the arrears_based_on_original_schedule of this LoanProduct.


        :param arrears_based_on_original_schedule: The arrears_based_on_original_schedule of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._arrears_based_on_original_schedule = arrears_based_on_original_schedule

    @property
    def borrower_cycle_variations(self):
        """Gets the borrower_cycle_variations of this LoanProduct.  # noqa: E501


        :return: The borrower_cycle_variations of this LoanProduct.  # noqa: E501
        :rtype: list[LoanProductBorrowerCycleVariations]
        """
        return self._borrower_cycle_variations

    @borrower_cycle_variations.setter
    def borrower_cycle_variations(self, borrower_cycle_variations):
        """Sets the borrower_cycle_variations of this LoanProduct.


        :param borrower_cycle_variations: The borrower_cycle_variations of this LoanProduct.  # noqa: E501
        :type: list[LoanProductBorrowerCycleVariations]
        """

        self._borrower_cycle_variations = borrower_cycle_variations

    @property
    def can_define_installment_amount(self):
        """Gets the can_define_installment_amount of this LoanProduct.  # noqa: E501


        :return: The can_define_installment_amount of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._can_define_installment_amount

    @can_define_installment_amount.setter
    def can_define_installment_amount(self, can_define_installment_amount):
        """Sets the can_define_installment_amount of this LoanProduct.


        :param can_define_installment_amount: The can_define_installment_amount of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._can_define_installment_amount = can_define_installment_amount

    @property
    def can_use_for_topup(self):
        """Gets the can_use_for_topup of this LoanProduct.  # noqa: E501


        :return: The can_use_for_topup of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._can_use_for_topup

    @can_use_for_topup.setter
    def can_use_for_topup(self, can_use_for_topup):
        """Sets the can_use_for_topup of this LoanProduct.


        :param can_use_for_topup: The can_use_for_topup of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._can_use_for_topup = can_use_for_topup

    @property
    def cash_based_accounting_enabled(self):
        """Gets the cash_based_accounting_enabled of this LoanProduct.  # noqa: E501


        :return: The cash_based_accounting_enabled of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._cash_based_accounting_enabled

    @cash_based_accounting_enabled.setter
    def cash_based_accounting_enabled(self, cash_based_accounting_enabled):
        """Sets the cash_based_accounting_enabled of this LoanProduct.


        :param cash_based_accounting_enabled: The cash_based_accounting_enabled of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._cash_based_accounting_enabled = cash_based_accounting_enabled

    @property
    def charges(self):
        """Gets the charges of this LoanProduct.  # noqa: E501


        :return: The charges of this LoanProduct.  # noqa: E501
        :rtype: list[Charge]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this LoanProduct.


        :param charges: The charges of this LoanProduct.  # noqa: E501
        :type: list[Charge]
        """

        self._charges = charges

    @property
    def close_date(self):
        """Gets the close_date of this LoanProduct.  # noqa: E501


        :return: The close_date of this LoanProduct.  # noqa: E501
        :rtype: date
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this LoanProduct.


        :param close_date: The close_date of this LoanProduct.  # noqa: E501
        :type: date
        """

        self._close_date = close_date

    @property
    def credit_allocation_rules(self):
        """Gets the credit_allocation_rules of this LoanProduct.  # noqa: E501


        :return: The credit_allocation_rules of this LoanProduct.  # noqa: E501
        :rtype: list[LoanProductCreditAllocationRule]
        """
        return self._credit_allocation_rules

    @credit_allocation_rules.setter
    def credit_allocation_rules(self, credit_allocation_rules):
        """Sets the credit_allocation_rules of this LoanProduct.


        :param credit_allocation_rules: The credit_allocation_rules of this LoanProduct.  # noqa: E501
        :type: list[LoanProductCreditAllocationRule]
        """

        self._credit_allocation_rules = credit_allocation_rules

    @property
    def currency(self):
        """Gets the currency of this LoanProduct.  # noqa: E501


        :return: The currency of this LoanProduct.  # noqa: E501
        :rtype: MonetaryCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LoanProduct.


        :param currency: The currency of this LoanProduct.  # noqa: E501
        :type: MonetaryCurrency
        """

        self._currency = currency

    @property
    def delinquency_bucket(self):
        """Gets the delinquency_bucket of this LoanProduct.  # noqa: E501


        :return: The delinquency_bucket of this LoanProduct.  # noqa: E501
        :rtype: DelinquencyBucket
        """
        return self._delinquency_bucket

    @delinquency_bucket.setter
    def delinquency_bucket(self, delinquency_bucket):
        """Sets the delinquency_bucket of this LoanProduct.


        :param delinquency_bucket: The delinquency_bucket of this LoanProduct.  # noqa: E501
        :type: DelinquencyBucket
        """

        self._delinquency_bucket = delinquency_bucket

    @property
    def description(self):
        """Gets the description of this LoanProduct.  # noqa: E501


        :return: The description of this LoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LoanProduct.


        :param description: The description of this LoanProduct.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disallow_expected_disbursements(self):
        """Gets the disallow_expected_disbursements of this LoanProduct.  # noqa: E501


        :return: The disallow_expected_disbursements of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_expected_disbursements

    @disallow_expected_disbursements.setter
    def disallow_expected_disbursements(self, disallow_expected_disbursements):
        """Sets the disallow_expected_disbursements of this LoanProduct.


        :param disallow_expected_disbursements: The disallow_expected_disbursements of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._disallow_expected_disbursements = disallow_expected_disbursements

    @property
    def due_days_for_repayment_event(self):
        """Gets the due_days_for_repayment_event of this LoanProduct.  # noqa: E501


        :return: The due_days_for_repayment_event of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._due_days_for_repayment_event

    @due_days_for_repayment_event.setter
    def due_days_for_repayment_event(self, due_days_for_repayment_event):
        """Sets the due_days_for_repayment_event of this LoanProduct.


        :param due_days_for_repayment_event: The due_days_for_repayment_event of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._due_days_for_repayment_event = due_days_for_repayment_event

    @property
    def enable_installment_level_delinquency(self):
        """Gets the enable_installment_level_delinquency of this LoanProduct.  # noqa: E501


        :return: The enable_installment_level_delinquency of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._enable_installment_level_delinquency

    @enable_installment_level_delinquency.setter
    def enable_installment_level_delinquency(self, enable_installment_level_delinquency):
        """Sets the enable_installment_level_delinquency of this LoanProduct.


        :param enable_installment_level_delinquency: The enable_installment_level_delinquency of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._enable_installment_level_delinquency = enable_installment_level_delinquency

    @property
    def equal_amortization(self):
        """Gets the equal_amortization of this LoanProduct.  # noqa: E501


        :return: The equal_amortization of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._equal_amortization

    @equal_amortization.setter
    def equal_amortization(self, equal_amortization):
        """Sets the equal_amortization of this LoanProduct.


        :param equal_amortization: The equal_amortization of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._equal_amortization = equal_amortization

    @property
    def external_id(self):
        """Gets the external_id of this LoanProduct.  # noqa: E501


        :return: The external_id of this LoanProduct.  # noqa: E501
        :rtype: ExternalId
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this LoanProduct.


        :param external_id: The external_id of this LoanProduct.  # noqa: E501
        :type: ExternalId
        """

        self._external_id = external_id

    @property
    def fixed_principal_percentage_per_installment(self):
        """Gets the fixed_principal_percentage_per_installment of this LoanProduct.  # noqa: E501


        :return: The fixed_principal_percentage_per_installment of this LoanProduct.  # noqa: E501
        :rtype: float
        """
        return self._fixed_principal_percentage_per_installment

    @fixed_principal_percentage_per_installment.setter
    def fixed_principal_percentage_per_installment(self, fixed_principal_percentage_per_installment):
        """Sets the fixed_principal_percentage_per_installment of this LoanProduct.


        :param fixed_principal_percentage_per_installment: The fixed_principal_percentage_per_installment of this LoanProduct.  # noqa: E501
        :type: float
        """

        self._fixed_principal_percentage_per_installment = fixed_principal_percentage_per_installment

    @property
    def floating_rates(self):
        """Gets the floating_rates of this LoanProduct.  # noqa: E501


        :return: The floating_rates of this LoanProduct.  # noqa: E501
        :rtype: LoanProductFloatingRates
        """
        return self._floating_rates

    @floating_rates.setter
    def floating_rates(self, floating_rates):
        """Sets the floating_rates of this LoanProduct.


        :param floating_rates: The floating_rates of this LoanProduct.  # noqa: E501
        :type: LoanProductFloatingRates
        """

        self._floating_rates = floating_rates

    @property
    def fund(self):
        """Gets the fund of this LoanProduct.  # noqa: E501


        :return: The fund of this LoanProduct.  # noqa: E501
        :rtype: Fund
        """
        return self._fund

    @fund.setter
    def fund(self, fund):
        """Sets the fund of this LoanProduct.


        :param fund: The fund of this LoanProduct.  # noqa: E501
        :type: Fund
        """

        self._fund = fund

    @property
    def hold_guarantee_funds(self):
        """Gets the hold_guarantee_funds of this LoanProduct.  # noqa: E501


        :return: The hold_guarantee_funds of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._hold_guarantee_funds

    @hold_guarantee_funds.setter
    def hold_guarantee_funds(self, hold_guarantee_funds):
        """Sets the hold_guarantee_funds of this LoanProduct.


        :param hold_guarantee_funds: The hold_guarantee_funds of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._hold_guarantee_funds = hold_guarantee_funds

    @property
    def id(self):
        """Gets the id of this LoanProduct.  # noqa: E501


        :return: The id of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoanProduct.


        :param id: The id of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def include_in_borrower_cycle(self):
        """Gets the include_in_borrower_cycle of this LoanProduct.  # noqa: E501


        :return: The include_in_borrower_cycle of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_borrower_cycle

    @include_in_borrower_cycle.setter
    def include_in_borrower_cycle(self, include_in_borrower_cycle):
        """Sets the include_in_borrower_cycle of this LoanProduct.


        :param include_in_borrower_cycle: The include_in_borrower_cycle of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._include_in_borrower_cycle = include_in_borrower_cycle

    @property
    def installment_amount_in_multiples_of(self):
        """Gets the installment_amount_in_multiples_of of this LoanProduct.  # noqa: E501


        :return: The installment_amount_in_multiples_of of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._installment_amount_in_multiples_of

    @installment_amount_in_multiples_of.setter
    def installment_amount_in_multiples_of(self, installment_amount_in_multiples_of):
        """Sets the installment_amount_in_multiples_of of this LoanProduct.


        :param installment_amount_in_multiples_of: The installment_amount_in_multiples_of of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._installment_amount_in_multiples_of = installment_amount_in_multiples_of

    @property
    def interest_period_frequency_type(self):
        """Gets the interest_period_frequency_type of this LoanProduct.  # noqa: E501


        :return: The interest_period_frequency_type of this LoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._interest_period_frequency_type

    @interest_period_frequency_type.setter
    def interest_period_frequency_type(self, interest_period_frequency_type):
        """Sets the interest_period_frequency_type of this LoanProduct.


        :param interest_period_frequency_type: The interest_period_frequency_type of this LoanProduct.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAYS", "WEEKS", "MONTHS", "YEARS", "WHOLE_TERM", "INVALID"]  # noqa: E501
        if interest_period_frequency_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interest_period_frequency_type` ({0}), must be one of {1}"  # noqa: E501
                .format(interest_period_frequency_type, allowed_values)
            )

        self._interest_period_frequency_type = interest_period_frequency_type

    @property
    def interest_recalculation_enabled(self):
        """Gets the interest_recalculation_enabled of this LoanProduct.  # noqa: E501


        :return: The interest_recalculation_enabled of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._interest_recalculation_enabled

    @interest_recalculation_enabled.setter
    def interest_recalculation_enabled(self, interest_recalculation_enabled):
        """Sets the interest_recalculation_enabled of this LoanProduct.


        :param interest_recalculation_enabled: The interest_recalculation_enabled of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._interest_recalculation_enabled = interest_recalculation_enabled

    @property
    def linked_to_floating_interest_rate(self):
        """Gets the linked_to_floating_interest_rate of this LoanProduct.  # noqa: E501


        :return: The linked_to_floating_interest_rate of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._linked_to_floating_interest_rate

    @linked_to_floating_interest_rate.setter
    def linked_to_floating_interest_rate(self, linked_to_floating_interest_rate):
        """Sets the linked_to_floating_interest_rate of this LoanProduct.


        :param linked_to_floating_interest_rate: The linked_to_floating_interest_rate of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._linked_to_floating_interest_rate = linked_to_floating_interest_rate

    @property
    def loan_configurable_attributes(self):
        """Gets the loan_configurable_attributes of this LoanProduct.  # noqa: E501


        :return: The loan_configurable_attributes of this LoanProduct.  # noqa: E501
        :rtype: LoanProductConfigurableAttributes
        """
        return self._loan_configurable_attributes

    @loan_configurable_attributes.setter
    def loan_configurable_attributes(self, loan_configurable_attributes):
        """Sets the loan_configurable_attributes of this LoanProduct.


        :param loan_configurable_attributes: The loan_configurable_attributes of this LoanProduct.  # noqa: E501
        :type: LoanProductConfigurableAttributes
        """

        self._loan_configurable_attributes = loan_configurable_attributes

    @property
    def loan_product_guarantee_details(self):
        """Gets the loan_product_guarantee_details of this LoanProduct.  # noqa: E501


        :return: The loan_product_guarantee_details of this LoanProduct.  # noqa: E501
        :rtype: LoanProductGuaranteeDetails
        """
        return self._loan_product_guarantee_details

    @loan_product_guarantee_details.setter
    def loan_product_guarantee_details(self, loan_product_guarantee_details):
        """Sets the loan_product_guarantee_details of this LoanProduct.


        :param loan_product_guarantee_details: The loan_product_guarantee_details of this LoanProduct.  # noqa: E501
        :type: LoanProductGuaranteeDetails
        """

        self._loan_product_guarantee_details = loan_product_guarantee_details

    @property
    def loan_product_min_max_constraints(self):
        """Gets the loan_product_min_max_constraints of this LoanProduct.  # noqa: E501


        :return: The loan_product_min_max_constraints of this LoanProduct.  # noqa: E501
        :rtype: LoanProductMinMaxConstraints
        """
        return self._loan_product_min_max_constraints

    @loan_product_min_max_constraints.setter
    def loan_product_min_max_constraints(self, loan_product_min_max_constraints):
        """Sets the loan_product_min_max_constraints of this LoanProduct.


        :param loan_product_min_max_constraints: The loan_product_min_max_constraints of this LoanProduct.  # noqa: E501
        :type: LoanProductMinMaxConstraints
        """

        self._loan_product_min_max_constraints = loan_product_min_max_constraints

    @property
    def loan_product_related_detail(self):
        """Gets the loan_product_related_detail of this LoanProduct.  # noqa: E501


        :return: The loan_product_related_detail of this LoanProduct.  # noqa: E501
        :rtype: LoanProductRelatedDetail
        """
        return self._loan_product_related_detail

    @loan_product_related_detail.setter
    def loan_product_related_detail(self, loan_product_related_detail):
        """Sets the loan_product_related_detail of this LoanProduct.


        :param loan_product_related_detail: The loan_product_related_detail of this LoanProduct.  # noqa: E501
        :type: LoanProductRelatedDetail
        """

        self._loan_product_related_detail = loan_product_related_detail

    @property
    def loan_product_tranche_details(self):
        """Gets the loan_product_tranche_details of this LoanProduct.  # noqa: E501


        :return: The loan_product_tranche_details of this LoanProduct.  # noqa: E501
        :rtype: LoanProductTrancheDetails
        """
        return self._loan_product_tranche_details

    @loan_product_tranche_details.setter
    def loan_product_tranche_details(self, loan_product_tranche_details):
        """Sets the loan_product_tranche_details of this LoanProduct.


        :param loan_product_tranche_details: The loan_product_tranche_details of this LoanProduct.  # noqa: E501
        :type: LoanProductTrancheDetails
        """

        self._loan_product_tranche_details = loan_product_tranche_details

    @property
    def max_nominal_interest_rate_per_period(self):
        """Gets the max_nominal_interest_rate_per_period of this LoanProduct.  # noqa: E501


        :return: The max_nominal_interest_rate_per_period of this LoanProduct.  # noqa: E501
        :rtype: float
        """
        return self._max_nominal_interest_rate_per_period

    @max_nominal_interest_rate_per_period.setter
    def max_nominal_interest_rate_per_period(self, max_nominal_interest_rate_per_period):
        """Sets the max_nominal_interest_rate_per_period of this LoanProduct.


        :param max_nominal_interest_rate_per_period: The max_nominal_interest_rate_per_period of this LoanProduct.  # noqa: E501
        :type: float
        """

        self._max_nominal_interest_rate_per_period = max_nominal_interest_rate_per_period

    @property
    def max_number_of_repayments(self):
        """Gets the max_number_of_repayments of this LoanProduct.  # noqa: E501


        :return: The max_number_of_repayments of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_repayments

    @max_number_of_repayments.setter
    def max_number_of_repayments(self, max_number_of_repayments):
        """Sets the max_number_of_repayments of this LoanProduct.


        :param max_number_of_repayments: The max_number_of_repayments of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._max_number_of_repayments = max_number_of_repayments

    @property
    def max_principal_amount(self):
        """Gets the max_principal_amount of this LoanProduct.  # noqa: E501


        :return: The max_principal_amount of this LoanProduct.  # noqa: E501
        :rtype: Money
        """
        return self._max_principal_amount

    @max_principal_amount.setter
    def max_principal_amount(self, max_principal_amount):
        """Sets the max_principal_amount of this LoanProduct.


        :param max_principal_amount: The max_principal_amount of this LoanProduct.  # noqa: E501
        :type: Money
        """

        self._max_principal_amount = max_principal_amount

    @property
    def min_nominal_interest_rate_per_period(self):
        """Gets the min_nominal_interest_rate_per_period of this LoanProduct.  # noqa: E501


        :return: The min_nominal_interest_rate_per_period of this LoanProduct.  # noqa: E501
        :rtype: float
        """
        return self._min_nominal_interest_rate_per_period

    @min_nominal_interest_rate_per_period.setter
    def min_nominal_interest_rate_per_period(self, min_nominal_interest_rate_per_period):
        """Sets the min_nominal_interest_rate_per_period of this LoanProduct.


        :param min_nominal_interest_rate_per_period: The min_nominal_interest_rate_per_period of this LoanProduct.  # noqa: E501
        :type: float
        """

        self._min_nominal_interest_rate_per_period = min_nominal_interest_rate_per_period

    @property
    def min_number_of_repayments(self):
        """Gets the min_number_of_repayments of this LoanProduct.  # noqa: E501


        :return: The min_number_of_repayments of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._min_number_of_repayments

    @min_number_of_repayments.setter
    def min_number_of_repayments(self, min_number_of_repayments):
        """Sets the min_number_of_repayments of this LoanProduct.


        :param min_number_of_repayments: The min_number_of_repayments of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._min_number_of_repayments = min_number_of_repayments

    @property
    def min_principal_amount(self):
        """Gets the min_principal_amount of this LoanProduct.  # noqa: E501


        :return: The min_principal_amount of this LoanProduct.  # noqa: E501
        :rtype: Money
        """
        return self._min_principal_amount

    @min_principal_amount.setter
    def min_principal_amount(self, min_principal_amount):
        """Sets the min_principal_amount of this LoanProduct.


        :param min_principal_amount: The min_principal_amount of this LoanProduct.  # noqa: E501
        :type: Money
        """

        self._min_principal_amount = min_principal_amount

    @property
    def minimum_days_between_disbursal_and_first_repayment(self):
        """Gets the minimum_days_between_disbursal_and_first_repayment of this LoanProduct.  # noqa: E501


        :return: The minimum_days_between_disbursal_and_first_repayment of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._minimum_days_between_disbursal_and_first_repayment

    @minimum_days_between_disbursal_and_first_repayment.setter
    def minimum_days_between_disbursal_and_first_repayment(self, minimum_days_between_disbursal_and_first_repayment):
        """Sets the minimum_days_between_disbursal_and_first_repayment of this LoanProduct.


        :param minimum_days_between_disbursal_and_first_repayment: The minimum_days_between_disbursal_and_first_repayment of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._minimum_days_between_disbursal_and_first_repayment = minimum_days_between_disbursal_and_first_repayment

    @property
    def multi_disburse_loan(self):
        """Gets the multi_disburse_loan of this LoanProduct.  # noqa: E501


        :return: The multi_disburse_loan of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._multi_disburse_loan

    @multi_disburse_loan.setter
    def multi_disburse_loan(self, multi_disburse_loan):
        """Sets the multi_disburse_loan of this LoanProduct.


        :param multi_disburse_loan: The multi_disburse_loan of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._multi_disburse_loan = multi_disburse_loan

    @property
    def name(self):
        """Gets the name of this LoanProduct.  # noqa: E501


        :return: The name of this LoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoanProduct.


        :param name: The name of this LoanProduct.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def new(self):
        """Gets the new of this LoanProduct.  # noqa: E501


        :return: The new of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this LoanProduct.


        :param new: The new of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def nominal_interest_rate_per_period(self):
        """Gets the nominal_interest_rate_per_period of this LoanProduct.  # noqa: E501


        :return: The nominal_interest_rate_per_period of this LoanProduct.  # noqa: E501
        :rtype: float
        """
        return self._nominal_interest_rate_per_period

    @nominal_interest_rate_per_period.setter
    def nominal_interest_rate_per_period(self, nominal_interest_rate_per_period):
        """Sets the nominal_interest_rate_per_period of this LoanProduct.


        :param nominal_interest_rate_per_period: The nominal_interest_rate_per_period of this LoanProduct.  # noqa: E501
        :type: float
        """

        self._nominal_interest_rate_per_period = nominal_interest_rate_per_period

    @property
    def number_of_repayments(self):
        """Gets the number_of_repayments of this LoanProduct.  # noqa: E501


        :return: The number_of_repayments of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._number_of_repayments

    @number_of_repayments.setter
    def number_of_repayments(self, number_of_repayments):
        """Sets the number_of_repayments of this LoanProduct.


        :param number_of_repayments: The number_of_repayments of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._number_of_repayments = number_of_repayments

    @property
    def over_applied_calculation_type(self):
        """Gets the over_applied_calculation_type of this LoanProduct.  # noqa: E501


        :return: The over_applied_calculation_type of this LoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._over_applied_calculation_type

    @over_applied_calculation_type.setter
    def over_applied_calculation_type(self, over_applied_calculation_type):
        """Sets the over_applied_calculation_type of this LoanProduct.


        :param over_applied_calculation_type: The over_applied_calculation_type of this LoanProduct.  # noqa: E501
        :type: str
        """

        self._over_applied_calculation_type = over_applied_calculation_type

    @property
    def over_applied_number(self):
        """Gets the over_applied_number of this LoanProduct.  # noqa: E501


        :return: The over_applied_number of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._over_applied_number

    @over_applied_number.setter
    def over_applied_number(self, over_applied_number):
        """Sets the over_applied_number of this LoanProduct.


        :param over_applied_number: The over_applied_number of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._over_applied_number = over_applied_number

    @property
    def over_due_days_for_repayment_event(self):
        """Gets the over_due_days_for_repayment_event of this LoanProduct.  # noqa: E501


        :return: The over_due_days_for_repayment_event of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._over_due_days_for_repayment_event

    @over_due_days_for_repayment_event.setter
    def over_due_days_for_repayment_event(self, over_due_days_for_repayment_event):
        """Sets the over_due_days_for_repayment_event of this LoanProduct.


        :param over_due_days_for_repayment_event: The over_due_days_for_repayment_event of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._over_due_days_for_repayment_event = over_due_days_for_repayment_event

    @property
    def overdue_days_for_npa(self):
        """Gets the overdue_days_for_npa of this LoanProduct.  # noqa: E501


        :return: The overdue_days_for_npa of this LoanProduct.  # noqa: E501
        :rtype: int
        """
        return self._overdue_days_for_npa

    @overdue_days_for_npa.setter
    def overdue_days_for_npa(self, overdue_days_for_npa):
        """Sets the overdue_days_for_npa of this LoanProduct.


        :param overdue_days_for_npa: The overdue_days_for_npa of this LoanProduct.  # noqa: E501
        :type: int
        """

        self._overdue_days_for_npa = overdue_days_for_npa

    @property
    def payment_allocation_rules(self):
        """Gets the payment_allocation_rules of this LoanProduct.  # noqa: E501


        :return: The payment_allocation_rules of this LoanProduct.  # noqa: E501
        :rtype: list[LoanProductPaymentAllocationRule]
        """
        return self._payment_allocation_rules

    @payment_allocation_rules.setter
    def payment_allocation_rules(self, payment_allocation_rules):
        """Sets the payment_allocation_rules of this LoanProduct.


        :param payment_allocation_rules: The payment_allocation_rules of this LoanProduct.  # noqa: E501
        :type: list[LoanProductPaymentAllocationRule]
        """

        self._payment_allocation_rules = payment_allocation_rules

    @property
    def periodic_accrual_accounting_enabled(self):
        """Gets the periodic_accrual_accounting_enabled of this LoanProduct.  # noqa: E501


        :return: The periodic_accrual_accounting_enabled of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._periodic_accrual_accounting_enabled

    @periodic_accrual_accounting_enabled.setter
    def periodic_accrual_accounting_enabled(self, periodic_accrual_accounting_enabled):
        """Sets the periodic_accrual_accounting_enabled of this LoanProduct.


        :param periodic_accrual_accounting_enabled: The periodic_accrual_accounting_enabled of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._periodic_accrual_accounting_enabled = periodic_accrual_accounting_enabled

    @property
    def principal_amount(self):
        """Gets the principal_amount of this LoanProduct.  # noqa: E501


        :return: The principal_amount of this LoanProduct.  # noqa: E501
        :rtype: Money
        """
        return self._principal_amount

    @principal_amount.setter
    def principal_amount(self, principal_amount):
        """Sets the principal_amount of this LoanProduct.


        :param principal_amount: The principal_amount of this LoanProduct.  # noqa: E501
        :type: Money
        """

        self._principal_amount = principal_amount

    @property
    def principal_threshold_for_last_installment(self):
        """Gets the principal_threshold_for_last_installment of this LoanProduct.  # noqa: E501


        :return: The principal_threshold_for_last_installment of this LoanProduct.  # noqa: E501
        :rtype: float
        """
        return self._principal_threshold_for_last_installment

    @principal_threshold_for_last_installment.setter
    def principal_threshold_for_last_installment(self, principal_threshold_for_last_installment):
        """Sets the principal_threshold_for_last_installment of this LoanProduct.


        :param principal_threshold_for_last_installment: The principal_threshold_for_last_installment of this LoanProduct.  # noqa: E501
        :type: float
        """

        self._principal_threshold_for_last_installment = principal_threshold_for_last_installment

    @property
    def product_interest_recalculation_details(self):
        """Gets the product_interest_recalculation_details of this LoanProduct.  # noqa: E501


        :return: The product_interest_recalculation_details of this LoanProduct.  # noqa: E501
        :rtype: LoanProductInterestRecalculationDetails
        """
        return self._product_interest_recalculation_details

    @product_interest_recalculation_details.setter
    def product_interest_recalculation_details(self, product_interest_recalculation_details):
        """Sets the product_interest_recalculation_details of this LoanProduct.


        :param product_interest_recalculation_details: The product_interest_recalculation_details of this LoanProduct.  # noqa: E501
        :type: LoanProductInterestRecalculationDetails
        """

        self._product_interest_recalculation_details = product_interest_recalculation_details

    @property
    def rates(self):
        """Gets the rates of this LoanProduct.  # noqa: E501


        :return: The rates of this LoanProduct.  # noqa: E501
        :rtype: list[Rate]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this LoanProduct.


        :param rates: The rates of this LoanProduct.  # noqa: E501
        :type: list[Rate]
        """

        self._rates = rates

    @property
    def repayment_start_date_type(self):
        """Gets the repayment_start_date_type of this LoanProduct.  # noqa: E501


        :return: The repayment_start_date_type of this LoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._repayment_start_date_type

    @repayment_start_date_type.setter
    def repayment_start_date_type(self, repayment_start_date_type):
        """Sets the repayment_start_date_type of this LoanProduct.


        :param repayment_start_date_type: The repayment_start_date_type of this LoanProduct.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "DISBURSEMENT_DATE", "SUBMITTED_ON_DATE"]  # noqa: E501
        if repayment_start_date_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repayment_start_date_type` ({0}), must be one of {1}"  # noqa: E501
                .format(repayment_start_date_type, allowed_values)
            )

        self._repayment_start_date_type = repayment_start_date_type

    @property
    def short_name(self):
        """Gets the short_name of this LoanProduct.  # noqa: E501


        :return: The short_name of this LoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this LoanProduct.


        :param short_name: The short_name of this LoanProduct.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def start_date(self):
        """Gets the start_date of this LoanProduct.  # noqa: E501


        :return: The start_date of this LoanProduct.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this LoanProduct.


        :param start_date: The start_date of this LoanProduct.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def sync_expected_with_disbursement_date(self):
        """Gets the sync_expected_with_disbursement_date of this LoanProduct.  # noqa: E501


        :return: The sync_expected_with_disbursement_date of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._sync_expected_with_disbursement_date

    @sync_expected_with_disbursement_date.setter
    def sync_expected_with_disbursement_date(self, sync_expected_with_disbursement_date):
        """Sets the sync_expected_with_disbursement_date of this LoanProduct.


        :param sync_expected_with_disbursement_date: The sync_expected_with_disbursement_date of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._sync_expected_with_disbursement_date = sync_expected_with_disbursement_date

    @property
    def transaction_processing_strategy_code(self):
        """Gets the transaction_processing_strategy_code of this LoanProduct.  # noqa: E501


        :return: The transaction_processing_strategy_code of this LoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._transaction_processing_strategy_code

    @transaction_processing_strategy_code.setter
    def transaction_processing_strategy_code(self, transaction_processing_strategy_code):
        """Sets the transaction_processing_strategy_code of this LoanProduct.


        :param transaction_processing_strategy_code: The transaction_processing_strategy_code of this LoanProduct.  # noqa: E501
        :type: str
        """

        self._transaction_processing_strategy_code = transaction_processing_strategy_code

    @property
    def transaction_processing_strategy_name(self):
        """Gets the transaction_processing_strategy_name of this LoanProduct.  # noqa: E501


        :return: The transaction_processing_strategy_name of this LoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._transaction_processing_strategy_name

    @transaction_processing_strategy_name.setter
    def transaction_processing_strategy_name(self, transaction_processing_strategy_name):
        """Sets the transaction_processing_strategy_name of this LoanProduct.


        :param transaction_processing_strategy_name: The transaction_processing_strategy_name of this LoanProduct.  # noqa: E501
        :type: str
        """

        self._transaction_processing_strategy_name = transaction_processing_strategy_name

    @property
    def upfront_accrual_accounting_enabled(self):
        """Gets the upfront_accrual_accounting_enabled of this LoanProduct.  # noqa: E501


        :return: The upfront_accrual_accounting_enabled of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._upfront_accrual_accounting_enabled

    @upfront_accrual_accounting_enabled.setter
    def upfront_accrual_accounting_enabled(self, upfront_accrual_accounting_enabled):
        """Sets the upfront_accrual_accounting_enabled of this LoanProduct.


        :param upfront_accrual_accounting_enabled: The upfront_accrual_accounting_enabled of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._upfront_accrual_accounting_enabled = upfront_accrual_accounting_enabled

    @property
    def use_borrower_cycle(self):
        """Gets the use_borrower_cycle of this LoanProduct.  # noqa: E501


        :return: The use_borrower_cycle of this LoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._use_borrower_cycle

    @use_borrower_cycle.setter
    def use_borrower_cycle(self, use_borrower_cycle):
        """Sets the use_borrower_cycle of this LoanProduct.


        :param use_borrower_cycle: The use_borrower_cycle of this LoanProduct.  # noqa: E501
        :type: bool
        """

        self._use_borrower_cycle = use_borrower_cycle

    @property
    def variable_installment_config(self):
        """Gets the variable_installment_config of this LoanProduct.  # noqa: E501


        :return: The variable_installment_config of this LoanProduct.  # noqa: E501
        :rtype: LoanProductVariableInstallmentConfig
        """
        return self._variable_installment_config

    @variable_installment_config.setter
    def variable_installment_config(self, variable_installment_config):
        """Sets the variable_installment_config of this LoanProduct.


        :param variable_installment_config: The variable_installment_config of this LoanProduct.  # noqa: E501
        :type: LoanProductVariableInstallmentConfig
        """

        self._variable_installment_config = variable_installment_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
