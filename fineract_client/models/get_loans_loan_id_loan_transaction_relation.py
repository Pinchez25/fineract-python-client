# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansLoanIdLoanTransactionRelation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'from_loan_transaction': 'int',
        'payment_type': 'str',
        'relation_type': 'str',
        'to_loan_charge': 'int',
        'to_loan_transaction': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'from_loan_transaction': 'fromLoanTransaction',
        'payment_type': 'paymentType',
        'relation_type': 'relationType',
        'to_loan_charge': 'toLoanCharge',
        'to_loan_transaction': 'toLoanTransaction'
    }

    def __init__(self, amount=None, from_loan_transaction=None, payment_type=None, relation_type=None, to_loan_charge=None, to_loan_transaction=None):  # noqa: E501
        """GetLoansLoanIdLoanTransactionRelation - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._from_loan_transaction = None
        self._payment_type = None
        self._relation_type = None
        self._to_loan_charge = None
        self._to_loan_transaction = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if from_loan_transaction is not None:
            self.from_loan_transaction = from_loan_transaction
        if payment_type is not None:
            self.payment_type = payment_type
        if relation_type is not None:
            self.relation_type = relation_type
        if to_loan_charge is not None:
            self.to_loan_charge = to_loan_charge
        if to_loan_transaction is not None:
            self.to_loan_transaction = to_loan_transaction

    @property
    def amount(self):
        """Gets the amount of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501


        :return: The amount of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetLoansLoanIdLoanTransactionRelation.


        :param amount: The amount of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def from_loan_transaction(self):
        """Gets the from_loan_transaction of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501


        :return: The from_loan_transaction of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :rtype: int
        """
        return self._from_loan_transaction

    @from_loan_transaction.setter
    def from_loan_transaction(self, from_loan_transaction):
        """Sets the from_loan_transaction of this GetLoansLoanIdLoanTransactionRelation.


        :param from_loan_transaction: The from_loan_transaction of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :type: int
        """

        self._from_loan_transaction = from_loan_transaction

    @property
    def payment_type(self):
        """Gets the payment_type of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501


        :return: The payment_type of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this GetLoansLoanIdLoanTransactionRelation.


        :param payment_type: The payment_type of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def relation_type(self):
        """Gets the relation_type of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501


        :return: The relation_type of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this GetLoansLoanIdLoanTransactionRelation.


        :param relation_type: The relation_type of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :type: str
        """

        self._relation_type = relation_type

    @property
    def to_loan_charge(self):
        """Gets the to_loan_charge of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501


        :return: The to_loan_charge of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :rtype: int
        """
        return self._to_loan_charge

    @to_loan_charge.setter
    def to_loan_charge(self, to_loan_charge):
        """Sets the to_loan_charge of this GetLoansLoanIdLoanTransactionRelation.


        :param to_loan_charge: The to_loan_charge of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :type: int
        """

        self._to_loan_charge = to_loan_charge

    @property
    def to_loan_transaction(self):
        """Gets the to_loan_transaction of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501


        :return: The to_loan_transaction of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :rtype: int
        """
        return self._to_loan_transaction

    @to_loan_transaction.setter
    def to_loan_transaction(self, to_loan_transaction):
        """Sets the to_loan_transaction of this GetLoansLoanIdLoanTransactionRelation.


        :param to_loan_transaction: The to_loan_transaction of this GetLoansLoanIdLoanTransactionRelation.  # noqa: E501
        :type: int
        """

        self._to_loan_transaction = to_loan_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansLoanIdLoanTransactionRelation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansLoanIdLoanTransactionRelation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
