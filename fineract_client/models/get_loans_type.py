# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'contra': 'bool',
        'description': 'str',
        'disbursement': 'bool',
        'external_id': 'str',
        'external_loan_id': 'str',
        'id': 'int',
        'loan_id': 'int',
        'recovery_repayment': 'bool',
        'repayment': 'bool',
        'repayment_at_disbursement': 'bool',
        'waive_charges': 'bool',
        'waive_interest': 'bool',
        'write_off': 'bool'
    }

    attribute_map = {
        'code': 'code',
        'contra': 'contra',
        'description': 'description',
        'disbursement': 'disbursement',
        'external_id': 'externalId',
        'external_loan_id': 'externalLoanId',
        'id': 'id',
        'loan_id': 'loanId',
        'recovery_repayment': 'recoveryRepayment',
        'repayment': 'repayment',
        'repayment_at_disbursement': 'repaymentAtDisbursement',
        'waive_charges': 'waiveCharges',
        'waive_interest': 'waiveInterest',
        'write_off': 'writeOff'
    }

    def __init__(self, code=None, contra=None, description=None, disbursement=None, external_id=None, external_loan_id=None, id=None, loan_id=None, recovery_repayment=None, repayment=None, repayment_at_disbursement=None, waive_charges=None, waive_interest=None, write_off=None):  # noqa: E501
        """GetLoansType - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._contra = None
        self._description = None
        self._disbursement = None
        self._external_id = None
        self._external_loan_id = None
        self._id = None
        self._loan_id = None
        self._recovery_repayment = None
        self._repayment = None
        self._repayment_at_disbursement = None
        self._waive_charges = None
        self._waive_interest = None
        self._write_off = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if contra is not None:
            self.contra = contra
        if description is not None:
            self.description = description
        if disbursement is not None:
            self.disbursement = disbursement
        if external_id is not None:
            self.external_id = external_id
        if external_loan_id is not None:
            self.external_loan_id = external_loan_id
        if id is not None:
            self.id = id
        if loan_id is not None:
            self.loan_id = loan_id
        if recovery_repayment is not None:
            self.recovery_repayment = recovery_repayment
        if repayment is not None:
            self.repayment = repayment
        if repayment_at_disbursement is not None:
            self.repayment_at_disbursement = repayment_at_disbursement
        if waive_charges is not None:
            self.waive_charges = waive_charges
        if waive_interest is not None:
            self.waive_interest = waive_interest
        if write_off is not None:
            self.write_off = write_off

    @property
    def code(self):
        """Gets the code of this GetLoansType.  # noqa: E501


        :return: The code of this GetLoansType.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GetLoansType.


        :param code: The code of this GetLoansType.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def contra(self):
        """Gets the contra of this GetLoansType.  # noqa: E501


        :return: The contra of this GetLoansType.  # noqa: E501
        :rtype: bool
        """
        return self._contra

    @contra.setter
    def contra(self, contra):
        """Sets the contra of this GetLoansType.


        :param contra: The contra of this GetLoansType.  # noqa: E501
        :type: bool
        """

        self._contra = contra

    @property
    def description(self):
        """Gets the description of this GetLoansType.  # noqa: E501


        :return: The description of this GetLoansType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetLoansType.


        :param description: The description of this GetLoansType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disbursement(self):
        """Gets the disbursement of this GetLoansType.  # noqa: E501


        :return: The disbursement of this GetLoansType.  # noqa: E501
        :rtype: bool
        """
        return self._disbursement

    @disbursement.setter
    def disbursement(self, disbursement):
        """Sets the disbursement of this GetLoansType.


        :param disbursement: The disbursement of this GetLoansType.  # noqa: E501
        :type: bool
        """

        self._disbursement = disbursement

    @property
    def external_id(self):
        """Gets the external_id of this GetLoansType.  # noqa: E501


        :return: The external_id of this GetLoansType.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this GetLoansType.


        :param external_id: The external_id of this GetLoansType.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def external_loan_id(self):
        """Gets the external_loan_id of this GetLoansType.  # noqa: E501


        :return: The external_loan_id of this GetLoansType.  # noqa: E501
        :rtype: str
        """
        return self._external_loan_id

    @external_loan_id.setter
    def external_loan_id(self, external_loan_id):
        """Sets the external_loan_id of this GetLoansType.


        :param external_loan_id: The external_loan_id of this GetLoansType.  # noqa: E501
        :type: str
        """

        self._external_loan_id = external_loan_id

    @property
    def id(self):
        """Gets the id of this GetLoansType.  # noqa: E501


        :return: The id of this GetLoansType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetLoansType.


        :param id: The id of this GetLoansType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def loan_id(self):
        """Gets the loan_id of this GetLoansType.  # noqa: E501


        :return: The loan_id of this GetLoansType.  # noqa: E501
        :rtype: int
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """Sets the loan_id of this GetLoansType.


        :param loan_id: The loan_id of this GetLoansType.  # noqa: E501
        :type: int
        """

        self._loan_id = loan_id

    @property
    def recovery_repayment(self):
        """Gets the recovery_repayment of this GetLoansType.  # noqa: E501


        :return: The recovery_repayment of this GetLoansType.  # noqa: E501
        :rtype: bool
        """
        return self._recovery_repayment

    @recovery_repayment.setter
    def recovery_repayment(self, recovery_repayment):
        """Sets the recovery_repayment of this GetLoansType.


        :param recovery_repayment: The recovery_repayment of this GetLoansType.  # noqa: E501
        :type: bool
        """

        self._recovery_repayment = recovery_repayment

    @property
    def repayment(self):
        """Gets the repayment of this GetLoansType.  # noqa: E501


        :return: The repayment of this GetLoansType.  # noqa: E501
        :rtype: bool
        """
        return self._repayment

    @repayment.setter
    def repayment(self, repayment):
        """Sets the repayment of this GetLoansType.


        :param repayment: The repayment of this GetLoansType.  # noqa: E501
        :type: bool
        """

        self._repayment = repayment

    @property
    def repayment_at_disbursement(self):
        """Gets the repayment_at_disbursement of this GetLoansType.  # noqa: E501


        :return: The repayment_at_disbursement of this GetLoansType.  # noqa: E501
        :rtype: bool
        """
        return self._repayment_at_disbursement

    @repayment_at_disbursement.setter
    def repayment_at_disbursement(self, repayment_at_disbursement):
        """Sets the repayment_at_disbursement of this GetLoansType.


        :param repayment_at_disbursement: The repayment_at_disbursement of this GetLoansType.  # noqa: E501
        :type: bool
        """

        self._repayment_at_disbursement = repayment_at_disbursement

    @property
    def waive_charges(self):
        """Gets the waive_charges of this GetLoansType.  # noqa: E501


        :return: The waive_charges of this GetLoansType.  # noqa: E501
        :rtype: bool
        """
        return self._waive_charges

    @waive_charges.setter
    def waive_charges(self, waive_charges):
        """Sets the waive_charges of this GetLoansType.


        :param waive_charges: The waive_charges of this GetLoansType.  # noqa: E501
        :type: bool
        """

        self._waive_charges = waive_charges

    @property
    def waive_interest(self):
        """Gets the waive_interest of this GetLoansType.  # noqa: E501


        :return: The waive_interest of this GetLoansType.  # noqa: E501
        :rtype: bool
        """
        return self._waive_interest

    @waive_interest.setter
    def waive_interest(self, waive_interest):
        """Sets the waive_interest of this GetLoansType.


        :param waive_interest: The waive_interest of this GetLoansType.  # noqa: E501
        :type: bool
        """

        self._waive_interest = waive_interest

    @property
    def write_off(self):
        """Gets the write_off of this GetLoansType.  # noqa: E501


        :return: The write_off of this GetLoansType.  # noqa: E501
        :rtype: bool
        """
        return self._write_off

    @write_off.setter
    def write_off(self, write_off):
        """Sets the write_off of this GetLoansType.


        :param write_off: The write_off of this GetLoansType.  # noqa: E501
        :type: bool
        """

        self._write_off = write_off

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
