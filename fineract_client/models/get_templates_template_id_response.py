# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetTemplatesTemplateIdResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity': 'int',
        'id': 'int',
        'mappers': 'list[TemplateMapper]',
        'name': 'str',
        'text': 'str',
        'type': 'int'
    }

    attribute_map = {
        'entity': 'entity',
        'id': 'id',
        'mappers': 'mappers',
        'name': 'name',
        'text': 'text',
        'type': 'type'
    }

    def __init__(self, entity=None, id=None, mappers=None, name=None, text=None, type=None):  # noqa: E501
        """GetTemplatesTemplateIdResponse - a model defined in Swagger"""  # noqa: E501
        self._entity = None
        self._id = None
        self._mappers = None
        self._name = None
        self._text = None
        self._type = None
        self.discriminator = None
        if entity is not None:
            self.entity = entity
        if id is not None:
            self.id = id
        if mappers is not None:
            self.mappers = mappers
        if name is not None:
            self.name = name
        if text is not None:
            self.text = text
        if type is not None:
            self.type = type

    @property
    def entity(self):
        """Gets the entity of this GetTemplatesTemplateIdResponse.  # noqa: E501


        :return: The entity of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this GetTemplatesTemplateIdResponse.


        :param entity: The entity of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :type: int
        """

        self._entity = entity

    @property
    def id(self):
        """Gets the id of this GetTemplatesTemplateIdResponse.  # noqa: E501


        :return: The id of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetTemplatesTemplateIdResponse.


        :param id: The id of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mappers(self):
        """Gets the mappers of this GetTemplatesTemplateIdResponse.  # noqa: E501


        :return: The mappers of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :rtype: list[TemplateMapper]
        """
        return self._mappers

    @mappers.setter
    def mappers(self, mappers):
        """Sets the mappers of this GetTemplatesTemplateIdResponse.


        :param mappers: The mappers of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :type: list[TemplateMapper]
        """

        self._mappers = mappers

    @property
    def name(self):
        """Gets the name of this GetTemplatesTemplateIdResponse.  # noqa: E501


        :return: The name of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetTemplatesTemplateIdResponse.


        :param name: The name of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def text(self):
        """Gets the text of this GetTemplatesTemplateIdResponse.  # noqa: E501


        :return: The text of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this GetTemplatesTemplateIdResponse.


        :param text: The text of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this GetTemplatesTemplateIdResponse.  # noqa: E501


        :return: The type of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetTemplatesTemplateIdResponse.


        :param type: The type of this GetTemplatesTemplateIdResponse.  # noqa: E501
        :type: int
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetTemplatesTemplateIdResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTemplatesTemplateIdResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
