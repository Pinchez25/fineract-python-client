# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostRecurringDepositProductsChartSlabs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annual_interest_rate': 'float',
        'description': 'str',
        'from_period': 'int',
        'period_type': 'int',
        'to_period': 'int'
    }

    attribute_map = {
        'annual_interest_rate': 'annualInterestRate',
        'description': 'description',
        'from_period': 'fromPeriod',
        'period_type': 'periodType',
        'to_period': 'toPeriod'
    }

    def __init__(self, annual_interest_rate=None, description=None, from_period=None, period_type=None, to_period=None):  # noqa: E501
        """PostRecurringDepositProductsChartSlabs - a model defined in Swagger"""  # noqa: E501
        self._annual_interest_rate = None
        self._description = None
        self._from_period = None
        self._period_type = None
        self._to_period = None
        self.discriminator = None
        if annual_interest_rate is not None:
            self.annual_interest_rate = annual_interest_rate
        if description is not None:
            self.description = description
        if from_period is not None:
            self.from_period = from_period
        if period_type is not None:
            self.period_type = period_type
        if to_period is not None:
            self.to_period = to_period

    @property
    def annual_interest_rate(self):
        """Gets the annual_interest_rate of this PostRecurringDepositProductsChartSlabs.  # noqa: E501


        :return: The annual_interest_rate of this PostRecurringDepositProductsChartSlabs.  # noqa: E501
        :rtype: float
        """
        return self._annual_interest_rate

    @annual_interest_rate.setter
    def annual_interest_rate(self, annual_interest_rate):
        """Sets the annual_interest_rate of this PostRecurringDepositProductsChartSlabs.


        :param annual_interest_rate: The annual_interest_rate of this PostRecurringDepositProductsChartSlabs.  # noqa: E501
        :type: float
        """

        self._annual_interest_rate = annual_interest_rate

    @property
    def description(self):
        """Gets the description of this PostRecurringDepositProductsChartSlabs.  # noqa: E501


        :return: The description of this PostRecurringDepositProductsChartSlabs.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostRecurringDepositProductsChartSlabs.


        :param description: The description of this PostRecurringDepositProductsChartSlabs.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def from_period(self):
        """Gets the from_period of this PostRecurringDepositProductsChartSlabs.  # noqa: E501


        :return: The from_period of this PostRecurringDepositProductsChartSlabs.  # noqa: E501
        :rtype: int
        """
        return self._from_period

    @from_period.setter
    def from_period(self, from_period):
        """Sets the from_period of this PostRecurringDepositProductsChartSlabs.


        :param from_period: The from_period of this PostRecurringDepositProductsChartSlabs.  # noqa: E501
        :type: int
        """

        self._from_period = from_period

    @property
    def period_type(self):
        """Gets the period_type of this PostRecurringDepositProductsChartSlabs.  # noqa: E501


        :return: The period_type of this PostRecurringDepositProductsChartSlabs.  # noqa: E501
        :rtype: int
        """
        return self._period_type

    @period_type.setter
    def period_type(self, period_type):
        """Sets the period_type of this PostRecurringDepositProductsChartSlabs.


        :param period_type: The period_type of this PostRecurringDepositProductsChartSlabs.  # noqa: E501
        :type: int
        """

        self._period_type = period_type

    @property
    def to_period(self):
        """Gets the to_period of this PostRecurringDepositProductsChartSlabs.  # noqa: E501


        :return: The to_period of this PostRecurringDepositProductsChartSlabs.  # noqa: E501
        :rtype: int
        """
        return self._to_period

    @to_period.setter
    def to_period(self, to_period):
        """Sets the to_period of this PostRecurringDepositProductsChartSlabs.


        :param to_period: The to_period of this PostRecurringDepositProductsChartSlabs.  # noqa: E501
        :type: int
        """

        self._to_period = to_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostRecurringDepositProductsChartSlabs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostRecurringDepositProductsChartSlabs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
