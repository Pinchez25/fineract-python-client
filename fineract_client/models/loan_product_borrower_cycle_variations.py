# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanProductBorrowerCycleVariations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'borrower_cycle_number': 'int',
        'default_value': 'float',
        'id': 'int',
        'max_value': 'float',
        'min_value': 'float',
        'new': 'bool',
        'param_type': 'str',
        'value_condition_type': 'str'
    }

    attribute_map = {
        'borrower_cycle_number': 'borrowerCycleNumber',
        'default_value': 'defaultValue',
        'id': 'id',
        'max_value': 'maxValue',
        'min_value': 'minValue',
        'new': 'new',
        'param_type': 'paramType',
        'value_condition_type': 'valueConditionType'
    }

    def __init__(self, borrower_cycle_number=None, default_value=None, id=None, max_value=None, min_value=None, new=None, param_type=None, value_condition_type=None):  # noqa: E501
        """LoanProductBorrowerCycleVariations - a model defined in Swagger"""  # noqa: E501
        self._borrower_cycle_number = None
        self._default_value = None
        self._id = None
        self._max_value = None
        self._min_value = None
        self._new = None
        self._param_type = None
        self._value_condition_type = None
        self.discriminator = None
        if borrower_cycle_number is not None:
            self.borrower_cycle_number = borrower_cycle_number
        if default_value is not None:
            self.default_value = default_value
        if id is not None:
            self.id = id
        if max_value is not None:
            self.max_value = max_value
        if min_value is not None:
            self.min_value = min_value
        if new is not None:
            self.new = new
        if param_type is not None:
            self.param_type = param_type
        if value_condition_type is not None:
            self.value_condition_type = value_condition_type

    @property
    def borrower_cycle_number(self):
        """Gets the borrower_cycle_number of this LoanProductBorrowerCycleVariations.  # noqa: E501


        :return: The borrower_cycle_number of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :rtype: int
        """
        return self._borrower_cycle_number

    @borrower_cycle_number.setter
    def borrower_cycle_number(self, borrower_cycle_number):
        """Sets the borrower_cycle_number of this LoanProductBorrowerCycleVariations.


        :param borrower_cycle_number: The borrower_cycle_number of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :type: int
        """

        self._borrower_cycle_number = borrower_cycle_number

    @property
    def default_value(self):
        """Gets the default_value of this LoanProductBorrowerCycleVariations.  # noqa: E501


        :return: The default_value of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :rtype: float
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this LoanProductBorrowerCycleVariations.


        :param default_value: The default_value of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :type: float
        """

        self._default_value = default_value

    @property
    def id(self):
        """Gets the id of this LoanProductBorrowerCycleVariations.  # noqa: E501


        :return: The id of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoanProductBorrowerCycleVariations.


        :param id: The id of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def max_value(self):
        """Gets the max_value of this LoanProductBorrowerCycleVariations.  # noqa: E501


        :return: The max_value of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this LoanProductBorrowerCycleVariations.


        :param max_value: The max_value of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this LoanProductBorrowerCycleVariations.  # noqa: E501


        :return: The min_value of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this LoanProductBorrowerCycleVariations.


        :param min_value: The min_value of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def new(self):
        """Gets the new of this LoanProductBorrowerCycleVariations.  # noqa: E501


        :return: The new of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this LoanProductBorrowerCycleVariations.


        :param new: The new of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def param_type(self):
        """Gets the param_type of this LoanProductBorrowerCycleVariations.  # noqa: E501


        :return: The param_type of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :rtype: str
        """
        return self._param_type

    @param_type.setter
    def param_type(self, param_type):
        """Sets the param_type of this LoanProductBorrowerCycleVariations.


        :param param_type: The param_type of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "PRINCIPAL", "INTERESTRATE", "REPAYMENT"]  # noqa: E501
        if param_type not in allowed_values:
            raise ValueError(
                "Invalid value for `param_type` ({0}), must be one of {1}"  # noqa: E501
                .format(param_type, allowed_values)
            )

        self._param_type = param_type

    @property
    def value_condition_type(self):
        """Gets the value_condition_type of this LoanProductBorrowerCycleVariations.  # noqa: E501


        :return: The value_condition_type of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :rtype: str
        """
        return self._value_condition_type

    @value_condition_type.setter
    def value_condition_type(self, value_condition_type):
        """Sets the value_condition_type of this LoanProductBorrowerCycleVariations.


        :param value_condition_type: The value_condition_type of this LoanProductBorrowerCycleVariations.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "EQUAL", "GREATERTHAN"]  # noqa: E501
        if value_condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_condition_type` ({0}), must be one of {1}"  # noqa: E501
                .format(value_condition_type, allowed_values)
            )

        self._value_condition_type = value_condition_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanProductBorrowerCycleVariations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanProductBorrowerCycleVariations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
