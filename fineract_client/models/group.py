# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number_requires_auto_generation': 'bool',
        'activation_date': 'date',
        'active': 'bool',
        'active_client_members': 'list[Client]',
        'center': 'bool',
        'child_group': 'bool',
        'client_members': 'list[Client]',
        'closed': 'bool',
        'group': 'bool',
        'group_level': 'GroupLevel',
        'group_members': 'list[Group]',
        'id': 'int',
        'new': 'bool',
        'not_active': 'bool',
        'not_pending': 'bool',
        'office': 'Office',
        'parent': 'Group',
        'pending': 'bool',
        'staff': 'Staff',
        'submitted_on_date': 'date',
        'transfer_in_progress': 'bool',
        'transfer_in_progress_or_on_hold': 'bool',
        'transfer_on_hold': 'bool'
    }

    attribute_map = {
        'account_number_requires_auto_generation': 'accountNumberRequiresAutoGeneration',
        'activation_date': 'activationDate',
        'active': 'active',
        'active_client_members': 'activeClientMembers',
        'center': 'center',
        'child_group': 'childGroup',
        'client_members': 'clientMembers',
        'closed': 'closed',
        'group': 'group',
        'group_level': 'groupLevel',
        'group_members': 'groupMembers',
        'id': 'id',
        'new': 'new',
        'not_active': 'notActive',
        'not_pending': 'notPending',
        'office': 'office',
        'parent': 'parent',
        'pending': 'pending',
        'staff': 'staff',
        'submitted_on_date': 'submittedOnDate',
        'transfer_in_progress': 'transferInProgress',
        'transfer_in_progress_or_on_hold': 'transferInProgressOrOnHold',
        'transfer_on_hold': 'transferOnHold'
    }

    def __init__(self, account_number_requires_auto_generation=None, activation_date=None, active=None, active_client_members=None, center=None, child_group=None, client_members=None, closed=None, group=None, group_level=None, group_members=None, id=None, new=None, not_active=None, not_pending=None, office=None, parent=None, pending=None, staff=None, submitted_on_date=None, transfer_in_progress=None, transfer_in_progress_or_on_hold=None, transfer_on_hold=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501
        self._account_number_requires_auto_generation = None
        self._activation_date = None
        self._active = None
        self._active_client_members = None
        self._center = None
        self._child_group = None
        self._client_members = None
        self._closed = None
        self._group = None
        self._group_level = None
        self._group_members = None
        self._id = None
        self._new = None
        self._not_active = None
        self._not_pending = None
        self._office = None
        self._parent = None
        self._pending = None
        self._staff = None
        self._submitted_on_date = None
        self._transfer_in_progress = None
        self._transfer_in_progress_or_on_hold = None
        self._transfer_on_hold = None
        self.discriminator = None
        if account_number_requires_auto_generation is not None:
            self.account_number_requires_auto_generation = account_number_requires_auto_generation
        if activation_date is not None:
            self.activation_date = activation_date
        if active is not None:
            self.active = active
        if active_client_members is not None:
            self.active_client_members = active_client_members
        if center is not None:
            self.center = center
        if child_group is not None:
            self.child_group = child_group
        if client_members is not None:
            self.client_members = client_members
        if closed is not None:
            self.closed = closed
        if group is not None:
            self.group = group
        if group_level is not None:
            self.group_level = group_level
        if group_members is not None:
            self.group_members = group_members
        if id is not None:
            self.id = id
        if new is not None:
            self.new = new
        if not_active is not None:
            self.not_active = not_active
        if not_pending is not None:
            self.not_pending = not_pending
        if office is not None:
            self.office = office
        if parent is not None:
            self.parent = parent
        if pending is not None:
            self.pending = pending
        if staff is not None:
            self.staff = staff
        if submitted_on_date is not None:
            self.submitted_on_date = submitted_on_date
        if transfer_in_progress is not None:
            self.transfer_in_progress = transfer_in_progress
        if transfer_in_progress_or_on_hold is not None:
            self.transfer_in_progress_or_on_hold = transfer_in_progress_or_on_hold
        if transfer_on_hold is not None:
            self.transfer_on_hold = transfer_on_hold

    @property
    def account_number_requires_auto_generation(self):
        """Gets the account_number_requires_auto_generation of this Group.  # noqa: E501


        :return: The account_number_requires_auto_generation of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._account_number_requires_auto_generation

    @account_number_requires_auto_generation.setter
    def account_number_requires_auto_generation(self, account_number_requires_auto_generation):
        """Sets the account_number_requires_auto_generation of this Group.


        :param account_number_requires_auto_generation: The account_number_requires_auto_generation of this Group.  # noqa: E501
        :type: bool
        """

        self._account_number_requires_auto_generation = account_number_requires_auto_generation

    @property
    def activation_date(self):
        """Gets the activation_date of this Group.  # noqa: E501


        :return: The activation_date of this Group.  # noqa: E501
        :rtype: date
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this Group.


        :param activation_date: The activation_date of this Group.  # noqa: E501
        :type: date
        """

        self._activation_date = activation_date

    @property
    def active(self):
        """Gets the active of this Group.  # noqa: E501


        :return: The active of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Group.


        :param active: The active of this Group.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def active_client_members(self):
        """Gets the active_client_members of this Group.  # noqa: E501


        :return: The active_client_members of this Group.  # noqa: E501
        :rtype: list[Client]
        """
        return self._active_client_members

    @active_client_members.setter
    def active_client_members(self, active_client_members):
        """Sets the active_client_members of this Group.


        :param active_client_members: The active_client_members of this Group.  # noqa: E501
        :type: list[Client]
        """

        self._active_client_members = active_client_members

    @property
    def center(self):
        """Gets the center of this Group.  # noqa: E501


        :return: The center of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this Group.


        :param center: The center of this Group.  # noqa: E501
        :type: bool
        """

        self._center = center

    @property
    def child_group(self):
        """Gets the child_group of this Group.  # noqa: E501


        :return: The child_group of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._child_group

    @child_group.setter
    def child_group(self, child_group):
        """Sets the child_group of this Group.


        :param child_group: The child_group of this Group.  # noqa: E501
        :type: bool
        """

        self._child_group = child_group

    @property
    def client_members(self):
        """Gets the client_members of this Group.  # noqa: E501


        :return: The client_members of this Group.  # noqa: E501
        :rtype: list[Client]
        """
        return self._client_members

    @client_members.setter
    def client_members(self, client_members):
        """Sets the client_members of this Group.


        :param client_members: The client_members of this Group.  # noqa: E501
        :type: list[Client]
        """

        self._client_members = client_members

    @property
    def closed(self):
        """Gets the closed of this Group.  # noqa: E501


        :return: The closed of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Group.


        :param closed: The closed of this Group.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def group(self):
        """Gets the group of this Group.  # noqa: E501


        :return: The group of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Group.


        :param group: The group of this Group.  # noqa: E501
        :type: bool
        """

        self._group = group

    @property
    def group_level(self):
        """Gets the group_level of this Group.  # noqa: E501


        :return: The group_level of this Group.  # noqa: E501
        :rtype: GroupLevel
        """
        return self._group_level

    @group_level.setter
    def group_level(self, group_level):
        """Sets the group_level of this Group.


        :param group_level: The group_level of this Group.  # noqa: E501
        :type: GroupLevel
        """

        self._group_level = group_level

    @property
    def group_members(self):
        """Gets the group_members of this Group.  # noqa: E501


        :return: The group_members of this Group.  # noqa: E501
        :rtype: list[Group]
        """
        return self._group_members

    @group_members.setter
    def group_members(self, group_members):
        """Sets the group_members of this Group.


        :param group_members: The group_members of this Group.  # noqa: E501
        :type: list[Group]
        """

        self._group_members = group_members

    @property
    def id(self):
        """Gets the id of this Group.  # noqa: E501


        :return: The id of this Group.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.


        :param id: The id of this Group.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def new(self):
        """Gets the new of this Group.  # noqa: E501


        :return: The new of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this Group.


        :param new: The new of this Group.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def not_active(self):
        """Gets the not_active of this Group.  # noqa: E501


        :return: The not_active of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._not_active

    @not_active.setter
    def not_active(self, not_active):
        """Sets the not_active of this Group.


        :param not_active: The not_active of this Group.  # noqa: E501
        :type: bool
        """

        self._not_active = not_active

    @property
    def not_pending(self):
        """Gets the not_pending of this Group.  # noqa: E501


        :return: The not_pending of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._not_pending

    @not_pending.setter
    def not_pending(self, not_pending):
        """Sets the not_pending of this Group.


        :param not_pending: The not_pending of this Group.  # noqa: E501
        :type: bool
        """

        self._not_pending = not_pending

    @property
    def office(self):
        """Gets the office of this Group.  # noqa: E501


        :return: The office of this Group.  # noqa: E501
        :rtype: Office
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this Group.


        :param office: The office of this Group.  # noqa: E501
        :type: Office
        """

        self._office = office

    @property
    def parent(self):
        """Gets the parent of this Group.  # noqa: E501


        :return: The parent of this Group.  # noqa: E501
        :rtype: Group
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Group.


        :param parent: The parent of this Group.  # noqa: E501
        :type: Group
        """

        self._parent = parent

    @property
    def pending(self):
        """Gets the pending of this Group.  # noqa: E501


        :return: The pending of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this Group.


        :param pending: The pending of this Group.  # noqa: E501
        :type: bool
        """

        self._pending = pending

    @property
    def staff(self):
        """Gets the staff of this Group.  # noqa: E501


        :return: The staff of this Group.  # noqa: E501
        :rtype: Staff
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this Group.


        :param staff: The staff of this Group.  # noqa: E501
        :type: Staff
        """

        self._staff = staff

    @property
    def submitted_on_date(self):
        """Gets the submitted_on_date of this Group.  # noqa: E501


        :return: The submitted_on_date of this Group.  # noqa: E501
        :rtype: date
        """
        return self._submitted_on_date

    @submitted_on_date.setter
    def submitted_on_date(self, submitted_on_date):
        """Sets the submitted_on_date of this Group.


        :param submitted_on_date: The submitted_on_date of this Group.  # noqa: E501
        :type: date
        """

        self._submitted_on_date = submitted_on_date

    @property
    def transfer_in_progress(self):
        """Gets the transfer_in_progress of this Group.  # noqa: E501


        :return: The transfer_in_progress of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._transfer_in_progress

    @transfer_in_progress.setter
    def transfer_in_progress(self, transfer_in_progress):
        """Sets the transfer_in_progress of this Group.


        :param transfer_in_progress: The transfer_in_progress of this Group.  # noqa: E501
        :type: bool
        """

        self._transfer_in_progress = transfer_in_progress

    @property
    def transfer_in_progress_or_on_hold(self):
        """Gets the transfer_in_progress_or_on_hold of this Group.  # noqa: E501


        :return: The transfer_in_progress_or_on_hold of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._transfer_in_progress_or_on_hold

    @transfer_in_progress_or_on_hold.setter
    def transfer_in_progress_or_on_hold(self, transfer_in_progress_or_on_hold):
        """Sets the transfer_in_progress_or_on_hold of this Group.


        :param transfer_in_progress_or_on_hold: The transfer_in_progress_or_on_hold of this Group.  # noqa: E501
        :type: bool
        """

        self._transfer_in_progress_or_on_hold = transfer_in_progress_or_on_hold

    @property
    def transfer_on_hold(self):
        """Gets the transfer_on_hold of this Group.  # noqa: E501


        :return: The transfer_on_hold of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._transfer_on_hold

    @transfer_on_hold.setter
    def transfer_on_hold(self, transfer_on_hold):
        """Sets the transfer_on_hold of this Group.


        :param transfer_on_hold: The transfer_on_hold of this Group.  # noqa: E501
        :type: bool
        """

        self._transfer_on_hold = transfer_on_hold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
