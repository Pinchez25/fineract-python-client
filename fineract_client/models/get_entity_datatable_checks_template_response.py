# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetEntityDatatableChecksTemplateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datatables': 'list[DatatableChecksData]',
        'entities': 'list[str]',
        'loan_product_datas': 'list[LoanProductData]',
        'savings_product_datas': 'list[SavingsProductData]',
        'status_client': 'list[DatatableCheckStatusData]',
        'status_group': 'list[DatatableCheckStatusData]',
        'status_loans': 'list[DatatableCheckStatusData]',
        'status_savings': 'list[DatatableCheckStatusData]'
    }

    attribute_map = {
        'datatables': 'datatables',
        'entities': 'entities',
        'loan_product_datas': 'loanProductDatas',
        'savings_product_datas': 'savingsProductDatas',
        'status_client': 'statusClient',
        'status_group': 'statusGroup',
        'status_loans': 'statusLoans',
        'status_savings': 'statusSavings'
    }

    def __init__(self, datatables=None, entities=None, loan_product_datas=None, savings_product_datas=None, status_client=None, status_group=None, status_loans=None, status_savings=None):  # noqa: E501
        """GetEntityDatatableChecksTemplateResponse - a model defined in Swagger"""  # noqa: E501
        self._datatables = None
        self._entities = None
        self._loan_product_datas = None
        self._savings_product_datas = None
        self._status_client = None
        self._status_group = None
        self._status_loans = None
        self._status_savings = None
        self.discriminator = None
        if datatables is not None:
            self.datatables = datatables
        if entities is not None:
            self.entities = entities
        if loan_product_datas is not None:
            self.loan_product_datas = loan_product_datas
        if savings_product_datas is not None:
            self.savings_product_datas = savings_product_datas
        if status_client is not None:
            self.status_client = status_client
        if status_group is not None:
            self.status_group = status_group
        if status_loans is not None:
            self.status_loans = status_loans
        if status_savings is not None:
            self.status_savings = status_savings

    @property
    def datatables(self):
        """Gets the datatables of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501


        :return: The datatables of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :rtype: list[DatatableChecksData]
        """
        return self._datatables

    @datatables.setter
    def datatables(self, datatables):
        """Sets the datatables of this GetEntityDatatableChecksTemplateResponse.


        :param datatables: The datatables of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :type: list[DatatableChecksData]
        """

        self._datatables = datatables

    @property
    def entities(self):
        """Gets the entities of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501


        :return: The entities of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this GetEntityDatatableChecksTemplateResponse.


        :param entities: The entities of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :type: list[str]
        """

        self._entities = entities

    @property
    def loan_product_datas(self):
        """Gets the loan_product_datas of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501


        :return: The loan_product_datas of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :rtype: list[LoanProductData]
        """
        return self._loan_product_datas

    @loan_product_datas.setter
    def loan_product_datas(self, loan_product_datas):
        """Sets the loan_product_datas of this GetEntityDatatableChecksTemplateResponse.


        :param loan_product_datas: The loan_product_datas of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :type: list[LoanProductData]
        """

        self._loan_product_datas = loan_product_datas

    @property
    def savings_product_datas(self):
        """Gets the savings_product_datas of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501


        :return: The savings_product_datas of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :rtype: list[SavingsProductData]
        """
        return self._savings_product_datas

    @savings_product_datas.setter
    def savings_product_datas(self, savings_product_datas):
        """Sets the savings_product_datas of this GetEntityDatatableChecksTemplateResponse.


        :param savings_product_datas: The savings_product_datas of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :type: list[SavingsProductData]
        """

        self._savings_product_datas = savings_product_datas

    @property
    def status_client(self):
        """Gets the status_client of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501


        :return: The status_client of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :rtype: list[DatatableCheckStatusData]
        """
        return self._status_client

    @status_client.setter
    def status_client(self, status_client):
        """Sets the status_client of this GetEntityDatatableChecksTemplateResponse.


        :param status_client: The status_client of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :type: list[DatatableCheckStatusData]
        """

        self._status_client = status_client

    @property
    def status_group(self):
        """Gets the status_group of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501


        :return: The status_group of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :rtype: list[DatatableCheckStatusData]
        """
        return self._status_group

    @status_group.setter
    def status_group(self, status_group):
        """Sets the status_group of this GetEntityDatatableChecksTemplateResponse.


        :param status_group: The status_group of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :type: list[DatatableCheckStatusData]
        """

        self._status_group = status_group

    @property
    def status_loans(self):
        """Gets the status_loans of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501


        :return: The status_loans of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :rtype: list[DatatableCheckStatusData]
        """
        return self._status_loans

    @status_loans.setter
    def status_loans(self, status_loans):
        """Sets the status_loans of this GetEntityDatatableChecksTemplateResponse.


        :param status_loans: The status_loans of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :type: list[DatatableCheckStatusData]
        """

        self._status_loans = status_loans

    @property
    def status_savings(self):
        """Gets the status_savings of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501


        :return: The status_savings of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :rtype: list[DatatableCheckStatusData]
        """
        return self._status_savings

    @status_savings.setter
    def status_savings(self, status_savings):
        """Sets the status_savings of this GetEntityDatatableChecksTemplateResponse.


        :param status_savings: The status_savings of this GetEntityDatatableChecksTemplateResponse.  # noqa: E501
        :type: list[DatatableCheckStatusData]
        """

        self._status_savings = status_savings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetEntityDatatableChecksTemplateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetEntityDatatableChecksTemplateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
