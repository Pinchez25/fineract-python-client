# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetAccountsPurchasedShares(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'amount': 'float',
        'amount_paid': 'float',
        'charge_amount': 'float',
        'id': 'int',
        'number_of_shares': 'int',
        'purchased_date': 'date',
        'purchased_price': 'float',
        'status': 'GetAccountsPurchasedSharesStatus',
        'type': 'GetAccountsPurchasedSharesType'
    }

    attribute_map = {
        'account_id': 'accountId',
        'amount': 'amount',
        'amount_paid': 'amountPaid',
        'charge_amount': 'chargeAmount',
        'id': 'id',
        'number_of_shares': 'numberOfShares',
        'purchased_date': 'purchasedDate',
        'purchased_price': 'purchasedPrice',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, account_id=None, amount=None, amount_paid=None, charge_amount=None, id=None, number_of_shares=None, purchased_date=None, purchased_price=None, status=None, type=None):  # noqa: E501
        """GetAccountsPurchasedShares - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._amount = None
        self._amount_paid = None
        self._charge_amount = None
        self._id = None
        self._number_of_shares = None
        self._purchased_date = None
        self._purchased_price = None
        self._status = None
        self._type = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if amount is not None:
            self.amount = amount
        if amount_paid is not None:
            self.amount_paid = amount_paid
        if charge_amount is not None:
            self.charge_amount = charge_amount
        if id is not None:
            self.id = id
        if number_of_shares is not None:
            self.number_of_shares = number_of_shares
        if purchased_date is not None:
            self.purchased_date = purchased_date
        if purchased_price is not None:
            self.purchased_price = purchased_price
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def account_id(self):
        """Gets the account_id of this GetAccountsPurchasedShares.  # noqa: E501


        :return: The account_id of this GetAccountsPurchasedShares.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetAccountsPurchasedShares.


        :param account_id: The account_id of this GetAccountsPurchasedShares.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this GetAccountsPurchasedShares.  # noqa: E501


        :return: The amount of this GetAccountsPurchasedShares.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetAccountsPurchasedShares.


        :param amount: The amount of this GetAccountsPurchasedShares.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_paid(self):
        """Gets the amount_paid of this GetAccountsPurchasedShares.  # noqa: E501


        :return: The amount_paid of this GetAccountsPurchasedShares.  # noqa: E501
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this GetAccountsPurchasedShares.


        :param amount_paid: The amount_paid of this GetAccountsPurchasedShares.  # noqa: E501
        :type: float
        """

        self._amount_paid = amount_paid

    @property
    def charge_amount(self):
        """Gets the charge_amount of this GetAccountsPurchasedShares.  # noqa: E501


        :return: The charge_amount of this GetAccountsPurchasedShares.  # noqa: E501
        :rtype: float
        """
        return self._charge_amount

    @charge_amount.setter
    def charge_amount(self, charge_amount):
        """Sets the charge_amount of this GetAccountsPurchasedShares.


        :param charge_amount: The charge_amount of this GetAccountsPurchasedShares.  # noqa: E501
        :type: float
        """

        self._charge_amount = charge_amount

    @property
    def id(self):
        """Gets the id of this GetAccountsPurchasedShares.  # noqa: E501


        :return: The id of this GetAccountsPurchasedShares.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetAccountsPurchasedShares.


        :param id: The id of this GetAccountsPurchasedShares.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def number_of_shares(self):
        """Gets the number_of_shares of this GetAccountsPurchasedShares.  # noqa: E501


        :return: The number_of_shares of this GetAccountsPurchasedShares.  # noqa: E501
        :rtype: int
        """
        return self._number_of_shares

    @number_of_shares.setter
    def number_of_shares(self, number_of_shares):
        """Sets the number_of_shares of this GetAccountsPurchasedShares.


        :param number_of_shares: The number_of_shares of this GetAccountsPurchasedShares.  # noqa: E501
        :type: int
        """

        self._number_of_shares = number_of_shares

    @property
    def purchased_date(self):
        """Gets the purchased_date of this GetAccountsPurchasedShares.  # noqa: E501


        :return: The purchased_date of this GetAccountsPurchasedShares.  # noqa: E501
        :rtype: date
        """
        return self._purchased_date

    @purchased_date.setter
    def purchased_date(self, purchased_date):
        """Sets the purchased_date of this GetAccountsPurchasedShares.


        :param purchased_date: The purchased_date of this GetAccountsPurchasedShares.  # noqa: E501
        :type: date
        """

        self._purchased_date = purchased_date

    @property
    def purchased_price(self):
        """Gets the purchased_price of this GetAccountsPurchasedShares.  # noqa: E501


        :return: The purchased_price of this GetAccountsPurchasedShares.  # noqa: E501
        :rtype: float
        """
        return self._purchased_price

    @purchased_price.setter
    def purchased_price(self, purchased_price):
        """Sets the purchased_price of this GetAccountsPurchasedShares.


        :param purchased_price: The purchased_price of this GetAccountsPurchasedShares.  # noqa: E501
        :type: float
        """

        self._purchased_price = purchased_price

    @property
    def status(self):
        """Gets the status of this GetAccountsPurchasedShares.  # noqa: E501


        :return: The status of this GetAccountsPurchasedShares.  # noqa: E501
        :rtype: GetAccountsPurchasedSharesStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetAccountsPurchasedShares.


        :param status: The status of this GetAccountsPurchasedShares.  # noqa: E501
        :type: GetAccountsPurchasedSharesStatus
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this GetAccountsPurchasedShares.  # noqa: E501


        :return: The type of this GetAccountsPurchasedShares.  # noqa: E501
        :rtype: GetAccountsPurchasedSharesType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetAccountsPurchasedShares.


        :param type: The type of this GetAccountsPurchasedShares.  # noqa: E501
        :type: GetAccountsPurchasedSharesType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAccountsPurchasedShares, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAccountsPurchasedShares):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
