# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostInterestRateChartsChartIdChartSlabsIncentives(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'attribute_name': 'int',
        'attribute_value': 'str',
        'condition_type': 'int',
        'entity_type': 'int',
        'incentive_type': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'attribute_name': 'attributeName',
        'attribute_value': 'attributeValue',
        'condition_type': 'conditionType',
        'entity_type': 'entityType',
        'incentive_type': 'incentiveType'
    }

    def __init__(self, amount=None, attribute_name=None, attribute_value=None, condition_type=None, entity_type=None, incentive_type=None):  # noqa: E501
        """PostInterestRateChartsChartIdChartSlabsIncentives - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._attribute_name = None
        self._attribute_value = None
        self._condition_type = None
        self._entity_type = None
        self._incentive_type = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if attribute_name is not None:
            self.attribute_name = attribute_name
        if attribute_value is not None:
            self.attribute_value = attribute_value
        if condition_type is not None:
            self.condition_type = condition_type
        if entity_type is not None:
            self.entity_type = entity_type
        if incentive_type is not None:
            self.incentive_type = incentive_type

    @property
    def amount(self):
        """Gets the amount of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501


        :return: The amount of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PostInterestRateChartsChartIdChartSlabsIncentives.


        :param amount: The amount of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def attribute_name(self):
        """Gets the attribute_name of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501


        :return: The attribute_name of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :rtype: int
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this PostInterestRateChartsChartIdChartSlabsIncentives.


        :param attribute_name: The attribute_name of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :type: int
        """

        self._attribute_name = attribute_name

    @property
    def attribute_value(self):
        """Gets the attribute_value of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501


        :return: The attribute_value of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :rtype: str
        """
        return self._attribute_value

    @attribute_value.setter
    def attribute_value(self, attribute_value):
        """Sets the attribute_value of this PostInterestRateChartsChartIdChartSlabsIncentives.


        :param attribute_value: The attribute_value of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :type: str
        """

        self._attribute_value = attribute_value

    @property
    def condition_type(self):
        """Gets the condition_type of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501


        :return: The condition_type of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :rtype: int
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this PostInterestRateChartsChartIdChartSlabsIncentives.


        :param condition_type: The condition_type of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :type: int
        """

        self._condition_type = condition_type

    @property
    def entity_type(self):
        """Gets the entity_type of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501


        :return: The entity_type of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :rtype: int
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this PostInterestRateChartsChartIdChartSlabsIncentives.


        :param entity_type: The entity_type of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :type: int
        """

        self._entity_type = entity_type

    @property
    def incentive_type(self):
        """Gets the incentive_type of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501


        :return: The incentive_type of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :rtype: int
        """
        return self._incentive_type

    @incentive_type.setter
    def incentive_type(self, incentive_type):
        """Sets the incentive_type of this PostInterestRateChartsChartIdChartSlabsIncentives.


        :param incentive_type: The incentive_type of this PostInterestRateChartsChartIdChartSlabsIncentives.  # noqa: E501
        :type: int
        """

        self._incentive_type = incentive_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostInterestRateChartsChartIdChartSlabsIncentives, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostInterestRateChartsChartIdChartSlabsIncentives):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
