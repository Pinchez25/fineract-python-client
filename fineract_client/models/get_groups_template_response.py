# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetGroupsTemplateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_options': 'list[GetGroupsTemplateClientOptions]',
        'datatables': 'list[GetGroupsTemplateDatatables]',
        'office_id': 'int',
        'office_options': 'list[GetGroupsTemplateOfficeOptions]',
        'staff_options': 'list[GetGroupsTemplateStaffOptions]'
    }

    attribute_map = {
        'client_options': 'clientOptions',
        'datatables': 'datatables',
        'office_id': 'officeId',
        'office_options': 'officeOptions',
        'staff_options': 'staffOptions'
    }

    def __init__(self, client_options=None, datatables=None, office_id=None, office_options=None, staff_options=None):  # noqa: E501
        """GetGroupsTemplateResponse - a model defined in Swagger"""  # noqa: E501
        self._client_options = None
        self._datatables = None
        self._office_id = None
        self._office_options = None
        self._staff_options = None
        self.discriminator = None
        if client_options is not None:
            self.client_options = client_options
        if datatables is not None:
            self.datatables = datatables
        if office_id is not None:
            self.office_id = office_id
        if office_options is not None:
            self.office_options = office_options
        if staff_options is not None:
            self.staff_options = staff_options

    @property
    def client_options(self):
        """Gets the client_options of this GetGroupsTemplateResponse.  # noqa: E501


        :return: The client_options of this GetGroupsTemplateResponse.  # noqa: E501
        :rtype: list[GetGroupsTemplateClientOptions]
        """
        return self._client_options

    @client_options.setter
    def client_options(self, client_options):
        """Sets the client_options of this GetGroupsTemplateResponse.


        :param client_options: The client_options of this GetGroupsTemplateResponse.  # noqa: E501
        :type: list[GetGroupsTemplateClientOptions]
        """

        self._client_options = client_options

    @property
    def datatables(self):
        """Gets the datatables of this GetGroupsTemplateResponse.  # noqa: E501


        :return: The datatables of this GetGroupsTemplateResponse.  # noqa: E501
        :rtype: list[GetGroupsTemplateDatatables]
        """
        return self._datatables

    @datatables.setter
    def datatables(self, datatables):
        """Sets the datatables of this GetGroupsTemplateResponse.


        :param datatables: The datatables of this GetGroupsTemplateResponse.  # noqa: E501
        :type: list[GetGroupsTemplateDatatables]
        """

        self._datatables = datatables

    @property
    def office_id(self):
        """Gets the office_id of this GetGroupsTemplateResponse.  # noqa: E501


        :return: The office_id of this GetGroupsTemplateResponse.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this GetGroupsTemplateResponse.


        :param office_id: The office_id of this GetGroupsTemplateResponse.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def office_options(self):
        """Gets the office_options of this GetGroupsTemplateResponse.  # noqa: E501


        :return: The office_options of this GetGroupsTemplateResponse.  # noqa: E501
        :rtype: list[GetGroupsTemplateOfficeOptions]
        """
        return self._office_options

    @office_options.setter
    def office_options(self, office_options):
        """Sets the office_options of this GetGroupsTemplateResponse.


        :param office_options: The office_options of this GetGroupsTemplateResponse.  # noqa: E501
        :type: list[GetGroupsTemplateOfficeOptions]
        """

        self._office_options = office_options

    @property
    def staff_options(self):
        """Gets the staff_options of this GetGroupsTemplateResponse.  # noqa: E501


        :return: The staff_options of this GetGroupsTemplateResponse.  # noqa: E501
        :rtype: list[GetGroupsTemplateStaffOptions]
        """
        return self._staff_options

    @staff_options.setter
    def staff_options(self, staff_options):
        """Sets the staff_options of this GetGroupsTemplateResponse.


        :param staff_options: The staff_options of this GetGroupsTemplateResponse.  # noqa: E501
        :type: list[GetGroupsTemplateStaffOptions]
        """

        self._staff_options = staff_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetGroupsTemplateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetGroupsTemplateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
