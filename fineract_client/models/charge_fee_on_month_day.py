# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChargeFeeOnMonthDay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_of_month': 'int',
        'month': 'str',
        'month_value': 'int'
    }

    attribute_map = {
        'day_of_month': 'dayOfMonth',
        'month': 'month',
        'month_value': 'monthValue'
    }

    def __init__(self, day_of_month=None, month=None, month_value=None):  # noqa: E501
        """ChargeFeeOnMonthDay - a model defined in Swagger"""  # noqa: E501
        self._day_of_month = None
        self._month = None
        self._month_value = None
        self.discriminator = None
        if day_of_month is not None:
            self.day_of_month = day_of_month
        if month is not None:
            self.month = month
        if month_value is not None:
            self.month_value = month_value

    @property
    def day_of_month(self):
        """Gets the day_of_month of this ChargeFeeOnMonthDay.  # noqa: E501


        :return: The day_of_month of this ChargeFeeOnMonthDay.  # noqa: E501
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this ChargeFeeOnMonthDay.


        :param day_of_month: The day_of_month of this ChargeFeeOnMonthDay.  # noqa: E501
        :type: int
        """

        self._day_of_month = day_of_month

    @property
    def month(self):
        """Gets the month of this ChargeFeeOnMonthDay.  # noqa: E501


        :return: The month of this ChargeFeeOnMonthDay.  # noqa: E501
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this ChargeFeeOnMonthDay.


        :param month: The month of this ChargeFeeOnMonthDay.  # noqa: E501
        :type: str
        """
        allowed_values = ["JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"]  # noqa: E501
        if month not in allowed_values:
            raise ValueError(
                "Invalid value for `month` ({0}), must be one of {1}"  # noqa: E501
                .format(month, allowed_values)
            )

        self._month = month

    @property
    def month_value(self):
        """Gets the month_value of this ChargeFeeOnMonthDay.  # noqa: E501


        :return: The month_value of this ChargeFeeOnMonthDay.  # noqa: E501
        :rtype: int
        """
        return self._month_value

    @month_value.setter
    def month_value(self, month_value):
        """Sets the month_value of this ChargeFeeOnMonthDay.


        :param month_value: The month_value of this ChargeFeeOnMonthDay.  # noqa: E501
        :type: int
        """

        self._month_value = month_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChargeFeeOnMonthDay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargeFeeOnMonthDay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
