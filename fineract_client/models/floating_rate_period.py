# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FloatingRatePeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'created_by': 'int',
        'created_date': 'datetime',
        'created_date_time': 'datetime',
        'differential_to_base_lending_rate': 'bool',
        'floating_rate': 'FloatingRate',
        'from_date': 'date',
        'id': 'int',
        'interest_rate': 'float',
        'last_modified_by': 'int',
        'last_modified_date': 'datetime',
        'last_modified_date_time': 'datetime',
        'new': 'bool'
    }

    attribute_map = {
        'active': 'active',
        'created_by': 'createdBy',
        'created_date': 'createdDate',
        'created_date_time': 'createdDateTime',
        'differential_to_base_lending_rate': 'differentialToBaseLendingRate',
        'floating_rate': 'floatingRate',
        'from_date': 'fromDate',
        'id': 'id',
        'interest_rate': 'interestRate',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_date': 'lastModifiedDate',
        'last_modified_date_time': 'lastModifiedDateTime',
        'new': 'new'
    }

    def __init__(self, active=None, created_by=None, created_date=None, created_date_time=None, differential_to_base_lending_rate=None, floating_rate=None, from_date=None, id=None, interest_rate=None, last_modified_by=None, last_modified_date=None, last_modified_date_time=None, new=None):  # noqa: E501
        """FloatingRatePeriod - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._created_by = None
        self._created_date = None
        self._created_date_time = None
        self._differential_to_base_lending_rate = None
        self._floating_rate = None
        self._from_date = None
        self._id = None
        self._interest_rate = None
        self._last_modified_by = None
        self._last_modified_date = None
        self._last_modified_date_time = None
        self._new = None
        self.discriminator = None
        if active is not None:
            self.active = active
        self.created_by = created_by
        self.created_date = created_date
        self.created_date_time = created_date_time
        if differential_to_base_lending_rate is not None:
            self.differential_to_base_lending_rate = differential_to_base_lending_rate
        if floating_rate is not None:
            self.floating_rate = floating_rate
        if from_date is not None:
            self.from_date = from_date
        if id is not None:
            self.id = id
        if interest_rate is not None:
            self.interest_rate = interest_rate
        self.last_modified_by = last_modified_by
        self.last_modified_date = last_modified_date
        self.last_modified_date_time = last_modified_date_time
        if new is not None:
            self.new = new

    @property
    def active(self):
        """Gets the active of this FloatingRatePeriod.  # noqa: E501


        :return: The active of this FloatingRatePeriod.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this FloatingRatePeriod.


        :param active: The active of this FloatingRatePeriod.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def created_by(self):
        """Gets the created_by of this FloatingRatePeriod.  # noqa: E501


        :return: The created_by of this FloatingRatePeriod.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this FloatingRatePeriod.


        :param created_by: The created_by of this FloatingRatePeriod.  # noqa: E501
        :type: int
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this FloatingRatePeriod.  # noqa: E501


        :return: The created_date of this FloatingRatePeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this FloatingRatePeriod.


        :param created_date: The created_date of this FloatingRatePeriod.  # noqa: E501
        :type: datetime
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def created_date_time(self):
        """Gets the created_date_time of this FloatingRatePeriod.  # noqa: E501


        :return: The created_date_time of this FloatingRatePeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this FloatingRatePeriod.


        :param created_date_time: The created_date_time of this FloatingRatePeriod.  # noqa: E501
        :type: datetime
        """
        if created_date_time is None:
            raise ValueError("Invalid value for `created_date_time`, must not be `None`")  # noqa: E501

        self._created_date_time = created_date_time

    @property
    def differential_to_base_lending_rate(self):
        """Gets the differential_to_base_lending_rate of this FloatingRatePeriod.  # noqa: E501


        :return: The differential_to_base_lending_rate of this FloatingRatePeriod.  # noqa: E501
        :rtype: bool
        """
        return self._differential_to_base_lending_rate

    @differential_to_base_lending_rate.setter
    def differential_to_base_lending_rate(self, differential_to_base_lending_rate):
        """Sets the differential_to_base_lending_rate of this FloatingRatePeriod.


        :param differential_to_base_lending_rate: The differential_to_base_lending_rate of this FloatingRatePeriod.  # noqa: E501
        :type: bool
        """

        self._differential_to_base_lending_rate = differential_to_base_lending_rate

    @property
    def floating_rate(self):
        """Gets the floating_rate of this FloatingRatePeriod.  # noqa: E501


        :return: The floating_rate of this FloatingRatePeriod.  # noqa: E501
        :rtype: FloatingRate
        """
        return self._floating_rate

    @floating_rate.setter
    def floating_rate(self, floating_rate):
        """Sets the floating_rate of this FloatingRatePeriod.


        :param floating_rate: The floating_rate of this FloatingRatePeriod.  # noqa: E501
        :type: FloatingRate
        """

        self._floating_rate = floating_rate

    @property
    def from_date(self):
        """Gets the from_date of this FloatingRatePeriod.  # noqa: E501


        :return: The from_date of this FloatingRatePeriod.  # noqa: E501
        :rtype: date
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this FloatingRatePeriod.


        :param from_date: The from_date of this FloatingRatePeriod.  # noqa: E501
        :type: date
        """

        self._from_date = from_date

    @property
    def id(self):
        """Gets the id of this FloatingRatePeriod.  # noqa: E501


        :return: The id of this FloatingRatePeriod.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FloatingRatePeriod.


        :param id: The id of this FloatingRatePeriod.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interest_rate(self):
        """Gets the interest_rate of this FloatingRatePeriod.  # noqa: E501


        :return: The interest_rate of this FloatingRatePeriod.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this FloatingRatePeriod.


        :param interest_rate: The interest_rate of this FloatingRatePeriod.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this FloatingRatePeriod.  # noqa: E501


        :return: The last_modified_by of this FloatingRatePeriod.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this FloatingRatePeriod.


        :param last_modified_by: The last_modified_by of this FloatingRatePeriod.  # noqa: E501
        :type: int
        """
        if last_modified_by is None:
            raise ValueError("Invalid value for `last_modified_by`, must not be `None`")  # noqa: E501

        self._last_modified_by = last_modified_by

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this FloatingRatePeriod.  # noqa: E501


        :return: The last_modified_date of this FloatingRatePeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this FloatingRatePeriod.


        :param last_modified_date: The last_modified_date of this FloatingRatePeriod.  # noqa: E501
        :type: datetime
        """
        if last_modified_date is None:
            raise ValueError("Invalid value for `last_modified_date`, must not be `None`")  # noqa: E501

        self._last_modified_date = last_modified_date

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this FloatingRatePeriod.  # noqa: E501


        :return: The last_modified_date_time of this FloatingRatePeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this FloatingRatePeriod.


        :param last_modified_date_time: The last_modified_date_time of this FloatingRatePeriod.  # noqa: E501
        :type: datetime
        """
        if last_modified_date_time is None:
            raise ValueError("Invalid value for `last_modified_date_time`, must not be `None`")  # noqa: E501

        self._last_modified_date_time = last_modified_date_time

    @property
    def new(self):
        """Gets the new of this FloatingRatePeriod.  # noqa: E501


        :return: The new of this FloatingRatePeriod.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this FloatingRatePeriod.


        :param new: The new of this FloatingRatePeriod.  # noqa: E501
        :type: bool
        """

        self._new = new

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FloatingRatePeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FloatingRatePeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
