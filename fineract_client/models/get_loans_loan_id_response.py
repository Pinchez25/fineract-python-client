# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansLoanIdResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_no': 'str',
        'amortization_type': 'GetLoansLoanIdAmortizationType',
        'annual_interest_rate': 'float',
        'approved_principal': 'float',
        'charged_off': 'bool',
        'charges': 'list[GetLoansLoanIdLoanChargeData]',
        'client_external_id': 'str',
        'client_id': 'int',
        'client_name': 'str',
        'client_office_id': 'int',
        'currency': 'GetLoansLoanIdCurrency',
        'delinquency_range': 'GetDelinquencyRangesResponse',
        'delinquent': 'GetLoansLoanIdDelinquencySummary',
        'disallow_expected_disbursements': 'bool',
        'disbursed_amount_percentage_for_down_payment': 'float',
        'disbursement_details': 'list[GetLoansLoanIdDisbursementDetails]',
        'enable_auto_repayment_for_down_payment': 'bool',
        'enable_down_payment': 'bool',
        'enable_installment_level_delinquency': 'bool',
        'external_id': 'str',
        'fixed_length': 'int',
        'fixed_principal_percentage_per_installment': 'float',
        'fraud': 'bool',
        'id': 'int',
        'in_arrears_tolerance': 'int',
        'interest_calculation_period_type': 'GetLoansLoanIdInterestCalculationPeriodType',
        'interest_rate_frequency_type': 'GetLoansLoanIdInterestRateFrequencyType',
        'interest_rate_per_period': 'float',
        'interest_type': 'GetLoansLoanIdInterestType',
        'is_floating_interest_rate': 'bool',
        'last_closed_business_date': 'date',
        'loan_officer_id': 'int',
        'loan_officer_name': 'str',
        'loan_product_description': 'str',
        'loan_product_id': 'int',
        'loan_product_name': 'str',
        'loan_purpose_id': 'int',
        'loan_purpose_name': 'str',
        'loan_schedule_processing_type': 'EnumOptionData',
        'loan_schedule_type': 'EnumOptionData',
        'loan_type': 'GetLoansLoanIdLoanType',
        'net_disbursal_amount': 'float',
        'number_of_repayments': 'int',
        'overpaid_on_date': 'date',
        'principal': 'float',
        'proposed_principal': 'float',
        'repayment_every': 'int',
        'repayment_frequency_type': 'GetLoansLoanIdRepaymentFrequencyType',
        'repayment_schedule': 'GetLoansLoanIdRepaymentSchedule',
        'status': 'GetLoansLoanIdStatus',
        'summary': 'GetLoansLoanIdSummary',
        'term_frequency': 'int',
        'term_period_frequency_type': 'GetLoansLoanIdTermPeriodFrequencyType',
        'timeline': 'GetLoansLoanIdTimeline',
        'total_overpaid': 'float',
        'transaction_processing_strategy_code': 'str',
        'transactions': 'list[GetLoansLoanIdTransactions]'
    }

    attribute_map = {
        'account_no': 'accountNo',
        'amortization_type': 'amortizationType',
        'annual_interest_rate': 'annualInterestRate',
        'approved_principal': 'approvedPrincipal',
        'charged_off': 'chargedOff',
        'charges': 'charges',
        'client_external_id': 'clientExternalId',
        'client_id': 'clientId',
        'client_name': 'clientName',
        'client_office_id': 'clientOfficeId',
        'currency': 'currency',
        'delinquency_range': 'delinquencyRange',
        'delinquent': 'delinquent',
        'disallow_expected_disbursements': 'disallowExpectedDisbursements',
        'disbursed_amount_percentage_for_down_payment': 'disbursedAmountPercentageForDownPayment',
        'disbursement_details': 'disbursementDetails',
        'enable_auto_repayment_for_down_payment': 'enableAutoRepaymentForDownPayment',
        'enable_down_payment': 'enableDownPayment',
        'enable_installment_level_delinquency': 'enableInstallmentLevelDelinquency',
        'external_id': 'externalId',
        'fixed_length': 'fixedLength',
        'fixed_principal_percentage_per_installment': 'fixedPrincipalPercentagePerInstallment',
        'fraud': 'fraud',
        'id': 'id',
        'in_arrears_tolerance': 'inArrearsTolerance',
        'interest_calculation_period_type': 'interestCalculationPeriodType',
        'interest_rate_frequency_type': 'interestRateFrequencyType',
        'interest_rate_per_period': 'interestRatePerPeriod',
        'interest_type': 'interestType',
        'is_floating_interest_rate': 'isFloatingInterestRate',
        'last_closed_business_date': 'lastClosedBusinessDate',
        'loan_officer_id': 'loanOfficerId',
        'loan_officer_name': 'loanOfficerName',
        'loan_product_description': 'loanProductDescription',
        'loan_product_id': 'loanProductId',
        'loan_product_name': 'loanProductName',
        'loan_purpose_id': 'loanPurposeId',
        'loan_purpose_name': 'loanPurposeName',
        'loan_schedule_processing_type': 'loanScheduleProcessingType',
        'loan_schedule_type': 'loanScheduleType',
        'loan_type': 'loanType',
        'net_disbursal_amount': 'netDisbursalAmount',
        'number_of_repayments': 'numberOfRepayments',
        'overpaid_on_date': 'overpaidOnDate',
        'principal': 'principal',
        'proposed_principal': 'proposedPrincipal',
        'repayment_every': 'repaymentEvery',
        'repayment_frequency_type': 'repaymentFrequencyType',
        'repayment_schedule': 'repaymentSchedule',
        'status': 'status',
        'summary': 'summary',
        'term_frequency': 'termFrequency',
        'term_period_frequency_type': 'termPeriodFrequencyType',
        'timeline': 'timeline',
        'total_overpaid': 'totalOverpaid',
        'transaction_processing_strategy_code': 'transactionProcessingStrategyCode',
        'transactions': 'transactions'
    }

    def __init__(self, account_no=None, amortization_type=None, annual_interest_rate=None, approved_principal=None, charged_off=None, charges=None, client_external_id=None, client_id=None, client_name=None, client_office_id=None, currency=None, delinquency_range=None, delinquent=None, disallow_expected_disbursements=None, disbursed_amount_percentage_for_down_payment=None, disbursement_details=None, enable_auto_repayment_for_down_payment=None, enable_down_payment=None, enable_installment_level_delinquency=None, external_id=None, fixed_length=None, fixed_principal_percentage_per_installment=None, fraud=None, id=None, in_arrears_tolerance=None, interest_calculation_period_type=None, interest_rate_frequency_type=None, interest_rate_per_period=None, interest_type=None, is_floating_interest_rate=None, last_closed_business_date=None, loan_officer_id=None, loan_officer_name=None, loan_product_description=None, loan_product_id=None, loan_product_name=None, loan_purpose_id=None, loan_purpose_name=None, loan_schedule_processing_type=None, loan_schedule_type=None, loan_type=None, net_disbursal_amount=None, number_of_repayments=None, overpaid_on_date=None, principal=None, proposed_principal=None, repayment_every=None, repayment_frequency_type=None, repayment_schedule=None, status=None, summary=None, term_frequency=None, term_period_frequency_type=None, timeline=None, total_overpaid=None, transaction_processing_strategy_code=None, transactions=None):  # noqa: E501
        """GetLoansLoanIdResponse - a model defined in Swagger"""  # noqa: E501
        self._account_no = None
        self._amortization_type = None
        self._annual_interest_rate = None
        self._approved_principal = None
        self._charged_off = None
        self._charges = None
        self._client_external_id = None
        self._client_id = None
        self._client_name = None
        self._client_office_id = None
        self._currency = None
        self._delinquency_range = None
        self._delinquent = None
        self._disallow_expected_disbursements = None
        self._disbursed_amount_percentage_for_down_payment = None
        self._disbursement_details = None
        self._enable_auto_repayment_for_down_payment = None
        self._enable_down_payment = None
        self._enable_installment_level_delinquency = None
        self._external_id = None
        self._fixed_length = None
        self._fixed_principal_percentage_per_installment = None
        self._fraud = None
        self._id = None
        self._in_arrears_tolerance = None
        self._interest_calculation_period_type = None
        self._interest_rate_frequency_type = None
        self._interest_rate_per_period = None
        self._interest_type = None
        self._is_floating_interest_rate = None
        self._last_closed_business_date = None
        self._loan_officer_id = None
        self._loan_officer_name = None
        self._loan_product_description = None
        self._loan_product_id = None
        self._loan_product_name = None
        self._loan_purpose_id = None
        self._loan_purpose_name = None
        self._loan_schedule_processing_type = None
        self._loan_schedule_type = None
        self._loan_type = None
        self._net_disbursal_amount = None
        self._number_of_repayments = None
        self._overpaid_on_date = None
        self._principal = None
        self._proposed_principal = None
        self._repayment_every = None
        self._repayment_frequency_type = None
        self._repayment_schedule = None
        self._status = None
        self._summary = None
        self._term_frequency = None
        self._term_period_frequency_type = None
        self._timeline = None
        self._total_overpaid = None
        self._transaction_processing_strategy_code = None
        self._transactions = None
        self.discriminator = None
        if account_no is not None:
            self.account_no = account_no
        if amortization_type is not None:
            self.amortization_type = amortization_type
        if annual_interest_rate is not None:
            self.annual_interest_rate = annual_interest_rate
        if approved_principal is not None:
            self.approved_principal = approved_principal
        if charged_off is not None:
            self.charged_off = charged_off
        if charges is not None:
            self.charges = charges
        if client_external_id is not None:
            self.client_external_id = client_external_id
        if client_id is not None:
            self.client_id = client_id
        if client_name is not None:
            self.client_name = client_name
        if client_office_id is not None:
            self.client_office_id = client_office_id
        if currency is not None:
            self.currency = currency
        if delinquency_range is not None:
            self.delinquency_range = delinquency_range
        if delinquent is not None:
            self.delinquent = delinquent
        if disallow_expected_disbursements is not None:
            self.disallow_expected_disbursements = disallow_expected_disbursements
        if disbursed_amount_percentage_for_down_payment is not None:
            self.disbursed_amount_percentage_for_down_payment = disbursed_amount_percentage_for_down_payment
        if disbursement_details is not None:
            self.disbursement_details = disbursement_details
        if enable_auto_repayment_for_down_payment is not None:
            self.enable_auto_repayment_for_down_payment = enable_auto_repayment_for_down_payment
        if enable_down_payment is not None:
            self.enable_down_payment = enable_down_payment
        if enable_installment_level_delinquency is not None:
            self.enable_installment_level_delinquency = enable_installment_level_delinquency
        if external_id is not None:
            self.external_id = external_id
        if fixed_length is not None:
            self.fixed_length = fixed_length
        if fixed_principal_percentage_per_installment is not None:
            self.fixed_principal_percentage_per_installment = fixed_principal_percentage_per_installment
        if fraud is not None:
            self.fraud = fraud
        if id is not None:
            self.id = id
        if in_arrears_tolerance is not None:
            self.in_arrears_tolerance = in_arrears_tolerance
        if interest_calculation_period_type is not None:
            self.interest_calculation_period_type = interest_calculation_period_type
        if interest_rate_frequency_type is not None:
            self.interest_rate_frequency_type = interest_rate_frequency_type
        if interest_rate_per_period is not None:
            self.interest_rate_per_period = interest_rate_per_period
        if interest_type is not None:
            self.interest_type = interest_type
        if is_floating_interest_rate is not None:
            self.is_floating_interest_rate = is_floating_interest_rate
        if last_closed_business_date is not None:
            self.last_closed_business_date = last_closed_business_date
        if loan_officer_id is not None:
            self.loan_officer_id = loan_officer_id
        if loan_officer_name is not None:
            self.loan_officer_name = loan_officer_name
        if loan_product_description is not None:
            self.loan_product_description = loan_product_description
        if loan_product_id is not None:
            self.loan_product_id = loan_product_id
        if loan_product_name is not None:
            self.loan_product_name = loan_product_name
        if loan_purpose_id is not None:
            self.loan_purpose_id = loan_purpose_id
        if loan_purpose_name is not None:
            self.loan_purpose_name = loan_purpose_name
        if loan_schedule_processing_type is not None:
            self.loan_schedule_processing_type = loan_schedule_processing_type
        if loan_schedule_type is not None:
            self.loan_schedule_type = loan_schedule_type
        if loan_type is not None:
            self.loan_type = loan_type
        if net_disbursal_amount is not None:
            self.net_disbursal_amount = net_disbursal_amount
        if number_of_repayments is not None:
            self.number_of_repayments = number_of_repayments
        if overpaid_on_date is not None:
            self.overpaid_on_date = overpaid_on_date
        if principal is not None:
            self.principal = principal
        if proposed_principal is not None:
            self.proposed_principal = proposed_principal
        if repayment_every is not None:
            self.repayment_every = repayment_every
        if repayment_frequency_type is not None:
            self.repayment_frequency_type = repayment_frequency_type
        if repayment_schedule is not None:
            self.repayment_schedule = repayment_schedule
        if status is not None:
            self.status = status
        if summary is not None:
            self.summary = summary
        if term_frequency is not None:
            self.term_frequency = term_frequency
        if term_period_frequency_type is not None:
            self.term_period_frequency_type = term_period_frequency_type
        if timeline is not None:
            self.timeline = timeline
        if total_overpaid is not None:
            self.total_overpaid = total_overpaid
        if transaction_processing_strategy_code is not None:
            self.transaction_processing_strategy_code = transaction_processing_strategy_code
        if transactions is not None:
            self.transactions = transactions

    @property
    def account_no(self):
        """Gets the account_no of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The account_no of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_no

    @account_no.setter
    def account_no(self, account_no):
        """Sets the account_no of this GetLoansLoanIdResponse.


        :param account_no: The account_no of this GetLoansLoanIdResponse.  # noqa: E501
        :type: str
        """

        self._account_no = account_no

    @property
    def amortization_type(self):
        """Gets the amortization_type of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The amortization_type of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdAmortizationType
        """
        return self._amortization_type

    @amortization_type.setter
    def amortization_type(self, amortization_type):
        """Sets the amortization_type of this GetLoansLoanIdResponse.


        :param amortization_type: The amortization_type of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdAmortizationType
        """

        self._amortization_type = amortization_type

    @property
    def annual_interest_rate(self):
        """Gets the annual_interest_rate of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The annual_interest_rate of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._annual_interest_rate

    @annual_interest_rate.setter
    def annual_interest_rate(self, annual_interest_rate):
        """Sets the annual_interest_rate of this GetLoansLoanIdResponse.


        :param annual_interest_rate: The annual_interest_rate of this GetLoansLoanIdResponse.  # noqa: E501
        :type: float
        """

        self._annual_interest_rate = annual_interest_rate

    @property
    def approved_principal(self):
        """Gets the approved_principal of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The approved_principal of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._approved_principal

    @approved_principal.setter
    def approved_principal(self, approved_principal):
        """Sets the approved_principal of this GetLoansLoanIdResponse.


        :param approved_principal: The approved_principal of this GetLoansLoanIdResponse.  # noqa: E501
        :type: float
        """

        self._approved_principal = approved_principal

    @property
    def charged_off(self):
        """Gets the charged_off of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The charged_off of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._charged_off

    @charged_off.setter
    def charged_off(self, charged_off):
        """Sets the charged_off of this GetLoansLoanIdResponse.


        :param charged_off: The charged_off of this GetLoansLoanIdResponse.  # noqa: E501
        :type: bool
        """

        self._charged_off = charged_off

    @property
    def charges(self):
        """Gets the charges of this GetLoansLoanIdResponse.  # noqa: E501

        Set of charges  # noqa: E501

        :return: The charges of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: list[GetLoansLoanIdLoanChargeData]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this GetLoansLoanIdResponse.

        Set of charges  # noqa: E501

        :param charges: The charges of this GetLoansLoanIdResponse.  # noqa: E501
        :type: list[GetLoansLoanIdLoanChargeData]
        """

        self._charges = charges

    @property
    def client_external_id(self):
        """Gets the client_external_id of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The client_external_id of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_external_id

    @client_external_id.setter
    def client_external_id(self, client_external_id):
        """Sets the client_external_id of this GetLoansLoanIdResponse.


        :param client_external_id: The client_external_id of this GetLoansLoanIdResponse.  # noqa: E501
        :type: str
        """

        self._client_external_id = client_external_id

    @property
    def client_id(self):
        """Gets the client_id of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The client_id of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GetLoansLoanIdResponse.


        :param client_id: The client_id of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The client_name of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this GetLoansLoanIdResponse.


        :param client_name: The client_name of this GetLoansLoanIdResponse.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def client_office_id(self):
        """Gets the client_office_id of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The client_office_id of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._client_office_id

    @client_office_id.setter
    def client_office_id(self, client_office_id):
        """Sets the client_office_id of this GetLoansLoanIdResponse.


        :param client_office_id: The client_office_id of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._client_office_id = client_office_id

    @property
    def currency(self):
        """Gets the currency of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The currency of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GetLoansLoanIdResponse.


        :param currency: The currency of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdCurrency
        """

        self._currency = currency

    @property
    def delinquency_range(self):
        """Gets the delinquency_range of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The delinquency_range of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetDelinquencyRangesResponse
        """
        return self._delinquency_range

    @delinquency_range.setter
    def delinquency_range(self, delinquency_range):
        """Sets the delinquency_range of this GetLoansLoanIdResponse.


        :param delinquency_range: The delinquency_range of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetDelinquencyRangesResponse
        """

        self._delinquency_range = delinquency_range

    @property
    def delinquent(self):
        """Gets the delinquent of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The delinquent of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdDelinquencySummary
        """
        return self._delinquent

    @delinquent.setter
    def delinquent(self, delinquent):
        """Sets the delinquent of this GetLoansLoanIdResponse.


        :param delinquent: The delinquent of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdDelinquencySummary
        """

        self._delinquent = delinquent

    @property
    def disallow_expected_disbursements(self):
        """Gets the disallow_expected_disbursements of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The disallow_expected_disbursements of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_expected_disbursements

    @disallow_expected_disbursements.setter
    def disallow_expected_disbursements(self, disallow_expected_disbursements):
        """Sets the disallow_expected_disbursements of this GetLoansLoanIdResponse.


        :param disallow_expected_disbursements: The disallow_expected_disbursements of this GetLoansLoanIdResponse.  # noqa: E501
        :type: bool
        """

        self._disallow_expected_disbursements = disallow_expected_disbursements

    @property
    def disbursed_amount_percentage_for_down_payment(self):
        """Gets the disbursed_amount_percentage_for_down_payment of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The disbursed_amount_percentage_for_down_payment of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._disbursed_amount_percentage_for_down_payment

    @disbursed_amount_percentage_for_down_payment.setter
    def disbursed_amount_percentage_for_down_payment(self, disbursed_amount_percentage_for_down_payment):
        """Sets the disbursed_amount_percentage_for_down_payment of this GetLoansLoanIdResponse.


        :param disbursed_amount_percentage_for_down_payment: The disbursed_amount_percentage_for_down_payment of this GetLoansLoanIdResponse.  # noqa: E501
        :type: float
        """

        self._disbursed_amount_percentage_for_down_payment = disbursed_amount_percentage_for_down_payment

    @property
    def disbursement_details(self):
        """Gets the disbursement_details of this GetLoansLoanIdResponse.  # noqa: E501

        Set of GetLoansLoanIdDisbursementDetails  # noqa: E501

        :return: The disbursement_details of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: list[GetLoansLoanIdDisbursementDetails]
        """
        return self._disbursement_details

    @disbursement_details.setter
    def disbursement_details(self, disbursement_details):
        """Sets the disbursement_details of this GetLoansLoanIdResponse.

        Set of GetLoansLoanIdDisbursementDetails  # noqa: E501

        :param disbursement_details: The disbursement_details of this GetLoansLoanIdResponse.  # noqa: E501
        :type: list[GetLoansLoanIdDisbursementDetails]
        """

        self._disbursement_details = disbursement_details

    @property
    def enable_auto_repayment_for_down_payment(self):
        """Gets the enable_auto_repayment_for_down_payment of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The enable_auto_repayment_for_down_payment of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auto_repayment_for_down_payment

    @enable_auto_repayment_for_down_payment.setter
    def enable_auto_repayment_for_down_payment(self, enable_auto_repayment_for_down_payment):
        """Sets the enable_auto_repayment_for_down_payment of this GetLoansLoanIdResponse.


        :param enable_auto_repayment_for_down_payment: The enable_auto_repayment_for_down_payment of this GetLoansLoanIdResponse.  # noqa: E501
        :type: bool
        """

        self._enable_auto_repayment_for_down_payment = enable_auto_repayment_for_down_payment

    @property
    def enable_down_payment(self):
        """Gets the enable_down_payment of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The enable_down_payment of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enable_down_payment

    @enable_down_payment.setter
    def enable_down_payment(self, enable_down_payment):
        """Sets the enable_down_payment of this GetLoansLoanIdResponse.


        :param enable_down_payment: The enable_down_payment of this GetLoansLoanIdResponse.  # noqa: E501
        :type: bool
        """

        self._enable_down_payment = enable_down_payment

    @property
    def enable_installment_level_delinquency(self):
        """Gets the enable_installment_level_delinquency of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The enable_installment_level_delinquency of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enable_installment_level_delinquency

    @enable_installment_level_delinquency.setter
    def enable_installment_level_delinquency(self, enable_installment_level_delinquency):
        """Sets the enable_installment_level_delinquency of this GetLoansLoanIdResponse.


        :param enable_installment_level_delinquency: The enable_installment_level_delinquency of this GetLoansLoanIdResponse.  # noqa: E501
        :type: bool
        """

        self._enable_installment_level_delinquency = enable_installment_level_delinquency

    @property
    def external_id(self):
        """Gets the external_id of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The external_id of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this GetLoansLoanIdResponse.


        :param external_id: The external_id of this GetLoansLoanIdResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def fixed_length(self):
        """Gets the fixed_length of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The fixed_length of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._fixed_length

    @fixed_length.setter
    def fixed_length(self, fixed_length):
        """Sets the fixed_length of this GetLoansLoanIdResponse.


        :param fixed_length: The fixed_length of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._fixed_length = fixed_length

    @property
    def fixed_principal_percentage_per_installment(self):
        """Gets the fixed_principal_percentage_per_installment of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The fixed_principal_percentage_per_installment of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._fixed_principal_percentage_per_installment

    @fixed_principal_percentage_per_installment.setter
    def fixed_principal_percentage_per_installment(self, fixed_principal_percentage_per_installment):
        """Sets the fixed_principal_percentage_per_installment of this GetLoansLoanIdResponse.


        :param fixed_principal_percentage_per_installment: The fixed_principal_percentage_per_installment of this GetLoansLoanIdResponse.  # noqa: E501
        :type: float
        """

        self._fixed_principal_percentage_per_installment = fixed_principal_percentage_per_installment

    @property
    def fraud(self):
        """Gets the fraud of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The fraud of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._fraud

    @fraud.setter
    def fraud(self, fraud):
        """Sets the fraud of this GetLoansLoanIdResponse.


        :param fraud: The fraud of this GetLoansLoanIdResponse.  # noqa: E501
        :type: bool
        """

        self._fraud = fraud

    @property
    def id(self):
        """Gets the id of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The id of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetLoansLoanIdResponse.


        :param id: The id of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def in_arrears_tolerance(self):
        """Gets the in_arrears_tolerance of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The in_arrears_tolerance of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._in_arrears_tolerance

    @in_arrears_tolerance.setter
    def in_arrears_tolerance(self, in_arrears_tolerance):
        """Sets the in_arrears_tolerance of this GetLoansLoanIdResponse.


        :param in_arrears_tolerance: The in_arrears_tolerance of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._in_arrears_tolerance = in_arrears_tolerance

    @property
    def interest_calculation_period_type(self):
        """Gets the interest_calculation_period_type of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The interest_calculation_period_type of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdInterestCalculationPeriodType
        """
        return self._interest_calculation_period_type

    @interest_calculation_period_type.setter
    def interest_calculation_period_type(self, interest_calculation_period_type):
        """Sets the interest_calculation_period_type of this GetLoansLoanIdResponse.


        :param interest_calculation_period_type: The interest_calculation_period_type of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdInterestCalculationPeriodType
        """

        self._interest_calculation_period_type = interest_calculation_period_type

    @property
    def interest_rate_frequency_type(self):
        """Gets the interest_rate_frequency_type of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The interest_rate_frequency_type of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdInterestRateFrequencyType
        """
        return self._interest_rate_frequency_type

    @interest_rate_frequency_type.setter
    def interest_rate_frequency_type(self, interest_rate_frequency_type):
        """Sets the interest_rate_frequency_type of this GetLoansLoanIdResponse.


        :param interest_rate_frequency_type: The interest_rate_frequency_type of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdInterestRateFrequencyType
        """

        self._interest_rate_frequency_type = interest_rate_frequency_type

    @property
    def interest_rate_per_period(self):
        """Gets the interest_rate_per_period of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The interest_rate_per_period of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate_per_period

    @interest_rate_per_period.setter
    def interest_rate_per_period(self, interest_rate_per_period):
        """Sets the interest_rate_per_period of this GetLoansLoanIdResponse.


        :param interest_rate_per_period: The interest_rate_per_period of this GetLoansLoanIdResponse.  # noqa: E501
        :type: float
        """

        self._interest_rate_per_period = interest_rate_per_period

    @property
    def interest_type(self):
        """Gets the interest_type of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The interest_type of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdInterestType
        """
        return self._interest_type

    @interest_type.setter
    def interest_type(self, interest_type):
        """Sets the interest_type of this GetLoansLoanIdResponse.


        :param interest_type: The interest_type of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdInterestType
        """

        self._interest_type = interest_type

    @property
    def is_floating_interest_rate(self):
        """Gets the is_floating_interest_rate of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The is_floating_interest_rate of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_floating_interest_rate

    @is_floating_interest_rate.setter
    def is_floating_interest_rate(self, is_floating_interest_rate):
        """Sets the is_floating_interest_rate of this GetLoansLoanIdResponse.


        :param is_floating_interest_rate: The is_floating_interest_rate of this GetLoansLoanIdResponse.  # noqa: E501
        :type: bool
        """

        self._is_floating_interest_rate = is_floating_interest_rate

    @property
    def last_closed_business_date(self):
        """Gets the last_closed_business_date of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The last_closed_business_date of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: date
        """
        return self._last_closed_business_date

    @last_closed_business_date.setter
    def last_closed_business_date(self, last_closed_business_date):
        """Sets the last_closed_business_date of this GetLoansLoanIdResponse.


        :param last_closed_business_date: The last_closed_business_date of this GetLoansLoanIdResponse.  # noqa: E501
        :type: date
        """

        self._last_closed_business_date = last_closed_business_date

    @property
    def loan_officer_id(self):
        """Gets the loan_officer_id of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The loan_officer_id of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._loan_officer_id

    @loan_officer_id.setter
    def loan_officer_id(self, loan_officer_id):
        """Sets the loan_officer_id of this GetLoansLoanIdResponse.


        :param loan_officer_id: The loan_officer_id of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._loan_officer_id = loan_officer_id

    @property
    def loan_officer_name(self):
        """Gets the loan_officer_name of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The loan_officer_name of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._loan_officer_name

    @loan_officer_name.setter
    def loan_officer_name(self, loan_officer_name):
        """Sets the loan_officer_name of this GetLoansLoanIdResponse.


        :param loan_officer_name: The loan_officer_name of this GetLoansLoanIdResponse.  # noqa: E501
        :type: str
        """

        self._loan_officer_name = loan_officer_name

    @property
    def loan_product_description(self):
        """Gets the loan_product_description of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The loan_product_description of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._loan_product_description

    @loan_product_description.setter
    def loan_product_description(self, loan_product_description):
        """Sets the loan_product_description of this GetLoansLoanIdResponse.


        :param loan_product_description: The loan_product_description of this GetLoansLoanIdResponse.  # noqa: E501
        :type: str
        """

        self._loan_product_description = loan_product_description

    @property
    def loan_product_id(self):
        """Gets the loan_product_id of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The loan_product_id of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._loan_product_id

    @loan_product_id.setter
    def loan_product_id(self, loan_product_id):
        """Sets the loan_product_id of this GetLoansLoanIdResponse.


        :param loan_product_id: The loan_product_id of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._loan_product_id = loan_product_id

    @property
    def loan_product_name(self):
        """Gets the loan_product_name of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The loan_product_name of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._loan_product_name

    @loan_product_name.setter
    def loan_product_name(self, loan_product_name):
        """Sets the loan_product_name of this GetLoansLoanIdResponse.


        :param loan_product_name: The loan_product_name of this GetLoansLoanIdResponse.  # noqa: E501
        :type: str
        """

        self._loan_product_name = loan_product_name

    @property
    def loan_purpose_id(self):
        """Gets the loan_purpose_id of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The loan_purpose_id of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._loan_purpose_id

    @loan_purpose_id.setter
    def loan_purpose_id(self, loan_purpose_id):
        """Sets the loan_purpose_id of this GetLoansLoanIdResponse.


        :param loan_purpose_id: The loan_purpose_id of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._loan_purpose_id = loan_purpose_id

    @property
    def loan_purpose_name(self):
        """Gets the loan_purpose_name of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The loan_purpose_name of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._loan_purpose_name

    @loan_purpose_name.setter
    def loan_purpose_name(self, loan_purpose_name):
        """Sets the loan_purpose_name of this GetLoansLoanIdResponse.


        :param loan_purpose_name: The loan_purpose_name of this GetLoansLoanIdResponse.  # noqa: E501
        :type: str
        """

        self._loan_purpose_name = loan_purpose_name

    @property
    def loan_schedule_processing_type(self):
        """Gets the loan_schedule_processing_type of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The loan_schedule_processing_type of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._loan_schedule_processing_type

    @loan_schedule_processing_type.setter
    def loan_schedule_processing_type(self, loan_schedule_processing_type):
        """Sets the loan_schedule_processing_type of this GetLoansLoanIdResponse.


        :param loan_schedule_processing_type: The loan_schedule_processing_type of this GetLoansLoanIdResponse.  # noqa: E501
        :type: EnumOptionData
        """

        self._loan_schedule_processing_type = loan_schedule_processing_type

    @property
    def loan_schedule_type(self):
        """Gets the loan_schedule_type of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The loan_schedule_type of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._loan_schedule_type

    @loan_schedule_type.setter
    def loan_schedule_type(self, loan_schedule_type):
        """Sets the loan_schedule_type of this GetLoansLoanIdResponse.


        :param loan_schedule_type: The loan_schedule_type of this GetLoansLoanIdResponse.  # noqa: E501
        :type: EnumOptionData
        """

        self._loan_schedule_type = loan_schedule_type

    @property
    def loan_type(self):
        """Gets the loan_type of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The loan_type of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdLoanType
        """
        return self._loan_type

    @loan_type.setter
    def loan_type(self, loan_type):
        """Sets the loan_type of this GetLoansLoanIdResponse.


        :param loan_type: The loan_type of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdLoanType
        """

        self._loan_type = loan_type

    @property
    def net_disbursal_amount(self):
        """Gets the net_disbursal_amount of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The net_disbursal_amount of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._net_disbursal_amount

    @net_disbursal_amount.setter
    def net_disbursal_amount(self, net_disbursal_amount):
        """Sets the net_disbursal_amount of this GetLoansLoanIdResponse.


        :param net_disbursal_amount: The net_disbursal_amount of this GetLoansLoanIdResponse.  # noqa: E501
        :type: float
        """

        self._net_disbursal_amount = net_disbursal_amount

    @property
    def number_of_repayments(self):
        """Gets the number_of_repayments of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The number_of_repayments of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_repayments

    @number_of_repayments.setter
    def number_of_repayments(self, number_of_repayments):
        """Sets the number_of_repayments of this GetLoansLoanIdResponse.


        :param number_of_repayments: The number_of_repayments of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._number_of_repayments = number_of_repayments

    @property
    def overpaid_on_date(self):
        """Gets the overpaid_on_date of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The overpaid_on_date of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: date
        """
        return self._overpaid_on_date

    @overpaid_on_date.setter
    def overpaid_on_date(self, overpaid_on_date):
        """Sets the overpaid_on_date of this GetLoansLoanIdResponse.


        :param overpaid_on_date: The overpaid_on_date of this GetLoansLoanIdResponse.  # noqa: E501
        :type: date
        """

        self._overpaid_on_date = overpaid_on_date

    @property
    def principal(self):
        """Gets the principal of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The principal of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this GetLoansLoanIdResponse.


        :param principal: The principal of this GetLoansLoanIdResponse.  # noqa: E501
        :type: float
        """

        self._principal = principal

    @property
    def proposed_principal(self):
        """Gets the proposed_principal of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The proposed_principal of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._proposed_principal

    @proposed_principal.setter
    def proposed_principal(self, proposed_principal):
        """Sets the proposed_principal of this GetLoansLoanIdResponse.


        :param proposed_principal: The proposed_principal of this GetLoansLoanIdResponse.  # noqa: E501
        :type: float
        """

        self._proposed_principal = proposed_principal

    @property
    def repayment_every(self):
        """Gets the repayment_every of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The repayment_every of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._repayment_every

    @repayment_every.setter
    def repayment_every(self, repayment_every):
        """Sets the repayment_every of this GetLoansLoanIdResponse.


        :param repayment_every: The repayment_every of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._repayment_every = repayment_every

    @property
    def repayment_frequency_type(self):
        """Gets the repayment_frequency_type of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The repayment_frequency_type of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdRepaymentFrequencyType
        """
        return self._repayment_frequency_type

    @repayment_frequency_type.setter
    def repayment_frequency_type(self, repayment_frequency_type):
        """Sets the repayment_frequency_type of this GetLoansLoanIdResponse.


        :param repayment_frequency_type: The repayment_frequency_type of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdRepaymentFrequencyType
        """

        self._repayment_frequency_type = repayment_frequency_type

    @property
    def repayment_schedule(self):
        """Gets the repayment_schedule of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The repayment_schedule of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdRepaymentSchedule
        """
        return self._repayment_schedule

    @repayment_schedule.setter
    def repayment_schedule(self, repayment_schedule):
        """Sets the repayment_schedule of this GetLoansLoanIdResponse.


        :param repayment_schedule: The repayment_schedule of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdRepaymentSchedule
        """

        self._repayment_schedule = repayment_schedule

    @property
    def status(self):
        """Gets the status of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The status of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetLoansLoanIdResponse.


        :param status: The status of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdStatus
        """

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The summary of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this GetLoansLoanIdResponse.


        :param summary: The summary of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdSummary
        """

        self._summary = summary

    @property
    def term_frequency(self):
        """Gets the term_frequency of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The term_frequency of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._term_frequency

    @term_frequency.setter
    def term_frequency(self, term_frequency):
        """Sets the term_frequency of this GetLoansLoanIdResponse.


        :param term_frequency: The term_frequency of this GetLoansLoanIdResponse.  # noqa: E501
        :type: int
        """

        self._term_frequency = term_frequency

    @property
    def term_period_frequency_type(self):
        """Gets the term_period_frequency_type of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The term_period_frequency_type of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdTermPeriodFrequencyType
        """
        return self._term_period_frequency_type

    @term_period_frequency_type.setter
    def term_period_frequency_type(self, term_period_frequency_type):
        """Sets the term_period_frequency_type of this GetLoansLoanIdResponse.


        :param term_period_frequency_type: The term_period_frequency_type of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdTermPeriodFrequencyType
        """

        self._term_period_frequency_type = term_period_frequency_type

    @property
    def timeline(self):
        """Gets the timeline of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The timeline of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: GetLoansLoanIdTimeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this GetLoansLoanIdResponse.


        :param timeline: The timeline of this GetLoansLoanIdResponse.  # noqa: E501
        :type: GetLoansLoanIdTimeline
        """

        self._timeline = timeline

    @property
    def total_overpaid(self):
        """Gets the total_overpaid of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The total_overpaid of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_overpaid

    @total_overpaid.setter
    def total_overpaid(self, total_overpaid):
        """Sets the total_overpaid of this GetLoansLoanIdResponse.


        :param total_overpaid: The total_overpaid of this GetLoansLoanIdResponse.  # noqa: E501
        :type: float
        """

        self._total_overpaid = total_overpaid

    @property
    def transaction_processing_strategy_code(self):
        """Gets the transaction_processing_strategy_code of this GetLoansLoanIdResponse.  # noqa: E501


        :return: The transaction_processing_strategy_code of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_processing_strategy_code

    @transaction_processing_strategy_code.setter
    def transaction_processing_strategy_code(self, transaction_processing_strategy_code):
        """Sets the transaction_processing_strategy_code of this GetLoansLoanIdResponse.


        :param transaction_processing_strategy_code: The transaction_processing_strategy_code of this GetLoansLoanIdResponse.  # noqa: E501
        :type: str
        """

        self._transaction_processing_strategy_code = transaction_processing_strategy_code

    @property
    def transactions(self):
        """Gets the transactions of this GetLoansLoanIdResponse.  # noqa: E501

        Set of GetLoansLoanIdTransactions  # noqa: E501

        :return: The transactions of this GetLoansLoanIdResponse.  # noqa: E501
        :rtype: list[GetLoansLoanIdTransactions]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this GetLoansLoanIdResponse.

        Set of GetLoansLoanIdTransactions  # noqa: E501

        :param transactions: The transactions of this GetLoansLoanIdResponse.  # noqa: E501
        :type: list[GetLoansLoanIdTransactions]
        """

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansLoanIdResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansLoanIdResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
