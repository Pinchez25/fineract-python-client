# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostTaxesGroupTaxComponents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date': 'str',
        'tax_component_id': 'int'
    }

    attribute_map = {
        'start_date': 'startDate',
        'tax_component_id': 'taxComponentId'
    }

    def __init__(self, start_date=None, tax_component_id=None):  # noqa: E501
        """PostTaxesGroupTaxComponents - a model defined in Swagger"""  # noqa: E501
        self._start_date = None
        self._tax_component_id = None
        self.discriminator = None
        if start_date is not None:
            self.start_date = start_date
        if tax_component_id is not None:
            self.tax_component_id = tax_component_id

    @property
    def start_date(self):
        """Gets the start_date of this PostTaxesGroupTaxComponents.  # noqa: E501


        :return: The start_date of this PostTaxesGroupTaxComponents.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PostTaxesGroupTaxComponents.


        :param start_date: The start_date of this PostTaxesGroupTaxComponents.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def tax_component_id(self):
        """Gets the tax_component_id of this PostTaxesGroupTaxComponents.  # noqa: E501


        :return: The tax_component_id of this PostTaxesGroupTaxComponents.  # noqa: E501
        :rtype: int
        """
        return self._tax_component_id

    @tax_component_id.setter
    def tax_component_id(self, tax_component_id):
        """Sets the tax_component_id of this PostTaxesGroupTaxComponents.


        :param tax_component_id: The tax_component_id of this PostTaxesGroupTaxComponents.  # noqa: E501
        :type: int
        """

        self._tax_component_id = tax_component_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostTaxesGroupTaxComponents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostTaxesGroupTaxComponents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
