# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JournalEntryTransactionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'comments': 'str',
        'created_by_user_id': 'int',
        'created_by_user_name': 'str',
        'created_date': 'date',
        'currency': 'CurrencyItem',
        'entity_id': 'int',
        'entity_type': 'EnumOptionType',
        'entry_type': 'EnumOptionType',
        'gl_account_code': 'str',
        'gl_account_id': 'int',
        'gl_account_name': 'str',
        'gl_account_type': 'EnumOptionType',
        'id': 'int',
        'manual_entry': 'bool',
        'office_id': 'int',
        'office_name': 'str',
        'office_running_balance': 'float',
        'organization_running_balance': 'float',
        'reference_number': 'str',
        'reversed': 'bool',
        'running_balance_computed': 'bool',
        'submitted_on_date': 'date',
        'transaction_date': 'date',
        'transaction_details': 'TransactionDetails',
        'transaction_id': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'comments': 'comments',
        'created_by_user_id': 'createdByUserId',
        'created_by_user_name': 'createdByUserName',
        'created_date': 'createdDate',
        'currency': 'currency',
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'entry_type': 'entryType',
        'gl_account_code': 'glAccountCode',
        'gl_account_id': 'glAccountId',
        'gl_account_name': 'glAccountName',
        'gl_account_type': 'glAccountType',
        'id': 'id',
        'manual_entry': 'manualEntry',
        'office_id': 'officeId',
        'office_name': 'officeName',
        'office_running_balance': 'officeRunningBalance',
        'organization_running_balance': 'organizationRunningBalance',
        'reference_number': 'referenceNumber',
        'reversed': 'reversed',
        'running_balance_computed': 'runningBalanceComputed',
        'submitted_on_date': 'submittedOnDate',
        'transaction_date': 'transactionDate',
        'transaction_details': 'transactionDetails',
        'transaction_id': 'transactionId'
    }

    def __init__(self, amount=None, comments=None, created_by_user_id=None, created_by_user_name=None, created_date=None, currency=None, entity_id=None, entity_type=None, entry_type=None, gl_account_code=None, gl_account_id=None, gl_account_name=None, gl_account_type=None, id=None, manual_entry=None, office_id=None, office_name=None, office_running_balance=None, organization_running_balance=None, reference_number=None, reversed=None, running_balance_computed=None, submitted_on_date=None, transaction_date=None, transaction_details=None, transaction_id=None):  # noqa: E501
        """JournalEntryTransactionItem - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._comments = None
        self._created_by_user_id = None
        self._created_by_user_name = None
        self._created_date = None
        self._currency = None
        self._entity_id = None
        self._entity_type = None
        self._entry_type = None
        self._gl_account_code = None
        self._gl_account_id = None
        self._gl_account_name = None
        self._gl_account_type = None
        self._id = None
        self._manual_entry = None
        self._office_id = None
        self._office_name = None
        self._office_running_balance = None
        self._organization_running_balance = None
        self._reference_number = None
        self._reversed = None
        self._running_balance_computed = None
        self._submitted_on_date = None
        self._transaction_date = None
        self._transaction_details = None
        self._transaction_id = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if comments is not None:
            self.comments = comments
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if created_by_user_name is not None:
            self.created_by_user_name = created_by_user_name
        if created_date is not None:
            self.created_date = created_date
        if currency is not None:
            self.currency = currency
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_type is not None:
            self.entity_type = entity_type
        if entry_type is not None:
            self.entry_type = entry_type
        if gl_account_code is not None:
            self.gl_account_code = gl_account_code
        if gl_account_id is not None:
            self.gl_account_id = gl_account_id
        if gl_account_name is not None:
            self.gl_account_name = gl_account_name
        if gl_account_type is not None:
            self.gl_account_type = gl_account_type
        if id is not None:
            self.id = id
        if manual_entry is not None:
            self.manual_entry = manual_entry
        if office_id is not None:
            self.office_id = office_id
        if office_name is not None:
            self.office_name = office_name
        if office_running_balance is not None:
            self.office_running_balance = office_running_balance
        if organization_running_balance is not None:
            self.organization_running_balance = organization_running_balance
        if reference_number is not None:
            self.reference_number = reference_number
        if reversed is not None:
            self.reversed = reversed
        if running_balance_computed is not None:
            self.running_balance_computed = running_balance_computed
        if submitted_on_date is not None:
            self.submitted_on_date = submitted_on_date
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if transaction_details is not None:
            self.transaction_details = transaction_details
        if transaction_id is not None:
            self.transaction_id = transaction_id

    @property
    def amount(self):
        """Gets the amount of this JournalEntryTransactionItem.  # noqa: E501


        :return: The amount of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this JournalEntryTransactionItem.


        :param amount: The amount of this JournalEntryTransactionItem.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def comments(self):
        """Gets the comments of this JournalEntryTransactionItem.  # noqa: E501


        :return: The comments of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this JournalEntryTransactionItem.


        :param comments: The comments of this JournalEntryTransactionItem.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this JournalEntryTransactionItem.  # noqa: E501


        :return: The created_by_user_id of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this JournalEntryTransactionItem.


        :param created_by_user_id: The created_by_user_id of this JournalEntryTransactionItem.  # noqa: E501
        :type: int
        """

        self._created_by_user_id = created_by_user_id

    @property
    def created_by_user_name(self):
        """Gets the created_by_user_name of this JournalEntryTransactionItem.  # noqa: E501


        :return: The created_by_user_name of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_name

    @created_by_user_name.setter
    def created_by_user_name(self, created_by_user_name):
        """Sets the created_by_user_name of this JournalEntryTransactionItem.


        :param created_by_user_name: The created_by_user_name of this JournalEntryTransactionItem.  # noqa: E501
        :type: str
        """

        self._created_by_user_name = created_by_user_name

    @property
    def created_date(self):
        """Gets the created_date of this JournalEntryTransactionItem.  # noqa: E501


        :return: The created_date of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: date
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this JournalEntryTransactionItem.


        :param created_date: The created_date of this JournalEntryTransactionItem.  # noqa: E501
        :type: date
        """

        self._created_date = created_date

    @property
    def currency(self):
        """Gets the currency of this JournalEntryTransactionItem.  # noqa: E501


        :return: The currency of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: CurrencyItem
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this JournalEntryTransactionItem.


        :param currency: The currency of this JournalEntryTransactionItem.  # noqa: E501
        :type: CurrencyItem
        """

        self._currency = currency

    @property
    def entity_id(self):
        """Gets the entity_id of this JournalEntryTransactionItem.  # noqa: E501


        :return: The entity_id of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this JournalEntryTransactionItem.


        :param entity_id: The entity_id of this JournalEntryTransactionItem.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this JournalEntryTransactionItem.  # noqa: E501


        :return: The entity_type of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: EnumOptionType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this JournalEntryTransactionItem.


        :param entity_type: The entity_type of this JournalEntryTransactionItem.  # noqa: E501
        :type: EnumOptionType
        """

        self._entity_type = entity_type

    @property
    def entry_type(self):
        """Gets the entry_type of this JournalEntryTransactionItem.  # noqa: E501


        :return: The entry_type of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: EnumOptionType
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this JournalEntryTransactionItem.


        :param entry_type: The entry_type of this JournalEntryTransactionItem.  # noqa: E501
        :type: EnumOptionType
        """

        self._entry_type = entry_type

    @property
    def gl_account_code(self):
        """Gets the gl_account_code of this JournalEntryTransactionItem.  # noqa: E501


        :return: The gl_account_code of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._gl_account_code

    @gl_account_code.setter
    def gl_account_code(self, gl_account_code):
        """Sets the gl_account_code of this JournalEntryTransactionItem.


        :param gl_account_code: The gl_account_code of this JournalEntryTransactionItem.  # noqa: E501
        :type: str
        """

        self._gl_account_code = gl_account_code

    @property
    def gl_account_id(self):
        """Gets the gl_account_id of this JournalEntryTransactionItem.  # noqa: E501


        :return: The gl_account_id of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._gl_account_id

    @gl_account_id.setter
    def gl_account_id(self, gl_account_id):
        """Sets the gl_account_id of this JournalEntryTransactionItem.


        :param gl_account_id: The gl_account_id of this JournalEntryTransactionItem.  # noqa: E501
        :type: int
        """

        self._gl_account_id = gl_account_id

    @property
    def gl_account_name(self):
        """Gets the gl_account_name of this JournalEntryTransactionItem.  # noqa: E501


        :return: The gl_account_name of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._gl_account_name

    @gl_account_name.setter
    def gl_account_name(self, gl_account_name):
        """Sets the gl_account_name of this JournalEntryTransactionItem.


        :param gl_account_name: The gl_account_name of this JournalEntryTransactionItem.  # noqa: E501
        :type: str
        """

        self._gl_account_name = gl_account_name

    @property
    def gl_account_type(self):
        """Gets the gl_account_type of this JournalEntryTransactionItem.  # noqa: E501


        :return: The gl_account_type of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: EnumOptionType
        """
        return self._gl_account_type

    @gl_account_type.setter
    def gl_account_type(self, gl_account_type):
        """Sets the gl_account_type of this JournalEntryTransactionItem.


        :param gl_account_type: The gl_account_type of this JournalEntryTransactionItem.  # noqa: E501
        :type: EnumOptionType
        """

        self._gl_account_type = gl_account_type

    @property
    def id(self):
        """Gets the id of this JournalEntryTransactionItem.  # noqa: E501


        :return: The id of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JournalEntryTransactionItem.


        :param id: The id of this JournalEntryTransactionItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def manual_entry(self):
        """Gets the manual_entry of this JournalEntryTransactionItem.  # noqa: E501


        :return: The manual_entry of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: bool
        """
        return self._manual_entry

    @manual_entry.setter
    def manual_entry(self, manual_entry):
        """Sets the manual_entry of this JournalEntryTransactionItem.


        :param manual_entry: The manual_entry of this JournalEntryTransactionItem.  # noqa: E501
        :type: bool
        """

        self._manual_entry = manual_entry

    @property
    def office_id(self):
        """Gets the office_id of this JournalEntryTransactionItem.  # noqa: E501


        :return: The office_id of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this JournalEntryTransactionItem.


        :param office_id: The office_id of this JournalEntryTransactionItem.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def office_name(self):
        """Gets the office_name of this JournalEntryTransactionItem.  # noqa: E501


        :return: The office_name of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._office_name

    @office_name.setter
    def office_name(self, office_name):
        """Sets the office_name of this JournalEntryTransactionItem.


        :param office_name: The office_name of this JournalEntryTransactionItem.  # noqa: E501
        :type: str
        """

        self._office_name = office_name

    @property
    def office_running_balance(self):
        """Gets the office_running_balance of this JournalEntryTransactionItem.  # noqa: E501


        :return: The office_running_balance of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: float
        """
        return self._office_running_balance

    @office_running_balance.setter
    def office_running_balance(self, office_running_balance):
        """Sets the office_running_balance of this JournalEntryTransactionItem.


        :param office_running_balance: The office_running_balance of this JournalEntryTransactionItem.  # noqa: E501
        :type: float
        """

        self._office_running_balance = office_running_balance

    @property
    def organization_running_balance(self):
        """Gets the organization_running_balance of this JournalEntryTransactionItem.  # noqa: E501


        :return: The organization_running_balance of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: float
        """
        return self._organization_running_balance

    @organization_running_balance.setter
    def organization_running_balance(self, organization_running_balance):
        """Sets the organization_running_balance of this JournalEntryTransactionItem.


        :param organization_running_balance: The organization_running_balance of this JournalEntryTransactionItem.  # noqa: E501
        :type: float
        """

        self._organization_running_balance = organization_running_balance

    @property
    def reference_number(self):
        """Gets the reference_number of this JournalEntryTransactionItem.  # noqa: E501


        :return: The reference_number of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this JournalEntryTransactionItem.


        :param reference_number: The reference_number of this JournalEntryTransactionItem.  # noqa: E501
        :type: str
        """

        self._reference_number = reference_number

    @property
    def reversed(self):
        """Gets the reversed of this JournalEntryTransactionItem.  # noqa: E501


        :return: The reversed of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: bool
        """
        return self._reversed

    @reversed.setter
    def reversed(self, reversed):
        """Sets the reversed of this JournalEntryTransactionItem.


        :param reversed: The reversed of this JournalEntryTransactionItem.  # noqa: E501
        :type: bool
        """

        self._reversed = reversed

    @property
    def running_balance_computed(self):
        """Gets the running_balance_computed of this JournalEntryTransactionItem.  # noqa: E501


        :return: The running_balance_computed of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: bool
        """
        return self._running_balance_computed

    @running_balance_computed.setter
    def running_balance_computed(self, running_balance_computed):
        """Sets the running_balance_computed of this JournalEntryTransactionItem.


        :param running_balance_computed: The running_balance_computed of this JournalEntryTransactionItem.  # noqa: E501
        :type: bool
        """

        self._running_balance_computed = running_balance_computed

    @property
    def submitted_on_date(self):
        """Gets the submitted_on_date of this JournalEntryTransactionItem.  # noqa: E501


        :return: The submitted_on_date of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: date
        """
        return self._submitted_on_date

    @submitted_on_date.setter
    def submitted_on_date(self, submitted_on_date):
        """Sets the submitted_on_date of this JournalEntryTransactionItem.


        :param submitted_on_date: The submitted_on_date of this JournalEntryTransactionItem.  # noqa: E501
        :type: date
        """

        self._submitted_on_date = submitted_on_date

    @property
    def transaction_date(self):
        """Gets the transaction_date of this JournalEntryTransactionItem.  # noqa: E501


        :return: The transaction_date of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: date
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this JournalEntryTransactionItem.


        :param transaction_date: The transaction_date of this JournalEntryTransactionItem.  # noqa: E501
        :type: date
        """

        self._transaction_date = transaction_date

    @property
    def transaction_details(self):
        """Gets the transaction_details of this JournalEntryTransactionItem.  # noqa: E501


        :return: The transaction_details of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: TransactionDetails
        """
        return self._transaction_details

    @transaction_details.setter
    def transaction_details(self, transaction_details):
        """Sets the transaction_details of this JournalEntryTransactionItem.


        :param transaction_details: The transaction_details of this JournalEntryTransactionItem.  # noqa: E501
        :type: TransactionDetails
        """

        self._transaction_details = transaction_details

    @property
    def transaction_id(self):
        """Gets the transaction_id of this JournalEntryTransactionItem.  # noqa: E501


        :return: The transaction_id of this JournalEntryTransactionItem.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this JournalEntryTransactionItem.


        :param transaction_id: The transaction_id of this JournalEntryTransactionItem.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JournalEntryTransactionItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JournalEntryTransactionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
