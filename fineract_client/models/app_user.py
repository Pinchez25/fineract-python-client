# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_non_expired': 'bool',
        'account_non_locked': 'bool',
        'app_user_client_mappings': 'list[AppUserClientMapping]',
        'authorities': 'list[GrantedAuthority]',
        'bypass_user': 'bool',
        'checker_super_user': 'bool',
        'credentials_non_expired': 'bool',
        'deleted': 'bool',
        'display_name': 'str',
        'email': 'str',
        'enabled': 'bool',
        'firstname': 'str',
        'id': 'int',
        'last_time_password_updated': 'date',
        'lastname': 'str',
        'new': 'bool',
        'not_enabled': 'bool',
        'office': 'Office',
        'password': 'str',
        'password_never_expires': 'bool',
        'roles': 'list[Role]',
        'self_service_user': 'bool',
        'staff': 'Staff',
        'staff_display_name': 'str',
        'staff_id': 'int',
        'system_user': 'bool',
        'username': 'str'
    }

    attribute_map = {
        'account_non_expired': 'accountNonExpired',
        'account_non_locked': 'accountNonLocked',
        'app_user_client_mappings': 'appUserClientMappings',
        'authorities': 'authorities',
        'bypass_user': 'bypassUser',
        'checker_super_user': 'checkerSuperUser',
        'credentials_non_expired': 'credentialsNonExpired',
        'deleted': 'deleted',
        'display_name': 'displayName',
        'email': 'email',
        'enabled': 'enabled',
        'firstname': 'firstname',
        'id': 'id',
        'last_time_password_updated': 'lastTimePasswordUpdated',
        'lastname': 'lastname',
        'new': 'new',
        'not_enabled': 'notEnabled',
        'office': 'office',
        'password': 'password',
        'password_never_expires': 'passwordNeverExpires',
        'roles': 'roles',
        'self_service_user': 'selfServiceUser',
        'staff': 'staff',
        'staff_display_name': 'staffDisplayName',
        'staff_id': 'staffId',
        'system_user': 'systemUser',
        'username': 'username'
    }

    def __init__(self, account_non_expired=None, account_non_locked=None, app_user_client_mappings=None, authorities=None, bypass_user=None, checker_super_user=None, credentials_non_expired=None, deleted=None, display_name=None, email=None, enabled=None, firstname=None, id=None, last_time_password_updated=None, lastname=None, new=None, not_enabled=None, office=None, password=None, password_never_expires=None, roles=None, self_service_user=None, staff=None, staff_display_name=None, staff_id=None, system_user=None, username=None):  # noqa: E501
        """AppUser - a model defined in Swagger"""  # noqa: E501
        self._account_non_expired = None
        self._account_non_locked = None
        self._app_user_client_mappings = None
        self._authorities = None
        self._bypass_user = None
        self._checker_super_user = None
        self._credentials_non_expired = None
        self._deleted = None
        self._display_name = None
        self._email = None
        self._enabled = None
        self._firstname = None
        self._id = None
        self._last_time_password_updated = None
        self._lastname = None
        self._new = None
        self._not_enabled = None
        self._office = None
        self._password = None
        self._password_never_expires = None
        self._roles = None
        self._self_service_user = None
        self._staff = None
        self._staff_display_name = None
        self._staff_id = None
        self._system_user = None
        self._username = None
        self.discriminator = None
        if account_non_expired is not None:
            self.account_non_expired = account_non_expired
        if account_non_locked is not None:
            self.account_non_locked = account_non_locked
        if app_user_client_mappings is not None:
            self.app_user_client_mappings = app_user_client_mappings
        if authorities is not None:
            self.authorities = authorities
        if bypass_user is not None:
            self.bypass_user = bypass_user
        if checker_super_user is not None:
            self.checker_super_user = checker_super_user
        if credentials_non_expired is not None:
            self.credentials_non_expired = credentials_non_expired
        if deleted is not None:
            self.deleted = deleted
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if enabled is not None:
            self.enabled = enabled
        if firstname is not None:
            self.firstname = firstname
        if id is not None:
            self.id = id
        if last_time_password_updated is not None:
            self.last_time_password_updated = last_time_password_updated
        if lastname is not None:
            self.lastname = lastname
        if new is not None:
            self.new = new
        if not_enabled is not None:
            self.not_enabled = not_enabled
        if office is not None:
            self.office = office
        if password is not None:
            self.password = password
        if password_never_expires is not None:
            self.password_never_expires = password_never_expires
        if roles is not None:
            self.roles = roles
        if self_service_user is not None:
            self.self_service_user = self_service_user
        if staff is not None:
            self.staff = staff
        if staff_display_name is not None:
            self.staff_display_name = staff_display_name
        if staff_id is not None:
            self.staff_id = staff_id
        if system_user is not None:
            self.system_user = system_user
        if username is not None:
            self.username = username

    @property
    def account_non_expired(self):
        """Gets the account_non_expired of this AppUser.  # noqa: E501


        :return: The account_non_expired of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._account_non_expired

    @account_non_expired.setter
    def account_non_expired(self, account_non_expired):
        """Sets the account_non_expired of this AppUser.


        :param account_non_expired: The account_non_expired of this AppUser.  # noqa: E501
        :type: bool
        """

        self._account_non_expired = account_non_expired

    @property
    def account_non_locked(self):
        """Gets the account_non_locked of this AppUser.  # noqa: E501


        :return: The account_non_locked of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._account_non_locked

    @account_non_locked.setter
    def account_non_locked(self, account_non_locked):
        """Sets the account_non_locked of this AppUser.


        :param account_non_locked: The account_non_locked of this AppUser.  # noqa: E501
        :type: bool
        """

        self._account_non_locked = account_non_locked

    @property
    def app_user_client_mappings(self):
        """Gets the app_user_client_mappings of this AppUser.  # noqa: E501


        :return: The app_user_client_mappings of this AppUser.  # noqa: E501
        :rtype: list[AppUserClientMapping]
        """
        return self._app_user_client_mappings

    @app_user_client_mappings.setter
    def app_user_client_mappings(self, app_user_client_mappings):
        """Sets the app_user_client_mappings of this AppUser.


        :param app_user_client_mappings: The app_user_client_mappings of this AppUser.  # noqa: E501
        :type: list[AppUserClientMapping]
        """

        self._app_user_client_mappings = app_user_client_mappings

    @property
    def authorities(self):
        """Gets the authorities of this AppUser.  # noqa: E501


        :return: The authorities of this AppUser.  # noqa: E501
        :rtype: list[GrantedAuthority]
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities):
        """Sets the authorities of this AppUser.


        :param authorities: The authorities of this AppUser.  # noqa: E501
        :type: list[GrantedAuthority]
        """

        self._authorities = authorities

    @property
    def bypass_user(self):
        """Gets the bypass_user of this AppUser.  # noqa: E501


        :return: The bypass_user of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._bypass_user

    @bypass_user.setter
    def bypass_user(self, bypass_user):
        """Sets the bypass_user of this AppUser.


        :param bypass_user: The bypass_user of this AppUser.  # noqa: E501
        :type: bool
        """

        self._bypass_user = bypass_user

    @property
    def checker_super_user(self):
        """Gets the checker_super_user of this AppUser.  # noqa: E501


        :return: The checker_super_user of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._checker_super_user

    @checker_super_user.setter
    def checker_super_user(self, checker_super_user):
        """Sets the checker_super_user of this AppUser.


        :param checker_super_user: The checker_super_user of this AppUser.  # noqa: E501
        :type: bool
        """

        self._checker_super_user = checker_super_user

    @property
    def credentials_non_expired(self):
        """Gets the credentials_non_expired of this AppUser.  # noqa: E501


        :return: The credentials_non_expired of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._credentials_non_expired

    @credentials_non_expired.setter
    def credentials_non_expired(self, credentials_non_expired):
        """Sets the credentials_non_expired of this AppUser.


        :param credentials_non_expired: The credentials_non_expired of this AppUser.  # noqa: E501
        :type: bool
        """

        self._credentials_non_expired = credentials_non_expired

    @property
    def deleted(self):
        """Gets the deleted of this AppUser.  # noqa: E501


        :return: The deleted of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AppUser.


        :param deleted: The deleted of this AppUser.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def display_name(self):
        """Gets the display_name of this AppUser.  # noqa: E501


        :return: The display_name of this AppUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppUser.


        :param display_name: The display_name of this AppUser.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this AppUser.  # noqa: E501


        :return: The email of this AppUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AppUser.


        :param email: The email of this AppUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def enabled(self):
        """Gets the enabled of this AppUser.  # noqa: E501


        :return: The enabled of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AppUser.


        :param enabled: The enabled of this AppUser.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def firstname(self):
        """Gets the firstname of this AppUser.  # noqa: E501


        :return: The firstname of this AppUser.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this AppUser.


        :param firstname: The firstname of this AppUser.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def id(self):
        """Gets the id of this AppUser.  # noqa: E501


        :return: The id of this AppUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppUser.


        :param id: The id of this AppUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_time_password_updated(self):
        """Gets the last_time_password_updated of this AppUser.  # noqa: E501


        :return: The last_time_password_updated of this AppUser.  # noqa: E501
        :rtype: date
        """
        return self._last_time_password_updated

    @last_time_password_updated.setter
    def last_time_password_updated(self, last_time_password_updated):
        """Sets the last_time_password_updated of this AppUser.


        :param last_time_password_updated: The last_time_password_updated of this AppUser.  # noqa: E501
        :type: date
        """

        self._last_time_password_updated = last_time_password_updated

    @property
    def lastname(self):
        """Gets the lastname of this AppUser.  # noqa: E501


        :return: The lastname of this AppUser.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this AppUser.


        :param lastname: The lastname of this AppUser.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def new(self):
        """Gets the new of this AppUser.  # noqa: E501


        :return: The new of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this AppUser.


        :param new: The new of this AppUser.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def not_enabled(self):
        """Gets the not_enabled of this AppUser.  # noqa: E501


        :return: The not_enabled of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._not_enabled

    @not_enabled.setter
    def not_enabled(self, not_enabled):
        """Sets the not_enabled of this AppUser.


        :param not_enabled: The not_enabled of this AppUser.  # noqa: E501
        :type: bool
        """

        self._not_enabled = not_enabled

    @property
    def office(self):
        """Gets the office of this AppUser.  # noqa: E501


        :return: The office of this AppUser.  # noqa: E501
        :rtype: Office
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this AppUser.


        :param office: The office of this AppUser.  # noqa: E501
        :type: Office
        """

        self._office = office

    @property
    def password(self):
        """Gets the password of this AppUser.  # noqa: E501


        :return: The password of this AppUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AppUser.


        :param password: The password of this AppUser.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def password_never_expires(self):
        """Gets the password_never_expires of this AppUser.  # noqa: E501


        :return: The password_never_expires of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._password_never_expires

    @password_never_expires.setter
    def password_never_expires(self, password_never_expires):
        """Sets the password_never_expires of this AppUser.


        :param password_never_expires: The password_never_expires of this AppUser.  # noqa: E501
        :type: bool
        """

        self._password_never_expires = password_never_expires

    @property
    def roles(self):
        """Gets the roles of this AppUser.  # noqa: E501


        :return: The roles of this AppUser.  # noqa: E501
        :rtype: list[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this AppUser.


        :param roles: The roles of this AppUser.  # noqa: E501
        :type: list[Role]
        """

        self._roles = roles

    @property
    def self_service_user(self):
        """Gets the self_service_user of this AppUser.  # noqa: E501


        :return: The self_service_user of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._self_service_user

    @self_service_user.setter
    def self_service_user(self, self_service_user):
        """Sets the self_service_user of this AppUser.


        :param self_service_user: The self_service_user of this AppUser.  # noqa: E501
        :type: bool
        """

        self._self_service_user = self_service_user

    @property
    def staff(self):
        """Gets the staff of this AppUser.  # noqa: E501


        :return: The staff of this AppUser.  # noqa: E501
        :rtype: Staff
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this AppUser.


        :param staff: The staff of this AppUser.  # noqa: E501
        :type: Staff
        """

        self._staff = staff

    @property
    def staff_display_name(self):
        """Gets the staff_display_name of this AppUser.  # noqa: E501


        :return: The staff_display_name of this AppUser.  # noqa: E501
        :rtype: str
        """
        return self._staff_display_name

    @staff_display_name.setter
    def staff_display_name(self, staff_display_name):
        """Sets the staff_display_name of this AppUser.


        :param staff_display_name: The staff_display_name of this AppUser.  # noqa: E501
        :type: str
        """

        self._staff_display_name = staff_display_name

    @property
    def staff_id(self):
        """Gets the staff_id of this AppUser.  # noqa: E501


        :return: The staff_id of this AppUser.  # noqa: E501
        :rtype: int
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this AppUser.


        :param staff_id: The staff_id of this AppUser.  # noqa: E501
        :type: int
        """

        self._staff_id = staff_id

    @property
    def system_user(self):
        """Gets the system_user of this AppUser.  # noqa: E501


        :return: The system_user of this AppUser.  # noqa: E501
        :rtype: bool
        """
        return self._system_user

    @system_user.setter
    def system_user(self, system_user):
        """Sets the system_user of this AppUser.


        :param system_user: The system_user of this AppUser.  # noqa: E501
        :type: bool
        """

        self._system_user = system_user

    @property
    def username(self):
        """Gets the username of this AppUser.  # noqa: E501


        :return: The username of this AppUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AppUser.


        :param username: The username of this AppUser.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
