# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanProductRelatedDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_partial_period_interest_calcualtion': 'bool',
        'amortization_method': 'str',
        'annual_nominal_interest_rate': 'float',
        'currency': 'MonetaryCurrency',
        'days_in_month_type': 'int',
        'days_in_year_type': 'int',
        'disbursed_amount_percentage_for_down_payment': 'float',
        'enable_accrual_activity_posting': 'bool',
        'enable_auto_repayment_for_down_payment': 'bool',
        'enable_down_payment': 'bool',
        'equal_amortization': 'bool',
        'fixed_length': 'int',
        'grace_on_arrears_ageing': 'int',
        'grace_on_interest_charged': 'int',
        'grace_on_interest_payment': 'int',
        'grace_on_principal_payment': 'int',
        'in_arrears_tolerance': 'Money',
        'interest_calculation_period_method': 'str',
        'interest_method': 'str',
        'interest_period_frequency_type': 'str',
        'interest_recalculation_enabled': 'bool',
        'loan_schedule_processing_type': 'str',
        'loan_schedule_type': 'str',
        'nominal_interest_rate_per_period': 'float',
        'number_of_repayments': 'int',
        'principal': 'Money',
        'recurring_moratorium_on_principal_periods': 'int',
        'repay_every': 'int',
        'repayment_period_frequency_type': 'str',
        'supported_interest_refund_types': 'list[str]'
    }

    attribute_map = {
        'allow_partial_period_interest_calcualtion': 'allowPartialPeriodInterestCalcualtion',
        'amortization_method': 'amortizationMethod',
        'annual_nominal_interest_rate': 'annualNominalInterestRate',
        'currency': 'currency',
        'days_in_month_type': 'daysInMonthType',
        'days_in_year_type': 'daysInYearType',
        'disbursed_amount_percentage_for_down_payment': 'disbursedAmountPercentageForDownPayment',
        'enable_accrual_activity_posting': 'enableAccrualActivityPosting',
        'enable_auto_repayment_for_down_payment': 'enableAutoRepaymentForDownPayment',
        'enable_down_payment': 'enableDownPayment',
        'equal_amortization': 'equalAmortization',
        'fixed_length': 'fixedLength',
        'grace_on_arrears_ageing': 'graceOnArrearsAgeing',
        'grace_on_interest_charged': 'graceOnInterestCharged',
        'grace_on_interest_payment': 'graceOnInterestPayment',
        'grace_on_principal_payment': 'graceOnPrincipalPayment',
        'in_arrears_tolerance': 'inArrearsTolerance',
        'interest_calculation_period_method': 'interestCalculationPeriodMethod',
        'interest_method': 'interestMethod',
        'interest_period_frequency_type': 'interestPeriodFrequencyType',
        'interest_recalculation_enabled': 'interestRecalculationEnabled',
        'loan_schedule_processing_type': 'loanScheduleProcessingType',
        'loan_schedule_type': 'loanScheduleType',
        'nominal_interest_rate_per_period': 'nominalInterestRatePerPeriod',
        'number_of_repayments': 'numberOfRepayments',
        'principal': 'principal',
        'recurring_moratorium_on_principal_periods': 'recurringMoratoriumOnPrincipalPeriods',
        'repay_every': 'repayEvery',
        'repayment_period_frequency_type': 'repaymentPeriodFrequencyType',
        'supported_interest_refund_types': 'supportedInterestRefundTypes'
    }

    def __init__(self, allow_partial_period_interest_calcualtion=None, amortization_method=None, annual_nominal_interest_rate=None, currency=None, days_in_month_type=None, days_in_year_type=None, disbursed_amount_percentage_for_down_payment=None, enable_accrual_activity_posting=None, enable_auto_repayment_for_down_payment=None, enable_down_payment=None, equal_amortization=None, fixed_length=None, grace_on_arrears_ageing=None, grace_on_interest_charged=None, grace_on_interest_payment=None, grace_on_principal_payment=None, in_arrears_tolerance=None, interest_calculation_period_method=None, interest_method=None, interest_period_frequency_type=None, interest_recalculation_enabled=None, loan_schedule_processing_type=None, loan_schedule_type=None, nominal_interest_rate_per_period=None, number_of_repayments=None, principal=None, recurring_moratorium_on_principal_periods=None, repay_every=None, repayment_period_frequency_type=None, supported_interest_refund_types=None):  # noqa: E501
        """LoanProductRelatedDetail - a model defined in Swagger"""  # noqa: E501
        self._allow_partial_period_interest_calcualtion = None
        self._amortization_method = None
        self._annual_nominal_interest_rate = None
        self._currency = None
        self._days_in_month_type = None
        self._days_in_year_type = None
        self._disbursed_amount_percentage_for_down_payment = None
        self._enable_accrual_activity_posting = None
        self._enable_auto_repayment_for_down_payment = None
        self._enable_down_payment = None
        self._equal_amortization = None
        self._fixed_length = None
        self._grace_on_arrears_ageing = None
        self._grace_on_interest_charged = None
        self._grace_on_interest_payment = None
        self._grace_on_principal_payment = None
        self._in_arrears_tolerance = None
        self._interest_calculation_period_method = None
        self._interest_method = None
        self._interest_period_frequency_type = None
        self._interest_recalculation_enabled = None
        self._loan_schedule_processing_type = None
        self._loan_schedule_type = None
        self._nominal_interest_rate_per_period = None
        self._number_of_repayments = None
        self._principal = None
        self._recurring_moratorium_on_principal_periods = None
        self._repay_every = None
        self._repayment_period_frequency_type = None
        self._supported_interest_refund_types = None
        self.discriminator = None
        if allow_partial_period_interest_calcualtion is not None:
            self.allow_partial_period_interest_calcualtion = allow_partial_period_interest_calcualtion
        if amortization_method is not None:
            self.amortization_method = amortization_method
        if annual_nominal_interest_rate is not None:
            self.annual_nominal_interest_rate = annual_nominal_interest_rate
        if currency is not None:
            self.currency = currency
        if days_in_month_type is not None:
            self.days_in_month_type = days_in_month_type
        if days_in_year_type is not None:
            self.days_in_year_type = days_in_year_type
        if disbursed_amount_percentage_for_down_payment is not None:
            self.disbursed_amount_percentage_for_down_payment = disbursed_amount_percentage_for_down_payment
        if enable_accrual_activity_posting is not None:
            self.enable_accrual_activity_posting = enable_accrual_activity_posting
        if enable_auto_repayment_for_down_payment is not None:
            self.enable_auto_repayment_for_down_payment = enable_auto_repayment_for_down_payment
        if enable_down_payment is not None:
            self.enable_down_payment = enable_down_payment
        if equal_amortization is not None:
            self.equal_amortization = equal_amortization
        if fixed_length is not None:
            self.fixed_length = fixed_length
        if grace_on_arrears_ageing is not None:
            self.grace_on_arrears_ageing = grace_on_arrears_ageing
        if grace_on_interest_charged is not None:
            self.grace_on_interest_charged = grace_on_interest_charged
        if grace_on_interest_payment is not None:
            self.grace_on_interest_payment = grace_on_interest_payment
        if grace_on_principal_payment is not None:
            self.grace_on_principal_payment = grace_on_principal_payment
        if in_arrears_tolerance is not None:
            self.in_arrears_tolerance = in_arrears_tolerance
        if interest_calculation_period_method is not None:
            self.interest_calculation_period_method = interest_calculation_period_method
        if interest_method is not None:
            self.interest_method = interest_method
        if interest_period_frequency_type is not None:
            self.interest_period_frequency_type = interest_period_frequency_type
        if interest_recalculation_enabled is not None:
            self.interest_recalculation_enabled = interest_recalculation_enabled
        if loan_schedule_processing_type is not None:
            self.loan_schedule_processing_type = loan_schedule_processing_type
        if loan_schedule_type is not None:
            self.loan_schedule_type = loan_schedule_type
        if nominal_interest_rate_per_period is not None:
            self.nominal_interest_rate_per_period = nominal_interest_rate_per_period
        if number_of_repayments is not None:
            self.number_of_repayments = number_of_repayments
        if principal is not None:
            self.principal = principal
        if recurring_moratorium_on_principal_periods is not None:
            self.recurring_moratorium_on_principal_periods = recurring_moratorium_on_principal_periods
        if repay_every is not None:
            self.repay_every = repay_every
        if repayment_period_frequency_type is not None:
            self.repayment_period_frequency_type = repayment_period_frequency_type
        if supported_interest_refund_types is not None:
            self.supported_interest_refund_types = supported_interest_refund_types

    @property
    def allow_partial_period_interest_calcualtion(self):
        """Gets the allow_partial_period_interest_calcualtion of this LoanProductRelatedDetail.  # noqa: E501


        :return: The allow_partial_period_interest_calcualtion of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: bool
        """
        return self._allow_partial_period_interest_calcualtion

    @allow_partial_period_interest_calcualtion.setter
    def allow_partial_period_interest_calcualtion(self, allow_partial_period_interest_calcualtion):
        """Sets the allow_partial_period_interest_calcualtion of this LoanProductRelatedDetail.


        :param allow_partial_period_interest_calcualtion: The allow_partial_period_interest_calcualtion of this LoanProductRelatedDetail.  # noqa: E501
        :type: bool
        """

        self._allow_partial_period_interest_calcualtion = allow_partial_period_interest_calcualtion

    @property
    def amortization_method(self):
        """Gets the amortization_method of this LoanProductRelatedDetail.  # noqa: E501


        :return: The amortization_method of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: str
        """
        return self._amortization_method

    @amortization_method.setter
    def amortization_method(self, amortization_method):
        """Sets the amortization_method of this LoanProductRelatedDetail.


        :param amortization_method: The amortization_method of this LoanProductRelatedDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["EQUAL_PRINCIPAL", "EQUAL_INSTALLMENTS", "INVALID"]  # noqa: E501
        if amortization_method not in allowed_values:
            raise ValueError(
                "Invalid value for `amortization_method` ({0}), must be one of {1}"  # noqa: E501
                .format(amortization_method, allowed_values)
            )

        self._amortization_method = amortization_method

    @property
    def annual_nominal_interest_rate(self):
        """Gets the annual_nominal_interest_rate of this LoanProductRelatedDetail.  # noqa: E501


        :return: The annual_nominal_interest_rate of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: float
        """
        return self._annual_nominal_interest_rate

    @annual_nominal_interest_rate.setter
    def annual_nominal_interest_rate(self, annual_nominal_interest_rate):
        """Sets the annual_nominal_interest_rate of this LoanProductRelatedDetail.


        :param annual_nominal_interest_rate: The annual_nominal_interest_rate of this LoanProductRelatedDetail.  # noqa: E501
        :type: float
        """

        self._annual_nominal_interest_rate = annual_nominal_interest_rate

    @property
    def currency(self):
        """Gets the currency of this LoanProductRelatedDetail.  # noqa: E501


        :return: The currency of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: MonetaryCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LoanProductRelatedDetail.


        :param currency: The currency of this LoanProductRelatedDetail.  # noqa: E501
        :type: MonetaryCurrency
        """

        self._currency = currency

    @property
    def days_in_month_type(self):
        """Gets the days_in_month_type of this LoanProductRelatedDetail.  # noqa: E501


        :return: The days_in_month_type of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: int
        """
        return self._days_in_month_type

    @days_in_month_type.setter
    def days_in_month_type(self, days_in_month_type):
        """Sets the days_in_month_type of this LoanProductRelatedDetail.


        :param days_in_month_type: The days_in_month_type of this LoanProductRelatedDetail.  # noqa: E501
        :type: int
        """

        self._days_in_month_type = days_in_month_type

    @property
    def days_in_year_type(self):
        """Gets the days_in_year_type of this LoanProductRelatedDetail.  # noqa: E501


        :return: The days_in_year_type of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: int
        """
        return self._days_in_year_type

    @days_in_year_type.setter
    def days_in_year_type(self, days_in_year_type):
        """Sets the days_in_year_type of this LoanProductRelatedDetail.


        :param days_in_year_type: The days_in_year_type of this LoanProductRelatedDetail.  # noqa: E501
        :type: int
        """

        self._days_in_year_type = days_in_year_type

    @property
    def disbursed_amount_percentage_for_down_payment(self):
        """Gets the disbursed_amount_percentage_for_down_payment of this LoanProductRelatedDetail.  # noqa: E501


        :return: The disbursed_amount_percentage_for_down_payment of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: float
        """
        return self._disbursed_amount_percentage_for_down_payment

    @disbursed_amount_percentage_for_down_payment.setter
    def disbursed_amount_percentage_for_down_payment(self, disbursed_amount_percentage_for_down_payment):
        """Sets the disbursed_amount_percentage_for_down_payment of this LoanProductRelatedDetail.


        :param disbursed_amount_percentage_for_down_payment: The disbursed_amount_percentage_for_down_payment of this LoanProductRelatedDetail.  # noqa: E501
        :type: float
        """

        self._disbursed_amount_percentage_for_down_payment = disbursed_amount_percentage_for_down_payment

    @property
    def enable_accrual_activity_posting(self):
        """Gets the enable_accrual_activity_posting of this LoanProductRelatedDetail.  # noqa: E501


        :return: The enable_accrual_activity_posting of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: bool
        """
        return self._enable_accrual_activity_posting

    @enable_accrual_activity_posting.setter
    def enable_accrual_activity_posting(self, enable_accrual_activity_posting):
        """Sets the enable_accrual_activity_posting of this LoanProductRelatedDetail.


        :param enable_accrual_activity_posting: The enable_accrual_activity_posting of this LoanProductRelatedDetail.  # noqa: E501
        :type: bool
        """

        self._enable_accrual_activity_posting = enable_accrual_activity_posting

    @property
    def enable_auto_repayment_for_down_payment(self):
        """Gets the enable_auto_repayment_for_down_payment of this LoanProductRelatedDetail.  # noqa: E501


        :return: The enable_auto_repayment_for_down_payment of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auto_repayment_for_down_payment

    @enable_auto_repayment_for_down_payment.setter
    def enable_auto_repayment_for_down_payment(self, enable_auto_repayment_for_down_payment):
        """Sets the enable_auto_repayment_for_down_payment of this LoanProductRelatedDetail.


        :param enable_auto_repayment_for_down_payment: The enable_auto_repayment_for_down_payment of this LoanProductRelatedDetail.  # noqa: E501
        :type: bool
        """

        self._enable_auto_repayment_for_down_payment = enable_auto_repayment_for_down_payment

    @property
    def enable_down_payment(self):
        """Gets the enable_down_payment of this LoanProductRelatedDetail.  # noqa: E501


        :return: The enable_down_payment of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: bool
        """
        return self._enable_down_payment

    @enable_down_payment.setter
    def enable_down_payment(self, enable_down_payment):
        """Sets the enable_down_payment of this LoanProductRelatedDetail.


        :param enable_down_payment: The enable_down_payment of this LoanProductRelatedDetail.  # noqa: E501
        :type: bool
        """

        self._enable_down_payment = enable_down_payment

    @property
    def equal_amortization(self):
        """Gets the equal_amortization of this LoanProductRelatedDetail.  # noqa: E501


        :return: The equal_amortization of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: bool
        """
        return self._equal_amortization

    @equal_amortization.setter
    def equal_amortization(self, equal_amortization):
        """Sets the equal_amortization of this LoanProductRelatedDetail.


        :param equal_amortization: The equal_amortization of this LoanProductRelatedDetail.  # noqa: E501
        :type: bool
        """

        self._equal_amortization = equal_amortization

    @property
    def fixed_length(self):
        """Gets the fixed_length of this LoanProductRelatedDetail.  # noqa: E501


        :return: The fixed_length of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: int
        """
        return self._fixed_length

    @fixed_length.setter
    def fixed_length(self, fixed_length):
        """Sets the fixed_length of this LoanProductRelatedDetail.


        :param fixed_length: The fixed_length of this LoanProductRelatedDetail.  # noqa: E501
        :type: int
        """

        self._fixed_length = fixed_length

    @property
    def grace_on_arrears_ageing(self):
        """Gets the grace_on_arrears_ageing of this LoanProductRelatedDetail.  # noqa: E501


        :return: The grace_on_arrears_ageing of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: int
        """
        return self._grace_on_arrears_ageing

    @grace_on_arrears_ageing.setter
    def grace_on_arrears_ageing(self, grace_on_arrears_ageing):
        """Sets the grace_on_arrears_ageing of this LoanProductRelatedDetail.


        :param grace_on_arrears_ageing: The grace_on_arrears_ageing of this LoanProductRelatedDetail.  # noqa: E501
        :type: int
        """

        self._grace_on_arrears_ageing = grace_on_arrears_ageing

    @property
    def grace_on_interest_charged(self):
        """Gets the grace_on_interest_charged of this LoanProductRelatedDetail.  # noqa: E501


        :return: The grace_on_interest_charged of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: int
        """
        return self._grace_on_interest_charged

    @grace_on_interest_charged.setter
    def grace_on_interest_charged(self, grace_on_interest_charged):
        """Sets the grace_on_interest_charged of this LoanProductRelatedDetail.


        :param grace_on_interest_charged: The grace_on_interest_charged of this LoanProductRelatedDetail.  # noqa: E501
        :type: int
        """

        self._grace_on_interest_charged = grace_on_interest_charged

    @property
    def grace_on_interest_payment(self):
        """Gets the grace_on_interest_payment of this LoanProductRelatedDetail.  # noqa: E501


        :return: The grace_on_interest_payment of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: int
        """
        return self._grace_on_interest_payment

    @grace_on_interest_payment.setter
    def grace_on_interest_payment(self, grace_on_interest_payment):
        """Sets the grace_on_interest_payment of this LoanProductRelatedDetail.


        :param grace_on_interest_payment: The grace_on_interest_payment of this LoanProductRelatedDetail.  # noqa: E501
        :type: int
        """

        self._grace_on_interest_payment = grace_on_interest_payment

    @property
    def grace_on_principal_payment(self):
        """Gets the grace_on_principal_payment of this LoanProductRelatedDetail.  # noqa: E501


        :return: The grace_on_principal_payment of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: int
        """
        return self._grace_on_principal_payment

    @grace_on_principal_payment.setter
    def grace_on_principal_payment(self, grace_on_principal_payment):
        """Sets the grace_on_principal_payment of this LoanProductRelatedDetail.


        :param grace_on_principal_payment: The grace_on_principal_payment of this LoanProductRelatedDetail.  # noqa: E501
        :type: int
        """

        self._grace_on_principal_payment = grace_on_principal_payment

    @property
    def in_arrears_tolerance(self):
        """Gets the in_arrears_tolerance of this LoanProductRelatedDetail.  # noqa: E501


        :return: The in_arrears_tolerance of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: Money
        """
        return self._in_arrears_tolerance

    @in_arrears_tolerance.setter
    def in_arrears_tolerance(self, in_arrears_tolerance):
        """Sets the in_arrears_tolerance of this LoanProductRelatedDetail.


        :param in_arrears_tolerance: The in_arrears_tolerance of this LoanProductRelatedDetail.  # noqa: E501
        :type: Money
        """

        self._in_arrears_tolerance = in_arrears_tolerance

    @property
    def interest_calculation_period_method(self):
        """Gets the interest_calculation_period_method of this LoanProductRelatedDetail.  # noqa: E501


        :return: The interest_calculation_period_method of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: str
        """
        return self._interest_calculation_period_method

    @interest_calculation_period_method.setter
    def interest_calculation_period_method(self, interest_calculation_period_method):
        """Sets the interest_calculation_period_method of this LoanProductRelatedDetail.


        :param interest_calculation_period_method: The interest_calculation_period_method of this LoanProductRelatedDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAILY", "SAME_AS_REPAYMENT_PERIOD", "INVALID"]  # noqa: E501
        if interest_calculation_period_method not in allowed_values:
            raise ValueError(
                "Invalid value for `interest_calculation_period_method` ({0}), must be one of {1}"  # noqa: E501
                .format(interest_calculation_period_method, allowed_values)
            )

        self._interest_calculation_period_method = interest_calculation_period_method

    @property
    def interest_method(self):
        """Gets the interest_method of this LoanProductRelatedDetail.  # noqa: E501


        :return: The interest_method of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: str
        """
        return self._interest_method

    @interest_method.setter
    def interest_method(self, interest_method):
        """Sets the interest_method of this LoanProductRelatedDetail.


        :param interest_method: The interest_method of this LoanProductRelatedDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["DECLINING_BALANCE", "FLAT", "INVALID"]  # noqa: E501
        if interest_method not in allowed_values:
            raise ValueError(
                "Invalid value for `interest_method` ({0}), must be one of {1}"  # noqa: E501
                .format(interest_method, allowed_values)
            )

        self._interest_method = interest_method

    @property
    def interest_period_frequency_type(self):
        """Gets the interest_period_frequency_type of this LoanProductRelatedDetail.  # noqa: E501


        :return: The interest_period_frequency_type of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: str
        """
        return self._interest_period_frequency_type

    @interest_period_frequency_type.setter
    def interest_period_frequency_type(self, interest_period_frequency_type):
        """Sets the interest_period_frequency_type of this LoanProductRelatedDetail.


        :param interest_period_frequency_type: The interest_period_frequency_type of this LoanProductRelatedDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAYS", "WEEKS", "MONTHS", "YEARS", "WHOLE_TERM", "INVALID"]  # noqa: E501
        if interest_period_frequency_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interest_period_frequency_type` ({0}), must be one of {1}"  # noqa: E501
                .format(interest_period_frequency_type, allowed_values)
            )

        self._interest_period_frequency_type = interest_period_frequency_type

    @property
    def interest_recalculation_enabled(self):
        """Gets the interest_recalculation_enabled of this LoanProductRelatedDetail.  # noqa: E501


        :return: The interest_recalculation_enabled of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: bool
        """
        return self._interest_recalculation_enabled

    @interest_recalculation_enabled.setter
    def interest_recalculation_enabled(self, interest_recalculation_enabled):
        """Sets the interest_recalculation_enabled of this LoanProductRelatedDetail.


        :param interest_recalculation_enabled: The interest_recalculation_enabled of this LoanProductRelatedDetail.  # noqa: E501
        :type: bool
        """

        self._interest_recalculation_enabled = interest_recalculation_enabled

    @property
    def loan_schedule_processing_type(self):
        """Gets the loan_schedule_processing_type of this LoanProductRelatedDetail.  # noqa: E501


        :return: The loan_schedule_processing_type of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: str
        """
        return self._loan_schedule_processing_type

    @loan_schedule_processing_type.setter
    def loan_schedule_processing_type(self, loan_schedule_processing_type):
        """Sets the loan_schedule_processing_type of this LoanProductRelatedDetail.


        :param loan_schedule_processing_type: The loan_schedule_processing_type of this LoanProductRelatedDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["HORIZONTAL", "VERTICAL"]  # noqa: E501
        if loan_schedule_processing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_schedule_processing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(loan_schedule_processing_type, allowed_values)
            )

        self._loan_schedule_processing_type = loan_schedule_processing_type

    @property
    def loan_schedule_type(self):
        """Gets the loan_schedule_type of this LoanProductRelatedDetail.  # noqa: E501


        :return: The loan_schedule_type of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: str
        """
        return self._loan_schedule_type

    @loan_schedule_type.setter
    def loan_schedule_type(self, loan_schedule_type):
        """Sets the loan_schedule_type of this LoanProductRelatedDetail.


        :param loan_schedule_type: The loan_schedule_type of this LoanProductRelatedDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["CUMULATIVE", "PROGRESSIVE"]  # noqa: E501
        if loan_schedule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_schedule_type` ({0}), must be one of {1}"  # noqa: E501
                .format(loan_schedule_type, allowed_values)
            )

        self._loan_schedule_type = loan_schedule_type

    @property
    def nominal_interest_rate_per_period(self):
        """Gets the nominal_interest_rate_per_period of this LoanProductRelatedDetail.  # noqa: E501


        :return: The nominal_interest_rate_per_period of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: float
        """
        return self._nominal_interest_rate_per_period

    @nominal_interest_rate_per_period.setter
    def nominal_interest_rate_per_period(self, nominal_interest_rate_per_period):
        """Sets the nominal_interest_rate_per_period of this LoanProductRelatedDetail.


        :param nominal_interest_rate_per_period: The nominal_interest_rate_per_period of this LoanProductRelatedDetail.  # noqa: E501
        :type: float
        """

        self._nominal_interest_rate_per_period = nominal_interest_rate_per_period

    @property
    def number_of_repayments(self):
        """Gets the number_of_repayments of this LoanProductRelatedDetail.  # noqa: E501


        :return: The number_of_repayments of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: int
        """
        return self._number_of_repayments

    @number_of_repayments.setter
    def number_of_repayments(self, number_of_repayments):
        """Sets the number_of_repayments of this LoanProductRelatedDetail.


        :param number_of_repayments: The number_of_repayments of this LoanProductRelatedDetail.  # noqa: E501
        :type: int
        """

        self._number_of_repayments = number_of_repayments

    @property
    def principal(self):
        """Gets the principal of this LoanProductRelatedDetail.  # noqa: E501


        :return: The principal of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: Money
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this LoanProductRelatedDetail.


        :param principal: The principal of this LoanProductRelatedDetail.  # noqa: E501
        :type: Money
        """

        self._principal = principal

    @property
    def recurring_moratorium_on_principal_periods(self):
        """Gets the recurring_moratorium_on_principal_periods of this LoanProductRelatedDetail.  # noqa: E501


        :return: The recurring_moratorium_on_principal_periods of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: int
        """
        return self._recurring_moratorium_on_principal_periods

    @recurring_moratorium_on_principal_periods.setter
    def recurring_moratorium_on_principal_periods(self, recurring_moratorium_on_principal_periods):
        """Sets the recurring_moratorium_on_principal_periods of this LoanProductRelatedDetail.


        :param recurring_moratorium_on_principal_periods: The recurring_moratorium_on_principal_periods of this LoanProductRelatedDetail.  # noqa: E501
        :type: int
        """

        self._recurring_moratorium_on_principal_periods = recurring_moratorium_on_principal_periods

    @property
    def repay_every(self):
        """Gets the repay_every of this LoanProductRelatedDetail.  # noqa: E501


        :return: The repay_every of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: int
        """
        return self._repay_every

    @repay_every.setter
    def repay_every(self, repay_every):
        """Sets the repay_every of this LoanProductRelatedDetail.


        :param repay_every: The repay_every of this LoanProductRelatedDetail.  # noqa: E501
        :type: int
        """

        self._repay_every = repay_every

    @property
    def repayment_period_frequency_type(self):
        """Gets the repayment_period_frequency_type of this LoanProductRelatedDetail.  # noqa: E501


        :return: The repayment_period_frequency_type of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: str
        """
        return self._repayment_period_frequency_type

    @repayment_period_frequency_type.setter
    def repayment_period_frequency_type(self, repayment_period_frequency_type):
        """Sets the repayment_period_frequency_type of this LoanProductRelatedDetail.


        :param repayment_period_frequency_type: The repayment_period_frequency_type of this LoanProductRelatedDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAYS", "WEEKS", "MONTHS", "YEARS", "WHOLE_TERM", "INVALID"]  # noqa: E501
        if repayment_period_frequency_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repayment_period_frequency_type` ({0}), must be one of {1}"  # noqa: E501
                .format(repayment_period_frequency_type, allowed_values)
            )

        self._repayment_period_frequency_type = repayment_period_frequency_type

    @property
    def supported_interest_refund_types(self):
        """Gets the supported_interest_refund_types of this LoanProductRelatedDetail.  # noqa: E501


        :return: The supported_interest_refund_types of this LoanProductRelatedDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_interest_refund_types

    @supported_interest_refund_types.setter
    def supported_interest_refund_types(self, supported_interest_refund_types):
        """Sets the supported_interest_refund_types of this LoanProductRelatedDetail.


        :param supported_interest_refund_types: The supported_interest_refund_types of this LoanProductRelatedDetail.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["MERCHANT_ISSUED_REFUND", "PAYOUT_REFUND"]  # noqa: E501
        if not set(supported_interest_refund_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_interest_refund_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(supported_interest_refund_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_interest_refund_types = supported_interest_refund_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanProductRelatedDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanProductRelatedDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
