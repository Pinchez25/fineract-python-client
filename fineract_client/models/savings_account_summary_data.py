# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SavingsAccountSummaryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_balance': 'float',
        'available_balance': 'float',
        'currency': 'CurrencyData',
        'interest_not_posted': 'float',
        'interest_posted_till_date': 'date',
        'last_interest_calculation_date': 'date',
        'prev_interest_posted_till_date': 'date',
        'running_balance_on_interest_posting_till_date': 'float',
        'running_balance_on_pivot_date': 'float',
        'total_annual_fees': 'float',
        'total_deposits': 'float',
        'total_fee_charge': 'float',
        'total_interest_earned': 'float',
        'total_interest_posted': 'float',
        'total_overdraft_interest_derived': 'float',
        'total_penalty_charge': 'float',
        'total_withdrawal_fees': 'float',
        'total_withdrawals': 'float',
        'total_withhold_tax': 'float'
    }

    attribute_map = {
        'account_balance': 'accountBalance',
        'available_balance': 'availableBalance',
        'currency': 'currency',
        'interest_not_posted': 'interestNotPosted',
        'interest_posted_till_date': 'interestPostedTillDate',
        'last_interest_calculation_date': 'lastInterestCalculationDate',
        'prev_interest_posted_till_date': 'prevInterestPostedTillDate',
        'running_balance_on_interest_posting_till_date': 'runningBalanceOnInterestPostingTillDate',
        'running_balance_on_pivot_date': 'runningBalanceOnPivotDate',
        'total_annual_fees': 'totalAnnualFees',
        'total_deposits': 'totalDeposits',
        'total_fee_charge': 'totalFeeCharge',
        'total_interest_earned': 'totalInterestEarned',
        'total_interest_posted': 'totalInterestPosted',
        'total_overdraft_interest_derived': 'totalOverdraftInterestDerived',
        'total_penalty_charge': 'totalPenaltyCharge',
        'total_withdrawal_fees': 'totalWithdrawalFees',
        'total_withdrawals': 'totalWithdrawals',
        'total_withhold_tax': 'totalWithholdTax'
    }

    def __init__(self, account_balance=None, available_balance=None, currency=None, interest_not_posted=None, interest_posted_till_date=None, last_interest_calculation_date=None, prev_interest_posted_till_date=None, running_balance_on_interest_posting_till_date=None, running_balance_on_pivot_date=None, total_annual_fees=None, total_deposits=None, total_fee_charge=None, total_interest_earned=None, total_interest_posted=None, total_overdraft_interest_derived=None, total_penalty_charge=None, total_withdrawal_fees=None, total_withdrawals=None, total_withhold_tax=None):  # noqa: E501
        """SavingsAccountSummaryData - a model defined in Swagger"""  # noqa: E501
        self._account_balance = None
        self._available_balance = None
        self._currency = None
        self._interest_not_posted = None
        self._interest_posted_till_date = None
        self._last_interest_calculation_date = None
        self._prev_interest_posted_till_date = None
        self._running_balance_on_interest_posting_till_date = None
        self._running_balance_on_pivot_date = None
        self._total_annual_fees = None
        self._total_deposits = None
        self._total_fee_charge = None
        self._total_interest_earned = None
        self._total_interest_posted = None
        self._total_overdraft_interest_derived = None
        self._total_penalty_charge = None
        self._total_withdrawal_fees = None
        self._total_withdrawals = None
        self._total_withhold_tax = None
        self.discriminator = None
        if account_balance is not None:
            self.account_balance = account_balance
        if available_balance is not None:
            self.available_balance = available_balance
        if currency is not None:
            self.currency = currency
        if interest_not_posted is not None:
            self.interest_not_posted = interest_not_posted
        if interest_posted_till_date is not None:
            self.interest_posted_till_date = interest_posted_till_date
        if last_interest_calculation_date is not None:
            self.last_interest_calculation_date = last_interest_calculation_date
        if prev_interest_posted_till_date is not None:
            self.prev_interest_posted_till_date = prev_interest_posted_till_date
        if running_balance_on_interest_posting_till_date is not None:
            self.running_balance_on_interest_posting_till_date = running_balance_on_interest_posting_till_date
        if running_balance_on_pivot_date is not None:
            self.running_balance_on_pivot_date = running_balance_on_pivot_date
        if total_annual_fees is not None:
            self.total_annual_fees = total_annual_fees
        if total_deposits is not None:
            self.total_deposits = total_deposits
        if total_fee_charge is not None:
            self.total_fee_charge = total_fee_charge
        if total_interest_earned is not None:
            self.total_interest_earned = total_interest_earned
        if total_interest_posted is not None:
            self.total_interest_posted = total_interest_posted
        if total_overdraft_interest_derived is not None:
            self.total_overdraft_interest_derived = total_overdraft_interest_derived
        if total_penalty_charge is not None:
            self.total_penalty_charge = total_penalty_charge
        if total_withdrawal_fees is not None:
            self.total_withdrawal_fees = total_withdrawal_fees
        if total_withdrawals is not None:
            self.total_withdrawals = total_withdrawals
        if total_withhold_tax is not None:
            self.total_withhold_tax = total_withhold_tax

    @property
    def account_balance(self):
        """Gets the account_balance of this SavingsAccountSummaryData.  # noqa: E501


        :return: The account_balance of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._account_balance

    @account_balance.setter
    def account_balance(self, account_balance):
        """Sets the account_balance of this SavingsAccountSummaryData.


        :param account_balance: The account_balance of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._account_balance = account_balance

    @property
    def available_balance(self):
        """Gets the available_balance of this SavingsAccountSummaryData.  # noqa: E501


        :return: The available_balance of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this SavingsAccountSummaryData.


        :param available_balance: The available_balance of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._available_balance = available_balance

    @property
    def currency(self):
        """Gets the currency of this SavingsAccountSummaryData.  # noqa: E501


        :return: The currency of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: CurrencyData
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SavingsAccountSummaryData.


        :param currency: The currency of this SavingsAccountSummaryData.  # noqa: E501
        :type: CurrencyData
        """

        self._currency = currency

    @property
    def interest_not_posted(self):
        """Gets the interest_not_posted of this SavingsAccountSummaryData.  # noqa: E501


        :return: The interest_not_posted of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._interest_not_posted

    @interest_not_posted.setter
    def interest_not_posted(self, interest_not_posted):
        """Sets the interest_not_posted of this SavingsAccountSummaryData.


        :param interest_not_posted: The interest_not_posted of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._interest_not_posted = interest_not_posted

    @property
    def interest_posted_till_date(self):
        """Gets the interest_posted_till_date of this SavingsAccountSummaryData.  # noqa: E501


        :return: The interest_posted_till_date of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: date
        """
        return self._interest_posted_till_date

    @interest_posted_till_date.setter
    def interest_posted_till_date(self, interest_posted_till_date):
        """Sets the interest_posted_till_date of this SavingsAccountSummaryData.


        :param interest_posted_till_date: The interest_posted_till_date of this SavingsAccountSummaryData.  # noqa: E501
        :type: date
        """

        self._interest_posted_till_date = interest_posted_till_date

    @property
    def last_interest_calculation_date(self):
        """Gets the last_interest_calculation_date of this SavingsAccountSummaryData.  # noqa: E501


        :return: The last_interest_calculation_date of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: date
        """
        return self._last_interest_calculation_date

    @last_interest_calculation_date.setter
    def last_interest_calculation_date(self, last_interest_calculation_date):
        """Sets the last_interest_calculation_date of this SavingsAccountSummaryData.


        :param last_interest_calculation_date: The last_interest_calculation_date of this SavingsAccountSummaryData.  # noqa: E501
        :type: date
        """

        self._last_interest_calculation_date = last_interest_calculation_date

    @property
    def prev_interest_posted_till_date(self):
        """Gets the prev_interest_posted_till_date of this SavingsAccountSummaryData.  # noqa: E501


        :return: The prev_interest_posted_till_date of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: date
        """
        return self._prev_interest_posted_till_date

    @prev_interest_posted_till_date.setter
    def prev_interest_posted_till_date(self, prev_interest_posted_till_date):
        """Sets the prev_interest_posted_till_date of this SavingsAccountSummaryData.


        :param prev_interest_posted_till_date: The prev_interest_posted_till_date of this SavingsAccountSummaryData.  # noqa: E501
        :type: date
        """

        self._prev_interest_posted_till_date = prev_interest_posted_till_date

    @property
    def running_balance_on_interest_posting_till_date(self):
        """Gets the running_balance_on_interest_posting_till_date of this SavingsAccountSummaryData.  # noqa: E501


        :return: The running_balance_on_interest_posting_till_date of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._running_balance_on_interest_posting_till_date

    @running_balance_on_interest_posting_till_date.setter
    def running_balance_on_interest_posting_till_date(self, running_balance_on_interest_posting_till_date):
        """Sets the running_balance_on_interest_posting_till_date of this SavingsAccountSummaryData.


        :param running_balance_on_interest_posting_till_date: The running_balance_on_interest_posting_till_date of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._running_balance_on_interest_posting_till_date = running_balance_on_interest_posting_till_date

    @property
    def running_balance_on_pivot_date(self):
        """Gets the running_balance_on_pivot_date of this SavingsAccountSummaryData.  # noqa: E501


        :return: The running_balance_on_pivot_date of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._running_balance_on_pivot_date

    @running_balance_on_pivot_date.setter
    def running_balance_on_pivot_date(self, running_balance_on_pivot_date):
        """Sets the running_balance_on_pivot_date of this SavingsAccountSummaryData.


        :param running_balance_on_pivot_date: The running_balance_on_pivot_date of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._running_balance_on_pivot_date = running_balance_on_pivot_date

    @property
    def total_annual_fees(self):
        """Gets the total_annual_fees of this SavingsAccountSummaryData.  # noqa: E501


        :return: The total_annual_fees of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._total_annual_fees

    @total_annual_fees.setter
    def total_annual_fees(self, total_annual_fees):
        """Sets the total_annual_fees of this SavingsAccountSummaryData.


        :param total_annual_fees: The total_annual_fees of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._total_annual_fees = total_annual_fees

    @property
    def total_deposits(self):
        """Gets the total_deposits of this SavingsAccountSummaryData.  # noqa: E501


        :return: The total_deposits of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._total_deposits

    @total_deposits.setter
    def total_deposits(self, total_deposits):
        """Sets the total_deposits of this SavingsAccountSummaryData.


        :param total_deposits: The total_deposits of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._total_deposits = total_deposits

    @property
    def total_fee_charge(self):
        """Gets the total_fee_charge of this SavingsAccountSummaryData.  # noqa: E501


        :return: The total_fee_charge of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._total_fee_charge

    @total_fee_charge.setter
    def total_fee_charge(self, total_fee_charge):
        """Sets the total_fee_charge of this SavingsAccountSummaryData.


        :param total_fee_charge: The total_fee_charge of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._total_fee_charge = total_fee_charge

    @property
    def total_interest_earned(self):
        """Gets the total_interest_earned of this SavingsAccountSummaryData.  # noqa: E501


        :return: The total_interest_earned of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._total_interest_earned

    @total_interest_earned.setter
    def total_interest_earned(self, total_interest_earned):
        """Sets the total_interest_earned of this SavingsAccountSummaryData.


        :param total_interest_earned: The total_interest_earned of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._total_interest_earned = total_interest_earned

    @property
    def total_interest_posted(self):
        """Gets the total_interest_posted of this SavingsAccountSummaryData.  # noqa: E501


        :return: The total_interest_posted of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._total_interest_posted

    @total_interest_posted.setter
    def total_interest_posted(self, total_interest_posted):
        """Sets the total_interest_posted of this SavingsAccountSummaryData.


        :param total_interest_posted: The total_interest_posted of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._total_interest_posted = total_interest_posted

    @property
    def total_overdraft_interest_derived(self):
        """Gets the total_overdraft_interest_derived of this SavingsAccountSummaryData.  # noqa: E501


        :return: The total_overdraft_interest_derived of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._total_overdraft_interest_derived

    @total_overdraft_interest_derived.setter
    def total_overdraft_interest_derived(self, total_overdraft_interest_derived):
        """Sets the total_overdraft_interest_derived of this SavingsAccountSummaryData.


        :param total_overdraft_interest_derived: The total_overdraft_interest_derived of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._total_overdraft_interest_derived = total_overdraft_interest_derived

    @property
    def total_penalty_charge(self):
        """Gets the total_penalty_charge of this SavingsAccountSummaryData.  # noqa: E501


        :return: The total_penalty_charge of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._total_penalty_charge

    @total_penalty_charge.setter
    def total_penalty_charge(self, total_penalty_charge):
        """Sets the total_penalty_charge of this SavingsAccountSummaryData.


        :param total_penalty_charge: The total_penalty_charge of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._total_penalty_charge = total_penalty_charge

    @property
    def total_withdrawal_fees(self):
        """Gets the total_withdrawal_fees of this SavingsAccountSummaryData.  # noqa: E501


        :return: The total_withdrawal_fees of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._total_withdrawal_fees

    @total_withdrawal_fees.setter
    def total_withdrawal_fees(self, total_withdrawal_fees):
        """Sets the total_withdrawal_fees of this SavingsAccountSummaryData.


        :param total_withdrawal_fees: The total_withdrawal_fees of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._total_withdrawal_fees = total_withdrawal_fees

    @property
    def total_withdrawals(self):
        """Gets the total_withdrawals of this SavingsAccountSummaryData.  # noqa: E501


        :return: The total_withdrawals of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._total_withdrawals

    @total_withdrawals.setter
    def total_withdrawals(self, total_withdrawals):
        """Sets the total_withdrawals of this SavingsAccountSummaryData.


        :param total_withdrawals: The total_withdrawals of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._total_withdrawals = total_withdrawals

    @property
    def total_withhold_tax(self):
        """Gets the total_withhold_tax of this SavingsAccountSummaryData.  # noqa: E501


        :return: The total_withhold_tax of this SavingsAccountSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._total_withhold_tax

    @total_withhold_tax.setter
    def total_withhold_tax(self, total_withhold_tax):
        """Sets the total_withhold_tax of this SavingsAccountSummaryData.


        :param total_withhold_tax: The total_withhold_tax of this SavingsAccountSummaryData.  # noqa: E501
        :type: float
        """

        self._total_withhold_tax = total_withhold_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavingsAccountSummaryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavingsAccountSummaryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
