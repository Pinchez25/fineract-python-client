# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobDetailHistoryDataSwagger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_run_end_time': 'datetime',
        'job_run_start_time': 'datetime',
        'status': 'str',
        'trigger_type': 'str',
        'version': 'int'
    }

    attribute_map = {
        'job_run_end_time': 'jobRunEndTime',
        'job_run_start_time': 'jobRunStartTime',
        'status': 'status',
        'trigger_type': 'triggerType',
        'version': 'version'
    }

    def __init__(self, job_run_end_time=None, job_run_start_time=None, status=None, trigger_type=None, version=None):  # noqa: E501
        """JobDetailHistoryDataSwagger - a model defined in Swagger"""  # noqa: E501
        self._job_run_end_time = None
        self._job_run_start_time = None
        self._status = None
        self._trigger_type = None
        self._version = None
        self.discriminator = None
        if job_run_end_time is not None:
            self.job_run_end_time = job_run_end_time
        if job_run_start_time is not None:
            self.job_run_start_time = job_run_start_time
        if status is not None:
            self.status = status
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if version is not None:
            self.version = version

    @property
    def job_run_end_time(self):
        """Gets the job_run_end_time of this JobDetailHistoryDataSwagger.  # noqa: E501


        :return: The job_run_end_time of this JobDetailHistoryDataSwagger.  # noqa: E501
        :rtype: datetime
        """
        return self._job_run_end_time

    @job_run_end_time.setter
    def job_run_end_time(self, job_run_end_time):
        """Sets the job_run_end_time of this JobDetailHistoryDataSwagger.


        :param job_run_end_time: The job_run_end_time of this JobDetailHistoryDataSwagger.  # noqa: E501
        :type: datetime
        """

        self._job_run_end_time = job_run_end_time

    @property
    def job_run_start_time(self):
        """Gets the job_run_start_time of this JobDetailHistoryDataSwagger.  # noqa: E501


        :return: The job_run_start_time of this JobDetailHistoryDataSwagger.  # noqa: E501
        :rtype: datetime
        """
        return self._job_run_start_time

    @job_run_start_time.setter
    def job_run_start_time(self, job_run_start_time):
        """Sets the job_run_start_time of this JobDetailHistoryDataSwagger.


        :param job_run_start_time: The job_run_start_time of this JobDetailHistoryDataSwagger.  # noqa: E501
        :type: datetime
        """

        self._job_run_start_time = job_run_start_time

    @property
    def status(self):
        """Gets the status of this JobDetailHistoryDataSwagger.  # noqa: E501


        :return: The status of this JobDetailHistoryDataSwagger.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobDetailHistoryDataSwagger.


        :param status: The status of this JobDetailHistoryDataSwagger.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def trigger_type(self):
        """Gets the trigger_type of this JobDetailHistoryDataSwagger.  # noqa: E501


        :return: The trigger_type of this JobDetailHistoryDataSwagger.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this JobDetailHistoryDataSwagger.


        :param trigger_type: The trigger_type of this JobDetailHistoryDataSwagger.  # noqa: E501
        :type: str
        """

        self._trigger_type = trigger_type

    @property
    def version(self):
        """Gets the version of this JobDetailHistoryDataSwagger.  # noqa: E501


        :return: The version of this JobDetailHistoryDataSwagger.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this JobDetailHistoryDataSwagger.


        :param version: The version of this JobDetailHistoryDataSwagger.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobDetailHistoryDataSwagger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDetailHistoryDataSwagger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
