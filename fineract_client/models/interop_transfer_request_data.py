# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InteropTransferRequestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'amount': 'MoneyData',
        'expiration': 'datetime',
        'expiration_local_date': 'date',
        'extension_list': 'list[ExtensionData]',
        'fsp_commission': 'MoneyData',
        'fsp_fee': 'MoneyData',
        'geo_code': 'GeoCodeData',
        'note': 'str',
        'request_code': 'str',
        'transaction_code': 'str',
        'transaction_role': 'str',
        'transaction_type': 'InteropTransactionTypeData',
        'transfer_code': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'amount': 'amount',
        'expiration': 'expiration',
        'expiration_local_date': 'expirationLocalDate',
        'extension_list': 'extensionList',
        'fsp_commission': 'fspCommission',
        'fsp_fee': 'fspFee',
        'geo_code': 'geoCode',
        'note': 'note',
        'request_code': 'requestCode',
        'transaction_code': 'transactionCode',
        'transaction_role': 'transactionRole',
        'transaction_type': 'transactionType',
        'transfer_code': 'transferCode'
    }

    def __init__(self, account_id=None, amount=None, expiration=None, expiration_local_date=None, extension_list=None, fsp_commission=None, fsp_fee=None, geo_code=None, note=None, request_code=None, transaction_code=None, transaction_role=None, transaction_type=None, transfer_code=None):  # noqa: E501
        """InteropTransferRequestData - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._amount = None
        self._expiration = None
        self._expiration_local_date = None
        self._extension_list = None
        self._fsp_commission = None
        self._fsp_fee = None
        self._geo_code = None
        self._note = None
        self._request_code = None
        self._transaction_code = None
        self._transaction_role = None
        self._transaction_type = None
        self._transfer_code = None
        self.discriminator = None
        self.account_id = account_id
        self.amount = amount
        if expiration is not None:
            self.expiration = expiration
        if expiration_local_date is not None:
            self.expiration_local_date = expiration_local_date
        if extension_list is not None:
            self.extension_list = extension_list
        if fsp_commission is not None:
            self.fsp_commission = fsp_commission
        if fsp_fee is not None:
            self.fsp_fee = fsp_fee
        if geo_code is not None:
            self.geo_code = geo_code
        if note is not None:
            self.note = note
        if request_code is not None:
            self.request_code = request_code
        self.transaction_code = transaction_code
        self.transaction_role = transaction_role
        if transaction_type is not None:
            self.transaction_type = transaction_type
        self.transfer_code = transfer_code

    @property
    def account_id(self):
        """Gets the account_id of this InteropTransferRequestData.  # noqa: E501


        :return: The account_id of this InteropTransferRequestData.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InteropTransferRequestData.


        :param account_id: The account_id of this InteropTransferRequestData.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this InteropTransferRequestData.  # noqa: E501


        :return: The amount of this InteropTransferRequestData.  # noqa: E501
        :rtype: MoneyData
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InteropTransferRequestData.


        :param amount: The amount of this InteropTransferRequestData.  # noqa: E501
        :type: MoneyData
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def expiration(self):
        """Gets the expiration of this InteropTransferRequestData.  # noqa: E501


        :return: The expiration of this InteropTransferRequestData.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this InteropTransferRequestData.


        :param expiration: The expiration of this InteropTransferRequestData.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def expiration_local_date(self):
        """Gets the expiration_local_date of this InteropTransferRequestData.  # noqa: E501


        :return: The expiration_local_date of this InteropTransferRequestData.  # noqa: E501
        :rtype: date
        """
        return self._expiration_local_date

    @expiration_local_date.setter
    def expiration_local_date(self, expiration_local_date):
        """Sets the expiration_local_date of this InteropTransferRequestData.


        :param expiration_local_date: The expiration_local_date of this InteropTransferRequestData.  # noqa: E501
        :type: date
        """

        self._expiration_local_date = expiration_local_date

    @property
    def extension_list(self):
        """Gets the extension_list of this InteropTransferRequestData.  # noqa: E501


        :return: The extension_list of this InteropTransferRequestData.  # noqa: E501
        :rtype: list[ExtensionData]
        """
        return self._extension_list

    @extension_list.setter
    def extension_list(self, extension_list):
        """Sets the extension_list of this InteropTransferRequestData.


        :param extension_list: The extension_list of this InteropTransferRequestData.  # noqa: E501
        :type: list[ExtensionData]
        """

        self._extension_list = extension_list

    @property
    def fsp_commission(self):
        """Gets the fsp_commission of this InteropTransferRequestData.  # noqa: E501


        :return: The fsp_commission of this InteropTransferRequestData.  # noqa: E501
        :rtype: MoneyData
        """
        return self._fsp_commission

    @fsp_commission.setter
    def fsp_commission(self, fsp_commission):
        """Sets the fsp_commission of this InteropTransferRequestData.


        :param fsp_commission: The fsp_commission of this InteropTransferRequestData.  # noqa: E501
        :type: MoneyData
        """

        self._fsp_commission = fsp_commission

    @property
    def fsp_fee(self):
        """Gets the fsp_fee of this InteropTransferRequestData.  # noqa: E501


        :return: The fsp_fee of this InteropTransferRequestData.  # noqa: E501
        :rtype: MoneyData
        """
        return self._fsp_fee

    @fsp_fee.setter
    def fsp_fee(self, fsp_fee):
        """Sets the fsp_fee of this InteropTransferRequestData.


        :param fsp_fee: The fsp_fee of this InteropTransferRequestData.  # noqa: E501
        :type: MoneyData
        """

        self._fsp_fee = fsp_fee

    @property
    def geo_code(self):
        """Gets the geo_code of this InteropTransferRequestData.  # noqa: E501


        :return: The geo_code of this InteropTransferRequestData.  # noqa: E501
        :rtype: GeoCodeData
        """
        return self._geo_code

    @geo_code.setter
    def geo_code(self, geo_code):
        """Sets the geo_code of this InteropTransferRequestData.


        :param geo_code: The geo_code of this InteropTransferRequestData.  # noqa: E501
        :type: GeoCodeData
        """

        self._geo_code = geo_code

    @property
    def note(self):
        """Gets the note of this InteropTransferRequestData.  # noqa: E501


        :return: The note of this InteropTransferRequestData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this InteropTransferRequestData.


        :param note: The note of this InteropTransferRequestData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def request_code(self):
        """Gets the request_code of this InteropTransferRequestData.  # noqa: E501


        :return: The request_code of this InteropTransferRequestData.  # noqa: E501
        :rtype: str
        """
        return self._request_code

    @request_code.setter
    def request_code(self, request_code):
        """Sets the request_code of this InteropTransferRequestData.


        :param request_code: The request_code of this InteropTransferRequestData.  # noqa: E501
        :type: str
        """

        self._request_code = request_code

    @property
    def transaction_code(self):
        """Gets the transaction_code of this InteropTransferRequestData.  # noqa: E501


        :return: The transaction_code of this InteropTransferRequestData.  # noqa: E501
        :rtype: str
        """
        return self._transaction_code

    @transaction_code.setter
    def transaction_code(self, transaction_code):
        """Sets the transaction_code of this InteropTransferRequestData.


        :param transaction_code: The transaction_code of this InteropTransferRequestData.  # noqa: E501
        :type: str
        """
        if transaction_code is None:
            raise ValueError("Invalid value for `transaction_code`, must not be `None`")  # noqa: E501

        self._transaction_code = transaction_code

    @property
    def transaction_role(self):
        """Gets the transaction_role of this InteropTransferRequestData.  # noqa: E501


        :return: The transaction_role of this InteropTransferRequestData.  # noqa: E501
        :rtype: str
        """
        return self._transaction_role

    @transaction_role.setter
    def transaction_role(self, transaction_role):
        """Sets the transaction_role of this InteropTransferRequestData.


        :param transaction_role: The transaction_role of this InteropTransferRequestData.  # noqa: E501
        :type: str
        """
        if transaction_role is None:
            raise ValueError("Invalid value for `transaction_role`, must not be `None`")  # noqa: E501
        allowed_values = ["PAYER", "PAYEE"]  # noqa: E501
        if transaction_role not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_role` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_role, allowed_values)
            )

        self._transaction_role = transaction_role

    @property
    def transaction_type(self):
        """Gets the transaction_type of this InteropTransferRequestData.  # noqa: E501


        :return: The transaction_type of this InteropTransferRequestData.  # noqa: E501
        :rtype: InteropTransactionTypeData
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this InteropTransferRequestData.


        :param transaction_type: The transaction_type of this InteropTransferRequestData.  # noqa: E501
        :type: InteropTransactionTypeData
        """

        self._transaction_type = transaction_type

    @property
    def transfer_code(self):
        """Gets the transfer_code of this InteropTransferRequestData.  # noqa: E501


        :return: The transfer_code of this InteropTransferRequestData.  # noqa: E501
        :rtype: str
        """
        return self._transfer_code

    @transfer_code.setter
    def transfer_code(self, transfer_code):
        """Sets the transfer_code of this InteropTransferRequestData.


        :param transfer_code: The transfer_code of this InteropTransferRequestData.  # noqa: E501
        :type: str
        """
        if transfer_code is None:
            raise ValueError("Invalid value for `transfer_code`, must not be `None`")  # noqa: E501

        self._transfer_code = transfer_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InteropTransferRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InteropTransferRequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
