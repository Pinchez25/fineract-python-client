# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostRecurringDepositAccountsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'int',
        'date_format': 'str',
        'deposit_amount': 'float',
        'deposit_period': 'int',
        'deposit_period_frequency_id': 'int',
        'is_calendar_inherited': 'bool',
        'locale': 'str',
        'mandatory_recommended_deposit_amount': 'int',
        'product_id': 'int',
        'recurring_frequency': 'int',
        'recurring_frequency_type': 'int',
        'submitted_on_date': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'date_format': 'dateFormat',
        'deposit_amount': 'depositAmount',
        'deposit_period': 'depositPeriod',
        'deposit_period_frequency_id': 'depositPeriodFrequencyId',
        'is_calendar_inherited': 'isCalendarInherited',
        'locale': 'locale',
        'mandatory_recommended_deposit_amount': 'mandatoryRecommendedDepositAmount',
        'product_id': 'productId',
        'recurring_frequency': 'recurringFrequency',
        'recurring_frequency_type': 'recurringFrequencyType',
        'submitted_on_date': 'submittedOnDate'
    }

    def __init__(self, client_id=None, date_format=None, deposit_amount=None, deposit_period=None, deposit_period_frequency_id=None, is_calendar_inherited=None, locale=None, mandatory_recommended_deposit_amount=None, product_id=None, recurring_frequency=None, recurring_frequency_type=None, submitted_on_date=None):  # noqa: E501
        """PostRecurringDepositAccountsRequest - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._date_format = None
        self._deposit_amount = None
        self._deposit_period = None
        self._deposit_period_frequency_id = None
        self._is_calendar_inherited = None
        self._locale = None
        self._mandatory_recommended_deposit_amount = None
        self._product_id = None
        self._recurring_frequency = None
        self._recurring_frequency_type = None
        self._submitted_on_date = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if date_format is not None:
            self.date_format = date_format
        if deposit_amount is not None:
            self.deposit_amount = deposit_amount
        if deposit_period is not None:
            self.deposit_period = deposit_period
        if deposit_period_frequency_id is not None:
            self.deposit_period_frequency_id = deposit_period_frequency_id
        if is_calendar_inherited is not None:
            self.is_calendar_inherited = is_calendar_inherited
        if locale is not None:
            self.locale = locale
        if mandatory_recommended_deposit_amount is not None:
            self.mandatory_recommended_deposit_amount = mandatory_recommended_deposit_amount
        if product_id is not None:
            self.product_id = product_id
        if recurring_frequency is not None:
            self.recurring_frequency = recurring_frequency
        if recurring_frequency_type is not None:
            self.recurring_frequency_type = recurring_frequency_type
        if submitted_on_date is not None:
            self.submitted_on_date = submitted_on_date

    @property
    def client_id(self):
        """Gets the client_id of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The client_id of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PostRecurringDepositAccountsRequest.


        :param client_id: The client_id of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def date_format(self):
        """Gets the date_format of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The date_format of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this PostRecurringDepositAccountsRequest.


        :param date_format: The date_format of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def deposit_amount(self):
        """Gets the deposit_amount of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The deposit_amount of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: float
        """
        return self._deposit_amount

    @deposit_amount.setter
    def deposit_amount(self, deposit_amount):
        """Sets the deposit_amount of this PostRecurringDepositAccountsRequest.


        :param deposit_amount: The deposit_amount of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: float
        """

        self._deposit_amount = deposit_amount

    @property
    def deposit_period(self):
        """Gets the deposit_period of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The deposit_period of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: int
        """
        return self._deposit_period

    @deposit_period.setter
    def deposit_period(self, deposit_period):
        """Sets the deposit_period of this PostRecurringDepositAccountsRequest.


        :param deposit_period: The deposit_period of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: int
        """

        self._deposit_period = deposit_period

    @property
    def deposit_period_frequency_id(self):
        """Gets the deposit_period_frequency_id of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The deposit_period_frequency_id of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: int
        """
        return self._deposit_period_frequency_id

    @deposit_period_frequency_id.setter
    def deposit_period_frequency_id(self, deposit_period_frequency_id):
        """Sets the deposit_period_frequency_id of this PostRecurringDepositAccountsRequest.


        :param deposit_period_frequency_id: The deposit_period_frequency_id of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: int
        """

        self._deposit_period_frequency_id = deposit_period_frequency_id

    @property
    def is_calendar_inherited(self):
        """Gets the is_calendar_inherited of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The is_calendar_inherited of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_calendar_inherited

    @is_calendar_inherited.setter
    def is_calendar_inherited(self, is_calendar_inherited):
        """Sets the is_calendar_inherited of this PostRecurringDepositAccountsRequest.


        :param is_calendar_inherited: The is_calendar_inherited of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: bool
        """

        self._is_calendar_inherited = is_calendar_inherited

    @property
    def locale(self):
        """Gets the locale of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The locale of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PostRecurringDepositAccountsRequest.


        :param locale: The locale of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def mandatory_recommended_deposit_amount(self):
        """Gets the mandatory_recommended_deposit_amount of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The mandatory_recommended_deposit_amount of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: int
        """
        return self._mandatory_recommended_deposit_amount

    @mandatory_recommended_deposit_amount.setter
    def mandatory_recommended_deposit_amount(self, mandatory_recommended_deposit_amount):
        """Sets the mandatory_recommended_deposit_amount of this PostRecurringDepositAccountsRequest.


        :param mandatory_recommended_deposit_amount: The mandatory_recommended_deposit_amount of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: int
        """

        self._mandatory_recommended_deposit_amount = mandatory_recommended_deposit_amount

    @property
    def product_id(self):
        """Gets the product_id of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The product_id of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this PostRecurringDepositAccountsRequest.


        :param product_id: The product_id of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def recurring_frequency(self):
        """Gets the recurring_frequency of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The recurring_frequency of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: int
        """
        return self._recurring_frequency

    @recurring_frequency.setter
    def recurring_frequency(self, recurring_frequency):
        """Sets the recurring_frequency of this PostRecurringDepositAccountsRequest.


        :param recurring_frequency: The recurring_frequency of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: int
        """

        self._recurring_frequency = recurring_frequency

    @property
    def recurring_frequency_type(self):
        """Gets the recurring_frequency_type of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The recurring_frequency_type of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: int
        """
        return self._recurring_frequency_type

    @recurring_frequency_type.setter
    def recurring_frequency_type(self, recurring_frequency_type):
        """Sets the recurring_frequency_type of this PostRecurringDepositAccountsRequest.


        :param recurring_frequency_type: The recurring_frequency_type of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: int
        """

        self._recurring_frequency_type = recurring_frequency_type

    @property
    def submitted_on_date(self):
        """Gets the submitted_on_date of this PostRecurringDepositAccountsRequest.  # noqa: E501


        :return: The submitted_on_date of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :rtype: str
        """
        return self._submitted_on_date

    @submitted_on_date.setter
    def submitted_on_date(self, submitted_on_date):
        """Sets the submitted_on_date of this PostRecurringDepositAccountsRequest.


        :param submitted_on_date: The submitted_on_date of this PostRecurringDepositAccountsRequest.  # noqa: E501
        :type: str
        """

        self._submitted_on_date = submitted_on_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostRecurringDepositAccountsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostRecurringDepositAccountsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
