# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllowAttributeOverrides(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amortization_type': 'bool',
        'grace_on_arrears_ageing': 'bool',
        'grace_on_principal_and_interest_payment': 'bool',
        'in_arrears_tolerance': 'bool',
        'interest_calculation_period_type': 'bool',
        'interest_type': 'bool',
        'repayment_every': 'bool',
        'transaction_processing_strategy_code': 'bool'
    }

    attribute_map = {
        'amortization_type': 'amortizationType',
        'grace_on_arrears_ageing': 'graceOnArrearsAgeing',
        'grace_on_principal_and_interest_payment': 'graceOnPrincipalAndInterestPayment',
        'in_arrears_tolerance': 'inArrearsTolerance',
        'interest_calculation_period_type': 'interestCalculationPeriodType',
        'interest_type': 'interestType',
        'repayment_every': 'repaymentEvery',
        'transaction_processing_strategy_code': 'transactionProcessingStrategyCode'
    }

    def __init__(self, amortization_type=None, grace_on_arrears_ageing=None, grace_on_principal_and_interest_payment=None, in_arrears_tolerance=None, interest_calculation_period_type=None, interest_type=None, repayment_every=None, transaction_processing_strategy_code=None):  # noqa: E501
        """AllowAttributeOverrides - a model defined in Swagger"""  # noqa: E501
        self._amortization_type = None
        self._grace_on_arrears_ageing = None
        self._grace_on_principal_and_interest_payment = None
        self._in_arrears_tolerance = None
        self._interest_calculation_period_type = None
        self._interest_type = None
        self._repayment_every = None
        self._transaction_processing_strategy_code = None
        self.discriminator = None
        if amortization_type is not None:
            self.amortization_type = amortization_type
        if grace_on_arrears_ageing is not None:
            self.grace_on_arrears_ageing = grace_on_arrears_ageing
        if grace_on_principal_and_interest_payment is not None:
            self.grace_on_principal_and_interest_payment = grace_on_principal_and_interest_payment
        if in_arrears_tolerance is not None:
            self.in_arrears_tolerance = in_arrears_tolerance
        if interest_calculation_period_type is not None:
            self.interest_calculation_period_type = interest_calculation_period_type
        if interest_type is not None:
            self.interest_type = interest_type
        if repayment_every is not None:
            self.repayment_every = repayment_every
        if transaction_processing_strategy_code is not None:
            self.transaction_processing_strategy_code = transaction_processing_strategy_code

    @property
    def amortization_type(self):
        """Gets the amortization_type of this AllowAttributeOverrides.  # noqa: E501


        :return: The amortization_type of this AllowAttributeOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._amortization_type

    @amortization_type.setter
    def amortization_type(self, amortization_type):
        """Sets the amortization_type of this AllowAttributeOverrides.


        :param amortization_type: The amortization_type of this AllowAttributeOverrides.  # noqa: E501
        :type: bool
        """

        self._amortization_type = amortization_type

    @property
    def grace_on_arrears_ageing(self):
        """Gets the grace_on_arrears_ageing of this AllowAttributeOverrides.  # noqa: E501


        :return: The grace_on_arrears_ageing of this AllowAttributeOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._grace_on_arrears_ageing

    @grace_on_arrears_ageing.setter
    def grace_on_arrears_ageing(self, grace_on_arrears_ageing):
        """Sets the grace_on_arrears_ageing of this AllowAttributeOverrides.


        :param grace_on_arrears_ageing: The grace_on_arrears_ageing of this AllowAttributeOverrides.  # noqa: E501
        :type: bool
        """

        self._grace_on_arrears_ageing = grace_on_arrears_ageing

    @property
    def grace_on_principal_and_interest_payment(self):
        """Gets the grace_on_principal_and_interest_payment of this AllowAttributeOverrides.  # noqa: E501


        :return: The grace_on_principal_and_interest_payment of this AllowAttributeOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._grace_on_principal_and_interest_payment

    @grace_on_principal_and_interest_payment.setter
    def grace_on_principal_and_interest_payment(self, grace_on_principal_and_interest_payment):
        """Sets the grace_on_principal_and_interest_payment of this AllowAttributeOverrides.


        :param grace_on_principal_and_interest_payment: The grace_on_principal_and_interest_payment of this AllowAttributeOverrides.  # noqa: E501
        :type: bool
        """

        self._grace_on_principal_and_interest_payment = grace_on_principal_and_interest_payment

    @property
    def in_arrears_tolerance(self):
        """Gets the in_arrears_tolerance of this AllowAttributeOverrides.  # noqa: E501


        :return: The in_arrears_tolerance of this AllowAttributeOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._in_arrears_tolerance

    @in_arrears_tolerance.setter
    def in_arrears_tolerance(self, in_arrears_tolerance):
        """Sets the in_arrears_tolerance of this AllowAttributeOverrides.


        :param in_arrears_tolerance: The in_arrears_tolerance of this AllowAttributeOverrides.  # noqa: E501
        :type: bool
        """

        self._in_arrears_tolerance = in_arrears_tolerance

    @property
    def interest_calculation_period_type(self):
        """Gets the interest_calculation_period_type of this AllowAttributeOverrides.  # noqa: E501


        :return: The interest_calculation_period_type of this AllowAttributeOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._interest_calculation_period_type

    @interest_calculation_period_type.setter
    def interest_calculation_period_type(self, interest_calculation_period_type):
        """Sets the interest_calculation_period_type of this AllowAttributeOverrides.


        :param interest_calculation_period_type: The interest_calculation_period_type of this AllowAttributeOverrides.  # noqa: E501
        :type: bool
        """

        self._interest_calculation_period_type = interest_calculation_period_type

    @property
    def interest_type(self):
        """Gets the interest_type of this AllowAttributeOverrides.  # noqa: E501


        :return: The interest_type of this AllowAttributeOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._interest_type

    @interest_type.setter
    def interest_type(self, interest_type):
        """Sets the interest_type of this AllowAttributeOverrides.


        :param interest_type: The interest_type of this AllowAttributeOverrides.  # noqa: E501
        :type: bool
        """

        self._interest_type = interest_type

    @property
    def repayment_every(self):
        """Gets the repayment_every of this AllowAttributeOverrides.  # noqa: E501


        :return: The repayment_every of this AllowAttributeOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._repayment_every

    @repayment_every.setter
    def repayment_every(self, repayment_every):
        """Sets the repayment_every of this AllowAttributeOverrides.


        :param repayment_every: The repayment_every of this AllowAttributeOverrides.  # noqa: E501
        :type: bool
        """

        self._repayment_every = repayment_every

    @property
    def transaction_processing_strategy_code(self):
        """Gets the transaction_processing_strategy_code of this AllowAttributeOverrides.  # noqa: E501


        :return: The transaction_processing_strategy_code of this AllowAttributeOverrides.  # noqa: E501
        :rtype: bool
        """
        return self._transaction_processing_strategy_code

    @transaction_processing_strategy_code.setter
    def transaction_processing_strategy_code(self, transaction_processing_strategy_code):
        """Sets the transaction_processing_strategy_code of this AllowAttributeOverrides.


        :param transaction_processing_strategy_code: The transaction_processing_strategy_code of this AllowAttributeOverrides.  # noqa: E501
        :type: bool
        """

        self._transaction_processing_strategy_code = transaction_processing_strategy_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllowAttributeOverrides, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllowAttributeOverrides):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
