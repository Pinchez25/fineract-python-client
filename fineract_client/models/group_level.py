# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupLevel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'center': 'bool',
        'group': 'bool',
        'id': 'int',
        'level_name': 'str',
        'new': 'bool',
        'parent_id': 'int',
        'recursable': 'bool',
        'super_parent': 'bool'
    }

    attribute_map = {
        'center': 'center',
        'group': 'group',
        'id': 'id',
        'level_name': 'levelName',
        'new': 'new',
        'parent_id': 'parentId',
        'recursable': 'recursable',
        'super_parent': 'superParent'
    }

    def __init__(self, center=None, group=None, id=None, level_name=None, new=None, parent_id=None, recursable=None, super_parent=None):  # noqa: E501
        """GroupLevel - a model defined in Swagger"""  # noqa: E501
        self._center = None
        self._group = None
        self._id = None
        self._level_name = None
        self._new = None
        self._parent_id = None
        self._recursable = None
        self._super_parent = None
        self.discriminator = None
        if center is not None:
            self.center = center
        if group is not None:
            self.group = group
        if id is not None:
            self.id = id
        if level_name is not None:
            self.level_name = level_name
        if new is not None:
            self.new = new
        if parent_id is not None:
            self.parent_id = parent_id
        if recursable is not None:
            self.recursable = recursable
        if super_parent is not None:
            self.super_parent = super_parent

    @property
    def center(self):
        """Gets the center of this GroupLevel.  # noqa: E501


        :return: The center of this GroupLevel.  # noqa: E501
        :rtype: bool
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this GroupLevel.


        :param center: The center of this GroupLevel.  # noqa: E501
        :type: bool
        """

        self._center = center

    @property
    def group(self):
        """Gets the group of this GroupLevel.  # noqa: E501


        :return: The group of this GroupLevel.  # noqa: E501
        :rtype: bool
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GroupLevel.


        :param group: The group of this GroupLevel.  # noqa: E501
        :type: bool
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this GroupLevel.  # noqa: E501


        :return: The id of this GroupLevel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupLevel.


        :param id: The id of this GroupLevel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def level_name(self):
        """Gets the level_name of this GroupLevel.  # noqa: E501


        :return: The level_name of this GroupLevel.  # noqa: E501
        :rtype: str
        """
        return self._level_name

    @level_name.setter
    def level_name(self, level_name):
        """Sets the level_name of this GroupLevel.


        :param level_name: The level_name of this GroupLevel.  # noqa: E501
        :type: str
        """

        self._level_name = level_name

    @property
    def new(self):
        """Gets the new of this GroupLevel.  # noqa: E501


        :return: The new of this GroupLevel.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this GroupLevel.


        :param new: The new of this GroupLevel.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def parent_id(self):
        """Gets the parent_id of this GroupLevel.  # noqa: E501


        :return: The parent_id of this GroupLevel.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this GroupLevel.


        :param parent_id: The parent_id of this GroupLevel.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def recursable(self):
        """Gets the recursable of this GroupLevel.  # noqa: E501


        :return: The recursable of this GroupLevel.  # noqa: E501
        :rtype: bool
        """
        return self._recursable

    @recursable.setter
    def recursable(self, recursable):
        """Sets the recursable of this GroupLevel.


        :param recursable: The recursable of this GroupLevel.  # noqa: E501
        :type: bool
        """

        self._recursable = recursable

    @property
    def super_parent(self):
        """Gets the super_parent of this GroupLevel.  # noqa: E501


        :return: The super_parent of this GroupLevel.  # noqa: E501
        :rtype: bool
        """
        return self._super_parent

    @super_parent.setter
    def super_parent(self, super_parent):
        """Sets the super_parent of this GroupLevel.


        :param super_parent: The super_parent of this GroupLevel.  # noqa: E501
        :type: bool
        """

        self._super_parent = super_parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupLevel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
