# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProvisioningEntryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by_id': 'int',
        'created_date': 'date',
        'created_user': 'str',
        'id': 'int',
        'journal_entry': 'bool',
        'modified_by_id': 'int',
        'modified_user': 'str',
        'provisioning_entries': 'list[LoanProductProvisioningEntryData]',
        'reserved_amount': 'float'
    }

    attribute_map = {
        'created_by_id': 'createdById',
        'created_date': 'createdDate',
        'created_user': 'createdUser',
        'id': 'id',
        'journal_entry': 'journalEntry',
        'modified_by_id': 'modifiedById',
        'modified_user': 'modifiedUser',
        'provisioning_entries': 'provisioningEntries',
        'reserved_amount': 'reservedAmount'
    }

    def __init__(self, created_by_id=None, created_date=None, created_user=None, id=None, journal_entry=None, modified_by_id=None, modified_user=None, provisioning_entries=None, reserved_amount=None):  # noqa: E501
        """ProvisioningEntryData - a model defined in Swagger"""  # noqa: E501
        self._created_by_id = None
        self._created_date = None
        self._created_user = None
        self._id = None
        self._journal_entry = None
        self._modified_by_id = None
        self._modified_user = None
        self._provisioning_entries = None
        self._reserved_amount = None
        self.discriminator = None
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if created_user is not None:
            self.created_user = created_user
        if id is not None:
            self.id = id
        if journal_entry is not None:
            self.journal_entry = journal_entry
        if modified_by_id is not None:
            self.modified_by_id = modified_by_id
        if modified_user is not None:
            self.modified_user = modified_user
        if provisioning_entries is not None:
            self.provisioning_entries = provisioning_entries
        if reserved_amount is not None:
            self.reserved_amount = reserved_amount

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ProvisioningEntryData.  # noqa: E501


        :return: The created_by_id of this ProvisioningEntryData.  # noqa: E501
        :rtype: int
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ProvisioningEntryData.


        :param created_by_id: The created_by_id of this ProvisioningEntryData.  # noqa: E501
        :type: int
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this ProvisioningEntryData.  # noqa: E501


        :return: The created_date of this ProvisioningEntryData.  # noqa: E501
        :rtype: date
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProvisioningEntryData.


        :param created_date: The created_date of this ProvisioningEntryData.  # noqa: E501
        :type: date
        """

        self._created_date = created_date

    @property
    def created_user(self):
        """Gets the created_user of this ProvisioningEntryData.  # noqa: E501


        :return: The created_user of this ProvisioningEntryData.  # noqa: E501
        :rtype: str
        """
        return self._created_user

    @created_user.setter
    def created_user(self, created_user):
        """Sets the created_user of this ProvisioningEntryData.


        :param created_user: The created_user of this ProvisioningEntryData.  # noqa: E501
        :type: str
        """

        self._created_user = created_user

    @property
    def id(self):
        """Gets the id of this ProvisioningEntryData.  # noqa: E501


        :return: The id of this ProvisioningEntryData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProvisioningEntryData.


        :param id: The id of this ProvisioningEntryData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def journal_entry(self):
        """Gets the journal_entry of this ProvisioningEntryData.  # noqa: E501


        :return: The journal_entry of this ProvisioningEntryData.  # noqa: E501
        :rtype: bool
        """
        return self._journal_entry

    @journal_entry.setter
    def journal_entry(self, journal_entry):
        """Sets the journal_entry of this ProvisioningEntryData.


        :param journal_entry: The journal_entry of this ProvisioningEntryData.  # noqa: E501
        :type: bool
        """

        self._journal_entry = journal_entry

    @property
    def modified_by_id(self):
        """Gets the modified_by_id of this ProvisioningEntryData.  # noqa: E501


        :return: The modified_by_id of this ProvisioningEntryData.  # noqa: E501
        :rtype: int
        """
        return self._modified_by_id

    @modified_by_id.setter
    def modified_by_id(self, modified_by_id):
        """Sets the modified_by_id of this ProvisioningEntryData.


        :param modified_by_id: The modified_by_id of this ProvisioningEntryData.  # noqa: E501
        :type: int
        """

        self._modified_by_id = modified_by_id

    @property
    def modified_user(self):
        """Gets the modified_user of this ProvisioningEntryData.  # noqa: E501


        :return: The modified_user of this ProvisioningEntryData.  # noqa: E501
        :rtype: str
        """
        return self._modified_user

    @modified_user.setter
    def modified_user(self, modified_user):
        """Sets the modified_user of this ProvisioningEntryData.


        :param modified_user: The modified_user of this ProvisioningEntryData.  # noqa: E501
        :type: str
        """

        self._modified_user = modified_user

    @property
    def provisioning_entries(self):
        """Gets the provisioning_entries of this ProvisioningEntryData.  # noqa: E501


        :return: The provisioning_entries of this ProvisioningEntryData.  # noqa: E501
        :rtype: list[LoanProductProvisioningEntryData]
        """
        return self._provisioning_entries

    @provisioning_entries.setter
    def provisioning_entries(self, provisioning_entries):
        """Sets the provisioning_entries of this ProvisioningEntryData.


        :param provisioning_entries: The provisioning_entries of this ProvisioningEntryData.  # noqa: E501
        :type: list[LoanProductProvisioningEntryData]
        """

        self._provisioning_entries = provisioning_entries

    @property
    def reserved_amount(self):
        """Gets the reserved_amount of this ProvisioningEntryData.  # noqa: E501


        :return: The reserved_amount of this ProvisioningEntryData.  # noqa: E501
        :rtype: float
        """
        return self._reserved_amount

    @reserved_amount.setter
    def reserved_amount(self, reserved_amount):
        """Sets the reserved_amount of this ProvisioningEntryData.


        :param reserved_amount: The reserved_amount of this ProvisioningEntryData.  # noqa: E501
        :type: float
        """

        self._reserved_amount = reserved_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisioningEntryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisioningEntryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
