# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SurveyData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component_datas': 'list[ComponentData]',
        'country_code': 'str',
        'description': 'str',
        'id': 'int',
        'key': 'str',
        'name': 'str',
        'question_datas': 'list[QuestionData]',
        'valid_from': 'date',
        'valid_to': 'date'
    }

    attribute_map = {
        'component_datas': 'componentDatas',
        'country_code': 'countryCode',
        'description': 'description',
        'id': 'id',
        'key': 'key',
        'name': 'name',
        'question_datas': 'questionDatas',
        'valid_from': 'validFrom',
        'valid_to': 'validTo'
    }

    def __init__(self, component_datas=None, country_code=None, description=None, id=None, key=None, name=None, question_datas=None, valid_from=None, valid_to=None):  # noqa: E501
        """SurveyData - a model defined in Swagger"""  # noqa: E501
        self._component_datas = None
        self._country_code = None
        self._description = None
        self._id = None
        self._key = None
        self._name = None
        self._question_datas = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None
        if component_datas is not None:
            self.component_datas = component_datas
        if country_code is not None:
            self.country_code = country_code
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if question_datas is not None:
            self.question_datas = question_datas
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def component_datas(self):
        """Gets the component_datas of this SurveyData.  # noqa: E501


        :return: The component_datas of this SurveyData.  # noqa: E501
        :rtype: list[ComponentData]
        """
        return self._component_datas

    @component_datas.setter
    def component_datas(self, component_datas):
        """Sets the component_datas of this SurveyData.


        :param component_datas: The component_datas of this SurveyData.  # noqa: E501
        :type: list[ComponentData]
        """

        self._component_datas = component_datas

    @property
    def country_code(self):
        """Gets the country_code of this SurveyData.  # noqa: E501


        :return: The country_code of this SurveyData.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this SurveyData.


        :param country_code: The country_code of this SurveyData.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def description(self):
        """Gets the description of this SurveyData.  # noqa: E501


        :return: The description of this SurveyData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SurveyData.


        :param description: The description of this SurveyData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this SurveyData.  # noqa: E501


        :return: The id of this SurveyData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SurveyData.


        :param id: The id of this SurveyData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this SurveyData.  # noqa: E501


        :return: The key of this SurveyData.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SurveyData.


        :param key: The key of this SurveyData.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this SurveyData.  # noqa: E501


        :return: The name of this SurveyData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SurveyData.


        :param name: The name of this SurveyData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def question_datas(self):
        """Gets the question_datas of this SurveyData.  # noqa: E501


        :return: The question_datas of this SurveyData.  # noqa: E501
        :rtype: list[QuestionData]
        """
        return self._question_datas

    @question_datas.setter
    def question_datas(self, question_datas):
        """Sets the question_datas of this SurveyData.


        :param question_datas: The question_datas of this SurveyData.  # noqa: E501
        :type: list[QuestionData]
        """

        self._question_datas = question_datas

    @property
    def valid_from(self):
        """Gets the valid_from of this SurveyData.  # noqa: E501


        :return: The valid_from of this SurveyData.  # noqa: E501
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this SurveyData.


        :param valid_from: The valid_from of this SurveyData.  # noqa: E501
        :type: date
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this SurveyData.  # noqa: E501


        :return: The valid_to of this SurveyData.  # noqa: E501
        :rtype: date
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this SurveyData.


        :param valid_to: The valid_to of this SurveyData.  # noqa: E501
        :type: date
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SurveyData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurveyData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
