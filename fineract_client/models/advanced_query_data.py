# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdvancedQueryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_filters': 'list[ColumnFilterData]',
        'non_null_filters': 'list[ColumnFilterData]',
        'non_null_result_columns': 'list[str]',
        'result_columns': 'list[str]'
    }

    attribute_map = {
        'column_filters': 'columnFilters',
        'non_null_filters': 'nonNullFilters',
        'non_null_result_columns': 'nonNullResultColumns',
        'result_columns': 'resultColumns'
    }

    def __init__(self, column_filters=None, non_null_filters=None, non_null_result_columns=None, result_columns=None):  # noqa: E501
        """AdvancedQueryData - a model defined in Swagger"""  # noqa: E501
        self._column_filters = None
        self._non_null_filters = None
        self._non_null_result_columns = None
        self._result_columns = None
        self.discriminator = None
        if column_filters is not None:
            self.column_filters = column_filters
        if non_null_filters is not None:
            self.non_null_filters = non_null_filters
        if non_null_result_columns is not None:
            self.non_null_result_columns = non_null_result_columns
        if result_columns is not None:
            self.result_columns = result_columns

    @property
    def column_filters(self):
        """Gets the column_filters of this AdvancedQueryData.  # noqa: E501


        :return: The column_filters of this AdvancedQueryData.  # noqa: E501
        :rtype: list[ColumnFilterData]
        """
        return self._column_filters

    @column_filters.setter
    def column_filters(self, column_filters):
        """Sets the column_filters of this AdvancedQueryData.


        :param column_filters: The column_filters of this AdvancedQueryData.  # noqa: E501
        :type: list[ColumnFilterData]
        """

        self._column_filters = column_filters

    @property
    def non_null_filters(self):
        """Gets the non_null_filters of this AdvancedQueryData.  # noqa: E501


        :return: The non_null_filters of this AdvancedQueryData.  # noqa: E501
        :rtype: list[ColumnFilterData]
        """
        return self._non_null_filters

    @non_null_filters.setter
    def non_null_filters(self, non_null_filters):
        """Sets the non_null_filters of this AdvancedQueryData.


        :param non_null_filters: The non_null_filters of this AdvancedQueryData.  # noqa: E501
        :type: list[ColumnFilterData]
        """

        self._non_null_filters = non_null_filters

    @property
    def non_null_result_columns(self):
        """Gets the non_null_result_columns of this AdvancedQueryData.  # noqa: E501


        :return: The non_null_result_columns of this AdvancedQueryData.  # noqa: E501
        :rtype: list[str]
        """
        return self._non_null_result_columns

    @non_null_result_columns.setter
    def non_null_result_columns(self, non_null_result_columns):
        """Sets the non_null_result_columns of this AdvancedQueryData.


        :param non_null_result_columns: The non_null_result_columns of this AdvancedQueryData.  # noqa: E501
        :type: list[str]
        """

        self._non_null_result_columns = non_null_result_columns

    @property
    def result_columns(self):
        """Gets the result_columns of this AdvancedQueryData.  # noqa: E501


        :return: The result_columns of this AdvancedQueryData.  # noqa: E501
        :rtype: list[str]
        """
        return self._result_columns

    @result_columns.setter
    def result_columns(self, result_columns):
        """Sets the result_columns of this AdvancedQueryData.


        :param result_columns: The result_columns of this AdvancedQueryData.  # noqa: E501
        :type: list[str]
        """

        self._result_columns = result_columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvancedQueryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedQueryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
