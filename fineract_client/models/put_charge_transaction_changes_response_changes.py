# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PutChargeTransactionChangesResponseChanges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        '_date': 'date',
        'external_id': 'str',
        'fee_charges_portion': 'float',
        'id': 'int',
        'interest_portion': 'float',
        'outstanding_loan_balance': 'float',
        'penalty_charges_portion': 'float',
        'principal_portion': 'float'
    }

    attribute_map = {
        'amount': 'amount',
        '_date': 'date',
        'external_id': 'externalId',
        'fee_charges_portion': 'feeChargesPortion',
        'id': 'id',
        'interest_portion': 'interestPortion',
        'outstanding_loan_balance': 'outstandingLoanBalance',
        'penalty_charges_portion': 'penaltyChargesPortion',
        'principal_portion': 'principalPortion'
    }

    def __init__(self, amount=None, _date=None, external_id=None, fee_charges_portion=None, id=None, interest_portion=None, outstanding_loan_balance=None, penalty_charges_portion=None, principal_portion=None):  # noqa: E501
        """PutChargeTransactionChangesResponseChanges - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self.__date = None
        self._external_id = None
        self._fee_charges_portion = None
        self._id = None
        self._interest_portion = None
        self._outstanding_loan_balance = None
        self._penalty_charges_portion = None
        self._principal_portion = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if _date is not None:
            self._date = _date
        if external_id is not None:
            self.external_id = external_id
        if fee_charges_portion is not None:
            self.fee_charges_portion = fee_charges_portion
        if id is not None:
            self.id = id
        if interest_portion is not None:
            self.interest_portion = interest_portion
        if outstanding_loan_balance is not None:
            self.outstanding_loan_balance = outstanding_loan_balance
        if penalty_charges_portion is not None:
            self.penalty_charges_portion = penalty_charges_portion
        if principal_portion is not None:
            self.principal_portion = principal_portion

    @property
    def amount(self):
        """Gets the amount of this PutChargeTransactionChangesResponseChanges.  # noqa: E501


        :return: The amount of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PutChargeTransactionChangesResponseChanges.


        :param amount: The amount of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def _date(self):
        """Gets the _date of this PutChargeTransactionChangesResponseChanges.  # noqa: E501


        :return: The _date of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PutChargeTransactionChangesResponseChanges.


        :param _date: The _date of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def external_id(self):
        """Gets the external_id of this PutChargeTransactionChangesResponseChanges.  # noqa: E501


        :return: The external_id of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this PutChargeTransactionChangesResponseChanges.


        :param external_id: The external_id of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def fee_charges_portion(self):
        """Gets the fee_charges_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501


        :return: The fee_charges_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :rtype: float
        """
        return self._fee_charges_portion

    @fee_charges_portion.setter
    def fee_charges_portion(self, fee_charges_portion):
        """Sets the fee_charges_portion of this PutChargeTransactionChangesResponseChanges.


        :param fee_charges_portion: The fee_charges_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :type: float
        """

        self._fee_charges_portion = fee_charges_portion

    @property
    def id(self):
        """Gets the id of this PutChargeTransactionChangesResponseChanges.  # noqa: E501


        :return: The id of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PutChargeTransactionChangesResponseChanges.


        :param id: The id of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interest_portion(self):
        """Gets the interest_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501


        :return: The interest_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :rtype: float
        """
        return self._interest_portion

    @interest_portion.setter
    def interest_portion(self, interest_portion):
        """Sets the interest_portion of this PutChargeTransactionChangesResponseChanges.


        :param interest_portion: The interest_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :type: float
        """

        self._interest_portion = interest_portion

    @property
    def outstanding_loan_balance(self):
        """Gets the outstanding_loan_balance of this PutChargeTransactionChangesResponseChanges.  # noqa: E501


        :return: The outstanding_loan_balance of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_loan_balance

    @outstanding_loan_balance.setter
    def outstanding_loan_balance(self, outstanding_loan_balance):
        """Sets the outstanding_loan_balance of this PutChargeTransactionChangesResponseChanges.


        :param outstanding_loan_balance: The outstanding_loan_balance of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :type: float
        """

        self._outstanding_loan_balance = outstanding_loan_balance

    @property
    def penalty_charges_portion(self):
        """Gets the penalty_charges_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501


        :return: The penalty_charges_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :rtype: float
        """
        return self._penalty_charges_portion

    @penalty_charges_portion.setter
    def penalty_charges_portion(self, penalty_charges_portion):
        """Sets the penalty_charges_portion of this PutChargeTransactionChangesResponseChanges.


        :param penalty_charges_portion: The penalty_charges_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :type: float
        """

        self._penalty_charges_portion = penalty_charges_portion

    @property
    def principal_portion(self):
        """Gets the principal_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501


        :return: The principal_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :rtype: float
        """
        return self._principal_portion

    @principal_portion.setter
    def principal_portion(self, principal_portion):
        """Sets the principal_portion of this PutChargeTransactionChangesResponseChanges.


        :param principal_portion: The principal_portion of this PutChargeTransactionChangesResponseChanges.  # noqa: E501
        :type: float
        """

        self._principal_portion = principal_portion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutChargeTransactionChangesResponseChanges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutChargeTransactionChangesResponseChanges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
