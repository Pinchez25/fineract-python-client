# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientFamilyMembersData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'int',
        'client_id': 'int',
        'date_of_birth': 'date',
        'first_name': 'str',
        'gender': 'str',
        'gender_id': 'int',
        'gender_id_options': 'list[CodeValueData]',
        'id': 'int',
        'is_dependent': 'bool',
        'last_name': 'str',
        'marital_status': 'str',
        'marital_status_id': 'int',
        'marital_status_id_options': 'list[CodeValueData]',
        'middle_name': 'str',
        'mobile_number': 'str',
        'profession': 'str',
        'profession_id': 'int',
        'profession_id_options': 'list[CodeValueData]',
        'qualification': 'str',
        'relationship': 'str',
        'relationship_id': 'int',
        'relationship_id_options': 'list[CodeValueData]'
    }

    attribute_map = {
        'age': 'age',
        'client_id': 'clientId',
        'date_of_birth': 'dateOfBirth',
        'first_name': 'firstName',
        'gender': 'gender',
        'gender_id': 'genderId',
        'gender_id_options': 'genderIdOptions',
        'id': 'id',
        'is_dependent': 'isDependent',
        'last_name': 'lastName',
        'marital_status': 'maritalStatus',
        'marital_status_id': 'maritalStatusId',
        'marital_status_id_options': 'maritalStatusIdOptions',
        'middle_name': 'middleName',
        'mobile_number': 'mobileNumber',
        'profession': 'profession',
        'profession_id': 'professionId',
        'profession_id_options': 'professionIdOptions',
        'qualification': 'qualification',
        'relationship': 'relationship',
        'relationship_id': 'relationshipId',
        'relationship_id_options': 'relationshipIdOptions'
    }

    def __init__(self, age=None, client_id=None, date_of_birth=None, first_name=None, gender=None, gender_id=None, gender_id_options=None, id=None, is_dependent=None, last_name=None, marital_status=None, marital_status_id=None, marital_status_id_options=None, middle_name=None, mobile_number=None, profession=None, profession_id=None, profession_id_options=None, qualification=None, relationship=None, relationship_id=None, relationship_id_options=None):  # noqa: E501
        """ClientFamilyMembersData - a model defined in Swagger"""  # noqa: E501
        self._age = None
        self._client_id = None
        self._date_of_birth = None
        self._first_name = None
        self._gender = None
        self._gender_id = None
        self._gender_id_options = None
        self._id = None
        self._is_dependent = None
        self._last_name = None
        self._marital_status = None
        self._marital_status_id = None
        self._marital_status_id_options = None
        self._middle_name = None
        self._mobile_number = None
        self._profession = None
        self._profession_id = None
        self._profession_id_options = None
        self._qualification = None
        self._relationship = None
        self._relationship_id = None
        self._relationship_id_options = None
        self.discriminator = None
        if age is not None:
            self.age = age
        if client_id is not None:
            self.client_id = client_id
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if first_name is not None:
            self.first_name = first_name
        if gender is not None:
            self.gender = gender
        if gender_id is not None:
            self.gender_id = gender_id
        if gender_id_options is not None:
            self.gender_id_options = gender_id_options
        if id is not None:
            self.id = id
        if is_dependent is not None:
            self.is_dependent = is_dependent
        if last_name is not None:
            self.last_name = last_name
        if marital_status is not None:
            self.marital_status = marital_status
        if marital_status_id is not None:
            self.marital_status_id = marital_status_id
        if marital_status_id_options is not None:
            self.marital_status_id_options = marital_status_id_options
        if middle_name is not None:
            self.middle_name = middle_name
        if mobile_number is not None:
            self.mobile_number = mobile_number
        if profession is not None:
            self.profession = profession
        if profession_id is not None:
            self.profession_id = profession_id
        if profession_id_options is not None:
            self.profession_id_options = profession_id_options
        if qualification is not None:
            self.qualification = qualification
        if relationship is not None:
            self.relationship = relationship
        if relationship_id is not None:
            self.relationship_id = relationship_id
        if relationship_id_options is not None:
            self.relationship_id_options = relationship_id_options

    @property
    def age(self):
        """Gets the age of this ClientFamilyMembersData.  # noqa: E501


        :return: The age of this ClientFamilyMembersData.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this ClientFamilyMembersData.


        :param age: The age of this ClientFamilyMembersData.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def client_id(self):
        """Gets the client_id of this ClientFamilyMembersData.  # noqa: E501


        :return: The client_id of this ClientFamilyMembersData.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ClientFamilyMembersData.


        :param client_id: The client_id of this ClientFamilyMembersData.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this ClientFamilyMembersData.  # noqa: E501


        :return: The date_of_birth of this ClientFamilyMembersData.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this ClientFamilyMembersData.


        :param date_of_birth: The date_of_birth of this ClientFamilyMembersData.  # noqa: E501
        :type: date
        """

        self._date_of_birth = date_of_birth

    @property
    def first_name(self):
        """Gets the first_name of this ClientFamilyMembersData.  # noqa: E501


        :return: The first_name of this ClientFamilyMembersData.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ClientFamilyMembersData.


        :param first_name: The first_name of this ClientFamilyMembersData.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this ClientFamilyMembersData.  # noqa: E501


        :return: The gender of this ClientFamilyMembersData.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ClientFamilyMembersData.


        :param gender: The gender of this ClientFamilyMembersData.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def gender_id(self):
        """Gets the gender_id of this ClientFamilyMembersData.  # noqa: E501


        :return: The gender_id of this ClientFamilyMembersData.  # noqa: E501
        :rtype: int
        """
        return self._gender_id

    @gender_id.setter
    def gender_id(self, gender_id):
        """Sets the gender_id of this ClientFamilyMembersData.


        :param gender_id: The gender_id of this ClientFamilyMembersData.  # noqa: E501
        :type: int
        """

        self._gender_id = gender_id

    @property
    def gender_id_options(self):
        """Gets the gender_id_options of this ClientFamilyMembersData.  # noqa: E501


        :return: The gender_id_options of this ClientFamilyMembersData.  # noqa: E501
        :rtype: list[CodeValueData]
        """
        return self._gender_id_options

    @gender_id_options.setter
    def gender_id_options(self, gender_id_options):
        """Sets the gender_id_options of this ClientFamilyMembersData.


        :param gender_id_options: The gender_id_options of this ClientFamilyMembersData.  # noqa: E501
        :type: list[CodeValueData]
        """

        self._gender_id_options = gender_id_options

    @property
    def id(self):
        """Gets the id of this ClientFamilyMembersData.  # noqa: E501


        :return: The id of this ClientFamilyMembersData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientFamilyMembersData.


        :param id: The id of this ClientFamilyMembersData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_dependent(self):
        """Gets the is_dependent of this ClientFamilyMembersData.  # noqa: E501


        :return: The is_dependent of this ClientFamilyMembersData.  # noqa: E501
        :rtype: bool
        """
        return self._is_dependent

    @is_dependent.setter
    def is_dependent(self, is_dependent):
        """Sets the is_dependent of this ClientFamilyMembersData.


        :param is_dependent: The is_dependent of this ClientFamilyMembersData.  # noqa: E501
        :type: bool
        """

        self._is_dependent = is_dependent

    @property
    def last_name(self):
        """Gets the last_name of this ClientFamilyMembersData.  # noqa: E501


        :return: The last_name of this ClientFamilyMembersData.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ClientFamilyMembersData.


        :param last_name: The last_name of this ClientFamilyMembersData.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def marital_status(self):
        """Gets the marital_status of this ClientFamilyMembersData.  # noqa: E501


        :return: The marital_status of this ClientFamilyMembersData.  # noqa: E501
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this ClientFamilyMembersData.


        :param marital_status: The marital_status of this ClientFamilyMembersData.  # noqa: E501
        :type: str
        """

        self._marital_status = marital_status

    @property
    def marital_status_id(self):
        """Gets the marital_status_id of this ClientFamilyMembersData.  # noqa: E501


        :return: The marital_status_id of this ClientFamilyMembersData.  # noqa: E501
        :rtype: int
        """
        return self._marital_status_id

    @marital_status_id.setter
    def marital_status_id(self, marital_status_id):
        """Sets the marital_status_id of this ClientFamilyMembersData.


        :param marital_status_id: The marital_status_id of this ClientFamilyMembersData.  # noqa: E501
        :type: int
        """

        self._marital_status_id = marital_status_id

    @property
    def marital_status_id_options(self):
        """Gets the marital_status_id_options of this ClientFamilyMembersData.  # noqa: E501


        :return: The marital_status_id_options of this ClientFamilyMembersData.  # noqa: E501
        :rtype: list[CodeValueData]
        """
        return self._marital_status_id_options

    @marital_status_id_options.setter
    def marital_status_id_options(self, marital_status_id_options):
        """Sets the marital_status_id_options of this ClientFamilyMembersData.


        :param marital_status_id_options: The marital_status_id_options of this ClientFamilyMembersData.  # noqa: E501
        :type: list[CodeValueData]
        """

        self._marital_status_id_options = marital_status_id_options

    @property
    def middle_name(self):
        """Gets the middle_name of this ClientFamilyMembersData.  # noqa: E501


        :return: The middle_name of this ClientFamilyMembersData.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this ClientFamilyMembersData.


        :param middle_name: The middle_name of this ClientFamilyMembersData.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def mobile_number(self):
        """Gets the mobile_number of this ClientFamilyMembersData.  # noqa: E501


        :return: The mobile_number of this ClientFamilyMembersData.  # noqa: E501
        :rtype: str
        """
        return self._mobile_number

    @mobile_number.setter
    def mobile_number(self, mobile_number):
        """Sets the mobile_number of this ClientFamilyMembersData.


        :param mobile_number: The mobile_number of this ClientFamilyMembersData.  # noqa: E501
        :type: str
        """

        self._mobile_number = mobile_number

    @property
    def profession(self):
        """Gets the profession of this ClientFamilyMembersData.  # noqa: E501


        :return: The profession of this ClientFamilyMembersData.  # noqa: E501
        :rtype: str
        """
        return self._profession

    @profession.setter
    def profession(self, profession):
        """Sets the profession of this ClientFamilyMembersData.


        :param profession: The profession of this ClientFamilyMembersData.  # noqa: E501
        :type: str
        """

        self._profession = profession

    @property
    def profession_id(self):
        """Gets the profession_id of this ClientFamilyMembersData.  # noqa: E501


        :return: The profession_id of this ClientFamilyMembersData.  # noqa: E501
        :rtype: int
        """
        return self._profession_id

    @profession_id.setter
    def profession_id(self, profession_id):
        """Sets the profession_id of this ClientFamilyMembersData.


        :param profession_id: The profession_id of this ClientFamilyMembersData.  # noqa: E501
        :type: int
        """

        self._profession_id = profession_id

    @property
    def profession_id_options(self):
        """Gets the profession_id_options of this ClientFamilyMembersData.  # noqa: E501


        :return: The profession_id_options of this ClientFamilyMembersData.  # noqa: E501
        :rtype: list[CodeValueData]
        """
        return self._profession_id_options

    @profession_id_options.setter
    def profession_id_options(self, profession_id_options):
        """Sets the profession_id_options of this ClientFamilyMembersData.


        :param profession_id_options: The profession_id_options of this ClientFamilyMembersData.  # noqa: E501
        :type: list[CodeValueData]
        """

        self._profession_id_options = profession_id_options

    @property
    def qualification(self):
        """Gets the qualification of this ClientFamilyMembersData.  # noqa: E501


        :return: The qualification of this ClientFamilyMembersData.  # noqa: E501
        :rtype: str
        """
        return self._qualification

    @qualification.setter
    def qualification(self, qualification):
        """Sets the qualification of this ClientFamilyMembersData.


        :param qualification: The qualification of this ClientFamilyMembersData.  # noqa: E501
        :type: str
        """

        self._qualification = qualification

    @property
    def relationship(self):
        """Gets the relationship of this ClientFamilyMembersData.  # noqa: E501


        :return: The relationship of this ClientFamilyMembersData.  # noqa: E501
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this ClientFamilyMembersData.


        :param relationship: The relationship of this ClientFamilyMembersData.  # noqa: E501
        :type: str
        """

        self._relationship = relationship

    @property
    def relationship_id(self):
        """Gets the relationship_id of this ClientFamilyMembersData.  # noqa: E501


        :return: The relationship_id of this ClientFamilyMembersData.  # noqa: E501
        :rtype: int
        """
        return self._relationship_id

    @relationship_id.setter
    def relationship_id(self, relationship_id):
        """Sets the relationship_id of this ClientFamilyMembersData.


        :param relationship_id: The relationship_id of this ClientFamilyMembersData.  # noqa: E501
        :type: int
        """

        self._relationship_id = relationship_id

    @property
    def relationship_id_options(self):
        """Gets the relationship_id_options of this ClientFamilyMembersData.  # noqa: E501


        :return: The relationship_id_options of this ClientFamilyMembersData.  # noqa: E501
        :rtype: list[CodeValueData]
        """
        return self._relationship_id_options

    @relationship_id_options.setter
    def relationship_id_options(self, relationship_id_options):
        """Sets the relationship_id_options of this ClientFamilyMembersData.


        :param relationship_id_options: The relationship_id_options of this ClientFamilyMembersData.  # noqa: E501
        :type: list[CodeValueData]
        """

        self._relationship_id_options = relationship_id_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientFamilyMembersData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientFamilyMembersData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
