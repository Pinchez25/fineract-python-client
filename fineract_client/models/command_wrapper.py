# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommandWrapper(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_name': 'str',
        'cache_resource': 'bool',
        'client_id': 'int',
        'command_id': 'int',
        'create': 'bool',
        'create_datatable': 'bool',
        'credit_bureau_id': 'int',
        'currency_resource': 'bool',
        'datatable_resource': 'bool',
        'delete': 'bool',
        'delete_datatable': 'bool',
        'delete_multiple': 'bool',
        'delete_one_to_one': 'bool',
        'delete_operation': 'bool',
        'entity_id': 'int',
        'entity_name': 'str',
        'full_fil_survey': 'bool',
        'group_id': 'int',
        'href': 'str',
        'idempotency_key': 'str',
        'job_name': 'str',
        'json': 'str',
        'loan_disburse_detail_resource': 'bool',
        'loan_id': 'int',
        'note_resource': 'bool',
        'office_id': 'int',
        'organisation_credit_bureau_id': 'int',
        'password_preferences_resource': 'bool',
        'permission_resource': 'bool',
        'product_id': 'int',
        'register_datatable': 'bool',
        'register_survey': 'bool',
        'savings_id': 'int',
        'subentity_id': 'int',
        'survey_resource': 'bool',
        'task_permission_name': 'str',
        'template_id': 'int',
        'transaction_id': 'str',
        'update': 'bool',
        'update_datatable': 'bool',
        'update_disbursement_date': 'bool',
        'update_multiple': 'bool',
        'update_one_to_one': 'bool',
        'update_operation': 'bool',
        'user_resource': 'bool',
        'working_days_resource': 'bool'
    }

    attribute_map = {
        'action_name': 'actionName',
        'cache_resource': 'cacheResource',
        'client_id': 'clientId',
        'command_id': 'commandId',
        'create': 'create',
        'create_datatable': 'createDatatable',
        'credit_bureau_id': 'creditBureauId',
        'currency_resource': 'currencyResource',
        'datatable_resource': 'datatableResource',
        'delete': 'delete',
        'delete_datatable': 'deleteDatatable',
        'delete_multiple': 'deleteMultiple',
        'delete_one_to_one': 'deleteOneToOne',
        'delete_operation': 'deleteOperation',
        'entity_id': 'entityId',
        'entity_name': 'entityName',
        'full_fil_survey': 'fullFilSurvey',
        'group_id': 'groupId',
        'href': 'href',
        'idempotency_key': 'idempotencyKey',
        'job_name': 'jobName',
        'json': 'json',
        'loan_disburse_detail_resource': 'loanDisburseDetailResource',
        'loan_id': 'loanId',
        'note_resource': 'noteResource',
        'office_id': 'officeId',
        'organisation_credit_bureau_id': 'organisationCreditBureauId',
        'password_preferences_resource': 'passwordPreferencesResource',
        'permission_resource': 'permissionResource',
        'product_id': 'productId',
        'register_datatable': 'registerDatatable',
        'register_survey': 'registerSurvey',
        'savings_id': 'savingsId',
        'subentity_id': 'subentityId',
        'survey_resource': 'surveyResource',
        'task_permission_name': 'taskPermissionName',
        'template_id': 'templateId',
        'transaction_id': 'transactionId',
        'update': 'update',
        'update_datatable': 'updateDatatable',
        'update_disbursement_date': 'updateDisbursementDate',
        'update_multiple': 'updateMultiple',
        'update_one_to_one': 'updateOneToOne',
        'update_operation': 'updateOperation',
        'user_resource': 'userResource',
        'working_days_resource': 'workingDaysResource'
    }

    def __init__(self, action_name=None, cache_resource=None, client_id=None, command_id=None, create=None, create_datatable=None, credit_bureau_id=None, currency_resource=None, datatable_resource=None, delete=None, delete_datatable=None, delete_multiple=None, delete_one_to_one=None, delete_operation=None, entity_id=None, entity_name=None, full_fil_survey=None, group_id=None, href=None, idempotency_key=None, job_name=None, json=None, loan_disburse_detail_resource=None, loan_id=None, note_resource=None, office_id=None, organisation_credit_bureau_id=None, password_preferences_resource=None, permission_resource=None, product_id=None, register_datatable=None, register_survey=None, savings_id=None, subentity_id=None, survey_resource=None, task_permission_name=None, template_id=None, transaction_id=None, update=None, update_datatable=None, update_disbursement_date=None, update_multiple=None, update_one_to_one=None, update_operation=None, user_resource=None, working_days_resource=None):  # noqa: E501
        """CommandWrapper - a model defined in Swagger"""  # noqa: E501
        self._action_name = None
        self._cache_resource = None
        self._client_id = None
        self._command_id = None
        self._create = None
        self._create_datatable = None
        self._credit_bureau_id = None
        self._currency_resource = None
        self._datatable_resource = None
        self._delete = None
        self._delete_datatable = None
        self._delete_multiple = None
        self._delete_one_to_one = None
        self._delete_operation = None
        self._entity_id = None
        self._entity_name = None
        self._full_fil_survey = None
        self._group_id = None
        self._href = None
        self._idempotency_key = None
        self._job_name = None
        self._json = None
        self._loan_disburse_detail_resource = None
        self._loan_id = None
        self._note_resource = None
        self._office_id = None
        self._organisation_credit_bureau_id = None
        self._password_preferences_resource = None
        self._permission_resource = None
        self._product_id = None
        self._register_datatable = None
        self._register_survey = None
        self._savings_id = None
        self._subentity_id = None
        self._survey_resource = None
        self._task_permission_name = None
        self._template_id = None
        self._transaction_id = None
        self._update = None
        self._update_datatable = None
        self._update_disbursement_date = None
        self._update_multiple = None
        self._update_one_to_one = None
        self._update_operation = None
        self._user_resource = None
        self._working_days_resource = None
        self.discriminator = None
        if action_name is not None:
            self.action_name = action_name
        if cache_resource is not None:
            self.cache_resource = cache_resource
        if client_id is not None:
            self.client_id = client_id
        if command_id is not None:
            self.command_id = command_id
        if create is not None:
            self.create = create
        if create_datatable is not None:
            self.create_datatable = create_datatable
        if credit_bureau_id is not None:
            self.credit_bureau_id = credit_bureau_id
        if currency_resource is not None:
            self.currency_resource = currency_resource
        if datatable_resource is not None:
            self.datatable_resource = datatable_resource
        if delete is not None:
            self.delete = delete
        if delete_datatable is not None:
            self.delete_datatable = delete_datatable
        if delete_multiple is not None:
            self.delete_multiple = delete_multiple
        if delete_one_to_one is not None:
            self.delete_one_to_one = delete_one_to_one
        if delete_operation is not None:
            self.delete_operation = delete_operation
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_name is not None:
            self.entity_name = entity_name
        if full_fil_survey is not None:
            self.full_fil_survey = full_fil_survey
        if group_id is not None:
            self.group_id = group_id
        if href is not None:
            self.href = href
        if idempotency_key is not None:
            self.idempotency_key = idempotency_key
        if job_name is not None:
            self.job_name = job_name
        if json is not None:
            self.json = json
        if loan_disburse_detail_resource is not None:
            self.loan_disburse_detail_resource = loan_disburse_detail_resource
        if loan_id is not None:
            self.loan_id = loan_id
        if note_resource is not None:
            self.note_resource = note_resource
        if office_id is not None:
            self.office_id = office_id
        if organisation_credit_bureau_id is not None:
            self.organisation_credit_bureau_id = organisation_credit_bureau_id
        if password_preferences_resource is not None:
            self.password_preferences_resource = password_preferences_resource
        if permission_resource is not None:
            self.permission_resource = permission_resource
        if product_id is not None:
            self.product_id = product_id
        if register_datatable is not None:
            self.register_datatable = register_datatable
        if register_survey is not None:
            self.register_survey = register_survey
        if savings_id is not None:
            self.savings_id = savings_id
        if subentity_id is not None:
            self.subentity_id = subentity_id
        if survey_resource is not None:
            self.survey_resource = survey_resource
        if task_permission_name is not None:
            self.task_permission_name = task_permission_name
        if template_id is not None:
            self.template_id = template_id
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if update is not None:
            self.update = update
        if update_datatable is not None:
            self.update_datatable = update_datatable
        if update_disbursement_date is not None:
            self.update_disbursement_date = update_disbursement_date
        if update_multiple is not None:
            self.update_multiple = update_multiple
        if update_one_to_one is not None:
            self.update_one_to_one = update_one_to_one
        if update_operation is not None:
            self.update_operation = update_operation
        if user_resource is not None:
            self.user_resource = user_resource
        if working_days_resource is not None:
            self.working_days_resource = working_days_resource

    @property
    def action_name(self):
        """Gets the action_name of this CommandWrapper.  # noqa: E501


        :return: The action_name of this CommandWrapper.  # noqa: E501
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this CommandWrapper.


        :param action_name: The action_name of this CommandWrapper.  # noqa: E501
        :type: str
        """

        self._action_name = action_name

    @property
    def cache_resource(self):
        """Gets the cache_resource of this CommandWrapper.  # noqa: E501


        :return: The cache_resource of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._cache_resource

    @cache_resource.setter
    def cache_resource(self, cache_resource):
        """Sets the cache_resource of this CommandWrapper.


        :param cache_resource: The cache_resource of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._cache_resource = cache_resource

    @property
    def client_id(self):
        """Gets the client_id of this CommandWrapper.  # noqa: E501


        :return: The client_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CommandWrapper.


        :param client_id: The client_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def command_id(self):
        """Gets the command_id of this CommandWrapper.  # noqa: E501


        :return: The command_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this CommandWrapper.


        :param command_id: The command_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._command_id = command_id

    @property
    def create(self):
        """Gets the create of this CommandWrapper.  # noqa: E501


        :return: The create of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this CommandWrapper.


        :param create: The create of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._create = create

    @property
    def create_datatable(self):
        """Gets the create_datatable of this CommandWrapper.  # noqa: E501


        :return: The create_datatable of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._create_datatable

    @create_datatable.setter
    def create_datatable(self, create_datatable):
        """Sets the create_datatable of this CommandWrapper.


        :param create_datatable: The create_datatable of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._create_datatable = create_datatable

    @property
    def credit_bureau_id(self):
        """Gets the credit_bureau_id of this CommandWrapper.  # noqa: E501


        :return: The credit_bureau_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._credit_bureau_id

    @credit_bureau_id.setter
    def credit_bureau_id(self, credit_bureau_id):
        """Sets the credit_bureau_id of this CommandWrapper.


        :param credit_bureau_id: The credit_bureau_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._credit_bureau_id = credit_bureau_id

    @property
    def currency_resource(self):
        """Gets the currency_resource of this CommandWrapper.  # noqa: E501


        :return: The currency_resource of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._currency_resource

    @currency_resource.setter
    def currency_resource(self, currency_resource):
        """Sets the currency_resource of this CommandWrapper.


        :param currency_resource: The currency_resource of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._currency_resource = currency_resource

    @property
    def datatable_resource(self):
        """Gets the datatable_resource of this CommandWrapper.  # noqa: E501


        :return: The datatable_resource of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._datatable_resource

    @datatable_resource.setter
    def datatable_resource(self, datatable_resource):
        """Sets the datatable_resource of this CommandWrapper.


        :param datatable_resource: The datatable_resource of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._datatable_resource = datatable_resource

    @property
    def delete(self):
        """Gets the delete of this CommandWrapper.  # noqa: E501


        :return: The delete of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this CommandWrapper.


        :param delete: The delete of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def delete_datatable(self):
        """Gets the delete_datatable of this CommandWrapper.  # noqa: E501


        :return: The delete_datatable of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._delete_datatable

    @delete_datatable.setter
    def delete_datatable(self, delete_datatable):
        """Sets the delete_datatable of this CommandWrapper.


        :param delete_datatable: The delete_datatable of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._delete_datatable = delete_datatable

    @property
    def delete_multiple(self):
        """Gets the delete_multiple of this CommandWrapper.  # noqa: E501


        :return: The delete_multiple of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._delete_multiple

    @delete_multiple.setter
    def delete_multiple(self, delete_multiple):
        """Sets the delete_multiple of this CommandWrapper.


        :param delete_multiple: The delete_multiple of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._delete_multiple = delete_multiple

    @property
    def delete_one_to_one(self):
        """Gets the delete_one_to_one of this CommandWrapper.  # noqa: E501


        :return: The delete_one_to_one of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._delete_one_to_one

    @delete_one_to_one.setter
    def delete_one_to_one(self, delete_one_to_one):
        """Sets the delete_one_to_one of this CommandWrapper.


        :param delete_one_to_one: The delete_one_to_one of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._delete_one_to_one = delete_one_to_one

    @property
    def delete_operation(self):
        """Gets the delete_operation of this CommandWrapper.  # noqa: E501


        :return: The delete_operation of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._delete_operation

    @delete_operation.setter
    def delete_operation(self, delete_operation):
        """Sets the delete_operation of this CommandWrapper.


        :param delete_operation: The delete_operation of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._delete_operation = delete_operation

    @property
    def entity_id(self):
        """Gets the entity_id of this CommandWrapper.  # noqa: E501


        :return: The entity_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this CommandWrapper.


        :param entity_id: The entity_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_name(self):
        """Gets the entity_name of this CommandWrapper.  # noqa: E501


        :return: The entity_name of this CommandWrapper.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this CommandWrapper.


        :param entity_name: The entity_name of this CommandWrapper.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    @property
    def full_fil_survey(self):
        """Gets the full_fil_survey of this CommandWrapper.  # noqa: E501


        :return: The full_fil_survey of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._full_fil_survey

    @full_fil_survey.setter
    def full_fil_survey(self, full_fil_survey):
        """Sets the full_fil_survey of this CommandWrapper.


        :param full_fil_survey: The full_fil_survey of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._full_fil_survey = full_fil_survey

    @property
    def group_id(self):
        """Gets the group_id of this CommandWrapper.  # noqa: E501


        :return: The group_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CommandWrapper.


        :param group_id: The group_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def href(self):
        """Gets the href of this CommandWrapper.  # noqa: E501


        :return: The href of this CommandWrapper.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this CommandWrapper.


        :param href: The href of this CommandWrapper.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CommandWrapper.  # noqa: E501


        :return: The idempotency_key of this CommandWrapper.  # noqa: E501
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CommandWrapper.


        :param idempotency_key: The idempotency_key of this CommandWrapper.  # noqa: E501
        :type: str
        """

        self._idempotency_key = idempotency_key

    @property
    def job_name(self):
        """Gets the job_name of this CommandWrapper.  # noqa: E501


        :return: The job_name of this CommandWrapper.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this CommandWrapper.


        :param job_name: The job_name of this CommandWrapper.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def json(self):
        """Gets the json of this CommandWrapper.  # noqa: E501


        :return: The json of this CommandWrapper.  # noqa: E501
        :rtype: str
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this CommandWrapper.


        :param json: The json of this CommandWrapper.  # noqa: E501
        :type: str
        """

        self._json = json

    @property
    def loan_disburse_detail_resource(self):
        """Gets the loan_disburse_detail_resource of this CommandWrapper.  # noqa: E501


        :return: The loan_disburse_detail_resource of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._loan_disburse_detail_resource

    @loan_disburse_detail_resource.setter
    def loan_disburse_detail_resource(self, loan_disburse_detail_resource):
        """Sets the loan_disburse_detail_resource of this CommandWrapper.


        :param loan_disburse_detail_resource: The loan_disburse_detail_resource of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._loan_disburse_detail_resource = loan_disburse_detail_resource

    @property
    def loan_id(self):
        """Gets the loan_id of this CommandWrapper.  # noqa: E501


        :return: The loan_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """Sets the loan_id of this CommandWrapper.


        :param loan_id: The loan_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._loan_id = loan_id

    @property
    def note_resource(self):
        """Gets the note_resource of this CommandWrapper.  # noqa: E501


        :return: The note_resource of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._note_resource

    @note_resource.setter
    def note_resource(self, note_resource):
        """Sets the note_resource of this CommandWrapper.


        :param note_resource: The note_resource of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._note_resource = note_resource

    @property
    def office_id(self):
        """Gets the office_id of this CommandWrapper.  # noqa: E501


        :return: The office_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this CommandWrapper.


        :param office_id: The office_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def organisation_credit_bureau_id(self):
        """Gets the organisation_credit_bureau_id of this CommandWrapper.  # noqa: E501


        :return: The organisation_credit_bureau_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._organisation_credit_bureau_id

    @organisation_credit_bureau_id.setter
    def organisation_credit_bureau_id(self, organisation_credit_bureau_id):
        """Sets the organisation_credit_bureau_id of this CommandWrapper.


        :param organisation_credit_bureau_id: The organisation_credit_bureau_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._organisation_credit_bureau_id = organisation_credit_bureau_id

    @property
    def password_preferences_resource(self):
        """Gets the password_preferences_resource of this CommandWrapper.  # noqa: E501


        :return: The password_preferences_resource of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._password_preferences_resource

    @password_preferences_resource.setter
    def password_preferences_resource(self, password_preferences_resource):
        """Sets the password_preferences_resource of this CommandWrapper.


        :param password_preferences_resource: The password_preferences_resource of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._password_preferences_resource = password_preferences_resource

    @property
    def permission_resource(self):
        """Gets the permission_resource of this CommandWrapper.  # noqa: E501


        :return: The permission_resource of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._permission_resource

    @permission_resource.setter
    def permission_resource(self, permission_resource):
        """Sets the permission_resource of this CommandWrapper.


        :param permission_resource: The permission_resource of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._permission_resource = permission_resource

    @property
    def product_id(self):
        """Gets the product_id of this CommandWrapper.  # noqa: E501


        :return: The product_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this CommandWrapper.


        :param product_id: The product_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def register_datatable(self):
        """Gets the register_datatable of this CommandWrapper.  # noqa: E501


        :return: The register_datatable of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._register_datatable

    @register_datatable.setter
    def register_datatable(self, register_datatable):
        """Sets the register_datatable of this CommandWrapper.


        :param register_datatable: The register_datatable of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._register_datatable = register_datatable

    @property
    def register_survey(self):
        """Gets the register_survey of this CommandWrapper.  # noqa: E501


        :return: The register_survey of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._register_survey

    @register_survey.setter
    def register_survey(self, register_survey):
        """Sets the register_survey of this CommandWrapper.


        :param register_survey: The register_survey of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._register_survey = register_survey

    @property
    def savings_id(self):
        """Gets the savings_id of this CommandWrapper.  # noqa: E501


        :return: The savings_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._savings_id

    @savings_id.setter
    def savings_id(self, savings_id):
        """Sets the savings_id of this CommandWrapper.


        :param savings_id: The savings_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._savings_id = savings_id

    @property
    def subentity_id(self):
        """Gets the subentity_id of this CommandWrapper.  # noqa: E501


        :return: The subentity_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._subentity_id

    @subentity_id.setter
    def subentity_id(self, subentity_id):
        """Sets the subentity_id of this CommandWrapper.


        :param subentity_id: The subentity_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._subentity_id = subentity_id

    @property
    def survey_resource(self):
        """Gets the survey_resource of this CommandWrapper.  # noqa: E501


        :return: The survey_resource of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._survey_resource

    @survey_resource.setter
    def survey_resource(self, survey_resource):
        """Sets the survey_resource of this CommandWrapper.


        :param survey_resource: The survey_resource of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._survey_resource = survey_resource

    @property
    def task_permission_name(self):
        """Gets the task_permission_name of this CommandWrapper.  # noqa: E501


        :return: The task_permission_name of this CommandWrapper.  # noqa: E501
        :rtype: str
        """
        return self._task_permission_name

    @task_permission_name.setter
    def task_permission_name(self, task_permission_name):
        """Sets the task_permission_name of this CommandWrapper.


        :param task_permission_name: The task_permission_name of this CommandWrapper.  # noqa: E501
        :type: str
        """

        self._task_permission_name = task_permission_name

    @property
    def template_id(self):
        """Gets the template_id of this CommandWrapper.  # noqa: E501


        :return: The template_id of this CommandWrapper.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CommandWrapper.


        :param template_id: The template_id of this CommandWrapper.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CommandWrapper.  # noqa: E501


        :return: The transaction_id of this CommandWrapper.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CommandWrapper.


        :param transaction_id: The transaction_id of this CommandWrapper.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def update(self):
        """Gets the update of this CommandWrapper.  # noqa: E501


        :return: The update of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this CommandWrapper.


        :param update: The update of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._update = update

    @property
    def update_datatable(self):
        """Gets the update_datatable of this CommandWrapper.  # noqa: E501


        :return: The update_datatable of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._update_datatable

    @update_datatable.setter
    def update_datatable(self, update_datatable):
        """Sets the update_datatable of this CommandWrapper.


        :param update_datatable: The update_datatable of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._update_datatable = update_datatable

    @property
    def update_disbursement_date(self):
        """Gets the update_disbursement_date of this CommandWrapper.  # noqa: E501


        :return: The update_disbursement_date of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._update_disbursement_date

    @update_disbursement_date.setter
    def update_disbursement_date(self, update_disbursement_date):
        """Sets the update_disbursement_date of this CommandWrapper.


        :param update_disbursement_date: The update_disbursement_date of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._update_disbursement_date = update_disbursement_date

    @property
    def update_multiple(self):
        """Gets the update_multiple of this CommandWrapper.  # noqa: E501


        :return: The update_multiple of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._update_multiple

    @update_multiple.setter
    def update_multiple(self, update_multiple):
        """Sets the update_multiple of this CommandWrapper.


        :param update_multiple: The update_multiple of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._update_multiple = update_multiple

    @property
    def update_one_to_one(self):
        """Gets the update_one_to_one of this CommandWrapper.  # noqa: E501


        :return: The update_one_to_one of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._update_one_to_one

    @update_one_to_one.setter
    def update_one_to_one(self, update_one_to_one):
        """Sets the update_one_to_one of this CommandWrapper.


        :param update_one_to_one: The update_one_to_one of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._update_one_to_one = update_one_to_one

    @property
    def update_operation(self):
        """Gets the update_operation of this CommandWrapper.  # noqa: E501


        :return: The update_operation of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._update_operation

    @update_operation.setter
    def update_operation(self, update_operation):
        """Sets the update_operation of this CommandWrapper.


        :param update_operation: The update_operation of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._update_operation = update_operation

    @property
    def user_resource(self):
        """Gets the user_resource of this CommandWrapper.  # noqa: E501


        :return: The user_resource of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._user_resource

    @user_resource.setter
    def user_resource(self, user_resource):
        """Sets the user_resource of this CommandWrapper.


        :param user_resource: The user_resource of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._user_resource = user_resource

    @property
    def working_days_resource(self):
        """Gets the working_days_resource of this CommandWrapper.  # noqa: E501


        :return: The working_days_resource of this CommandWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._working_days_resource

    @working_days_resource.setter
    def working_days_resource(self, working_days_resource):
        """Sets the working_days_resource of this CommandWrapper.


        :param working_days_resource: The working_days_resource of this CommandWrapper.  # noqa: E501
        :type: bool
        """

        self._working_days_resource = working_days_resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommandWrapper, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommandWrapper):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
