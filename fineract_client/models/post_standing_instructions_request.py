# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostStandingInstructionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'int',
        'date_format': 'str',
        'from_account_id': 'int',
        'from_account_type': 'int',
        'from_client_id': 'int',
        'from_office_id': 'int',
        'instruction_type': 'int',
        'locale': 'str',
        'month_day_format': 'str',
        'name': 'str',
        'priority': 'int',
        'recurrence_frequency': 'int',
        'recurrence_interval': 'int',
        'recurrence_on_month_day': 'str',
        'recurrence_type': 'int',
        'status': 'int',
        'to_account_id': 'int',
        'to_account_type': 'int',
        'to_client_id': 'int',
        'to_office_id': 'int',
        'transfer_type': 'int',
        'valid_from': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'date_format': 'dateFormat',
        'from_account_id': 'fromAccountId',
        'from_account_type': 'fromAccountType',
        'from_client_id': 'fromClientId',
        'from_office_id': 'fromOfficeId',
        'instruction_type': 'instructionType',
        'locale': 'locale',
        'month_day_format': 'monthDayFormat',
        'name': 'name',
        'priority': 'priority',
        'recurrence_frequency': 'recurrenceFrequency',
        'recurrence_interval': 'recurrenceInterval',
        'recurrence_on_month_day': 'recurrenceOnMonthDay',
        'recurrence_type': 'recurrenceType',
        'status': 'status',
        'to_account_id': 'toAccountId',
        'to_account_type': 'toAccountType',
        'to_client_id': 'toClientId',
        'to_office_id': 'toOfficeId',
        'transfer_type': 'transferType',
        'valid_from': 'validFrom'
    }

    def __init__(self, amount=None, date_format=None, from_account_id=None, from_account_type=None, from_client_id=None, from_office_id=None, instruction_type=None, locale=None, month_day_format=None, name=None, priority=None, recurrence_frequency=None, recurrence_interval=None, recurrence_on_month_day=None, recurrence_type=None, status=None, to_account_id=None, to_account_type=None, to_client_id=None, to_office_id=None, transfer_type=None, valid_from=None):  # noqa: E501
        """PostStandingInstructionsRequest - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._date_format = None
        self._from_account_id = None
        self._from_account_type = None
        self._from_client_id = None
        self._from_office_id = None
        self._instruction_type = None
        self._locale = None
        self._month_day_format = None
        self._name = None
        self._priority = None
        self._recurrence_frequency = None
        self._recurrence_interval = None
        self._recurrence_on_month_day = None
        self._recurrence_type = None
        self._status = None
        self._to_account_id = None
        self._to_account_type = None
        self._to_client_id = None
        self._to_office_id = None
        self._transfer_type = None
        self._valid_from = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if date_format is not None:
            self.date_format = date_format
        if from_account_id is not None:
            self.from_account_id = from_account_id
        if from_account_type is not None:
            self.from_account_type = from_account_type
        if from_client_id is not None:
            self.from_client_id = from_client_id
        if from_office_id is not None:
            self.from_office_id = from_office_id
        if instruction_type is not None:
            self.instruction_type = instruction_type
        if locale is not None:
            self.locale = locale
        if month_day_format is not None:
            self.month_day_format = month_day_format
        if name is not None:
            self.name = name
        if priority is not None:
            self.priority = priority
        if recurrence_frequency is not None:
            self.recurrence_frequency = recurrence_frequency
        if recurrence_interval is not None:
            self.recurrence_interval = recurrence_interval
        if recurrence_on_month_day is not None:
            self.recurrence_on_month_day = recurrence_on_month_day
        if recurrence_type is not None:
            self.recurrence_type = recurrence_type
        if status is not None:
            self.status = status
        if to_account_id is not None:
            self.to_account_id = to_account_id
        if to_account_type is not None:
            self.to_account_type = to_account_type
        if to_client_id is not None:
            self.to_client_id = to_client_id
        if to_office_id is not None:
            self.to_office_id = to_office_id
        if transfer_type is not None:
            self.transfer_type = transfer_type
        if valid_from is not None:
            self.valid_from = valid_from

    @property
    def amount(self):
        """Gets the amount of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The amount of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PostStandingInstructionsRequest.


        :param amount: The amount of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def date_format(self):
        """Gets the date_format of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The date_format of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this PostStandingInstructionsRequest.


        :param date_format: The date_format of this PostStandingInstructionsRequest.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def from_account_id(self):
        """Gets the from_account_id of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The from_account_id of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._from_account_id

    @from_account_id.setter
    def from_account_id(self, from_account_id):
        """Sets the from_account_id of this PostStandingInstructionsRequest.


        :param from_account_id: The from_account_id of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._from_account_id = from_account_id

    @property
    def from_account_type(self):
        """Gets the from_account_type of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The from_account_type of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._from_account_type

    @from_account_type.setter
    def from_account_type(self, from_account_type):
        """Sets the from_account_type of this PostStandingInstructionsRequest.


        :param from_account_type: The from_account_type of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._from_account_type = from_account_type

    @property
    def from_client_id(self):
        """Gets the from_client_id of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The from_client_id of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._from_client_id

    @from_client_id.setter
    def from_client_id(self, from_client_id):
        """Sets the from_client_id of this PostStandingInstructionsRequest.


        :param from_client_id: The from_client_id of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._from_client_id = from_client_id

    @property
    def from_office_id(self):
        """Gets the from_office_id of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The from_office_id of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._from_office_id

    @from_office_id.setter
    def from_office_id(self, from_office_id):
        """Sets the from_office_id of this PostStandingInstructionsRequest.


        :param from_office_id: The from_office_id of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._from_office_id = from_office_id

    @property
    def instruction_type(self):
        """Gets the instruction_type of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The instruction_type of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._instruction_type

    @instruction_type.setter
    def instruction_type(self, instruction_type):
        """Sets the instruction_type of this PostStandingInstructionsRequest.


        :param instruction_type: The instruction_type of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._instruction_type = instruction_type

    @property
    def locale(self):
        """Gets the locale of this PostStandingInstructionsRequest.  # noqa: E501

        en  # noqa: E501

        :return: The locale of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PostStandingInstructionsRequest.

        en  # noqa: E501

        :param locale: The locale of this PostStandingInstructionsRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def month_day_format(self):
        """Gets the month_day_format of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The month_day_format of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._month_day_format

    @month_day_format.setter
    def month_day_format(self, month_day_format):
        """Sets the month_day_format of this PostStandingInstructionsRequest.


        :param month_day_format: The month_day_format of this PostStandingInstructionsRequest.  # noqa: E501
        :type: str
        """

        self._month_day_format = month_day_format

    @property
    def name(self):
        """Gets the name of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The name of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostStandingInstructionsRequest.


        :param name: The name of this PostStandingInstructionsRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The priority of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PostStandingInstructionsRequest.


        :param priority: The priority of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def recurrence_frequency(self):
        """Gets the recurrence_frequency of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The recurrence_frequency of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_frequency

    @recurrence_frequency.setter
    def recurrence_frequency(self, recurrence_frequency):
        """Sets the recurrence_frequency of this PostStandingInstructionsRequest.


        :param recurrence_frequency: The recurrence_frequency of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._recurrence_frequency = recurrence_frequency

    @property
    def recurrence_interval(self):
        """Gets the recurrence_interval of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The recurrence_interval of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_interval

    @recurrence_interval.setter
    def recurrence_interval(self, recurrence_interval):
        """Sets the recurrence_interval of this PostStandingInstructionsRequest.


        :param recurrence_interval: The recurrence_interval of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._recurrence_interval = recurrence_interval

    @property
    def recurrence_on_month_day(self):
        """Gets the recurrence_on_month_day of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The recurrence_on_month_day of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_on_month_day

    @recurrence_on_month_day.setter
    def recurrence_on_month_day(self, recurrence_on_month_day):
        """Sets the recurrence_on_month_day of this PostStandingInstructionsRequest.


        :param recurrence_on_month_day: The recurrence_on_month_day of this PostStandingInstructionsRequest.  # noqa: E501
        :type: str
        """

        self._recurrence_on_month_day = recurrence_on_month_day

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The recurrence_type of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this PostStandingInstructionsRequest.


        :param recurrence_type: The recurrence_type of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._recurrence_type = recurrence_type

    @property
    def status(self):
        """Gets the status of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The status of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PostStandingInstructionsRequest.


        :param status: The status of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def to_account_id(self):
        """Gets the to_account_id of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The to_account_id of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._to_account_id

    @to_account_id.setter
    def to_account_id(self, to_account_id):
        """Sets the to_account_id of this PostStandingInstructionsRequest.


        :param to_account_id: The to_account_id of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._to_account_id = to_account_id

    @property
    def to_account_type(self):
        """Gets the to_account_type of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The to_account_type of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._to_account_type

    @to_account_type.setter
    def to_account_type(self, to_account_type):
        """Sets the to_account_type of this PostStandingInstructionsRequest.


        :param to_account_type: The to_account_type of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._to_account_type = to_account_type

    @property
    def to_client_id(self):
        """Gets the to_client_id of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The to_client_id of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._to_client_id

    @to_client_id.setter
    def to_client_id(self, to_client_id):
        """Sets the to_client_id of this PostStandingInstructionsRequest.


        :param to_client_id: The to_client_id of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._to_client_id = to_client_id

    @property
    def to_office_id(self):
        """Gets the to_office_id of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The to_office_id of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._to_office_id

    @to_office_id.setter
    def to_office_id(self, to_office_id):
        """Sets the to_office_id of this PostStandingInstructionsRequest.


        :param to_office_id: The to_office_id of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._to_office_id = to_office_id

    @property
    def transfer_type(self):
        """Gets the transfer_type of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The transfer_type of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this PostStandingInstructionsRequest.


        :param transfer_type: The transfer_type of this PostStandingInstructionsRequest.  # noqa: E501
        :type: int
        """

        self._transfer_type = transfer_type

    @property
    def valid_from(self):
        """Gets the valid_from of this PostStandingInstructionsRequest.  # noqa: E501


        :return: The valid_from of this PostStandingInstructionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this PostStandingInstructionsRequest.


        :param valid_from: The valid_from of this PostStandingInstructionsRequest.  # noqa: E501
        :type: str
        """

        self._valid_from = valid_from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostStandingInstructionsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostStandingInstructionsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
