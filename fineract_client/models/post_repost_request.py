# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostRepostRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'report_category': 'str',
        'report_name': 'str',
        'report_parameters': 'list[ReportParameterData]',
        'report_sql': 'str',
        'report_sub_type': 'str',
        'report_type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'report_category': 'reportCategory',
        'report_name': 'reportName',
        'report_parameters': 'reportParameters',
        'report_sql': 'reportSql',
        'report_sub_type': 'reportSubType',
        'report_type': 'reportType'
    }

    def __init__(self, description=None, report_category=None, report_name=None, report_parameters=None, report_sql=None, report_sub_type=None, report_type=None):  # noqa: E501
        """PostRepostRequest - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._report_category = None
        self._report_name = None
        self._report_parameters = None
        self._report_sql = None
        self._report_sub_type = None
        self._report_type = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if report_category is not None:
            self.report_category = report_category
        if report_name is not None:
            self.report_name = report_name
        if report_parameters is not None:
            self.report_parameters = report_parameters
        if report_sql is not None:
            self.report_sql = report_sql
        if report_sub_type is not None:
            self.report_sub_type = report_sub_type
        if report_type is not None:
            self.report_type = report_type

    @property
    def description(self):
        """Gets the description of this PostRepostRequest.  # noqa: E501


        :return: The description of this PostRepostRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostRepostRequest.


        :param description: The description of this PostRepostRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def report_category(self):
        """Gets the report_category of this PostRepostRequest.  # noqa: E501


        :return: The report_category of this PostRepostRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_category

    @report_category.setter
    def report_category(self, report_category):
        """Sets the report_category of this PostRepostRequest.


        :param report_category: The report_category of this PostRepostRequest.  # noqa: E501
        :type: str
        """

        self._report_category = report_category

    @property
    def report_name(self):
        """Gets the report_name of this PostRepostRequest.  # noqa: E501


        :return: The report_name of this PostRepostRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this PostRepostRequest.


        :param report_name: The report_name of this PostRepostRequest.  # noqa: E501
        :type: str
        """

        self._report_name = report_name

    @property
    def report_parameters(self):
        """Gets the report_parameters of this PostRepostRequest.  # noqa: E501


        :return: The report_parameters of this PostRepostRequest.  # noqa: E501
        :rtype: list[ReportParameterData]
        """
        return self._report_parameters

    @report_parameters.setter
    def report_parameters(self, report_parameters):
        """Sets the report_parameters of this PostRepostRequest.


        :param report_parameters: The report_parameters of this PostRepostRequest.  # noqa: E501
        :type: list[ReportParameterData]
        """

        self._report_parameters = report_parameters

    @property
    def report_sql(self):
        """Gets the report_sql of this PostRepostRequest.  # noqa: E501


        :return: The report_sql of this PostRepostRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_sql

    @report_sql.setter
    def report_sql(self, report_sql):
        """Sets the report_sql of this PostRepostRequest.


        :param report_sql: The report_sql of this PostRepostRequest.  # noqa: E501
        :type: str
        """

        self._report_sql = report_sql

    @property
    def report_sub_type(self):
        """Gets the report_sub_type of this PostRepostRequest.  # noqa: E501


        :return: The report_sub_type of this PostRepostRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_sub_type

    @report_sub_type.setter
    def report_sub_type(self, report_sub_type):
        """Sets the report_sub_type of this PostRepostRequest.


        :param report_sub_type: The report_sub_type of this PostRepostRequest.  # noqa: E501
        :type: str
        """

        self._report_sub_type = report_sub_type

    @property
    def report_type(self):
        """Gets the report_type of this PostRepostRequest.  # noqa: E501


        :return: The report_type of this PostRepostRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this PostRepostRequest.


        :param report_type: The report_type of this PostRepostRequest.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostRepostRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostRepostRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
