# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CashierTransactionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cashier_data': 'CashierData',
        'cashier_id': 'int',
        'cashier_name': 'str',
        'created_date': 'datetime',
        'currency_options': 'list[CurrencyData]',
        'end_date': 'date',
        'entity_id': 'int',
        'entity_type': 'str',
        'id': 'int',
        'office_id': 'int',
        'office_name': 'str',
        'start_date': 'date',
        'teller_id': 'int',
        'teller_name': 'str',
        'txn_amount': 'float',
        'txn_date': 'date',
        'txn_note': 'str',
        'txn_type': 'CashierTxnType'
    }

    attribute_map = {
        'cashier_data': 'cashierData',
        'cashier_id': 'cashierId',
        'cashier_name': 'cashierName',
        'created_date': 'createdDate',
        'currency_options': 'currencyOptions',
        'end_date': 'endDate',
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'id': 'id',
        'office_id': 'officeId',
        'office_name': 'officeName',
        'start_date': 'startDate',
        'teller_id': 'tellerId',
        'teller_name': 'tellerName',
        'txn_amount': 'txnAmount',
        'txn_date': 'txnDate',
        'txn_note': 'txnNote',
        'txn_type': 'txnType'
    }

    def __init__(self, cashier_data=None, cashier_id=None, cashier_name=None, created_date=None, currency_options=None, end_date=None, entity_id=None, entity_type=None, id=None, office_id=None, office_name=None, start_date=None, teller_id=None, teller_name=None, txn_amount=None, txn_date=None, txn_note=None, txn_type=None):  # noqa: E501
        """CashierTransactionData - a model defined in Swagger"""  # noqa: E501
        self._cashier_data = None
        self._cashier_id = None
        self._cashier_name = None
        self._created_date = None
        self._currency_options = None
        self._end_date = None
        self._entity_id = None
        self._entity_type = None
        self._id = None
        self._office_id = None
        self._office_name = None
        self._start_date = None
        self._teller_id = None
        self._teller_name = None
        self._txn_amount = None
        self._txn_date = None
        self._txn_note = None
        self._txn_type = None
        self.discriminator = None
        if cashier_data is not None:
            self.cashier_data = cashier_data
        if cashier_id is not None:
            self.cashier_id = cashier_id
        if cashier_name is not None:
            self.cashier_name = cashier_name
        if created_date is not None:
            self.created_date = created_date
        if currency_options is not None:
            self.currency_options = currency_options
        if end_date is not None:
            self.end_date = end_date
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_type is not None:
            self.entity_type = entity_type
        if id is not None:
            self.id = id
        if office_id is not None:
            self.office_id = office_id
        if office_name is not None:
            self.office_name = office_name
        if start_date is not None:
            self.start_date = start_date
        if teller_id is not None:
            self.teller_id = teller_id
        if teller_name is not None:
            self.teller_name = teller_name
        if txn_amount is not None:
            self.txn_amount = txn_amount
        if txn_date is not None:
            self.txn_date = txn_date
        if txn_note is not None:
            self.txn_note = txn_note
        if txn_type is not None:
            self.txn_type = txn_type

    @property
    def cashier_data(self):
        """Gets the cashier_data of this CashierTransactionData.  # noqa: E501


        :return: The cashier_data of this CashierTransactionData.  # noqa: E501
        :rtype: CashierData
        """
        return self._cashier_data

    @cashier_data.setter
    def cashier_data(self, cashier_data):
        """Sets the cashier_data of this CashierTransactionData.


        :param cashier_data: The cashier_data of this CashierTransactionData.  # noqa: E501
        :type: CashierData
        """

        self._cashier_data = cashier_data

    @property
    def cashier_id(self):
        """Gets the cashier_id of this CashierTransactionData.  # noqa: E501


        :return: The cashier_id of this CashierTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._cashier_id

    @cashier_id.setter
    def cashier_id(self, cashier_id):
        """Sets the cashier_id of this CashierTransactionData.


        :param cashier_id: The cashier_id of this CashierTransactionData.  # noqa: E501
        :type: int
        """

        self._cashier_id = cashier_id

    @property
    def cashier_name(self):
        """Gets the cashier_name of this CashierTransactionData.  # noqa: E501


        :return: The cashier_name of this CashierTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._cashier_name

    @cashier_name.setter
    def cashier_name(self, cashier_name):
        """Sets the cashier_name of this CashierTransactionData.


        :param cashier_name: The cashier_name of this CashierTransactionData.  # noqa: E501
        :type: str
        """

        self._cashier_name = cashier_name

    @property
    def created_date(self):
        """Gets the created_date of this CashierTransactionData.  # noqa: E501


        :return: The created_date of this CashierTransactionData.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CashierTransactionData.


        :param created_date: The created_date of this CashierTransactionData.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def currency_options(self):
        """Gets the currency_options of this CashierTransactionData.  # noqa: E501


        :return: The currency_options of this CashierTransactionData.  # noqa: E501
        :rtype: list[CurrencyData]
        """
        return self._currency_options

    @currency_options.setter
    def currency_options(self, currency_options):
        """Sets the currency_options of this CashierTransactionData.


        :param currency_options: The currency_options of this CashierTransactionData.  # noqa: E501
        :type: list[CurrencyData]
        """

        self._currency_options = currency_options

    @property
    def end_date(self):
        """Gets the end_date of this CashierTransactionData.  # noqa: E501


        :return: The end_date of this CashierTransactionData.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CashierTransactionData.


        :param end_date: The end_date of this CashierTransactionData.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def entity_id(self):
        """Gets the entity_id of this CashierTransactionData.  # noqa: E501


        :return: The entity_id of this CashierTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this CashierTransactionData.


        :param entity_id: The entity_id of this CashierTransactionData.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this CashierTransactionData.  # noqa: E501


        :return: The entity_type of this CashierTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this CashierTransactionData.


        :param entity_type: The entity_type of this CashierTransactionData.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def id(self):
        """Gets the id of this CashierTransactionData.  # noqa: E501


        :return: The id of this CashierTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CashierTransactionData.


        :param id: The id of this CashierTransactionData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def office_id(self):
        """Gets the office_id of this CashierTransactionData.  # noqa: E501


        :return: The office_id of this CashierTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this CashierTransactionData.


        :param office_id: The office_id of this CashierTransactionData.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def office_name(self):
        """Gets the office_name of this CashierTransactionData.  # noqa: E501


        :return: The office_name of this CashierTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._office_name

    @office_name.setter
    def office_name(self, office_name):
        """Sets the office_name of this CashierTransactionData.


        :param office_name: The office_name of this CashierTransactionData.  # noqa: E501
        :type: str
        """

        self._office_name = office_name

    @property
    def start_date(self):
        """Gets the start_date of this CashierTransactionData.  # noqa: E501


        :return: The start_date of this CashierTransactionData.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CashierTransactionData.


        :param start_date: The start_date of this CashierTransactionData.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def teller_id(self):
        """Gets the teller_id of this CashierTransactionData.  # noqa: E501


        :return: The teller_id of this CashierTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._teller_id

    @teller_id.setter
    def teller_id(self, teller_id):
        """Sets the teller_id of this CashierTransactionData.


        :param teller_id: The teller_id of this CashierTransactionData.  # noqa: E501
        :type: int
        """

        self._teller_id = teller_id

    @property
    def teller_name(self):
        """Gets the teller_name of this CashierTransactionData.  # noqa: E501


        :return: The teller_name of this CashierTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._teller_name

    @teller_name.setter
    def teller_name(self, teller_name):
        """Sets the teller_name of this CashierTransactionData.


        :param teller_name: The teller_name of this CashierTransactionData.  # noqa: E501
        :type: str
        """

        self._teller_name = teller_name

    @property
    def txn_amount(self):
        """Gets the txn_amount of this CashierTransactionData.  # noqa: E501


        :return: The txn_amount of this CashierTransactionData.  # noqa: E501
        :rtype: float
        """
        return self._txn_amount

    @txn_amount.setter
    def txn_amount(self, txn_amount):
        """Sets the txn_amount of this CashierTransactionData.


        :param txn_amount: The txn_amount of this CashierTransactionData.  # noqa: E501
        :type: float
        """

        self._txn_amount = txn_amount

    @property
    def txn_date(self):
        """Gets the txn_date of this CashierTransactionData.  # noqa: E501


        :return: The txn_date of this CashierTransactionData.  # noqa: E501
        :rtype: date
        """
        return self._txn_date

    @txn_date.setter
    def txn_date(self, txn_date):
        """Sets the txn_date of this CashierTransactionData.


        :param txn_date: The txn_date of this CashierTransactionData.  # noqa: E501
        :type: date
        """

        self._txn_date = txn_date

    @property
    def txn_note(self):
        """Gets the txn_note of this CashierTransactionData.  # noqa: E501


        :return: The txn_note of this CashierTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._txn_note

    @txn_note.setter
    def txn_note(self, txn_note):
        """Sets the txn_note of this CashierTransactionData.


        :param txn_note: The txn_note of this CashierTransactionData.  # noqa: E501
        :type: str
        """

        self._txn_note = txn_note

    @property
    def txn_type(self):
        """Gets the txn_type of this CashierTransactionData.  # noqa: E501


        :return: The txn_type of this CashierTransactionData.  # noqa: E501
        :rtype: CashierTxnType
        """
        return self._txn_type

    @txn_type.setter
    def txn_type(self, txn_type):
        """Sets the txn_type of this CashierTransactionData.


        :param txn_type: The txn_type of this CashierTransactionData.  # noqa: E501
        :type: CashierTxnType
        """

        self._txn_type = txn_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CashierTransactionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CashierTransactionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
