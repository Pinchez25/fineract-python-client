# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostDataTablesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apptable_name': 'str',
        'columns': 'list[PostColumnHeaderData]',
        'datatable_name': 'str',
        'entity_sub_type': 'str',
        'multi_row': 'bool'
    }

    attribute_map = {
        'apptable_name': 'apptableName',
        'columns': 'columns',
        'datatable_name': 'datatableName',
        'entity_sub_type': 'entitySubType',
        'multi_row': 'multiRow'
    }

    def __init__(self, apptable_name=None, columns=None, datatable_name=None, entity_sub_type=None, multi_row=None):  # noqa: E501
        """PostDataTablesRequest - a model defined in Swagger"""  # noqa: E501
        self._apptable_name = None
        self._columns = None
        self._datatable_name = None
        self._entity_sub_type = None
        self._multi_row = None
        self.discriminator = None
        self.apptable_name = apptable_name
        self.columns = columns
        self.datatable_name = datatable_name
        if entity_sub_type is not None:
            self.entity_sub_type = entity_sub_type
        if multi_row is not None:
            self.multi_row = multi_row

    @property
    def apptable_name(self):
        """Gets the apptable_name of this PostDataTablesRequest.  # noqa: E501


        :return: The apptable_name of this PostDataTablesRequest.  # noqa: E501
        :rtype: str
        """
        return self._apptable_name

    @apptable_name.setter
    def apptable_name(self, apptable_name):
        """Sets the apptable_name of this PostDataTablesRequest.


        :param apptable_name: The apptable_name of this PostDataTablesRequest.  # noqa: E501
        :type: str
        """
        if apptable_name is None:
            raise ValueError("Invalid value for `apptable_name`, must not be `None`")  # noqa: E501

        self._apptable_name = apptable_name

    @property
    def columns(self):
        """Gets the columns of this PostDataTablesRequest.  # noqa: E501


        :return: The columns of this PostDataTablesRequest.  # noqa: E501
        :rtype: list[PostColumnHeaderData]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this PostDataTablesRequest.


        :param columns: The columns of this PostDataTablesRequest.  # noqa: E501
        :type: list[PostColumnHeaderData]
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def datatable_name(self):
        """Gets the datatable_name of this PostDataTablesRequest.  # noqa: E501


        :return: The datatable_name of this PostDataTablesRequest.  # noqa: E501
        :rtype: str
        """
        return self._datatable_name

    @datatable_name.setter
    def datatable_name(self, datatable_name):
        """Sets the datatable_name of this PostDataTablesRequest.


        :param datatable_name: The datatable_name of this PostDataTablesRequest.  # noqa: E501
        :type: str
        """
        if datatable_name is None:
            raise ValueError("Invalid value for `datatable_name`, must not be `None`")  # noqa: E501

        self._datatable_name = datatable_name

    @property
    def entity_sub_type(self):
        """Gets the entity_sub_type of this PostDataTablesRequest.  # noqa: E501


        :return: The entity_sub_type of this PostDataTablesRequest.  # noqa: E501
        :rtype: str
        """
        return self._entity_sub_type

    @entity_sub_type.setter
    def entity_sub_type(self, entity_sub_type):
        """Sets the entity_sub_type of this PostDataTablesRequest.


        :param entity_sub_type: The entity_sub_type of this PostDataTablesRequest.  # noqa: E501
        :type: str
        """

        self._entity_sub_type = entity_sub_type

    @property
    def multi_row(self):
        """Gets the multi_row of this PostDataTablesRequest.  # noqa: E501

        Allows to create multiple entries in the Data Table. Optional, defaults to false. If this property is not provided Data Table will allow only one entry.  # noqa: E501

        :return: The multi_row of this PostDataTablesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._multi_row

    @multi_row.setter
    def multi_row(self, multi_row):
        """Sets the multi_row of this PostDataTablesRequest.

        Allows to create multiple entries in the Data Table. Optional, defaults to false. If this property is not provided Data Table will allow only one entry.  # noqa: E501

        :param multi_row: The multi_row of this PostDataTablesRequest.  # noqa: E501
        :type: bool
        """

        self._multi_row = multi_row

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostDataTablesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostDataTablesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
