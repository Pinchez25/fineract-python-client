# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostAdhocQuerySearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_format': 'str',
        'include_out_standing_amount_percentage': 'bool',
        'include_outstanding_amount': 'bool',
        'loan_date_option': 'str',
        'loan_from_date': 'date',
        'loan_to_date': 'date',
        'locale': 'str',
        'max_outstanding_amount': 'int',
        'min_outstanding_amount': 'int',
        'out_standing_amount_percentage': 'int',
        'out_standing_amount_percentage_condition': 'str',
        'outstanding_amount_condition': 'str'
    }

    attribute_map = {
        'date_format': 'dateFormat',
        'include_out_standing_amount_percentage': 'includeOutStandingAmountPercentage',
        'include_outstanding_amount': 'includeOutstandingAmount',
        'loan_date_option': 'loanDateOption',
        'loan_from_date': 'loanFromDate',
        'loan_to_date': 'loanToDate',
        'locale': 'locale',
        'max_outstanding_amount': 'maxOutstandingAmount',
        'min_outstanding_amount': 'minOutstandingAmount',
        'out_standing_amount_percentage': 'outStandingAmountPercentage',
        'out_standing_amount_percentage_condition': 'outStandingAmountPercentageCondition',
        'outstanding_amount_condition': 'outstandingAmountCondition'
    }

    def __init__(self, date_format=None, include_out_standing_amount_percentage=None, include_outstanding_amount=None, loan_date_option=None, loan_from_date=None, loan_to_date=None, locale=None, max_outstanding_amount=None, min_outstanding_amount=None, out_standing_amount_percentage=None, out_standing_amount_percentage_condition=None, outstanding_amount_condition=None):  # noqa: E501
        """PostAdhocQuerySearchRequest - a model defined in Swagger"""  # noqa: E501
        self._date_format = None
        self._include_out_standing_amount_percentage = None
        self._include_outstanding_amount = None
        self._loan_date_option = None
        self._loan_from_date = None
        self._loan_to_date = None
        self._locale = None
        self._max_outstanding_amount = None
        self._min_outstanding_amount = None
        self._out_standing_amount_percentage = None
        self._out_standing_amount_percentage_condition = None
        self._outstanding_amount_condition = None
        self.discriminator = None
        if date_format is not None:
            self.date_format = date_format
        if include_out_standing_amount_percentage is not None:
            self.include_out_standing_amount_percentage = include_out_standing_amount_percentage
        if include_outstanding_amount is not None:
            self.include_outstanding_amount = include_outstanding_amount
        if loan_date_option is not None:
            self.loan_date_option = loan_date_option
        if loan_from_date is not None:
            self.loan_from_date = loan_from_date
        if loan_to_date is not None:
            self.loan_to_date = loan_to_date
        if locale is not None:
            self.locale = locale
        if max_outstanding_amount is not None:
            self.max_outstanding_amount = max_outstanding_amount
        if min_outstanding_amount is not None:
            self.min_outstanding_amount = min_outstanding_amount
        if out_standing_amount_percentage is not None:
            self.out_standing_amount_percentage = out_standing_amount_percentage
        if out_standing_amount_percentage_condition is not None:
            self.out_standing_amount_percentage_condition = out_standing_amount_percentage_condition
        if outstanding_amount_condition is not None:
            self.outstanding_amount_condition = outstanding_amount_condition

    @property
    def date_format(self):
        """Gets the date_format of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The date_format of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this PostAdhocQuerySearchRequest.


        :param date_format: The date_format of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def include_out_standing_amount_percentage(self):
        """Gets the include_out_standing_amount_percentage of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The include_out_standing_amount_percentage of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_out_standing_amount_percentage

    @include_out_standing_amount_percentage.setter
    def include_out_standing_amount_percentage(self, include_out_standing_amount_percentage):
        """Sets the include_out_standing_amount_percentage of this PostAdhocQuerySearchRequest.


        :param include_out_standing_amount_percentage: The include_out_standing_amount_percentage of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: bool
        """

        self._include_out_standing_amount_percentage = include_out_standing_amount_percentage

    @property
    def include_outstanding_amount(self):
        """Gets the include_outstanding_amount of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The include_outstanding_amount of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_outstanding_amount

    @include_outstanding_amount.setter
    def include_outstanding_amount(self, include_outstanding_amount):
        """Sets the include_outstanding_amount of this PostAdhocQuerySearchRequest.


        :param include_outstanding_amount: The include_outstanding_amount of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: bool
        """

        self._include_outstanding_amount = include_outstanding_amount

    @property
    def loan_date_option(self):
        """Gets the loan_date_option of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The loan_date_option of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._loan_date_option

    @loan_date_option.setter
    def loan_date_option(self, loan_date_option):
        """Sets the loan_date_option of this PostAdhocQuerySearchRequest.


        :param loan_date_option: The loan_date_option of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: str
        """

        self._loan_date_option = loan_date_option

    @property
    def loan_from_date(self):
        """Gets the loan_from_date of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The loan_from_date of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: date
        """
        return self._loan_from_date

    @loan_from_date.setter
    def loan_from_date(self, loan_from_date):
        """Sets the loan_from_date of this PostAdhocQuerySearchRequest.


        :param loan_from_date: The loan_from_date of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: date
        """

        self._loan_from_date = loan_from_date

    @property
    def loan_to_date(self):
        """Gets the loan_to_date of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The loan_to_date of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: date
        """
        return self._loan_to_date

    @loan_to_date.setter
    def loan_to_date(self, loan_to_date):
        """Sets the loan_to_date of this PostAdhocQuerySearchRequest.


        :param loan_to_date: The loan_to_date of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: date
        """

        self._loan_to_date = loan_to_date

    @property
    def locale(self):
        """Gets the locale of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The locale of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PostAdhocQuerySearchRequest.


        :param locale: The locale of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def max_outstanding_amount(self):
        """Gets the max_outstanding_amount of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The max_outstanding_amount of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_outstanding_amount

    @max_outstanding_amount.setter
    def max_outstanding_amount(self, max_outstanding_amount):
        """Sets the max_outstanding_amount of this PostAdhocQuerySearchRequest.


        :param max_outstanding_amount: The max_outstanding_amount of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: int
        """

        self._max_outstanding_amount = max_outstanding_amount

    @property
    def min_outstanding_amount(self):
        """Gets the min_outstanding_amount of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The min_outstanding_amount of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._min_outstanding_amount

    @min_outstanding_amount.setter
    def min_outstanding_amount(self, min_outstanding_amount):
        """Sets the min_outstanding_amount of this PostAdhocQuerySearchRequest.


        :param min_outstanding_amount: The min_outstanding_amount of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: int
        """

        self._min_outstanding_amount = min_outstanding_amount

    @property
    def out_standing_amount_percentage(self):
        """Gets the out_standing_amount_percentage of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The out_standing_amount_percentage of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._out_standing_amount_percentage

    @out_standing_amount_percentage.setter
    def out_standing_amount_percentage(self, out_standing_amount_percentage):
        """Sets the out_standing_amount_percentage of this PostAdhocQuerySearchRequest.


        :param out_standing_amount_percentage: The out_standing_amount_percentage of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: int
        """

        self._out_standing_amount_percentage = out_standing_amount_percentage

    @property
    def out_standing_amount_percentage_condition(self):
        """Gets the out_standing_amount_percentage_condition of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The out_standing_amount_percentage_condition of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._out_standing_amount_percentage_condition

    @out_standing_amount_percentage_condition.setter
    def out_standing_amount_percentage_condition(self, out_standing_amount_percentage_condition):
        """Sets the out_standing_amount_percentage_condition of this PostAdhocQuerySearchRequest.


        :param out_standing_amount_percentage_condition: The out_standing_amount_percentage_condition of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: str
        """

        self._out_standing_amount_percentage_condition = out_standing_amount_percentage_condition

    @property
    def outstanding_amount_condition(self):
        """Gets the outstanding_amount_condition of this PostAdhocQuerySearchRequest.  # noqa: E501


        :return: The outstanding_amount_condition of this PostAdhocQuerySearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._outstanding_amount_condition

    @outstanding_amount_condition.setter
    def outstanding_amount_condition(self, outstanding_amount_condition):
        """Sets the outstanding_amount_condition of this PostAdhocQuerySearchRequest.


        :param outstanding_amount_condition: The outstanding_amount_condition of this PostAdhocQuerySearchRequest.  # noqa: E501
        :type: str
        """

        self._outstanding_amount_condition = outstanding_amount_condition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostAdhocQuerySearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostAdhocQuerySearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
