# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetEntityTypeEntityIdDocumentsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'file_name': 'str',
        'id': 'int',
        'location': 'str',
        'name': 'str',
        'parent_entity_id': 'int',
        'parent_entity_type': 'str',
        'size': 'int',
        'storage_type': 'int',
        'type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'file_name': 'fileName',
        'id': 'id',
        'location': 'location',
        'name': 'name',
        'parent_entity_id': 'parentEntityId',
        'parent_entity_type': 'parentEntityType',
        'size': 'size',
        'storage_type': 'storageType',
        'type': 'type'
    }

    def __init__(self, description=None, file_name=None, id=None, location=None, name=None, parent_entity_id=None, parent_entity_type=None, size=None, storage_type=None, type=None):  # noqa: E501
        """GetEntityTypeEntityIdDocumentsResponse - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._file_name = None
        self._id = None
        self._location = None
        self._name = None
        self._parent_entity_id = None
        self._parent_entity_type = None
        self._size = None
        self._storage_type = None
        self._type = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if file_name is not None:
            self.file_name = file_name
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if parent_entity_id is not None:
            self.parent_entity_id = parent_entity_id
        if parent_entity_type is not None:
            self.parent_entity_type = parent_entity_type
        if size is not None:
            self.size = size
        if storage_type is not None:
            self.storage_type = storage_type
        if type is not None:
            self.type = type

    @property
    def description(self):
        """Gets the description of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501


        :return: The description of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetEntityTypeEntityIdDocumentsResponse.


        :param description: The description of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file_name(self):
        """Gets the file_name of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501


        :return: The file_name of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this GetEntityTypeEntityIdDocumentsResponse.


        :param file_name: The file_name of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def id(self):
        """Gets the id of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501


        :return: The id of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetEntityTypeEntityIdDocumentsResponse.


        :param id: The id of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501


        :return: The location of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GetEntityTypeEntityIdDocumentsResponse.


        :param location: The location of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501


        :return: The name of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetEntityTypeEntityIdDocumentsResponse.


        :param name: The name of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_entity_id(self):
        """Gets the parent_entity_id of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501


        :return: The parent_entity_id of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :rtype: int
        """
        return self._parent_entity_id

    @parent_entity_id.setter
    def parent_entity_id(self, parent_entity_id):
        """Sets the parent_entity_id of this GetEntityTypeEntityIdDocumentsResponse.


        :param parent_entity_id: The parent_entity_id of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :type: int
        """

        self._parent_entity_id = parent_entity_id

    @property
    def parent_entity_type(self):
        """Gets the parent_entity_type of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501


        :return: The parent_entity_type of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_entity_type

    @parent_entity_type.setter
    def parent_entity_type(self, parent_entity_type):
        """Sets the parent_entity_type of this GetEntityTypeEntityIdDocumentsResponse.


        :param parent_entity_type: The parent_entity_type of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :type: str
        """

        self._parent_entity_type = parent_entity_type

    @property
    def size(self):
        """Gets the size of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501


        :return: The size of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GetEntityTypeEntityIdDocumentsResponse.


        :param size: The size of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def storage_type(self):
        """Gets the storage_type of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501


        :return: The storage_type of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :rtype: int
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this GetEntityTypeEntityIdDocumentsResponse.


        :param storage_type: The storage_type of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :type: int
        """

        self._storage_type = storage_type

    @property
    def type(self):
        """Gets the type of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501


        :return: The type of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetEntityTypeEntityIdDocumentsResponse.


        :param type: The type of this GetEntityTypeEntityIdDocumentsResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetEntityTypeEntityIdDocumentsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetEntityTypeEntityIdDocumentsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
