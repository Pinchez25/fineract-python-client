# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetFixedDepositAccountsAccountChart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'account_number': 'int',
        'chart_slabs': 'list[GetFixedDepositAccountsChartSlabs]',
        'from_date': 'date',
        'id': 'int',
        'period_types': 'list[GetFixedDepositAccountsPeriodTypes]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_number': 'accountNumber',
        'chart_slabs': 'chartSlabs',
        'from_date': 'fromDate',
        'id': 'id',
        'period_types': 'periodTypes'
    }

    def __init__(self, account_id=None, account_number=None, chart_slabs=None, from_date=None, id=None, period_types=None):  # noqa: E501
        """GetFixedDepositAccountsAccountChart - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_number = None
        self._chart_slabs = None
        self._from_date = None
        self._id = None
        self._period_types = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_number is not None:
            self.account_number = account_number
        if chart_slabs is not None:
            self.chart_slabs = chart_slabs
        if from_date is not None:
            self.from_date = from_date
        if id is not None:
            self.id = id
        if period_types is not None:
            self.period_types = period_types

    @property
    def account_id(self):
        """Gets the account_id of this GetFixedDepositAccountsAccountChart.  # noqa: E501


        :return: The account_id of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetFixedDepositAccountsAccountChart.


        :param account_id: The account_id of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this GetFixedDepositAccountsAccountChart.  # noqa: E501


        :return: The account_number of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :rtype: int
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this GetFixedDepositAccountsAccountChart.


        :param account_number: The account_number of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :type: int
        """

        self._account_number = account_number

    @property
    def chart_slabs(self):
        """Gets the chart_slabs of this GetFixedDepositAccountsAccountChart.  # noqa: E501


        :return: The chart_slabs of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :rtype: list[GetFixedDepositAccountsChartSlabs]
        """
        return self._chart_slabs

    @chart_slabs.setter
    def chart_slabs(self, chart_slabs):
        """Sets the chart_slabs of this GetFixedDepositAccountsAccountChart.


        :param chart_slabs: The chart_slabs of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :type: list[GetFixedDepositAccountsChartSlabs]
        """

        self._chart_slabs = chart_slabs

    @property
    def from_date(self):
        """Gets the from_date of this GetFixedDepositAccountsAccountChart.  # noqa: E501


        :return: The from_date of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :rtype: date
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this GetFixedDepositAccountsAccountChart.


        :param from_date: The from_date of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :type: date
        """

        self._from_date = from_date

    @property
    def id(self):
        """Gets the id of this GetFixedDepositAccountsAccountChart.  # noqa: E501


        :return: The id of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetFixedDepositAccountsAccountChart.


        :param id: The id of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def period_types(self):
        """Gets the period_types of this GetFixedDepositAccountsAccountChart.  # noqa: E501


        :return: The period_types of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :rtype: list[GetFixedDepositAccountsPeriodTypes]
        """
        return self._period_types

    @period_types.setter
    def period_types(self, period_types):
        """Sets the period_types of this GetFixedDepositAccountsAccountChart.


        :param period_types: The period_types of this GetFixedDepositAccountsAccountChart.  # noqa: E501
        :type: list[GetFixedDepositAccountsPeriodTypes]
        """

        self._period_types = period_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetFixedDepositAccountsAccountChart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetFixedDepositAccountsAccountChart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
