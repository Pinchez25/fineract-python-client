# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetTranscationEnumData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount_hold': 'bool',
        'amount_release': 'bool',
        'approve_transfer': 'bool',
        'code': 'str',
        'deposit': 'bool',
        'dividend_payout': 'bool',
        'escheat': 'bool',
        'fee_deduction': 'bool',
        'id': 'int',
        'initiate_transfer': 'bool',
        'interest_posting': 'bool',
        'overdraft_fee': 'bool',
        'overdraft_interest': 'bool',
        'reject_transfer': 'bool',
        'value': 'str',
        'withdraw_transfer': 'bool',
        'withdrawal': 'bool',
        'withhold_tax': 'bool',
        'writtenoff': 'bool'
    }

    attribute_map = {
        'amount_hold': 'amountHold',
        'amount_release': 'amountRelease',
        'approve_transfer': 'approveTransfer',
        'code': 'code',
        'deposit': 'deposit',
        'dividend_payout': 'dividendPayout',
        'escheat': 'escheat',
        'fee_deduction': 'feeDeduction',
        'id': 'id',
        'initiate_transfer': 'initiateTransfer',
        'interest_posting': 'interestPosting',
        'overdraft_fee': 'overdraftFee',
        'overdraft_interest': 'overdraftInterest',
        'reject_transfer': 'rejectTransfer',
        'value': 'value',
        'withdraw_transfer': 'withdrawTransfer',
        'withdrawal': 'withdrawal',
        'withhold_tax': 'withholdTax',
        'writtenoff': 'writtenoff'
    }

    def __init__(self, amount_hold=None, amount_release=None, approve_transfer=None, code=None, deposit=None, dividend_payout=None, escheat=None, fee_deduction=None, id=None, initiate_transfer=None, interest_posting=None, overdraft_fee=None, overdraft_interest=None, reject_transfer=None, value=None, withdraw_transfer=None, withdrawal=None, withhold_tax=None, writtenoff=None):  # noqa: E501
        """GetTranscationEnumData - a model defined in Swagger"""  # noqa: E501
        self._amount_hold = None
        self._amount_release = None
        self._approve_transfer = None
        self._code = None
        self._deposit = None
        self._dividend_payout = None
        self._escheat = None
        self._fee_deduction = None
        self._id = None
        self._initiate_transfer = None
        self._interest_posting = None
        self._overdraft_fee = None
        self._overdraft_interest = None
        self._reject_transfer = None
        self._value = None
        self._withdraw_transfer = None
        self._withdrawal = None
        self._withhold_tax = None
        self._writtenoff = None
        self.discriminator = None
        if amount_hold is not None:
            self.amount_hold = amount_hold
        if amount_release is not None:
            self.amount_release = amount_release
        if approve_transfer is not None:
            self.approve_transfer = approve_transfer
        if code is not None:
            self.code = code
        if deposit is not None:
            self.deposit = deposit
        if dividend_payout is not None:
            self.dividend_payout = dividend_payout
        if escheat is not None:
            self.escheat = escheat
        if fee_deduction is not None:
            self.fee_deduction = fee_deduction
        if id is not None:
            self.id = id
        if initiate_transfer is not None:
            self.initiate_transfer = initiate_transfer
        if interest_posting is not None:
            self.interest_posting = interest_posting
        if overdraft_fee is not None:
            self.overdraft_fee = overdraft_fee
        if overdraft_interest is not None:
            self.overdraft_interest = overdraft_interest
        if reject_transfer is not None:
            self.reject_transfer = reject_transfer
        if value is not None:
            self.value = value
        if withdraw_transfer is not None:
            self.withdraw_transfer = withdraw_transfer
        if withdrawal is not None:
            self.withdrawal = withdrawal
        if withhold_tax is not None:
            self.withhold_tax = withhold_tax
        if writtenoff is not None:
            self.writtenoff = writtenoff

    @property
    def amount_hold(self):
        """Gets the amount_hold of this GetTranscationEnumData.  # noqa: E501


        :return: The amount_hold of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._amount_hold

    @amount_hold.setter
    def amount_hold(self, amount_hold):
        """Sets the amount_hold of this GetTranscationEnumData.


        :param amount_hold: The amount_hold of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._amount_hold = amount_hold

    @property
    def amount_release(self):
        """Gets the amount_release of this GetTranscationEnumData.  # noqa: E501


        :return: The amount_release of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._amount_release

    @amount_release.setter
    def amount_release(self, amount_release):
        """Sets the amount_release of this GetTranscationEnumData.


        :param amount_release: The amount_release of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._amount_release = amount_release

    @property
    def approve_transfer(self):
        """Gets the approve_transfer of this GetTranscationEnumData.  # noqa: E501


        :return: The approve_transfer of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._approve_transfer

    @approve_transfer.setter
    def approve_transfer(self, approve_transfer):
        """Sets the approve_transfer of this GetTranscationEnumData.


        :param approve_transfer: The approve_transfer of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._approve_transfer = approve_transfer

    @property
    def code(self):
        """Gets the code of this GetTranscationEnumData.  # noqa: E501


        :return: The code of this GetTranscationEnumData.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GetTranscationEnumData.


        :param code: The code of this GetTranscationEnumData.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def deposit(self):
        """Gets the deposit of this GetTranscationEnumData.  # noqa: E501


        :return: The deposit of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this GetTranscationEnumData.


        :param deposit: The deposit of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._deposit = deposit

    @property
    def dividend_payout(self):
        """Gets the dividend_payout of this GetTranscationEnumData.  # noqa: E501


        :return: The dividend_payout of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._dividend_payout

    @dividend_payout.setter
    def dividend_payout(self, dividend_payout):
        """Sets the dividend_payout of this GetTranscationEnumData.


        :param dividend_payout: The dividend_payout of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._dividend_payout = dividend_payout

    @property
    def escheat(self):
        """Gets the escheat of this GetTranscationEnumData.  # noqa: E501


        :return: The escheat of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._escheat

    @escheat.setter
    def escheat(self, escheat):
        """Sets the escheat of this GetTranscationEnumData.


        :param escheat: The escheat of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._escheat = escheat

    @property
    def fee_deduction(self):
        """Gets the fee_deduction of this GetTranscationEnumData.  # noqa: E501


        :return: The fee_deduction of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._fee_deduction

    @fee_deduction.setter
    def fee_deduction(self, fee_deduction):
        """Sets the fee_deduction of this GetTranscationEnumData.


        :param fee_deduction: The fee_deduction of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._fee_deduction = fee_deduction

    @property
    def id(self):
        """Gets the id of this GetTranscationEnumData.  # noqa: E501


        :return: The id of this GetTranscationEnumData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetTranscationEnumData.


        :param id: The id of this GetTranscationEnumData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def initiate_transfer(self):
        """Gets the initiate_transfer of this GetTranscationEnumData.  # noqa: E501


        :return: The initiate_transfer of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._initiate_transfer

    @initiate_transfer.setter
    def initiate_transfer(self, initiate_transfer):
        """Sets the initiate_transfer of this GetTranscationEnumData.


        :param initiate_transfer: The initiate_transfer of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._initiate_transfer = initiate_transfer

    @property
    def interest_posting(self):
        """Gets the interest_posting of this GetTranscationEnumData.  # noqa: E501


        :return: The interest_posting of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._interest_posting

    @interest_posting.setter
    def interest_posting(self, interest_posting):
        """Sets the interest_posting of this GetTranscationEnumData.


        :param interest_posting: The interest_posting of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._interest_posting = interest_posting

    @property
    def overdraft_fee(self):
        """Gets the overdraft_fee of this GetTranscationEnumData.  # noqa: E501


        :return: The overdraft_fee of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._overdraft_fee

    @overdraft_fee.setter
    def overdraft_fee(self, overdraft_fee):
        """Sets the overdraft_fee of this GetTranscationEnumData.


        :param overdraft_fee: The overdraft_fee of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._overdraft_fee = overdraft_fee

    @property
    def overdraft_interest(self):
        """Gets the overdraft_interest of this GetTranscationEnumData.  # noqa: E501


        :return: The overdraft_interest of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._overdraft_interest

    @overdraft_interest.setter
    def overdraft_interest(self, overdraft_interest):
        """Sets the overdraft_interest of this GetTranscationEnumData.


        :param overdraft_interest: The overdraft_interest of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._overdraft_interest = overdraft_interest

    @property
    def reject_transfer(self):
        """Gets the reject_transfer of this GetTranscationEnumData.  # noqa: E501


        :return: The reject_transfer of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._reject_transfer

    @reject_transfer.setter
    def reject_transfer(self, reject_transfer):
        """Sets the reject_transfer of this GetTranscationEnumData.


        :param reject_transfer: The reject_transfer of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._reject_transfer = reject_transfer

    @property
    def value(self):
        """Gets the value of this GetTranscationEnumData.  # noqa: E501


        :return: The value of this GetTranscationEnumData.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetTranscationEnumData.


        :param value: The value of this GetTranscationEnumData.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def withdraw_transfer(self):
        """Gets the withdraw_transfer of this GetTranscationEnumData.  # noqa: E501


        :return: The withdraw_transfer of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._withdraw_transfer

    @withdraw_transfer.setter
    def withdraw_transfer(self, withdraw_transfer):
        """Sets the withdraw_transfer of this GetTranscationEnumData.


        :param withdraw_transfer: The withdraw_transfer of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._withdraw_transfer = withdraw_transfer

    @property
    def withdrawal(self):
        """Gets the withdrawal of this GetTranscationEnumData.  # noqa: E501


        :return: The withdrawal of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._withdrawal

    @withdrawal.setter
    def withdrawal(self, withdrawal):
        """Sets the withdrawal of this GetTranscationEnumData.


        :param withdrawal: The withdrawal of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._withdrawal = withdrawal

    @property
    def withhold_tax(self):
        """Gets the withhold_tax of this GetTranscationEnumData.  # noqa: E501


        :return: The withhold_tax of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._withhold_tax

    @withhold_tax.setter
    def withhold_tax(self, withhold_tax):
        """Sets the withhold_tax of this GetTranscationEnumData.


        :param withhold_tax: The withhold_tax of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._withhold_tax = withhold_tax

    @property
    def writtenoff(self):
        """Gets the writtenoff of this GetTranscationEnumData.  # noqa: E501


        :return: The writtenoff of this GetTranscationEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._writtenoff

    @writtenoff.setter
    def writtenoff(self, writtenoff):
        """Sets the writtenoff of this GetTranscationEnumData.


        :param writtenoff: The writtenoff of this GetTranscationEnumData.  # noqa: E501
        :type: bool
        """

        self._writtenoff = writtenoff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetTranscationEnumData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTranscationEnumData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
