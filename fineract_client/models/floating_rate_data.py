# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FloatingRateData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'base_lending_rate': 'bool',
        'created_by': 'str',
        'created_on': 'datetime',
        'id': 'int',
        'modified_by': 'str',
        'modified_on': 'datetime',
        'name': 'str',
        'rate_periods': 'list[FloatingRatePeriodData]'
    }

    attribute_map = {
        'active': 'active',
        'base_lending_rate': 'baseLendingRate',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'id': 'id',
        'modified_by': 'modifiedBy',
        'modified_on': 'modifiedOn',
        'name': 'name',
        'rate_periods': 'ratePeriods'
    }

    def __init__(self, active=None, base_lending_rate=None, created_by=None, created_on=None, id=None, modified_by=None, modified_on=None, name=None, rate_periods=None):  # noqa: E501
        """FloatingRateData - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._base_lending_rate = None
        self._created_by = None
        self._created_on = None
        self._id = None
        self._modified_by = None
        self._modified_on = None
        self._name = None
        self._rate_periods = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if base_lending_rate is not None:
            self.base_lending_rate = base_lending_rate
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if id is not None:
            self.id = id
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_on is not None:
            self.modified_on = modified_on
        if name is not None:
            self.name = name
        if rate_periods is not None:
            self.rate_periods = rate_periods

    @property
    def active(self):
        """Gets the active of this FloatingRateData.  # noqa: E501


        :return: The active of this FloatingRateData.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this FloatingRateData.


        :param active: The active of this FloatingRateData.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def base_lending_rate(self):
        """Gets the base_lending_rate of this FloatingRateData.  # noqa: E501


        :return: The base_lending_rate of this FloatingRateData.  # noqa: E501
        :rtype: bool
        """
        return self._base_lending_rate

    @base_lending_rate.setter
    def base_lending_rate(self, base_lending_rate):
        """Sets the base_lending_rate of this FloatingRateData.


        :param base_lending_rate: The base_lending_rate of this FloatingRateData.  # noqa: E501
        :type: bool
        """

        self._base_lending_rate = base_lending_rate

    @property
    def created_by(self):
        """Gets the created_by of this FloatingRateData.  # noqa: E501


        :return: The created_by of this FloatingRateData.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this FloatingRateData.


        :param created_by: The created_by of this FloatingRateData.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this FloatingRateData.  # noqa: E501


        :return: The created_on of this FloatingRateData.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this FloatingRateData.


        :param created_on: The created_on of this FloatingRateData.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def id(self):
        """Gets the id of this FloatingRateData.  # noqa: E501


        :return: The id of this FloatingRateData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FloatingRateData.


        :param id: The id of this FloatingRateData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def modified_by(self):
        """Gets the modified_by of this FloatingRateData.  # noqa: E501


        :return: The modified_by of this FloatingRateData.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this FloatingRateData.


        :param modified_by: The modified_by of this FloatingRateData.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def modified_on(self):
        """Gets the modified_on of this FloatingRateData.  # noqa: E501


        :return: The modified_on of this FloatingRateData.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this FloatingRateData.


        :param modified_on: The modified_on of this FloatingRateData.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def name(self):
        """Gets the name of this FloatingRateData.  # noqa: E501


        :return: The name of this FloatingRateData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FloatingRateData.


        :param name: The name of this FloatingRateData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rate_periods(self):
        """Gets the rate_periods of this FloatingRateData.  # noqa: E501


        :return: The rate_periods of this FloatingRateData.  # noqa: E501
        :rtype: list[FloatingRatePeriodData]
        """
        return self._rate_periods

    @rate_periods.setter
    def rate_periods(self, rate_periods):
        """Sets the rate_periods of this FloatingRateData.


        :param rate_periods: The rate_periods of this FloatingRateData.  # noqa: E501
        :type: list[FloatingRatePeriodData]
        """

        self._rate_periods = rate_periods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FloatingRateData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FloatingRateData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
