# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PutRecurringDepositProductsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'locale': 'str',
        'min_deposit_term': 'int',
        'min_deposit_term_type_id': 'int'
    }

    attribute_map = {
        'description': 'description',
        'locale': 'locale',
        'min_deposit_term': 'minDepositTerm',
        'min_deposit_term_type_id': 'minDepositTermTypeId'
    }

    def __init__(self, description=None, locale=None, min_deposit_term=None, min_deposit_term_type_id=None):  # noqa: E501
        """PutRecurringDepositProductsRequest - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._locale = None
        self._min_deposit_term = None
        self._min_deposit_term_type_id = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if locale is not None:
            self.locale = locale
        if min_deposit_term is not None:
            self.min_deposit_term = min_deposit_term
        if min_deposit_term_type_id is not None:
            self.min_deposit_term_type_id = min_deposit_term_type_id

    @property
    def description(self):
        """Gets the description of this PutRecurringDepositProductsRequest.  # noqa: E501


        :return: The description of this PutRecurringDepositProductsRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutRecurringDepositProductsRequest.


        :param description: The description of this PutRecurringDepositProductsRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def locale(self):
        """Gets the locale of this PutRecurringDepositProductsRequest.  # noqa: E501


        :return: The locale of this PutRecurringDepositProductsRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PutRecurringDepositProductsRequest.


        :param locale: The locale of this PutRecurringDepositProductsRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def min_deposit_term(self):
        """Gets the min_deposit_term of this PutRecurringDepositProductsRequest.  # noqa: E501


        :return: The min_deposit_term of this PutRecurringDepositProductsRequest.  # noqa: E501
        :rtype: int
        """
        return self._min_deposit_term

    @min_deposit_term.setter
    def min_deposit_term(self, min_deposit_term):
        """Sets the min_deposit_term of this PutRecurringDepositProductsRequest.


        :param min_deposit_term: The min_deposit_term of this PutRecurringDepositProductsRequest.  # noqa: E501
        :type: int
        """

        self._min_deposit_term = min_deposit_term

    @property
    def min_deposit_term_type_id(self):
        """Gets the min_deposit_term_type_id of this PutRecurringDepositProductsRequest.  # noqa: E501


        :return: The min_deposit_term_type_id of this PutRecurringDepositProductsRequest.  # noqa: E501
        :rtype: int
        """
        return self._min_deposit_term_type_id

    @min_deposit_term_type_id.setter
    def min_deposit_term_type_id(self, min_deposit_term_type_id):
        """Sets the min_deposit_term_type_id of this PutRecurringDepositProductsRequest.


        :param min_deposit_term_type_id: The min_deposit_term_type_id of this PutRecurringDepositProductsRequest.  # noqa: E501
        :type: int
        """

        self._min_deposit_term_type_id = min_deposit_term_type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutRecurringDepositProductsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutRecurringDepositProductsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
