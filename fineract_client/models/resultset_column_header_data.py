# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResultsetColumnHeaderData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boolean_display_type': 'bool',
        'code_lookup_display_type': 'bool',
        'code_value_display_type': 'bool',
        'column_code': 'str',
        'column_display_type': 'str',
        'column_length': 'int',
        'column_name': 'str',
        'column_type': 'str',
        'column_values': 'list[ResultsetColumnValueData]',
        'date_display_type': 'bool',
        'date_time_display_type': 'bool',
        'decimal_display_type': 'bool',
        'integer_display_type': 'bool',
        'is_column_indexed': 'bool',
        'is_column_nullable': 'bool',
        'is_column_primary_key': 'bool',
        'is_column_unique': 'bool',
        'mandatory': 'bool',
        'string_display_type': 'bool',
        'text_display_type': 'bool',
        'time_display_type': 'bool'
    }

    attribute_map = {
        'boolean_display_type': 'booleanDisplayType',
        'code_lookup_display_type': 'codeLookupDisplayType',
        'code_value_display_type': 'codeValueDisplayType',
        'column_code': 'columnCode',
        'column_display_type': 'columnDisplayType',
        'column_length': 'columnLength',
        'column_name': 'columnName',
        'column_type': 'columnType',
        'column_values': 'columnValues',
        'date_display_type': 'dateDisplayType',
        'date_time_display_type': 'dateTimeDisplayType',
        'decimal_display_type': 'decimalDisplayType',
        'integer_display_type': 'integerDisplayType',
        'is_column_indexed': 'isColumnIndexed',
        'is_column_nullable': 'isColumnNullable',
        'is_column_primary_key': 'isColumnPrimaryKey',
        'is_column_unique': 'isColumnUnique',
        'mandatory': 'mandatory',
        'string_display_type': 'stringDisplayType',
        'text_display_type': 'textDisplayType',
        'time_display_type': 'timeDisplayType'
    }

    def __init__(self, boolean_display_type=None, code_lookup_display_type=None, code_value_display_type=None, column_code=None, column_display_type=None, column_length=None, column_name=None, column_type=None, column_values=None, date_display_type=None, date_time_display_type=None, decimal_display_type=None, integer_display_type=None, is_column_indexed=None, is_column_nullable=None, is_column_primary_key=None, is_column_unique=None, mandatory=None, string_display_type=None, text_display_type=None, time_display_type=None):  # noqa: E501
        """ResultsetColumnHeaderData - a model defined in Swagger"""  # noqa: E501
        self._boolean_display_type = None
        self._code_lookup_display_type = None
        self._code_value_display_type = None
        self._column_code = None
        self._column_display_type = None
        self._column_length = None
        self._column_name = None
        self._column_type = None
        self._column_values = None
        self._date_display_type = None
        self._date_time_display_type = None
        self._decimal_display_type = None
        self._integer_display_type = None
        self._is_column_indexed = None
        self._is_column_nullable = None
        self._is_column_primary_key = None
        self._is_column_unique = None
        self._mandatory = None
        self._string_display_type = None
        self._text_display_type = None
        self._time_display_type = None
        self.discriminator = None
        if boolean_display_type is not None:
            self.boolean_display_type = boolean_display_type
        if code_lookup_display_type is not None:
            self.code_lookup_display_type = code_lookup_display_type
        if code_value_display_type is not None:
            self.code_value_display_type = code_value_display_type
        if column_code is not None:
            self.column_code = column_code
        if column_display_type is not None:
            self.column_display_type = column_display_type
        if column_length is not None:
            self.column_length = column_length
        if column_name is not None:
            self.column_name = column_name
        if column_type is not None:
            self.column_type = column_type
        if column_values is not None:
            self.column_values = column_values
        if date_display_type is not None:
            self.date_display_type = date_display_type
        if date_time_display_type is not None:
            self.date_time_display_type = date_time_display_type
        if decimal_display_type is not None:
            self.decimal_display_type = decimal_display_type
        if integer_display_type is not None:
            self.integer_display_type = integer_display_type
        if is_column_indexed is not None:
            self.is_column_indexed = is_column_indexed
        if is_column_nullable is not None:
            self.is_column_nullable = is_column_nullable
        if is_column_primary_key is not None:
            self.is_column_primary_key = is_column_primary_key
        if is_column_unique is not None:
            self.is_column_unique = is_column_unique
        if mandatory is not None:
            self.mandatory = mandatory
        if string_display_type is not None:
            self.string_display_type = string_display_type
        if text_display_type is not None:
            self.text_display_type = text_display_type
        if time_display_type is not None:
            self.time_display_type = time_display_type

    @property
    def boolean_display_type(self):
        """Gets the boolean_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The boolean_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._boolean_display_type

    @boolean_display_type.setter
    def boolean_display_type(self, boolean_display_type):
        """Sets the boolean_display_type of this ResultsetColumnHeaderData.


        :param boolean_display_type: The boolean_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._boolean_display_type = boolean_display_type

    @property
    def code_lookup_display_type(self):
        """Gets the code_lookup_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The code_lookup_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._code_lookup_display_type

    @code_lookup_display_type.setter
    def code_lookup_display_type(self, code_lookup_display_type):
        """Sets the code_lookup_display_type of this ResultsetColumnHeaderData.


        :param code_lookup_display_type: The code_lookup_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._code_lookup_display_type = code_lookup_display_type

    @property
    def code_value_display_type(self):
        """Gets the code_value_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The code_value_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._code_value_display_type

    @code_value_display_type.setter
    def code_value_display_type(self, code_value_display_type):
        """Sets the code_value_display_type of this ResultsetColumnHeaderData.


        :param code_value_display_type: The code_value_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._code_value_display_type = code_value_display_type

    @property
    def column_code(self):
        """Gets the column_code of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The column_code of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._column_code

    @column_code.setter
    def column_code(self, column_code):
        """Sets the column_code of this ResultsetColumnHeaderData.


        :param column_code: The column_code of this ResultsetColumnHeaderData.  # noqa: E501
        :type: str
        """

        self._column_code = column_code

    @property
    def column_display_type(self):
        """Gets the column_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The column_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._column_display_type

    @column_display_type.setter
    def column_display_type(self, column_display_type):
        """Sets the column_display_type of this ResultsetColumnHeaderData.


        :param column_display_type: The column_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: str
        """
        allowed_values = ["TEXT", "STRING", "INTEGER", "FLOAT", "DECIMAL", "DATE", "TIME", "DATETIME", "BOOLEAN", "BINARY", "CODELOOKUP", "CODEVALUE"]  # noqa: E501
        if column_display_type not in allowed_values:
            raise ValueError(
                "Invalid value for `column_display_type` ({0}), must be one of {1}"  # noqa: E501
                .format(column_display_type, allowed_values)
            )

        self._column_display_type = column_display_type

    @property
    def column_length(self):
        """Gets the column_length of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The column_length of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: int
        """
        return self._column_length

    @column_length.setter
    def column_length(self, column_length):
        """Sets the column_length of this ResultsetColumnHeaderData.


        :param column_length: The column_length of this ResultsetColumnHeaderData.  # noqa: E501
        :type: int
        """

        self._column_length = column_length

    @property
    def column_name(self):
        """Gets the column_name of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The column_name of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this ResultsetColumnHeaderData.


        :param column_name: The column_name of this ResultsetColumnHeaderData.  # noqa: E501
        :type: str
        """

        self._column_name = column_name

    @property
    def column_type(self):
        """Gets the column_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The column_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """Sets the column_type of this ResultsetColumnHeaderData.


        :param column_type: The column_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: str
        """
        allowed_values = ["BIT", "BOOLEAN", "SMALLINT", "TINYINT", "INTEGER", "MEDIUMINT", "BIGINT", "REAL", "FLOAT", "DOUBLE", "NUMERIC", "DECIMAL", "SERIAL", "SMALLSERIAL", "BIGSERIAL", "MONEY", "CHAR", "VARCHAR", "LONGVARCHAR", "TEXT", "TINYTEXT", "MEDIUMTEXT", "LONGTEXT", "JSON", "DATE", "TIME", "TIME_WITH_TIMEZONE", "TIMESTAMP", "DATETIME", "TIMESTAMP_WITH_TIMEZONE", "INTERVAL", "BINARY", "VARBINARY", "LONGVARBINARY", "BYTEA", "BLOB", "TINYBLOB", "MEDIUMBLOB", "LONGBLOB"]  # noqa: E501
        if column_type not in allowed_values:
            raise ValueError(
                "Invalid value for `column_type` ({0}), must be one of {1}"  # noqa: E501
                .format(column_type, allowed_values)
            )

        self._column_type = column_type

    @property
    def column_values(self):
        """Gets the column_values of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The column_values of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: list[ResultsetColumnValueData]
        """
        return self._column_values

    @column_values.setter
    def column_values(self, column_values):
        """Sets the column_values of this ResultsetColumnHeaderData.


        :param column_values: The column_values of this ResultsetColumnHeaderData.  # noqa: E501
        :type: list[ResultsetColumnValueData]
        """

        self._column_values = column_values

    @property
    def date_display_type(self):
        """Gets the date_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The date_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._date_display_type

    @date_display_type.setter
    def date_display_type(self, date_display_type):
        """Sets the date_display_type of this ResultsetColumnHeaderData.


        :param date_display_type: The date_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._date_display_type = date_display_type

    @property
    def date_time_display_type(self):
        """Gets the date_time_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The date_time_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._date_time_display_type

    @date_time_display_type.setter
    def date_time_display_type(self, date_time_display_type):
        """Sets the date_time_display_type of this ResultsetColumnHeaderData.


        :param date_time_display_type: The date_time_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._date_time_display_type = date_time_display_type

    @property
    def decimal_display_type(self):
        """Gets the decimal_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The decimal_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._decimal_display_type

    @decimal_display_type.setter
    def decimal_display_type(self, decimal_display_type):
        """Sets the decimal_display_type of this ResultsetColumnHeaderData.


        :param decimal_display_type: The decimal_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._decimal_display_type = decimal_display_type

    @property
    def integer_display_type(self):
        """Gets the integer_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The integer_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._integer_display_type

    @integer_display_type.setter
    def integer_display_type(self, integer_display_type):
        """Sets the integer_display_type of this ResultsetColumnHeaderData.


        :param integer_display_type: The integer_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._integer_display_type = integer_display_type

    @property
    def is_column_indexed(self):
        """Gets the is_column_indexed of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The is_column_indexed of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._is_column_indexed

    @is_column_indexed.setter
    def is_column_indexed(self, is_column_indexed):
        """Sets the is_column_indexed of this ResultsetColumnHeaderData.


        :param is_column_indexed: The is_column_indexed of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._is_column_indexed = is_column_indexed

    @property
    def is_column_nullable(self):
        """Gets the is_column_nullable of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The is_column_nullable of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._is_column_nullable

    @is_column_nullable.setter
    def is_column_nullable(self, is_column_nullable):
        """Sets the is_column_nullable of this ResultsetColumnHeaderData.


        :param is_column_nullable: The is_column_nullable of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._is_column_nullable = is_column_nullable

    @property
    def is_column_primary_key(self):
        """Gets the is_column_primary_key of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The is_column_primary_key of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._is_column_primary_key

    @is_column_primary_key.setter
    def is_column_primary_key(self, is_column_primary_key):
        """Sets the is_column_primary_key of this ResultsetColumnHeaderData.


        :param is_column_primary_key: The is_column_primary_key of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._is_column_primary_key = is_column_primary_key

    @property
    def is_column_unique(self):
        """Gets the is_column_unique of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The is_column_unique of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._is_column_unique

    @is_column_unique.setter
    def is_column_unique(self, is_column_unique):
        """Sets the is_column_unique of this ResultsetColumnHeaderData.


        :param is_column_unique: The is_column_unique of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._is_column_unique = is_column_unique

    @property
    def mandatory(self):
        """Gets the mandatory of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The mandatory of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this ResultsetColumnHeaderData.


        :param mandatory: The mandatory of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._mandatory = mandatory

    @property
    def string_display_type(self):
        """Gets the string_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The string_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._string_display_type

    @string_display_type.setter
    def string_display_type(self, string_display_type):
        """Sets the string_display_type of this ResultsetColumnHeaderData.


        :param string_display_type: The string_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._string_display_type = string_display_type

    @property
    def text_display_type(self):
        """Gets the text_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The text_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._text_display_type

    @text_display_type.setter
    def text_display_type(self, text_display_type):
        """Sets the text_display_type of this ResultsetColumnHeaderData.


        :param text_display_type: The text_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._text_display_type = text_display_type

    @property
    def time_display_type(self):
        """Gets the time_display_type of this ResultsetColumnHeaderData.  # noqa: E501


        :return: The time_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._time_display_type

    @time_display_type.setter
    def time_display_type(self, time_display_type):
        """Sets the time_display_type of this ResultsetColumnHeaderData.


        :param time_display_type: The time_display_type of this ResultsetColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._time_display_type = time_display_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultsetColumnHeaderData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultsetColumnHeaderData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
