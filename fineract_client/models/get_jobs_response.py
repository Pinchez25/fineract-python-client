# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetJobsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'cron_expression': 'str',
        'currently_running': 'bool',
        'display_name': 'str',
        'initializing_error': 'str',
        'job_id': 'int',
        'last_run_history': 'JobDetailHistoryData',
        'next_run_time': 'datetime'
    }

    attribute_map = {
        'active': 'active',
        'cron_expression': 'cronExpression',
        'currently_running': 'currentlyRunning',
        'display_name': 'displayName',
        'initializing_error': 'initializingError',
        'job_id': 'jobId',
        'last_run_history': 'lastRunHistory',
        'next_run_time': 'nextRunTime'
    }

    def __init__(self, active=None, cron_expression=None, currently_running=None, display_name=None, initializing_error=None, job_id=None, last_run_history=None, next_run_time=None):  # noqa: E501
        """GetJobsResponse - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._cron_expression = None
        self._currently_running = None
        self._display_name = None
        self._initializing_error = None
        self._job_id = None
        self._last_run_history = None
        self._next_run_time = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if cron_expression is not None:
            self.cron_expression = cron_expression
        if currently_running is not None:
            self.currently_running = currently_running
        if display_name is not None:
            self.display_name = display_name
        if initializing_error is not None:
            self.initializing_error = initializing_error
        if job_id is not None:
            self.job_id = job_id
        if last_run_history is not None:
            self.last_run_history = last_run_history
        if next_run_time is not None:
            self.next_run_time = next_run_time

    @property
    def active(self):
        """Gets the active of this GetJobsResponse.  # noqa: E501


        :return: The active of this GetJobsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this GetJobsResponse.


        :param active: The active of this GetJobsResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def cron_expression(self):
        """Gets the cron_expression of this GetJobsResponse.  # noqa: E501


        :return: The cron_expression of this GetJobsResponse.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this GetJobsResponse.


        :param cron_expression: The cron_expression of this GetJobsResponse.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def currently_running(self):
        """Gets the currently_running of this GetJobsResponse.  # noqa: E501


        :return: The currently_running of this GetJobsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._currently_running

    @currently_running.setter
    def currently_running(self, currently_running):
        """Sets the currently_running of this GetJobsResponse.


        :param currently_running: The currently_running of this GetJobsResponse.  # noqa: E501
        :type: bool
        """

        self._currently_running = currently_running

    @property
    def display_name(self):
        """Gets the display_name of this GetJobsResponse.  # noqa: E501


        :return: The display_name of this GetJobsResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GetJobsResponse.


        :param display_name: The display_name of this GetJobsResponse.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def initializing_error(self):
        """Gets the initializing_error of this GetJobsResponse.  # noqa: E501


        :return: The initializing_error of this GetJobsResponse.  # noqa: E501
        :rtype: str
        """
        return self._initializing_error

    @initializing_error.setter
    def initializing_error(self, initializing_error):
        """Sets the initializing_error of this GetJobsResponse.


        :param initializing_error: The initializing_error of this GetJobsResponse.  # noqa: E501
        :type: str
        """

        self._initializing_error = initializing_error

    @property
    def job_id(self):
        """Gets the job_id of this GetJobsResponse.  # noqa: E501


        :return: The job_id of this GetJobsResponse.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this GetJobsResponse.


        :param job_id: The job_id of this GetJobsResponse.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def last_run_history(self):
        """Gets the last_run_history of this GetJobsResponse.  # noqa: E501


        :return: The last_run_history of this GetJobsResponse.  # noqa: E501
        :rtype: JobDetailHistoryData
        """
        return self._last_run_history

    @last_run_history.setter
    def last_run_history(self, last_run_history):
        """Sets the last_run_history of this GetJobsResponse.


        :param last_run_history: The last_run_history of this GetJobsResponse.  # noqa: E501
        :type: JobDetailHistoryData
        """

        self._last_run_history = last_run_history

    @property
    def next_run_time(self):
        """Gets the next_run_time of this GetJobsResponse.  # noqa: E501


        :return: The next_run_time of this GetJobsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._next_run_time

    @next_run_time.setter
    def next_run_time(self, next_run_time):
        """Sets the next_run_time of this GetJobsResponse.


        :param next_run_time: The next_run_time of this GetJobsResponse.  # noqa: E501
        :type: datetime
        """

        self._next_run_time = next_run_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetJobsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetJobsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
