# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScorecardValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_on': 'datetime',
        'question_id': 'int',
        'response_id': 'int',
        'value': 'int'
    }

    attribute_map = {
        'created_on': 'createdOn',
        'question_id': 'questionId',
        'response_id': 'responseId',
        'value': 'value'
    }

    def __init__(self, created_on=None, question_id=None, response_id=None, value=None):  # noqa: E501
        """ScorecardValue - a model defined in Swagger"""  # noqa: E501
        self._created_on = None
        self._question_id = None
        self._response_id = None
        self._value = None
        self.discriminator = None
        if created_on is not None:
            self.created_on = created_on
        if question_id is not None:
            self.question_id = question_id
        if response_id is not None:
            self.response_id = response_id
        if value is not None:
            self.value = value

    @property
    def created_on(self):
        """Gets the created_on of this ScorecardValue.  # noqa: E501


        :return: The created_on of this ScorecardValue.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this ScorecardValue.


        :param created_on: The created_on of this ScorecardValue.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def question_id(self):
        """Gets the question_id of this ScorecardValue.  # noqa: E501


        :return: The question_id of this ScorecardValue.  # noqa: E501
        :rtype: int
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this ScorecardValue.


        :param question_id: The question_id of this ScorecardValue.  # noqa: E501
        :type: int
        """

        self._question_id = question_id

    @property
    def response_id(self):
        """Gets the response_id of this ScorecardValue.  # noqa: E501


        :return: The response_id of this ScorecardValue.  # noqa: E501
        :rtype: int
        """
        return self._response_id

    @response_id.setter
    def response_id(self, response_id):
        """Sets the response_id of this ScorecardValue.


        :param response_id: The response_id of this ScorecardValue.  # noqa: E501
        :type: int
        """

        self._response_id = response_id

    @property
    def value(self):
        """Gets the value of this ScorecardValue.  # noqa: E501


        :return: The value of this ScorecardValue.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ScorecardValue.


        :param value: The value of this ScorecardValue.  # noqa: E501
        :type: int
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScorecardValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScorecardValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
