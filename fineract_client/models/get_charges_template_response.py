# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetChargesTemplateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'charge_applies_to_options': 'list[GetChargesAppliesToResponse]',
        'charge_calculation_type_options': 'list[GetChargesCalculationTypeResponse]',
        'charge_payment_mode_options': 'list[GetChargesPaymentModeResponse]',
        'charge_time_type_options': 'list[GetChargesTimeTypeResponse]',
        'currency_options': 'list[GetChargesCurrencyResponse]',
        'fee_frequency_options': 'list[GetChargesTemplateFeeFrequencyOptions]',
        'loan_charge_calculation_type_options': 'list[GetChargesTemplateLoanChargeCalculationTypeOptions]',
        'loan_charge_time_type_options': 'list[GetChargesTemplateLoanChargeTimeTypeOptions]',
        'penalty': 'bool',
        'savings_charge_calculation_type_options': 'list[GetChargesTemplateLoanChargeCalculationTypeOptions]',
        'savings_charge_time_type_options': 'list[GetChargesTemplateLoanChargeTimeTypeOptions]'
    }

    attribute_map = {
        'active': 'active',
        'charge_applies_to_options': 'chargeAppliesToOptions',
        'charge_calculation_type_options': 'chargeCalculationTypeOptions',
        'charge_payment_mode_options': 'chargePaymentModeOptions',
        'charge_time_type_options': 'chargeTimeTypeOptions',
        'currency_options': 'currencyOptions',
        'fee_frequency_options': 'feeFrequencyOptions',
        'loan_charge_calculation_type_options': 'loanChargeCalculationTypeOptions',
        'loan_charge_time_type_options': 'loanChargeTimeTypeOptions',
        'penalty': 'penalty',
        'savings_charge_calculation_type_options': 'savingsChargeCalculationTypeOptions',
        'savings_charge_time_type_options': 'savingsChargeTimeTypeOptions'
    }

    def __init__(self, active=None, charge_applies_to_options=None, charge_calculation_type_options=None, charge_payment_mode_options=None, charge_time_type_options=None, currency_options=None, fee_frequency_options=None, loan_charge_calculation_type_options=None, loan_charge_time_type_options=None, penalty=None, savings_charge_calculation_type_options=None, savings_charge_time_type_options=None):  # noqa: E501
        """GetChargesTemplateResponse - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._charge_applies_to_options = None
        self._charge_calculation_type_options = None
        self._charge_payment_mode_options = None
        self._charge_time_type_options = None
        self._currency_options = None
        self._fee_frequency_options = None
        self._loan_charge_calculation_type_options = None
        self._loan_charge_time_type_options = None
        self._penalty = None
        self._savings_charge_calculation_type_options = None
        self._savings_charge_time_type_options = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if charge_applies_to_options is not None:
            self.charge_applies_to_options = charge_applies_to_options
        if charge_calculation_type_options is not None:
            self.charge_calculation_type_options = charge_calculation_type_options
        if charge_payment_mode_options is not None:
            self.charge_payment_mode_options = charge_payment_mode_options
        if charge_time_type_options is not None:
            self.charge_time_type_options = charge_time_type_options
        if currency_options is not None:
            self.currency_options = currency_options
        if fee_frequency_options is not None:
            self.fee_frequency_options = fee_frequency_options
        if loan_charge_calculation_type_options is not None:
            self.loan_charge_calculation_type_options = loan_charge_calculation_type_options
        if loan_charge_time_type_options is not None:
            self.loan_charge_time_type_options = loan_charge_time_type_options
        if penalty is not None:
            self.penalty = penalty
        if savings_charge_calculation_type_options is not None:
            self.savings_charge_calculation_type_options = savings_charge_calculation_type_options
        if savings_charge_time_type_options is not None:
            self.savings_charge_time_type_options = savings_charge_time_type_options

    @property
    def active(self):
        """Gets the active of this GetChargesTemplateResponse.  # noqa: E501


        :return: The active of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this GetChargesTemplateResponse.


        :param active: The active of this GetChargesTemplateResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def charge_applies_to_options(self):
        """Gets the charge_applies_to_options of this GetChargesTemplateResponse.  # noqa: E501


        :return: The charge_applies_to_options of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetChargesAppliesToResponse]
        """
        return self._charge_applies_to_options

    @charge_applies_to_options.setter
    def charge_applies_to_options(self, charge_applies_to_options):
        """Sets the charge_applies_to_options of this GetChargesTemplateResponse.


        :param charge_applies_to_options: The charge_applies_to_options of this GetChargesTemplateResponse.  # noqa: E501
        :type: list[GetChargesAppliesToResponse]
        """

        self._charge_applies_to_options = charge_applies_to_options

    @property
    def charge_calculation_type_options(self):
        """Gets the charge_calculation_type_options of this GetChargesTemplateResponse.  # noqa: E501


        :return: The charge_calculation_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetChargesCalculationTypeResponse]
        """
        return self._charge_calculation_type_options

    @charge_calculation_type_options.setter
    def charge_calculation_type_options(self, charge_calculation_type_options):
        """Sets the charge_calculation_type_options of this GetChargesTemplateResponse.


        :param charge_calculation_type_options: The charge_calculation_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :type: list[GetChargesCalculationTypeResponse]
        """

        self._charge_calculation_type_options = charge_calculation_type_options

    @property
    def charge_payment_mode_options(self):
        """Gets the charge_payment_mode_options of this GetChargesTemplateResponse.  # noqa: E501


        :return: The charge_payment_mode_options of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetChargesPaymentModeResponse]
        """
        return self._charge_payment_mode_options

    @charge_payment_mode_options.setter
    def charge_payment_mode_options(self, charge_payment_mode_options):
        """Sets the charge_payment_mode_options of this GetChargesTemplateResponse.


        :param charge_payment_mode_options: The charge_payment_mode_options of this GetChargesTemplateResponse.  # noqa: E501
        :type: list[GetChargesPaymentModeResponse]
        """

        self._charge_payment_mode_options = charge_payment_mode_options

    @property
    def charge_time_type_options(self):
        """Gets the charge_time_type_options of this GetChargesTemplateResponse.  # noqa: E501


        :return: The charge_time_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetChargesTimeTypeResponse]
        """
        return self._charge_time_type_options

    @charge_time_type_options.setter
    def charge_time_type_options(self, charge_time_type_options):
        """Sets the charge_time_type_options of this GetChargesTemplateResponse.


        :param charge_time_type_options: The charge_time_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :type: list[GetChargesTimeTypeResponse]
        """

        self._charge_time_type_options = charge_time_type_options

    @property
    def currency_options(self):
        """Gets the currency_options of this GetChargesTemplateResponse.  # noqa: E501


        :return: The currency_options of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetChargesCurrencyResponse]
        """
        return self._currency_options

    @currency_options.setter
    def currency_options(self, currency_options):
        """Sets the currency_options of this GetChargesTemplateResponse.


        :param currency_options: The currency_options of this GetChargesTemplateResponse.  # noqa: E501
        :type: list[GetChargesCurrencyResponse]
        """

        self._currency_options = currency_options

    @property
    def fee_frequency_options(self):
        """Gets the fee_frequency_options of this GetChargesTemplateResponse.  # noqa: E501


        :return: The fee_frequency_options of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetChargesTemplateFeeFrequencyOptions]
        """
        return self._fee_frequency_options

    @fee_frequency_options.setter
    def fee_frequency_options(self, fee_frequency_options):
        """Sets the fee_frequency_options of this GetChargesTemplateResponse.


        :param fee_frequency_options: The fee_frequency_options of this GetChargesTemplateResponse.  # noqa: E501
        :type: list[GetChargesTemplateFeeFrequencyOptions]
        """

        self._fee_frequency_options = fee_frequency_options

    @property
    def loan_charge_calculation_type_options(self):
        """Gets the loan_charge_calculation_type_options of this GetChargesTemplateResponse.  # noqa: E501


        :return: The loan_charge_calculation_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetChargesTemplateLoanChargeCalculationTypeOptions]
        """
        return self._loan_charge_calculation_type_options

    @loan_charge_calculation_type_options.setter
    def loan_charge_calculation_type_options(self, loan_charge_calculation_type_options):
        """Sets the loan_charge_calculation_type_options of this GetChargesTemplateResponse.


        :param loan_charge_calculation_type_options: The loan_charge_calculation_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :type: list[GetChargesTemplateLoanChargeCalculationTypeOptions]
        """

        self._loan_charge_calculation_type_options = loan_charge_calculation_type_options

    @property
    def loan_charge_time_type_options(self):
        """Gets the loan_charge_time_type_options of this GetChargesTemplateResponse.  # noqa: E501


        :return: The loan_charge_time_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetChargesTemplateLoanChargeTimeTypeOptions]
        """
        return self._loan_charge_time_type_options

    @loan_charge_time_type_options.setter
    def loan_charge_time_type_options(self, loan_charge_time_type_options):
        """Sets the loan_charge_time_type_options of this GetChargesTemplateResponse.


        :param loan_charge_time_type_options: The loan_charge_time_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :type: list[GetChargesTemplateLoanChargeTimeTypeOptions]
        """

        self._loan_charge_time_type_options = loan_charge_time_type_options

    @property
    def penalty(self):
        """Gets the penalty of this GetChargesTemplateResponse.  # noqa: E501


        :return: The penalty of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this GetChargesTemplateResponse.


        :param penalty: The penalty of this GetChargesTemplateResponse.  # noqa: E501
        :type: bool
        """

        self._penalty = penalty

    @property
    def savings_charge_calculation_type_options(self):
        """Gets the savings_charge_calculation_type_options of this GetChargesTemplateResponse.  # noqa: E501


        :return: The savings_charge_calculation_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetChargesTemplateLoanChargeCalculationTypeOptions]
        """
        return self._savings_charge_calculation_type_options

    @savings_charge_calculation_type_options.setter
    def savings_charge_calculation_type_options(self, savings_charge_calculation_type_options):
        """Sets the savings_charge_calculation_type_options of this GetChargesTemplateResponse.


        :param savings_charge_calculation_type_options: The savings_charge_calculation_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :type: list[GetChargesTemplateLoanChargeCalculationTypeOptions]
        """

        self._savings_charge_calculation_type_options = savings_charge_calculation_type_options

    @property
    def savings_charge_time_type_options(self):
        """Gets the savings_charge_time_type_options of this GetChargesTemplateResponse.  # noqa: E501


        :return: The savings_charge_time_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetChargesTemplateLoanChargeTimeTypeOptions]
        """
        return self._savings_charge_time_type_options

    @savings_charge_time_type_options.setter
    def savings_charge_time_type_options(self, savings_charge_time_type_options):
        """Sets the savings_charge_time_type_options of this GetChargesTemplateResponse.


        :param savings_charge_time_type_options: The savings_charge_time_type_options of this GetChargesTemplateResponse.  # noqa: E501
        :type: list[GetChargesTemplateLoanChargeTimeTypeOptions]
        """

        self._savings_charge_time_type_options = savings_charge_time_type_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetChargesTemplateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetChargesTemplateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
