# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanAccountLock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'str',
        'loan_id': 'int',
        'lock_owner': 'str',
        'lock_placed_on': 'datetime',
        'lock_placed_on_cob_business_date': 'date',
        'new_lock_owner': 'str',
        'stacktrace': 'str',
        'version': 'int'
    }

    attribute_map = {
        'error': 'error',
        'loan_id': 'loanId',
        'lock_owner': 'lockOwner',
        'lock_placed_on': 'lockPlacedOn',
        'lock_placed_on_cob_business_date': 'lockPlacedOnCobBusinessDate',
        'new_lock_owner': 'newLockOwner',
        'stacktrace': 'stacktrace',
        'version': 'version'
    }

    def __init__(self, error=None, loan_id=None, lock_owner=None, lock_placed_on=None, lock_placed_on_cob_business_date=None, new_lock_owner=None, stacktrace=None, version=None):  # noqa: E501
        """LoanAccountLock - a model defined in Swagger"""  # noqa: E501
        self._error = None
        self._loan_id = None
        self._lock_owner = None
        self._lock_placed_on = None
        self._lock_placed_on_cob_business_date = None
        self._new_lock_owner = None
        self._stacktrace = None
        self._version = None
        self.discriminator = None
        if error is not None:
            self.error = error
        if loan_id is not None:
            self.loan_id = loan_id
        if lock_owner is not None:
            self.lock_owner = lock_owner
        if lock_placed_on is not None:
            self.lock_placed_on = lock_placed_on
        if lock_placed_on_cob_business_date is not None:
            self.lock_placed_on_cob_business_date = lock_placed_on_cob_business_date
        if new_lock_owner is not None:
            self.new_lock_owner = new_lock_owner
        if stacktrace is not None:
            self.stacktrace = stacktrace
        if version is not None:
            self.version = version

    @property
    def error(self):
        """Gets the error of this LoanAccountLock.  # noqa: E501


        :return: The error of this LoanAccountLock.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this LoanAccountLock.


        :param error: The error of this LoanAccountLock.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def loan_id(self):
        """Gets the loan_id of this LoanAccountLock.  # noqa: E501


        :return: The loan_id of this LoanAccountLock.  # noqa: E501
        :rtype: int
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """Sets the loan_id of this LoanAccountLock.


        :param loan_id: The loan_id of this LoanAccountLock.  # noqa: E501
        :type: int
        """

        self._loan_id = loan_id

    @property
    def lock_owner(self):
        """Gets the lock_owner of this LoanAccountLock.  # noqa: E501


        :return: The lock_owner of this LoanAccountLock.  # noqa: E501
        :rtype: str
        """
        return self._lock_owner

    @lock_owner.setter
    def lock_owner(self, lock_owner):
        """Sets the lock_owner of this LoanAccountLock.


        :param lock_owner: The lock_owner of this LoanAccountLock.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOAN_COB_CHUNK_PROCESSING", "LOAN_INLINE_COB_PROCESSING"]  # noqa: E501
        if lock_owner not in allowed_values:
            raise ValueError(
                "Invalid value for `lock_owner` ({0}), must be one of {1}"  # noqa: E501
                .format(lock_owner, allowed_values)
            )

        self._lock_owner = lock_owner

    @property
    def lock_placed_on(self):
        """Gets the lock_placed_on of this LoanAccountLock.  # noqa: E501


        :return: The lock_placed_on of this LoanAccountLock.  # noqa: E501
        :rtype: datetime
        """
        return self._lock_placed_on

    @lock_placed_on.setter
    def lock_placed_on(self, lock_placed_on):
        """Sets the lock_placed_on of this LoanAccountLock.


        :param lock_placed_on: The lock_placed_on of this LoanAccountLock.  # noqa: E501
        :type: datetime
        """

        self._lock_placed_on = lock_placed_on

    @property
    def lock_placed_on_cob_business_date(self):
        """Gets the lock_placed_on_cob_business_date of this LoanAccountLock.  # noqa: E501


        :return: The lock_placed_on_cob_business_date of this LoanAccountLock.  # noqa: E501
        :rtype: date
        """
        return self._lock_placed_on_cob_business_date

    @lock_placed_on_cob_business_date.setter
    def lock_placed_on_cob_business_date(self, lock_placed_on_cob_business_date):
        """Sets the lock_placed_on_cob_business_date of this LoanAccountLock.


        :param lock_placed_on_cob_business_date: The lock_placed_on_cob_business_date of this LoanAccountLock.  # noqa: E501
        :type: date
        """

        self._lock_placed_on_cob_business_date = lock_placed_on_cob_business_date

    @property
    def new_lock_owner(self):
        """Gets the new_lock_owner of this LoanAccountLock.  # noqa: E501


        :return: The new_lock_owner of this LoanAccountLock.  # noqa: E501
        :rtype: str
        """
        return self._new_lock_owner

    @new_lock_owner.setter
    def new_lock_owner(self, new_lock_owner):
        """Sets the new_lock_owner of this LoanAccountLock.


        :param new_lock_owner: The new_lock_owner of this LoanAccountLock.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOAN_COB_CHUNK_PROCESSING", "LOAN_INLINE_COB_PROCESSING"]  # noqa: E501
        if new_lock_owner not in allowed_values:
            raise ValueError(
                "Invalid value for `new_lock_owner` ({0}), must be one of {1}"  # noqa: E501
                .format(new_lock_owner, allowed_values)
            )

        self._new_lock_owner = new_lock_owner

    @property
    def stacktrace(self):
        """Gets the stacktrace of this LoanAccountLock.  # noqa: E501


        :return: The stacktrace of this LoanAccountLock.  # noqa: E501
        :rtype: str
        """
        return self._stacktrace

    @stacktrace.setter
    def stacktrace(self, stacktrace):
        """Sets the stacktrace of this LoanAccountLock.


        :param stacktrace: The stacktrace of this LoanAccountLock.  # noqa: E501
        :type: str
        """

        self._stacktrace = stacktrace

    @property
    def version(self):
        """Gets the version of this LoanAccountLock.  # noqa: E501


        :return: The version of this LoanAccountLock.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LoanAccountLock.


        :param version: The version of this LoanAccountLock.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanAccountLock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanAccountLock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
