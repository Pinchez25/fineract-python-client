# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanProductMinMaxConstraints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_nominal_interest_rate_per_period': 'float',
        'max_number_of_repayments': 'int',
        'max_principal': 'float',
        'min_nominal_interest_rate_per_period': 'float',
        'min_number_of_repayments': 'int',
        'min_principal': 'float'
    }

    attribute_map = {
        'max_nominal_interest_rate_per_period': 'maxNominalInterestRatePerPeriod',
        'max_number_of_repayments': 'maxNumberOfRepayments',
        'max_principal': 'maxPrincipal',
        'min_nominal_interest_rate_per_period': 'minNominalInterestRatePerPeriod',
        'min_number_of_repayments': 'minNumberOfRepayments',
        'min_principal': 'minPrincipal'
    }

    def __init__(self, max_nominal_interest_rate_per_period=None, max_number_of_repayments=None, max_principal=None, min_nominal_interest_rate_per_period=None, min_number_of_repayments=None, min_principal=None):  # noqa: E501
        """LoanProductMinMaxConstraints - a model defined in Swagger"""  # noqa: E501
        self._max_nominal_interest_rate_per_period = None
        self._max_number_of_repayments = None
        self._max_principal = None
        self._min_nominal_interest_rate_per_period = None
        self._min_number_of_repayments = None
        self._min_principal = None
        self.discriminator = None
        if max_nominal_interest_rate_per_period is not None:
            self.max_nominal_interest_rate_per_period = max_nominal_interest_rate_per_period
        if max_number_of_repayments is not None:
            self.max_number_of_repayments = max_number_of_repayments
        if max_principal is not None:
            self.max_principal = max_principal
        if min_nominal_interest_rate_per_period is not None:
            self.min_nominal_interest_rate_per_period = min_nominal_interest_rate_per_period
        if min_number_of_repayments is not None:
            self.min_number_of_repayments = min_number_of_repayments
        if min_principal is not None:
            self.min_principal = min_principal

    @property
    def max_nominal_interest_rate_per_period(self):
        """Gets the max_nominal_interest_rate_per_period of this LoanProductMinMaxConstraints.  # noqa: E501


        :return: The max_nominal_interest_rate_per_period of this LoanProductMinMaxConstraints.  # noqa: E501
        :rtype: float
        """
        return self._max_nominal_interest_rate_per_period

    @max_nominal_interest_rate_per_period.setter
    def max_nominal_interest_rate_per_period(self, max_nominal_interest_rate_per_period):
        """Sets the max_nominal_interest_rate_per_period of this LoanProductMinMaxConstraints.


        :param max_nominal_interest_rate_per_period: The max_nominal_interest_rate_per_period of this LoanProductMinMaxConstraints.  # noqa: E501
        :type: float
        """

        self._max_nominal_interest_rate_per_period = max_nominal_interest_rate_per_period

    @property
    def max_number_of_repayments(self):
        """Gets the max_number_of_repayments of this LoanProductMinMaxConstraints.  # noqa: E501


        :return: The max_number_of_repayments of this LoanProductMinMaxConstraints.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_repayments

    @max_number_of_repayments.setter
    def max_number_of_repayments(self, max_number_of_repayments):
        """Sets the max_number_of_repayments of this LoanProductMinMaxConstraints.


        :param max_number_of_repayments: The max_number_of_repayments of this LoanProductMinMaxConstraints.  # noqa: E501
        :type: int
        """

        self._max_number_of_repayments = max_number_of_repayments

    @property
    def max_principal(self):
        """Gets the max_principal of this LoanProductMinMaxConstraints.  # noqa: E501


        :return: The max_principal of this LoanProductMinMaxConstraints.  # noqa: E501
        :rtype: float
        """
        return self._max_principal

    @max_principal.setter
    def max_principal(self, max_principal):
        """Sets the max_principal of this LoanProductMinMaxConstraints.


        :param max_principal: The max_principal of this LoanProductMinMaxConstraints.  # noqa: E501
        :type: float
        """

        self._max_principal = max_principal

    @property
    def min_nominal_interest_rate_per_period(self):
        """Gets the min_nominal_interest_rate_per_period of this LoanProductMinMaxConstraints.  # noqa: E501


        :return: The min_nominal_interest_rate_per_period of this LoanProductMinMaxConstraints.  # noqa: E501
        :rtype: float
        """
        return self._min_nominal_interest_rate_per_period

    @min_nominal_interest_rate_per_period.setter
    def min_nominal_interest_rate_per_period(self, min_nominal_interest_rate_per_period):
        """Sets the min_nominal_interest_rate_per_period of this LoanProductMinMaxConstraints.


        :param min_nominal_interest_rate_per_period: The min_nominal_interest_rate_per_period of this LoanProductMinMaxConstraints.  # noqa: E501
        :type: float
        """

        self._min_nominal_interest_rate_per_period = min_nominal_interest_rate_per_period

    @property
    def min_number_of_repayments(self):
        """Gets the min_number_of_repayments of this LoanProductMinMaxConstraints.  # noqa: E501


        :return: The min_number_of_repayments of this LoanProductMinMaxConstraints.  # noqa: E501
        :rtype: int
        """
        return self._min_number_of_repayments

    @min_number_of_repayments.setter
    def min_number_of_repayments(self, min_number_of_repayments):
        """Sets the min_number_of_repayments of this LoanProductMinMaxConstraints.


        :param min_number_of_repayments: The min_number_of_repayments of this LoanProductMinMaxConstraints.  # noqa: E501
        :type: int
        """

        self._min_number_of_repayments = min_number_of_repayments

    @property
    def min_principal(self):
        """Gets the min_principal of this LoanProductMinMaxConstraints.  # noqa: E501


        :return: The min_principal of this LoanProductMinMaxConstraints.  # noqa: E501
        :rtype: float
        """
        return self._min_principal

    @min_principal.setter
    def min_principal(self, min_principal):
        """Sets the min_principal of this LoanProductMinMaxConstraints.


        :param min_principal: The min_principal of this LoanProductMinMaxConstraints.  # noqa: E501
        :type: float
        """

        self._min_principal = min_principal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanProductMinMaxConstraints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanProductMinMaxConstraints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
