# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetSelfClientsSavingsAccountsStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'approved': 'bool',
        'closed': 'bool',
        'code': 'str',
        'description': 'str',
        'id': 'int',
        'rejected': 'bool',
        'submitted_and_pending_approval': 'bool',
        'withdrawn_by_applicant': 'bool'
    }

    attribute_map = {
        'active': 'active',
        'approved': 'approved',
        'closed': 'closed',
        'code': 'code',
        'description': 'description',
        'id': 'id',
        'rejected': 'rejected',
        'submitted_and_pending_approval': 'submittedAndPendingApproval',
        'withdrawn_by_applicant': 'withdrawnByApplicant'
    }

    def __init__(self, active=None, approved=None, closed=None, code=None, description=None, id=None, rejected=None, submitted_and_pending_approval=None, withdrawn_by_applicant=None):  # noqa: E501
        """GetSelfClientsSavingsAccountsStatus - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._approved = None
        self._closed = None
        self._code = None
        self._description = None
        self._id = None
        self._rejected = None
        self._submitted_and_pending_approval = None
        self._withdrawn_by_applicant = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if approved is not None:
            self.approved = approved
        if closed is not None:
            self.closed = closed
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if rejected is not None:
            self.rejected = rejected
        if submitted_and_pending_approval is not None:
            self.submitted_and_pending_approval = submitted_and_pending_approval
        if withdrawn_by_applicant is not None:
            self.withdrawn_by_applicant = withdrawn_by_applicant

    @property
    def active(self):
        """Gets the active of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501


        :return: The active of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this GetSelfClientsSavingsAccountsStatus.


        :param active: The active of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def approved(self):
        """Gets the approved of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501


        :return: The approved of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this GetSelfClientsSavingsAccountsStatus.


        :param approved: The approved of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def closed(self):
        """Gets the closed of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501


        :return: The closed of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this GetSelfClientsSavingsAccountsStatus.


        :param closed: The closed of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def code(self):
        """Gets the code of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501


        :return: The code of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GetSelfClientsSavingsAccountsStatus.


        :param code: The code of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501


        :return: The description of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetSelfClientsSavingsAccountsStatus.


        :param description: The description of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501


        :return: The id of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSelfClientsSavingsAccountsStatus.


        :param id: The id of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def rejected(self):
        """Gets the rejected of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501


        :return: The rejected of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :rtype: bool
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this GetSelfClientsSavingsAccountsStatus.


        :param rejected: The rejected of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :type: bool
        """

        self._rejected = rejected

    @property
    def submitted_and_pending_approval(self):
        """Gets the submitted_and_pending_approval of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501


        :return: The submitted_and_pending_approval of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :rtype: bool
        """
        return self._submitted_and_pending_approval

    @submitted_and_pending_approval.setter
    def submitted_and_pending_approval(self, submitted_and_pending_approval):
        """Sets the submitted_and_pending_approval of this GetSelfClientsSavingsAccountsStatus.


        :param submitted_and_pending_approval: The submitted_and_pending_approval of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :type: bool
        """

        self._submitted_and_pending_approval = submitted_and_pending_approval

    @property
    def withdrawn_by_applicant(self):
        """Gets the withdrawn_by_applicant of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501


        :return: The withdrawn_by_applicant of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :rtype: bool
        """
        return self._withdrawn_by_applicant

    @withdrawn_by_applicant.setter
    def withdrawn_by_applicant(self, withdrawn_by_applicant):
        """Sets the withdrawn_by_applicant of this GetSelfClientsSavingsAccountsStatus.


        :param withdrawn_by_applicant: The withdrawn_by_applicant of this GetSelfClientsSavingsAccountsStatus.  # noqa: E501
        :type: bool
        """

        self._withdrawn_by_applicant = withdrawn_by_applicant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSelfClientsSavingsAccountsStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSelfClientsSavingsAccountsStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
