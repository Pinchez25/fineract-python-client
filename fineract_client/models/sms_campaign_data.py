# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmsCampaignData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'campaign_name': 'str',
        'campaign_status': 'EnumOptionData',
        'campaign_type': 'EnumOptionData',
        'id': 'int',
        'last_trigger_date': 'date',
        'message': 'str',
        'next_trigger_date': 'datetime',
        'notification': 'bool',
        'param_value': 'str',
        'recurrence': 'str',
        'recurrence_start_date': 'datetime',
        'report_name': 'str',
        'run_report_id': 'int'
    }

    attribute_map = {
        'campaign_name': 'campaignName',
        'campaign_status': 'campaignStatus',
        'campaign_type': 'campaignType',
        'id': 'id',
        'last_trigger_date': 'lastTriggerDate',
        'message': 'message',
        'next_trigger_date': 'nextTriggerDate',
        'notification': 'notification',
        'param_value': 'paramValue',
        'recurrence': 'recurrence',
        'recurrence_start_date': 'recurrenceStartDate',
        'report_name': 'reportName',
        'run_report_id': 'runReportId'
    }

    def __init__(self, campaign_name=None, campaign_status=None, campaign_type=None, id=None, last_trigger_date=None, message=None, next_trigger_date=None, notification=None, param_value=None, recurrence=None, recurrence_start_date=None, report_name=None, run_report_id=None):  # noqa: E501
        """SmsCampaignData - a model defined in Swagger"""  # noqa: E501
        self._campaign_name = None
        self._campaign_status = None
        self._campaign_type = None
        self._id = None
        self._last_trigger_date = None
        self._message = None
        self._next_trigger_date = None
        self._notification = None
        self._param_value = None
        self._recurrence = None
        self._recurrence_start_date = None
        self._report_name = None
        self._run_report_id = None
        self.discriminator = None
        if campaign_name is not None:
            self.campaign_name = campaign_name
        if campaign_status is not None:
            self.campaign_status = campaign_status
        if campaign_type is not None:
            self.campaign_type = campaign_type
        if id is not None:
            self.id = id
        if last_trigger_date is not None:
            self.last_trigger_date = last_trigger_date
        if message is not None:
            self.message = message
        if next_trigger_date is not None:
            self.next_trigger_date = next_trigger_date
        if notification is not None:
            self.notification = notification
        if param_value is not None:
            self.param_value = param_value
        if recurrence is not None:
            self.recurrence = recurrence
        if recurrence_start_date is not None:
            self.recurrence_start_date = recurrence_start_date
        if report_name is not None:
            self.report_name = report_name
        if run_report_id is not None:
            self.run_report_id = run_report_id

    @property
    def campaign_name(self):
        """Gets the campaign_name of this SmsCampaignData.  # noqa: E501


        :return: The campaign_name of this SmsCampaignData.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this SmsCampaignData.


        :param campaign_name: The campaign_name of this SmsCampaignData.  # noqa: E501
        :type: str
        """

        self._campaign_name = campaign_name

    @property
    def campaign_status(self):
        """Gets the campaign_status of this SmsCampaignData.  # noqa: E501


        :return: The campaign_status of this SmsCampaignData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._campaign_status

    @campaign_status.setter
    def campaign_status(self, campaign_status):
        """Sets the campaign_status of this SmsCampaignData.


        :param campaign_status: The campaign_status of this SmsCampaignData.  # noqa: E501
        :type: EnumOptionData
        """

        self._campaign_status = campaign_status

    @property
    def campaign_type(self):
        """Gets the campaign_type of this SmsCampaignData.  # noqa: E501


        :return: The campaign_type of this SmsCampaignData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._campaign_type

    @campaign_type.setter
    def campaign_type(self, campaign_type):
        """Sets the campaign_type of this SmsCampaignData.


        :param campaign_type: The campaign_type of this SmsCampaignData.  # noqa: E501
        :type: EnumOptionData
        """

        self._campaign_type = campaign_type

    @property
    def id(self):
        """Gets the id of this SmsCampaignData.  # noqa: E501


        :return: The id of this SmsCampaignData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SmsCampaignData.


        :param id: The id of this SmsCampaignData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_trigger_date(self):
        """Gets the last_trigger_date of this SmsCampaignData.  # noqa: E501


        :return: The last_trigger_date of this SmsCampaignData.  # noqa: E501
        :rtype: date
        """
        return self._last_trigger_date

    @last_trigger_date.setter
    def last_trigger_date(self, last_trigger_date):
        """Sets the last_trigger_date of this SmsCampaignData.


        :param last_trigger_date: The last_trigger_date of this SmsCampaignData.  # noqa: E501
        :type: date
        """

        self._last_trigger_date = last_trigger_date

    @property
    def message(self):
        """Gets the message of this SmsCampaignData.  # noqa: E501


        :return: The message of this SmsCampaignData.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SmsCampaignData.


        :param message: The message of this SmsCampaignData.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def next_trigger_date(self):
        """Gets the next_trigger_date of this SmsCampaignData.  # noqa: E501


        :return: The next_trigger_date of this SmsCampaignData.  # noqa: E501
        :rtype: datetime
        """
        return self._next_trigger_date

    @next_trigger_date.setter
    def next_trigger_date(self, next_trigger_date):
        """Sets the next_trigger_date of this SmsCampaignData.


        :param next_trigger_date: The next_trigger_date of this SmsCampaignData.  # noqa: E501
        :type: datetime
        """

        self._next_trigger_date = next_trigger_date

    @property
    def notification(self):
        """Gets the notification of this SmsCampaignData.  # noqa: E501


        :return: The notification of this SmsCampaignData.  # noqa: E501
        :rtype: bool
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this SmsCampaignData.


        :param notification: The notification of this SmsCampaignData.  # noqa: E501
        :type: bool
        """

        self._notification = notification

    @property
    def param_value(self):
        """Gets the param_value of this SmsCampaignData.  # noqa: E501


        :return: The param_value of this SmsCampaignData.  # noqa: E501
        :rtype: str
        """
        return self._param_value

    @param_value.setter
    def param_value(self, param_value):
        """Sets the param_value of this SmsCampaignData.


        :param param_value: The param_value of this SmsCampaignData.  # noqa: E501
        :type: str
        """

        self._param_value = param_value

    @property
    def recurrence(self):
        """Gets the recurrence of this SmsCampaignData.  # noqa: E501


        :return: The recurrence of this SmsCampaignData.  # noqa: E501
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this SmsCampaignData.


        :param recurrence: The recurrence of this SmsCampaignData.  # noqa: E501
        :type: str
        """

        self._recurrence = recurrence

    @property
    def recurrence_start_date(self):
        """Gets the recurrence_start_date of this SmsCampaignData.  # noqa: E501


        :return: The recurrence_start_date of this SmsCampaignData.  # noqa: E501
        :rtype: datetime
        """
        return self._recurrence_start_date

    @recurrence_start_date.setter
    def recurrence_start_date(self, recurrence_start_date):
        """Sets the recurrence_start_date of this SmsCampaignData.


        :param recurrence_start_date: The recurrence_start_date of this SmsCampaignData.  # noqa: E501
        :type: datetime
        """

        self._recurrence_start_date = recurrence_start_date

    @property
    def report_name(self):
        """Gets the report_name of this SmsCampaignData.  # noqa: E501


        :return: The report_name of this SmsCampaignData.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this SmsCampaignData.


        :param report_name: The report_name of this SmsCampaignData.  # noqa: E501
        :type: str
        """

        self._report_name = report_name

    @property
    def run_report_id(self):
        """Gets the run_report_id of this SmsCampaignData.  # noqa: E501


        :return: The run_report_id of this SmsCampaignData.  # noqa: E501
        :rtype: int
        """
        return self._run_report_id

    @run_report_id.setter
    def run_report_id(self, run_report_id):
        """Sets the run_report_id of this SmsCampaignData.


        :param run_report_id: The run_report_id of this SmsCampaignData.  # noqa: E501
        :type: int
        """

        self._run_report_id = run_report_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmsCampaignData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmsCampaignData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
