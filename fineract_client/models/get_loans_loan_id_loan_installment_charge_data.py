# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansLoanIdLoanInstallmentChargeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'amount_accrued': 'float',
        'amount_outstanding': 'float',
        'amount_unrecognized': 'float',
        'amount_waived': 'float',
        'due_date': 'date',
        'installment_number': 'int',
        'paid': 'bool',
        'waived': 'bool'
    }

    attribute_map = {
        'amount': 'amount',
        'amount_accrued': 'amountAccrued',
        'amount_outstanding': 'amountOutstanding',
        'amount_unrecognized': 'amountUnrecognized',
        'amount_waived': 'amountWaived',
        'due_date': 'dueDate',
        'installment_number': 'installmentNumber',
        'paid': 'paid',
        'waived': 'waived'
    }

    def __init__(self, amount=None, amount_accrued=None, amount_outstanding=None, amount_unrecognized=None, amount_waived=None, due_date=None, installment_number=None, paid=None, waived=None):  # noqa: E501
        """GetLoansLoanIdLoanInstallmentChargeData - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._amount_accrued = None
        self._amount_outstanding = None
        self._amount_unrecognized = None
        self._amount_waived = None
        self._due_date = None
        self._installment_number = None
        self._paid = None
        self._waived = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if amount_accrued is not None:
            self.amount_accrued = amount_accrued
        if amount_outstanding is not None:
            self.amount_outstanding = amount_outstanding
        if amount_unrecognized is not None:
            self.amount_unrecognized = amount_unrecognized
        if amount_waived is not None:
            self.amount_waived = amount_waived
        if due_date is not None:
            self.due_date = due_date
        if installment_number is not None:
            self.installment_number = installment_number
        if paid is not None:
            self.paid = paid
        if waived is not None:
            self.waived = waived

    @property
    def amount(self):
        """Gets the amount of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501


        :return: The amount of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetLoansLoanIdLoanInstallmentChargeData.


        :param amount: The amount of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_accrued(self):
        """Gets the amount_accrued of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501


        :return: The amount_accrued of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_accrued

    @amount_accrued.setter
    def amount_accrued(self, amount_accrued):
        """Sets the amount_accrued of this GetLoansLoanIdLoanInstallmentChargeData.


        :param amount_accrued: The amount_accrued of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :type: float
        """

        self._amount_accrued = amount_accrued

    @property
    def amount_outstanding(self):
        """Gets the amount_outstanding of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501


        :return: The amount_outstanding of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_outstanding

    @amount_outstanding.setter
    def amount_outstanding(self, amount_outstanding):
        """Sets the amount_outstanding of this GetLoansLoanIdLoanInstallmentChargeData.


        :param amount_outstanding: The amount_outstanding of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :type: float
        """

        self._amount_outstanding = amount_outstanding

    @property
    def amount_unrecognized(self):
        """Gets the amount_unrecognized of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501


        :return: The amount_unrecognized of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_unrecognized

    @amount_unrecognized.setter
    def amount_unrecognized(self, amount_unrecognized):
        """Sets the amount_unrecognized of this GetLoansLoanIdLoanInstallmentChargeData.


        :param amount_unrecognized: The amount_unrecognized of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :type: float
        """

        self._amount_unrecognized = amount_unrecognized

    @property
    def amount_waived(self):
        """Gets the amount_waived of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501


        :return: The amount_waived of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_waived

    @amount_waived.setter
    def amount_waived(self, amount_waived):
        """Sets the amount_waived of this GetLoansLoanIdLoanInstallmentChargeData.


        :param amount_waived: The amount_waived of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :type: float
        """

        self._amount_waived = amount_waived

    @property
    def due_date(self):
        """Gets the due_date of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501


        :return: The due_date of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this GetLoansLoanIdLoanInstallmentChargeData.


        :param due_date: The due_date of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def installment_number(self):
        """Gets the installment_number of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501


        :return: The installment_number of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :rtype: int
        """
        return self._installment_number

    @installment_number.setter
    def installment_number(self, installment_number):
        """Sets the installment_number of this GetLoansLoanIdLoanInstallmentChargeData.


        :param installment_number: The installment_number of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :type: int
        """

        self._installment_number = installment_number

    @property
    def paid(self):
        """Gets the paid of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501


        :return: The paid of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this GetLoansLoanIdLoanInstallmentChargeData.


        :param paid: The paid of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :type: bool
        """

        self._paid = paid

    @property
    def waived(self):
        """Gets the waived of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501


        :return: The waived of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._waived

    @waived.setter
    def waived(self, waived):
        """Sets the waived of this GetLoansLoanIdLoanInstallmentChargeData.


        :param waived: The waived of this GetLoansLoanIdLoanInstallmentChargeData.  # noqa: E501
        :type: bool
        """

        self._waived = waived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansLoanIdLoanInstallmentChargeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansLoanIdLoanInstallmentChargeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
