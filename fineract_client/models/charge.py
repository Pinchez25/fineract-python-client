# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Charge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'GLAccount',
        'active': 'bool',
        'allowed_client_charge_calculation_type': 'bool',
        'allowed_client_charge_time': 'bool',
        'allowed_loan_charge_time': 'bool',
        'allowed_savings_charge_calculation_type': 'bool',
        'allowed_savings_charge_time': 'bool',
        'amount': 'float',
        'annual_fee': 'bool',
        'charge_calculation': 'int',
        'charge_payment_mode': 'int',
        'charge_time_type': 'int',
        'client_charge': 'bool',
        'currency_code': 'str',
        'deleted': 'bool',
        'disbursement_charge': 'bool',
        'enable_free_withdrawal': 'bool',
        'enable_payment_type': 'bool',
        'fee_interval': 'int',
        'fee_on_month_day': 'ChargeFeeOnMonthDay',
        'frequency_free_withdrawal_charge': 'int',
        'id': 'int',
        'income_account_id': 'int',
        'loan_charge': 'bool',
        'max_cap': 'float',
        'min_cap': 'float',
        'monthly_fee': 'bool',
        'name': 'str',
        'new': 'bool',
        'overdue_installment': 'bool',
        'payment_type': 'PaymentType',
        'penalty': 'bool',
        'percentage_of_approved_amount': 'bool',
        'percentage_of_disbursement_amount': 'bool',
        'restart_frequency': 'int',
        'restart_frequency_enum': 'int',
        'savings_charge': 'bool',
        'tax_group': 'TaxGroup'
    }

    attribute_map = {
        'account': 'account',
        'active': 'active',
        'allowed_client_charge_calculation_type': 'allowedClientChargeCalculationType',
        'allowed_client_charge_time': 'allowedClientChargeTime',
        'allowed_loan_charge_time': 'allowedLoanChargeTime',
        'allowed_savings_charge_calculation_type': 'allowedSavingsChargeCalculationType',
        'allowed_savings_charge_time': 'allowedSavingsChargeTime',
        'amount': 'amount',
        'annual_fee': 'annualFee',
        'charge_calculation': 'chargeCalculation',
        'charge_payment_mode': 'chargePaymentMode',
        'charge_time_type': 'chargeTimeType',
        'client_charge': 'clientCharge',
        'currency_code': 'currencyCode',
        'deleted': 'deleted',
        'disbursement_charge': 'disbursementCharge',
        'enable_free_withdrawal': 'enableFreeWithdrawal',
        'enable_payment_type': 'enablePaymentType',
        'fee_interval': 'feeInterval',
        'fee_on_month_day': 'feeOnMonthDay',
        'frequency_free_withdrawal_charge': 'frequencyFreeWithdrawalCharge',
        'id': 'id',
        'income_account_id': 'incomeAccountId',
        'loan_charge': 'loanCharge',
        'max_cap': 'maxCap',
        'min_cap': 'minCap',
        'monthly_fee': 'monthlyFee',
        'name': 'name',
        'new': 'new',
        'overdue_installment': 'overdueInstallment',
        'payment_type': 'paymentType',
        'penalty': 'penalty',
        'percentage_of_approved_amount': 'percentageOfApprovedAmount',
        'percentage_of_disbursement_amount': 'percentageOfDisbursementAmount',
        'restart_frequency': 'restartFrequency',
        'restart_frequency_enum': 'restartFrequencyEnum',
        'savings_charge': 'savingsCharge',
        'tax_group': 'taxGroup'
    }

    def __init__(self, account=None, active=None, allowed_client_charge_calculation_type=None, allowed_client_charge_time=None, allowed_loan_charge_time=None, allowed_savings_charge_calculation_type=None, allowed_savings_charge_time=None, amount=None, annual_fee=None, charge_calculation=None, charge_payment_mode=None, charge_time_type=None, client_charge=None, currency_code=None, deleted=None, disbursement_charge=None, enable_free_withdrawal=None, enable_payment_type=None, fee_interval=None, fee_on_month_day=None, frequency_free_withdrawal_charge=None, id=None, income_account_id=None, loan_charge=None, max_cap=None, min_cap=None, monthly_fee=None, name=None, new=None, overdue_installment=None, payment_type=None, penalty=None, percentage_of_approved_amount=None, percentage_of_disbursement_amount=None, restart_frequency=None, restart_frequency_enum=None, savings_charge=None, tax_group=None):  # noqa: E501
        """Charge - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._active = None
        self._allowed_client_charge_calculation_type = None
        self._allowed_client_charge_time = None
        self._allowed_loan_charge_time = None
        self._allowed_savings_charge_calculation_type = None
        self._allowed_savings_charge_time = None
        self._amount = None
        self._annual_fee = None
        self._charge_calculation = None
        self._charge_payment_mode = None
        self._charge_time_type = None
        self._client_charge = None
        self._currency_code = None
        self._deleted = None
        self._disbursement_charge = None
        self._enable_free_withdrawal = None
        self._enable_payment_type = None
        self._fee_interval = None
        self._fee_on_month_day = None
        self._frequency_free_withdrawal_charge = None
        self._id = None
        self._income_account_id = None
        self._loan_charge = None
        self._max_cap = None
        self._min_cap = None
        self._monthly_fee = None
        self._name = None
        self._new = None
        self._overdue_installment = None
        self._payment_type = None
        self._penalty = None
        self._percentage_of_approved_amount = None
        self._percentage_of_disbursement_amount = None
        self._restart_frequency = None
        self._restart_frequency_enum = None
        self._savings_charge = None
        self._tax_group = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if active is not None:
            self.active = active
        if allowed_client_charge_calculation_type is not None:
            self.allowed_client_charge_calculation_type = allowed_client_charge_calculation_type
        if allowed_client_charge_time is not None:
            self.allowed_client_charge_time = allowed_client_charge_time
        if allowed_loan_charge_time is not None:
            self.allowed_loan_charge_time = allowed_loan_charge_time
        if allowed_savings_charge_calculation_type is not None:
            self.allowed_savings_charge_calculation_type = allowed_savings_charge_calculation_type
        if allowed_savings_charge_time is not None:
            self.allowed_savings_charge_time = allowed_savings_charge_time
        if amount is not None:
            self.amount = amount
        if annual_fee is not None:
            self.annual_fee = annual_fee
        if charge_calculation is not None:
            self.charge_calculation = charge_calculation
        if charge_payment_mode is not None:
            self.charge_payment_mode = charge_payment_mode
        if charge_time_type is not None:
            self.charge_time_type = charge_time_type
        if client_charge is not None:
            self.client_charge = client_charge
        if currency_code is not None:
            self.currency_code = currency_code
        if deleted is not None:
            self.deleted = deleted
        if disbursement_charge is not None:
            self.disbursement_charge = disbursement_charge
        if enable_free_withdrawal is not None:
            self.enable_free_withdrawal = enable_free_withdrawal
        if enable_payment_type is not None:
            self.enable_payment_type = enable_payment_type
        if fee_interval is not None:
            self.fee_interval = fee_interval
        if fee_on_month_day is not None:
            self.fee_on_month_day = fee_on_month_day
        if frequency_free_withdrawal_charge is not None:
            self.frequency_free_withdrawal_charge = frequency_free_withdrawal_charge
        if id is not None:
            self.id = id
        if income_account_id is not None:
            self.income_account_id = income_account_id
        if loan_charge is not None:
            self.loan_charge = loan_charge
        if max_cap is not None:
            self.max_cap = max_cap
        if min_cap is not None:
            self.min_cap = min_cap
        if monthly_fee is not None:
            self.monthly_fee = monthly_fee
        if name is not None:
            self.name = name
        if new is not None:
            self.new = new
        if overdue_installment is not None:
            self.overdue_installment = overdue_installment
        if payment_type is not None:
            self.payment_type = payment_type
        if penalty is not None:
            self.penalty = penalty
        if percentage_of_approved_amount is not None:
            self.percentage_of_approved_amount = percentage_of_approved_amount
        if percentage_of_disbursement_amount is not None:
            self.percentage_of_disbursement_amount = percentage_of_disbursement_amount
        if restart_frequency is not None:
            self.restart_frequency = restart_frequency
        if restart_frequency_enum is not None:
            self.restart_frequency_enum = restart_frequency_enum
        if savings_charge is not None:
            self.savings_charge = savings_charge
        if tax_group is not None:
            self.tax_group = tax_group

    @property
    def account(self):
        """Gets the account of this Charge.  # noqa: E501


        :return: The account of this Charge.  # noqa: E501
        :rtype: GLAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Charge.


        :param account: The account of this Charge.  # noqa: E501
        :type: GLAccount
        """

        self._account = account

    @property
    def active(self):
        """Gets the active of this Charge.  # noqa: E501


        :return: The active of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Charge.


        :param active: The active of this Charge.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def allowed_client_charge_calculation_type(self):
        """Gets the allowed_client_charge_calculation_type of this Charge.  # noqa: E501


        :return: The allowed_client_charge_calculation_type of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_client_charge_calculation_type

    @allowed_client_charge_calculation_type.setter
    def allowed_client_charge_calculation_type(self, allowed_client_charge_calculation_type):
        """Sets the allowed_client_charge_calculation_type of this Charge.


        :param allowed_client_charge_calculation_type: The allowed_client_charge_calculation_type of this Charge.  # noqa: E501
        :type: bool
        """

        self._allowed_client_charge_calculation_type = allowed_client_charge_calculation_type

    @property
    def allowed_client_charge_time(self):
        """Gets the allowed_client_charge_time of this Charge.  # noqa: E501


        :return: The allowed_client_charge_time of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_client_charge_time

    @allowed_client_charge_time.setter
    def allowed_client_charge_time(self, allowed_client_charge_time):
        """Sets the allowed_client_charge_time of this Charge.


        :param allowed_client_charge_time: The allowed_client_charge_time of this Charge.  # noqa: E501
        :type: bool
        """

        self._allowed_client_charge_time = allowed_client_charge_time

    @property
    def allowed_loan_charge_time(self):
        """Gets the allowed_loan_charge_time of this Charge.  # noqa: E501


        :return: The allowed_loan_charge_time of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_loan_charge_time

    @allowed_loan_charge_time.setter
    def allowed_loan_charge_time(self, allowed_loan_charge_time):
        """Sets the allowed_loan_charge_time of this Charge.


        :param allowed_loan_charge_time: The allowed_loan_charge_time of this Charge.  # noqa: E501
        :type: bool
        """

        self._allowed_loan_charge_time = allowed_loan_charge_time

    @property
    def allowed_savings_charge_calculation_type(self):
        """Gets the allowed_savings_charge_calculation_type of this Charge.  # noqa: E501


        :return: The allowed_savings_charge_calculation_type of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_savings_charge_calculation_type

    @allowed_savings_charge_calculation_type.setter
    def allowed_savings_charge_calculation_type(self, allowed_savings_charge_calculation_type):
        """Sets the allowed_savings_charge_calculation_type of this Charge.


        :param allowed_savings_charge_calculation_type: The allowed_savings_charge_calculation_type of this Charge.  # noqa: E501
        :type: bool
        """

        self._allowed_savings_charge_calculation_type = allowed_savings_charge_calculation_type

    @property
    def allowed_savings_charge_time(self):
        """Gets the allowed_savings_charge_time of this Charge.  # noqa: E501


        :return: The allowed_savings_charge_time of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_savings_charge_time

    @allowed_savings_charge_time.setter
    def allowed_savings_charge_time(self, allowed_savings_charge_time):
        """Sets the allowed_savings_charge_time of this Charge.


        :param allowed_savings_charge_time: The allowed_savings_charge_time of this Charge.  # noqa: E501
        :type: bool
        """

        self._allowed_savings_charge_time = allowed_savings_charge_time

    @property
    def amount(self):
        """Gets the amount of this Charge.  # noqa: E501


        :return: The amount of this Charge.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Charge.


        :param amount: The amount of this Charge.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def annual_fee(self):
        """Gets the annual_fee of this Charge.  # noqa: E501


        :return: The annual_fee of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._annual_fee

    @annual_fee.setter
    def annual_fee(self, annual_fee):
        """Sets the annual_fee of this Charge.


        :param annual_fee: The annual_fee of this Charge.  # noqa: E501
        :type: bool
        """

        self._annual_fee = annual_fee

    @property
    def charge_calculation(self):
        """Gets the charge_calculation of this Charge.  # noqa: E501


        :return: The charge_calculation of this Charge.  # noqa: E501
        :rtype: int
        """
        return self._charge_calculation

    @charge_calculation.setter
    def charge_calculation(self, charge_calculation):
        """Sets the charge_calculation of this Charge.


        :param charge_calculation: The charge_calculation of this Charge.  # noqa: E501
        :type: int
        """

        self._charge_calculation = charge_calculation

    @property
    def charge_payment_mode(self):
        """Gets the charge_payment_mode of this Charge.  # noqa: E501


        :return: The charge_payment_mode of this Charge.  # noqa: E501
        :rtype: int
        """
        return self._charge_payment_mode

    @charge_payment_mode.setter
    def charge_payment_mode(self, charge_payment_mode):
        """Sets the charge_payment_mode of this Charge.


        :param charge_payment_mode: The charge_payment_mode of this Charge.  # noqa: E501
        :type: int
        """

        self._charge_payment_mode = charge_payment_mode

    @property
    def charge_time_type(self):
        """Gets the charge_time_type of this Charge.  # noqa: E501


        :return: The charge_time_type of this Charge.  # noqa: E501
        :rtype: int
        """
        return self._charge_time_type

    @charge_time_type.setter
    def charge_time_type(self, charge_time_type):
        """Sets the charge_time_type of this Charge.


        :param charge_time_type: The charge_time_type of this Charge.  # noqa: E501
        :type: int
        """

        self._charge_time_type = charge_time_type

    @property
    def client_charge(self):
        """Gets the client_charge of this Charge.  # noqa: E501


        :return: The client_charge of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._client_charge

    @client_charge.setter
    def client_charge(self, client_charge):
        """Sets the client_charge of this Charge.


        :param client_charge: The client_charge of this Charge.  # noqa: E501
        :type: bool
        """

        self._client_charge = client_charge

    @property
    def currency_code(self):
        """Gets the currency_code of this Charge.  # noqa: E501


        :return: The currency_code of this Charge.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Charge.


        :param currency_code: The currency_code of this Charge.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def deleted(self):
        """Gets the deleted of this Charge.  # noqa: E501


        :return: The deleted of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Charge.


        :param deleted: The deleted of this Charge.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def disbursement_charge(self):
        """Gets the disbursement_charge of this Charge.  # noqa: E501


        :return: The disbursement_charge of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._disbursement_charge

    @disbursement_charge.setter
    def disbursement_charge(self, disbursement_charge):
        """Sets the disbursement_charge of this Charge.


        :param disbursement_charge: The disbursement_charge of this Charge.  # noqa: E501
        :type: bool
        """

        self._disbursement_charge = disbursement_charge

    @property
    def enable_free_withdrawal(self):
        """Gets the enable_free_withdrawal of this Charge.  # noqa: E501


        :return: The enable_free_withdrawal of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._enable_free_withdrawal

    @enable_free_withdrawal.setter
    def enable_free_withdrawal(self, enable_free_withdrawal):
        """Sets the enable_free_withdrawal of this Charge.


        :param enable_free_withdrawal: The enable_free_withdrawal of this Charge.  # noqa: E501
        :type: bool
        """

        self._enable_free_withdrawal = enable_free_withdrawal

    @property
    def enable_payment_type(self):
        """Gets the enable_payment_type of this Charge.  # noqa: E501


        :return: The enable_payment_type of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._enable_payment_type

    @enable_payment_type.setter
    def enable_payment_type(self, enable_payment_type):
        """Sets the enable_payment_type of this Charge.


        :param enable_payment_type: The enable_payment_type of this Charge.  # noqa: E501
        :type: bool
        """

        self._enable_payment_type = enable_payment_type

    @property
    def fee_interval(self):
        """Gets the fee_interval of this Charge.  # noqa: E501


        :return: The fee_interval of this Charge.  # noqa: E501
        :rtype: int
        """
        return self._fee_interval

    @fee_interval.setter
    def fee_interval(self, fee_interval):
        """Sets the fee_interval of this Charge.


        :param fee_interval: The fee_interval of this Charge.  # noqa: E501
        :type: int
        """

        self._fee_interval = fee_interval

    @property
    def fee_on_month_day(self):
        """Gets the fee_on_month_day of this Charge.  # noqa: E501


        :return: The fee_on_month_day of this Charge.  # noqa: E501
        :rtype: ChargeFeeOnMonthDay
        """
        return self._fee_on_month_day

    @fee_on_month_day.setter
    def fee_on_month_day(self, fee_on_month_day):
        """Sets the fee_on_month_day of this Charge.


        :param fee_on_month_day: The fee_on_month_day of this Charge.  # noqa: E501
        :type: ChargeFeeOnMonthDay
        """

        self._fee_on_month_day = fee_on_month_day

    @property
    def frequency_free_withdrawal_charge(self):
        """Gets the frequency_free_withdrawal_charge of this Charge.  # noqa: E501


        :return: The frequency_free_withdrawal_charge of this Charge.  # noqa: E501
        :rtype: int
        """
        return self._frequency_free_withdrawal_charge

    @frequency_free_withdrawal_charge.setter
    def frequency_free_withdrawal_charge(self, frequency_free_withdrawal_charge):
        """Sets the frequency_free_withdrawal_charge of this Charge.


        :param frequency_free_withdrawal_charge: The frequency_free_withdrawal_charge of this Charge.  # noqa: E501
        :type: int
        """

        self._frequency_free_withdrawal_charge = frequency_free_withdrawal_charge

    @property
    def id(self):
        """Gets the id of this Charge.  # noqa: E501


        :return: The id of this Charge.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Charge.


        :param id: The id of this Charge.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def income_account_id(self):
        """Gets the income_account_id of this Charge.  # noqa: E501


        :return: The income_account_id of this Charge.  # noqa: E501
        :rtype: int
        """
        return self._income_account_id

    @income_account_id.setter
    def income_account_id(self, income_account_id):
        """Sets the income_account_id of this Charge.


        :param income_account_id: The income_account_id of this Charge.  # noqa: E501
        :type: int
        """

        self._income_account_id = income_account_id

    @property
    def loan_charge(self):
        """Gets the loan_charge of this Charge.  # noqa: E501


        :return: The loan_charge of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._loan_charge

    @loan_charge.setter
    def loan_charge(self, loan_charge):
        """Sets the loan_charge of this Charge.


        :param loan_charge: The loan_charge of this Charge.  # noqa: E501
        :type: bool
        """

        self._loan_charge = loan_charge

    @property
    def max_cap(self):
        """Gets the max_cap of this Charge.  # noqa: E501


        :return: The max_cap of this Charge.  # noqa: E501
        :rtype: float
        """
        return self._max_cap

    @max_cap.setter
    def max_cap(self, max_cap):
        """Sets the max_cap of this Charge.


        :param max_cap: The max_cap of this Charge.  # noqa: E501
        :type: float
        """

        self._max_cap = max_cap

    @property
    def min_cap(self):
        """Gets the min_cap of this Charge.  # noqa: E501


        :return: The min_cap of this Charge.  # noqa: E501
        :rtype: float
        """
        return self._min_cap

    @min_cap.setter
    def min_cap(self, min_cap):
        """Sets the min_cap of this Charge.


        :param min_cap: The min_cap of this Charge.  # noqa: E501
        :type: float
        """

        self._min_cap = min_cap

    @property
    def monthly_fee(self):
        """Gets the monthly_fee of this Charge.  # noqa: E501


        :return: The monthly_fee of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._monthly_fee

    @monthly_fee.setter
    def monthly_fee(self, monthly_fee):
        """Sets the monthly_fee of this Charge.


        :param monthly_fee: The monthly_fee of this Charge.  # noqa: E501
        :type: bool
        """

        self._monthly_fee = monthly_fee

    @property
    def name(self):
        """Gets the name of this Charge.  # noqa: E501


        :return: The name of this Charge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Charge.


        :param name: The name of this Charge.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def new(self):
        """Gets the new of this Charge.  # noqa: E501


        :return: The new of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this Charge.


        :param new: The new of this Charge.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def overdue_installment(self):
        """Gets the overdue_installment of this Charge.  # noqa: E501


        :return: The overdue_installment of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._overdue_installment

    @overdue_installment.setter
    def overdue_installment(self, overdue_installment):
        """Sets the overdue_installment of this Charge.


        :param overdue_installment: The overdue_installment of this Charge.  # noqa: E501
        :type: bool
        """

        self._overdue_installment = overdue_installment

    @property
    def payment_type(self):
        """Gets the payment_type of this Charge.  # noqa: E501


        :return: The payment_type of this Charge.  # noqa: E501
        :rtype: PaymentType
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this Charge.


        :param payment_type: The payment_type of this Charge.  # noqa: E501
        :type: PaymentType
        """

        self._payment_type = payment_type

    @property
    def penalty(self):
        """Gets the penalty of this Charge.  # noqa: E501


        :return: The penalty of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this Charge.


        :param penalty: The penalty of this Charge.  # noqa: E501
        :type: bool
        """

        self._penalty = penalty

    @property
    def percentage_of_approved_amount(self):
        """Gets the percentage_of_approved_amount of this Charge.  # noqa: E501


        :return: The percentage_of_approved_amount of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._percentage_of_approved_amount

    @percentage_of_approved_amount.setter
    def percentage_of_approved_amount(self, percentage_of_approved_amount):
        """Sets the percentage_of_approved_amount of this Charge.


        :param percentage_of_approved_amount: The percentage_of_approved_amount of this Charge.  # noqa: E501
        :type: bool
        """

        self._percentage_of_approved_amount = percentage_of_approved_amount

    @property
    def percentage_of_disbursement_amount(self):
        """Gets the percentage_of_disbursement_amount of this Charge.  # noqa: E501


        :return: The percentage_of_disbursement_amount of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._percentage_of_disbursement_amount

    @percentage_of_disbursement_amount.setter
    def percentage_of_disbursement_amount(self, percentage_of_disbursement_amount):
        """Sets the percentage_of_disbursement_amount of this Charge.


        :param percentage_of_disbursement_amount: The percentage_of_disbursement_amount of this Charge.  # noqa: E501
        :type: bool
        """

        self._percentage_of_disbursement_amount = percentage_of_disbursement_amount

    @property
    def restart_frequency(self):
        """Gets the restart_frequency of this Charge.  # noqa: E501


        :return: The restart_frequency of this Charge.  # noqa: E501
        :rtype: int
        """
        return self._restart_frequency

    @restart_frequency.setter
    def restart_frequency(self, restart_frequency):
        """Sets the restart_frequency of this Charge.


        :param restart_frequency: The restart_frequency of this Charge.  # noqa: E501
        :type: int
        """

        self._restart_frequency = restart_frequency

    @property
    def restart_frequency_enum(self):
        """Gets the restart_frequency_enum of this Charge.  # noqa: E501


        :return: The restart_frequency_enum of this Charge.  # noqa: E501
        :rtype: int
        """
        return self._restart_frequency_enum

    @restart_frequency_enum.setter
    def restart_frequency_enum(self, restart_frequency_enum):
        """Sets the restart_frequency_enum of this Charge.


        :param restart_frequency_enum: The restart_frequency_enum of this Charge.  # noqa: E501
        :type: int
        """

        self._restart_frequency_enum = restart_frequency_enum

    @property
    def savings_charge(self):
        """Gets the savings_charge of this Charge.  # noqa: E501


        :return: The savings_charge of this Charge.  # noqa: E501
        :rtype: bool
        """
        return self._savings_charge

    @savings_charge.setter
    def savings_charge(self, savings_charge):
        """Sets the savings_charge of this Charge.


        :param savings_charge: The savings_charge of this Charge.  # noqa: E501
        :type: bool
        """

        self._savings_charge = savings_charge

    @property
    def tax_group(self):
        """Gets the tax_group of this Charge.  # noqa: E501


        :return: The tax_group of this Charge.  # noqa: E501
        :rtype: TaxGroup
        """
        return self._tax_group

    @tax_group.setter
    def tax_group(self, tax_group):
        """Sets the tax_group of this Charge.


        :param tax_group: The tax_group of this Charge.  # noqa: E501
        :type: TaxGroup
        """

        self._tax_group = tax_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Charge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Charge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
