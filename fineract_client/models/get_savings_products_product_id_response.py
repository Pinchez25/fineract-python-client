# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetSavingsProductsProductIdResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_mappings': 'GetSavingsProductsAccountingMappings',
        'accounting_rule': 'GetSavingsProductsAccountingRule',
        'charges': 'list[int]',
        'currency': 'GetSavingsCurrency',
        'description': 'str',
        'fee_to_income_account_mappings': 'list[GetSavingsProductsFeeToIncomeAccountMappings]',
        'id': 'int',
        'interest_calculation_days_in_year_type': 'GetSavingsProductsInterestCalculationDaysInYearType',
        'interest_calculation_type': 'GetSavingsProductsInterestCalculationType',
        'interest_compounding_period_type': 'GetSavingsProductsInterestCompoundingPeriodType',
        'interest_posting_period_type': 'GetSavingsProductsInterestPostingPeriodType',
        'name': 'str',
        'nominal_annual_interest_rate': 'float',
        'payment_channel_to_fund_source_mappings': 'list[GetSavingsProductsPaymentChannelToFundSourceMappings]',
        'penalty_to_income_account_mappings': 'list[GetSavingsProductsPenaltyToIncomeAccountMappings]',
        'short_name': 'str',
        'withdrawal_fee_for_transfers': 'bool'
    }

    attribute_map = {
        'accounting_mappings': 'accountingMappings',
        'accounting_rule': 'accountingRule',
        'charges': 'charges',
        'currency': 'currency',
        'description': 'description',
        'fee_to_income_account_mappings': 'feeToIncomeAccountMappings',
        'id': 'id',
        'interest_calculation_days_in_year_type': 'interestCalculationDaysInYearType',
        'interest_calculation_type': 'interestCalculationType',
        'interest_compounding_period_type': 'interestCompoundingPeriodType',
        'interest_posting_period_type': 'interestPostingPeriodType',
        'name': 'name',
        'nominal_annual_interest_rate': 'nominalAnnualInterestRate',
        'payment_channel_to_fund_source_mappings': 'paymentChannelToFundSourceMappings',
        'penalty_to_income_account_mappings': 'penaltyToIncomeAccountMappings',
        'short_name': 'shortName',
        'withdrawal_fee_for_transfers': 'withdrawalFeeForTransfers'
    }

    def __init__(self, accounting_mappings=None, accounting_rule=None, charges=None, currency=None, description=None, fee_to_income_account_mappings=None, id=None, interest_calculation_days_in_year_type=None, interest_calculation_type=None, interest_compounding_period_type=None, interest_posting_period_type=None, name=None, nominal_annual_interest_rate=None, payment_channel_to_fund_source_mappings=None, penalty_to_income_account_mappings=None, short_name=None, withdrawal_fee_for_transfers=None):  # noqa: E501
        """GetSavingsProductsProductIdResponse - a model defined in Swagger"""  # noqa: E501
        self._accounting_mappings = None
        self._accounting_rule = None
        self._charges = None
        self._currency = None
        self._description = None
        self._fee_to_income_account_mappings = None
        self._id = None
        self._interest_calculation_days_in_year_type = None
        self._interest_calculation_type = None
        self._interest_compounding_period_type = None
        self._interest_posting_period_type = None
        self._name = None
        self._nominal_annual_interest_rate = None
        self._payment_channel_to_fund_source_mappings = None
        self._penalty_to_income_account_mappings = None
        self._short_name = None
        self._withdrawal_fee_for_transfers = None
        self.discriminator = None
        if accounting_mappings is not None:
            self.accounting_mappings = accounting_mappings
        if accounting_rule is not None:
            self.accounting_rule = accounting_rule
        if charges is not None:
            self.charges = charges
        if currency is not None:
            self.currency = currency
        if description is not None:
            self.description = description
        if fee_to_income_account_mappings is not None:
            self.fee_to_income_account_mappings = fee_to_income_account_mappings
        if id is not None:
            self.id = id
        if interest_calculation_days_in_year_type is not None:
            self.interest_calculation_days_in_year_type = interest_calculation_days_in_year_type
        if interest_calculation_type is not None:
            self.interest_calculation_type = interest_calculation_type
        if interest_compounding_period_type is not None:
            self.interest_compounding_period_type = interest_compounding_period_type
        if interest_posting_period_type is not None:
            self.interest_posting_period_type = interest_posting_period_type
        if name is not None:
            self.name = name
        if nominal_annual_interest_rate is not None:
            self.nominal_annual_interest_rate = nominal_annual_interest_rate
        if payment_channel_to_fund_source_mappings is not None:
            self.payment_channel_to_fund_source_mappings = payment_channel_to_fund_source_mappings
        if penalty_to_income_account_mappings is not None:
            self.penalty_to_income_account_mappings = penalty_to_income_account_mappings
        if short_name is not None:
            self.short_name = short_name
        if withdrawal_fee_for_transfers is not None:
            self.withdrawal_fee_for_transfers = withdrawal_fee_for_transfers

    @property
    def accounting_mappings(self):
        """Gets the accounting_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The accounting_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: GetSavingsProductsAccountingMappings
        """
        return self._accounting_mappings

    @accounting_mappings.setter
    def accounting_mappings(self, accounting_mappings):
        """Sets the accounting_mappings of this GetSavingsProductsProductIdResponse.


        :param accounting_mappings: The accounting_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: GetSavingsProductsAccountingMappings
        """

        self._accounting_mappings = accounting_mappings

    @property
    def accounting_rule(self):
        """Gets the accounting_rule of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The accounting_rule of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: GetSavingsProductsAccountingRule
        """
        return self._accounting_rule

    @accounting_rule.setter
    def accounting_rule(self, accounting_rule):
        """Sets the accounting_rule of this GetSavingsProductsProductIdResponse.


        :param accounting_rule: The accounting_rule of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: GetSavingsProductsAccountingRule
        """

        self._accounting_rule = accounting_rule

    @property
    def charges(self):
        """Gets the charges of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The charges of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this GetSavingsProductsProductIdResponse.


        :param charges: The charges of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: list[int]
        """

        self._charges = charges

    @property
    def currency(self):
        """Gets the currency of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The currency of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: GetSavingsCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GetSavingsProductsProductIdResponse.


        :param currency: The currency of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: GetSavingsCurrency
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The description of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetSavingsProductsProductIdResponse.


        :param description: The description of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fee_to_income_account_mappings(self):
        """Gets the fee_to_income_account_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The fee_to_income_account_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: list[GetSavingsProductsFeeToIncomeAccountMappings]
        """
        return self._fee_to_income_account_mappings

    @fee_to_income_account_mappings.setter
    def fee_to_income_account_mappings(self, fee_to_income_account_mappings):
        """Sets the fee_to_income_account_mappings of this GetSavingsProductsProductIdResponse.


        :param fee_to_income_account_mappings: The fee_to_income_account_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: list[GetSavingsProductsFeeToIncomeAccountMappings]
        """

        self._fee_to_income_account_mappings = fee_to_income_account_mappings

    @property
    def id(self):
        """Gets the id of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The id of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSavingsProductsProductIdResponse.


        :param id: The id of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interest_calculation_days_in_year_type(self):
        """Gets the interest_calculation_days_in_year_type of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The interest_calculation_days_in_year_type of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: GetSavingsProductsInterestCalculationDaysInYearType
        """
        return self._interest_calculation_days_in_year_type

    @interest_calculation_days_in_year_type.setter
    def interest_calculation_days_in_year_type(self, interest_calculation_days_in_year_type):
        """Sets the interest_calculation_days_in_year_type of this GetSavingsProductsProductIdResponse.


        :param interest_calculation_days_in_year_type: The interest_calculation_days_in_year_type of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: GetSavingsProductsInterestCalculationDaysInYearType
        """

        self._interest_calculation_days_in_year_type = interest_calculation_days_in_year_type

    @property
    def interest_calculation_type(self):
        """Gets the interest_calculation_type of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The interest_calculation_type of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: GetSavingsProductsInterestCalculationType
        """
        return self._interest_calculation_type

    @interest_calculation_type.setter
    def interest_calculation_type(self, interest_calculation_type):
        """Sets the interest_calculation_type of this GetSavingsProductsProductIdResponse.


        :param interest_calculation_type: The interest_calculation_type of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: GetSavingsProductsInterestCalculationType
        """

        self._interest_calculation_type = interest_calculation_type

    @property
    def interest_compounding_period_type(self):
        """Gets the interest_compounding_period_type of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The interest_compounding_period_type of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: GetSavingsProductsInterestCompoundingPeriodType
        """
        return self._interest_compounding_period_type

    @interest_compounding_period_type.setter
    def interest_compounding_period_type(self, interest_compounding_period_type):
        """Sets the interest_compounding_period_type of this GetSavingsProductsProductIdResponse.


        :param interest_compounding_period_type: The interest_compounding_period_type of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: GetSavingsProductsInterestCompoundingPeriodType
        """

        self._interest_compounding_period_type = interest_compounding_period_type

    @property
    def interest_posting_period_type(self):
        """Gets the interest_posting_period_type of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The interest_posting_period_type of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: GetSavingsProductsInterestPostingPeriodType
        """
        return self._interest_posting_period_type

    @interest_posting_period_type.setter
    def interest_posting_period_type(self, interest_posting_period_type):
        """Sets the interest_posting_period_type of this GetSavingsProductsProductIdResponse.


        :param interest_posting_period_type: The interest_posting_period_type of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: GetSavingsProductsInterestPostingPeriodType
        """

        self._interest_posting_period_type = interest_posting_period_type

    @property
    def name(self):
        """Gets the name of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The name of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetSavingsProductsProductIdResponse.


        :param name: The name of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nominal_annual_interest_rate(self):
        """Gets the nominal_annual_interest_rate of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The nominal_annual_interest_rate of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._nominal_annual_interest_rate

    @nominal_annual_interest_rate.setter
    def nominal_annual_interest_rate(self, nominal_annual_interest_rate):
        """Sets the nominal_annual_interest_rate of this GetSavingsProductsProductIdResponse.


        :param nominal_annual_interest_rate: The nominal_annual_interest_rate of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: float
        """

        self._nominal_annual_interest_rate = nominal_annual_interest_rate

    @property
    def payment_channel_to_fund_source_mappings(self):
        """Gets the payment_channel_to_fund_source_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The payment_channel_to_fund_source_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: list[GetSavingsProductsPaymentChannelToFundSourceMappings]
        """
        return self._payment_channel_to_fund_source_mappings

    @payment_channel_to_fund_source_mappings.setter
    def payment_channel_to_fund_source_mappings(self, payment_channel_to_fund_source_mappings):
        """Sets the payment_channel_to_fund_source_mappings of this GetSavingsProductsProductIdResponse.


        :param payment_channel_to_fund_source_mappings: The payment_channel_to_fund_source_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: list[GetSavingsProductsPaymentChannelToFundSourceMappings]
        """

        self._payment_channel_to_fund_source_mappings = payment_channel_to_fund_source_mappings

    @property
    def penalty_to_income_account_mappings(self):
        """Gets the penalty_to_income_account_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The penalty_to_income_account_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: list[GetSavingsProductsPenaltyToIncomeAccountMappings]
        """
        return self._penalty_to_income_account_mappings

    @penalty_to_income_account_mappings.setter
    def penalty_to_income_account_mappings(self, penalty_to_income_account_mappings):
        """Sets the penalty_to_income_account_mappings of this GetSavingsProductsProductIdResponse.


        :param penalty_to_income_account_mappings: The penalty_to_income_account_mappings of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: list[GetSavingsProductsPenaltyToIncomeAccountMappings]
        """

        self._penalty_to_income_account_mappings = penalty_to_income_account_mappings

    @property
    def short_name(self):
        """Gets the short_name of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The short_name of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this GetSavingsProductsProductIdResponse.


        :param short_name: The short_name of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def withdrawal_fee_for_transfers(self):
        """Gets the withdrawal_fee_for_transfers of this GetSavingsProductsProductIdResponse.  # noqa: E501


        :return: The withdrawal_fee_for_transfers of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._withdrawal_fee_for_transfers

    @withdrawal_fee_for_transfers.setter
    def withdrawal_fee_for_transfers(self, withdrawal_fee_for_transfers):
        """Sets the withdrawal_fee_for_transfers of this GetSavingsProductsProductIdResponse.


        :param withdrawal_fee_for_transfers: The withdrawal_fee_for_transfers of this GetSavingsProductsProductIdResponse.  # noqa: E501
        :type: bool
        """

        self._withdrawal_fee_for_transfers = withdrawal_fee_for_transfers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSavingsProductsProductIdResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSavingsProductsProductIdResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
