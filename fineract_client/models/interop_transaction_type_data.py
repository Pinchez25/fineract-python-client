# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InteropTransactionTypeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initiator': 'str',
        'initiator_type': 'str',
        'scenario': 'str',
        'sub_scenario': 'str'
    }

    attribute_map = {
        'initiator': 'initiator',
        'initiator_type': 'initiatorType',
        'scenario': 'scenario',
        'sub_scenario': 'subScenario'
    }

    def __init__(self, initiator=None, initiator_type=None, scenario=None, sub_scenario=None):  # noqa: E501
        """InteropTransactionTypeData - a model defined in Swagger"""  # noqa: E501
        self._initiator = None
        self._initiator_type = None
        self._scenario = None
        self._sub_scenario = None
        self.discriminator = None
        self.initiator = initiator
        self.initiator_type = initiator_type
        self.scenario = scenario
        if sub_scenario is not None:
            self.sub_scenario = sub_scenario

    @property
    def initiator(self):
        """Gets the initiator of this InteropTransactionTypeData.  # noqa: E501


        :return: The initiator of this InteropTransactionTypeData.  # noqa: E501
        :rtype: str
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this InteropTransactionTypeData.


        :param initiator: The initiator of this InteropTransactionTypeData.  # noqa: E501
        :type: str
        """
        if initiator is None:
            raise ValueError("Invalid value for `initiator`, must not be `None`")  # noqa: E501
        allowed_values = ["PAYER", "PAYEE"]  # noqa: E501
        if initiator not in allowed_values:
            raise ValueError(
                "Invalid value for `initiator` ({0}), must be one of {1}"  # noqa: E501
                .format(initiator, allowed_values)
            )

        self._initiator = initiator

    @property
    def initiator_type(self):
        """Gets the initiator_type of this InteropTransactionTypeData.  # noqa: E501


        :return: The initiator_type of this InteropTransactionTypeData.  # noqa: E501
        :rtype: str
        """
        return self._initiator_type

    @initiator_type.setter
    def initiator_type(self, initiator_type):
        """Sets the initiator_type of this InteropTransactionTypeData.


        :param initiator_type: The initiator_type of this InteropTransactionTypeData.  # noqa: E501
        :type: str
        """
        if initiator_type is None:
            raise ValueError("Invalid value for `initiator_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CONSUMER", "AGENT", "BUSINESS", "DEVICE"]  # noqa: E501
        if initiator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `initiator_type` ({0}), must be one of {1}"  # noqa: E501
                .format(initiator_type, allowed_values)
            )

        self._initiator_type = initiator_type

    @property
    def scenario(self):
        """Gets the scenario of this InteropTransactionTypeData.  # noqa: E501


        :return: The scenario of this InteropTransactionTypeData.  # noqa: E501
        :rtype: str
        """
        return self._scenario

    @scenario.setter
    def scenario(self, scenario):
        """Sets the scenario of this InteropTransactionTypeData.


        :param scenario: The scenario of this InteropTransactionTypeData.  # noqa: E501
        :type: str
        """
        if scenario is None:
            raise ValueError("Invalid value for `scenario`, must not be `None`")  # noqa: E501
        allowed_values = ["DEPOSIT", "WITHDRAWAL", "TRANSFER", "PAYMENT", "REFUND"]  # noqa: E501
        if scenario not in allowed_values:
            raise ValueError(
                "Invalid value for `scenario` ({0}), must be one of {1}"  # noqa: E501
                .format(scenario, allowed_values)
            )

        self._scenario = scenario

    @property
    def sub_scenario(self):
        """Gets the sub_scenario of this InteropTransactionTypeData.  # noqa: E501


        :return: The sub_scenario of this InteropTransactionTypeData.  # noqa: E501
        :rtype: str
        """
        return self._sub_scenario

    @sub_scenario.setter
    def sub_scenario(self, sub_scenario):
        """Sets the sub_scenario of this InteropTransactionTypeData.


        :param sub_scenario: The sub_scenario of this InteropTransactionTypeData.  # noqa: E501
        :type: str
        """

        self._sub_scenario = sub_scenario

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InteropTransactionTypeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InteropTransactionTypeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
