# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansLoanIdChargesTemplateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount_paid': 'float',
        'amount_waived': 'float',
        'amount_written_off': 'float',
        'charge_options': 'list[GetLoanChargeTemplateChargeOptions]',
        'penalty': 'bool'
    }

    attribute_map = {
        'amount_paid': 'amountPaid',
        'amount_waived': 'amountWaived',
        'amount_written_off': 'amountWrittenOff',
        'charge_options': 'chargeOptions',
        'penalty': 'penalty'
    }

    def __init__(self, amount_paid=None, amount_waived=None, amount_written_off=None, charge_options=None, penalty=None):  # noqa: E501
        """GetLoansLoanIdChargesTemplateResponse - a model defined in Swagger"""  # noqa: E501
        self._amount_paid = None
        self._amount_waived = None
        self._amount_written_off = None
        self._charge_options = None
        self._penalty = None
        self.discriminator = None
        if amount_paid is not None:
            self.amount_paid = amount_paid
        if amount_waived is not None:
            self.amount_waived = amount_waived
        if amount_written_off is not None:
            self.amount_written_off = amount_written_off
        if charge_options is not None:
            self.charge_options = charge_options
        if penalty is not None:
            self.penalty = penalty

    @property
    def amount_paid(self):
        """Gets the amount_paid of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501


        :return: The amount_paid of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this GetLoansLoanIdChargesTemplateResponse.


        :param amount_paid: The amount_paid of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501
        :type: float
        """

        self._amount_paid = amount_paid

    @property
    def amount_waived(self):
        """Gets the amount_waived of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501


        :return: The amount_waived of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount_waived

    @amount_waived.setter
    def amount_waived(self, amount_waived):
        """Sets the amount_waived of this GetLoansLoanIdChargesTemplateResponse.


        :param amount_waived: The amount_waived of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501
        :type: float
        """

        self._amount_waived = amount_waived

    @property
    def amount_written_off(self):
        """Gets the amount_written_off of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501


        :return: The amount_written_off of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount_written_off

    @amount_written_off.setter
    def amount_written_off(self, amount_written_off):
        """Sets the amount_written_off of this GetLoansLoanIdChargesTemplateResponse.


        :param amount_written_off: The amount_written_off of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501
        :type: float
        """

        self._amount_written_off = amount_written_off

    @property
    def charge_options(self):
        """Gets the charge_options of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501


        :return: The charge_options of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501
        :rtype: list[GetLoanChargeTemplateChargeOptions]
        """
        return self._charge_options

    @charge_options.setter
    def charge_options(self, charge_options):
        """Sets the charge_options of this GetLoansLoanIdChargesTemplateResponse.


        :param charge_options: The charge_options of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501
        :type: list[GetLoanChargeTemplateChargeOptions]
        """

        self._charge_options = charge_options

    @property
    def penalty(self):
        """Gets the penalty of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501


        :return: The penalty of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this GetLoansLoanIdChargesTemplateResponse.


        :param penalty: The penalty of this GetLoansLoanIdChargesTemplateResponse.  # noqa: E501
        :type: bool
        """

        self._penalty = penalty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansLoanIdChargesTemplateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansLoanIdChargesTemplateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
