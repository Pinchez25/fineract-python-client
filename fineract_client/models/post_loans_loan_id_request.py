# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostLoansLoanIdRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_disbursement_date': 'str',
        'approved_loan_amount': 'float',
        'approved_on_date': 'str',
        'assignment_date': 'str',
        'date_format': 'str',
        'disbursement_data': 'list[PostLoansLoanIdDisbursementData]',
        'expected_disbursement_date': 'str',
        'external_id': 'str',
        'from_loan_officer_id': 'int',
        'locale': 'str',
        'note': 'str',
        'payment_type_id': 'int',
        'rejected_on_date': 'str',
        'to_loan_officer_id': 'int',
        'transaction_amount': 'float',
        'unassigned_date': 'str',
        'withdrawn_on_date': 'str'
    }

    attribute_map = {
        'actual_disbursement_date': 'actualDisbursementDate',
        'approved_loan_amount': 'approvedLoanAmount',
        'approved_on_date': 'approvedOnDate',
        'assignment_date': 'assignmentDate',
        'date_format': 'dateFormat',
        'disbursement_data': 'disbursementData',
        'expected_disbursement_date': 'expectedDisbursementDate',
        'external_id': 'externalId',
        'from_loan_officer_id': 'fromLoanOfficerId',
        'locale': 'locale',
        'note': 'note',
        'payment_type_id': 'paymentTypeId',
        'rejected_on_date': 'rejectedOnDate',
        'to_loan_officer_id': 'toLoanOfficerId',
        'transaction_amount': 'transactionAmount',
        'unassigned_date': 'unassignedDate',
        'withdrawn_on_date': 'withdrawnOnDate'
    }

    def __init__(self, actual_disbursement_date=None, approved_loan_amount=None, approved_on_date=None, assignment_date=None, date_format=None, disbursement_data=None, expected_disbursement_date=None, external_id=None, from_loan_officer_id=None, locale=None, note=None, payment_type_id=None, rejected_on_date=None, to_loan_officer_id=None, transaction_amount=None, unassigned_date=None, withdrawn_on_date=None):  # noqa: E501
        """PostLoansLoanIdRequest - a model defined in Swagger"""  # noqa: E501
        self._actual_disbursement_date = None
        self._approved_loan_amount = None
        self._approved_on_date = None
        self._assignment_date = None
        self._date_format = None
        self._disbursement_data = None
        self._expected_disbursement_date = None
        self._external_id = None
        self._from_loan_officer_id = None
        self._locale = None
        self._note = None
        self._payment_type_id = None
        self._rejected_on_date = None
        self._to_loan_officer_id = None
        self._transaction_amount = None
        self._unassigned_date = None
        self._withdrawn_on_date = None
        self.discriminator = None
        if actual_disbursement_date is not None:
            self.actual_disbursement_date = actual_disbursement_date
        if approved_loan_amount is not None:
            self.approved_loan_amount = approved_loan_amount
        if approved_on_date is not None:
            self.approved_on_date = approved_on_date
        if assignment_date is not None:
            self.assignment_date = assignment_date
        if date_format is not None:
            self.date_format = date_format
        if disbursement_data is not None:
            self.disbursement_data = disbursement_data
        if expected_disbursement_date is not None:
            self.expected_disbursement_date = expected_disbursement_date
        if external_id is not None:
            self.external_id = external_id
        if from_loan_officer_id is not None:
            self.from_loan_officer_id = from_loan_officer_id
        if locale is not None:
            self.locale = locale
        if note is not None:
            self.note = note
        if payment_type_id is not None:
            self.payment_type_id = payment_type_id
        if rejected_on_date is not None:
            self.rejected_on_date = rejected_on_date
        if to_loan_officer_id is not None:
            self.to_loan_officer_id = to_loan_officer_id
        if transaction_amount is not None:
            self.transaction_amount = transaction_amount
        if unassigned_date is not None:
            self.unassigned_date = unassigned_date
        if withdrawn_on_date is not None:
            self.withdrawn_on_date = withdrawn_on_date

    @property
    def actual_disbursement_date(self):
        """Gets the actual_disbursement_date of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The actual_disbursement_date of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._actual_disbursement_date

    @actual_disbursement_date.setter
    def actual_disbursement_date(self, actual_disbursement_date):
        """Sets the actual_disbursement_date of this PostLoansLoanIdRequest.


        :param actual_disbursement_date: The actual_disbursement_date of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._actual_disbursement_date = actual_disbursement_date

    @property
    def approved_loan_amount(self):
        """Gets the approved_loan_amount of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The approved_loan_amount of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: float
        """
        return self._approved_loan_amount

    @approved_loan_amount.setter
    def approved_loan_amount(self, approved_loan_amount):
        """Sets the approved_loan_amount of this PostLoansLoanIdRequest.


        :param approved_loan_amount: The approved_loan_amount of this PostLoansLoanIdRequest.  # noqa: E501
        :type: float
        """

        self._approved_loan_amount = approved_loan_amount

    @property
    def approved_on_date(self):
        """Gets the approved_on_date of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The approved_on_date of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._approved_on_date

    @approved_on_date.setter
    def approved_on_date(self, approved_on_date):
        """Sets the approved_on_date of this PostLoansLoanIdRequest.


        :param approved_on_date: The approved_on_date of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._approved_on_date = approved_on_date

    @property
    def assignment_date(self):
        """Gets the assignment_date of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The assignment_date of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._assignment_date

    @assignment_date.setter
    def assignment_date(self, assignment_date):
        """Sets the assignment_date of this PostLoansLoanIdRequest.


        :param assignment_date: The assignment_date of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._assignment_date = assignment_date

    @property
    def date_format(self):
        """Gets the date_format of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The date_format of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this PostLoansLoanIdRequest.


        :param date_format: The date_format of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def disbursement_data(self):
        """Gets the disbursement_data of this PostLoansLoanIdRequest.  # noqa: E501

        List of PostLoansLoanIdDisbursementData  # noqa: E501

        :return: The disbursement_data of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: list[PostLoansLoanIdDisbursementData]
        """
        return self._disbursement_data

    @disbursement_data.setter
    def disbursement_data(self, disbursement_data):
        """Sets the disbursement_data of this PostLoansLoanIdRequest.

        List of PostLoansLoanIdDisbursementData  # noqa: E501

        :param disbursement_data: The disbursement_data of this PostLoansLoanIdRequest.  # noqa: E501
        :type: list[PostLoansLoanIdDisbursementData]
        """

        self._disbursement_data = disbursement_data

    @property
    def expected_disbursement_date(self):
        """Gets the expected_disbursement_date of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The expected_disbursement_date of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._expected_disbursement_date

    @expected_disbursement_date.setter
    def expected_disbursement_date(self, expected_disbursement_date):
        """Sets the expected_disbursement_date of this PostLoansLoanIdRequest.


        :param expected_disbursement_date: The expected_disbursement_date of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._expected_disbursement_date = expected_disbursement_date

    @property
    def external_id(self):
        """Gets the external_id of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The external_id of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this PostLoansLoanIdRequest.


        :param external_id: The external_id of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def from_loan_officer_id(self):
        """Gets the from_loan_officer_id of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The from_loan_officer_id of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._from_loan_officer_id

    @from_loan_officer_id.setter
    def from_loan_officer_id(self, from_loan_officer_id):
        """Sets the from_loan_officer_id of this PostLoansLoanIdRequest.


        :param from_loan_officer_id: The from_loan_officer_id of this PostLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._from_loan_officer_id = from_loan_officer_id

    @property
    def locale(self):
        """Gets the locale of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The locale of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PostLoansLoanIdRequest.


        :param locale: The locale of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def note(self):
        """Gets the note of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The note of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this PostLoansLoanIdRequest.


        :param note: The note of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def payment_type_id(self):
        """Gets the payment_type_id of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The payment_type_id of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._payment_type_id

    @payment_type_id.setter
    def payment_type_id(self, payment_type_id):
        """Sets the payment_type_id of this PostLoansLoanIdRequest.


        :param payment_type_id: The payment_type_id of this PostLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._payment_type_id = payment_type_id

    @property
    def rejected_on_date(self):
        """Gets the rejected_on_date of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The rejected_on_date of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._rejected_on_date

    @rejected_on_date.setter
    def rejected_on_date(self, rejected_on_date):
        """Sets the rejected_on_date of this PostLoansLoanIdRequest.


        :param rejected_on_date: The rejected_on_date of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._rejected_on_date = rejected_on_date

    @property
    def to_loan_officer_id(self):
        """Gets the to_loan_officer_id of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The to_loan_officer_id of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._to_loan_officer_id

    @to_loan_officer_id.setter
    def to_loan_officer_id(self, to_loan_officer_id):
        """Sets the to_loan_officer_id of this PostLoansLoanIdRequest.


        :param to_loan_officer_id: The to_loan_officer_id of this PostLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._to_loan_officer_id = to_loan_officer_id

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The transaction_amount of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this PostLoansLoanIdRequest.


        :param transaction_amount: The transaction_amount of this PostLoansLoanIdRequest.  # noqa: E501
        :type: float
        """

        self._transaction_amount = transaction_amount

    @property
    def unassigned_date(self):
        """Gets the unassigned_date of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The unassigned_date of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._unassigned_date

    @unassigned_date.setter
    def unassigned_date(self, unassigned_date):
        """Sets the unassigned_date of this PostLoansLoanIdRequest.


        :param unassigned_date: The unassigned_date of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._unassigned_date = unassigned_date

    @property
    def withdrawn_on_date(self):
        """Gets the withdrawn_on_date of this PostLoansLoanIdRequest.  # noqa: E501


        :return: The withdrawn_on_date of this PostLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._withdrawn_on_date

    @withdrawn_on_date.setter
    def withdrawn_on_date(self, withdrawn_on_date):
        """Sets the withdrawn_on_date of this PostLoansLoanIdRequest.


        :param withdrawn_on_date: The withdrawn_on_date of this PostLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._withdrawn_on_date = withdrawn_on_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostLoansLoanIdRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostLoansLoanIdRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
