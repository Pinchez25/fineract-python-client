# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Staff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'display_name': 'str',
        'email_address': 'str',
        'external_id': 'str',
        'firstname': 'str',
        'id': 'int',
        'image': 'Image',
        'joining_date': 'date',
        'lastname': 'str',
        'loan_officer': 'bool',
        'mobile_no': 'str',
        'new': 'bool',
        'not_active': 'bool',
        'not_loan_officer': 'bool',
        'office': 'Office',
        'organisational_role_parent_staff': 'Staff',
        'organisational_role_type': 'int'
    }

    attribute_map = {
        'active': 'active',
        'display_name': 'displayName',
        'email_address': 'emailAddress',
        'external_id': 'externalId',
        'firstname': 'firstname',
        'id': 'id',
        'image': 'image',
        'joining_date': 'joiningDate',
        'lastname': 'lastname',
        'loan_officer': 'loanOfficer',
        'mobile_no': 'mobileNo',
        'new': 'new',
        'not_active': 'notActive',
        'not_loan_officer': 'notLoanOfficer',
        'office': 'office',
        'organisational_role_parent_staff': 'organisationalRoleParentStaff',
        'organisational_role_type': 'organisationalRoleType'
    }

    def __init__(self, active=None, display_name=None, email_address=None, external_id=None, firstname=None, id=None, image=None, joining_date=None, lastname=None, loan_officer=None, mobile_no=None, new=None, not_active=None, not_loan_officer=None, office=None, organisational_role_parent_staff=None, organisational_role_type=None):  # noqa: E501
        """Staff - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._display_name = None
        self._email_address = None
        self._external_id = None
        self._firstname = None
        self._id = None
        self._image = None
        self._joining_date = None
        self._lastname = None
        self._loan_officer = None
        self._mobile_no = None
        self._new = None
        self._not_active = None
        self._not_loan_officer = None
        self._office = None
        self._organisational_role_parent_staff = None
        self._organisational_role_type = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if display_name is not None:
            self.display_name = display_name
        if email_address is not None:
            self.email_address = email_address
        if external_id is not None:
            self.external_id = external_id
        if firstname is not None:
            self.firstname = firstname
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if joining_date is not None:
            self.joining_date = joining_date
        if lastname is not None:
            self.lastname = lastname
        if loan_officer is not None:
            self.loan_officer = loan_officer
        if mobile_no is not None:
            self.mobile_no = mobile_no
        if new is not None:
            self.new = new
        if not_active is not None:
            self.not_active = not_active
        if not_loan_officer is not None:
            self.not_loan_officer = not_loan_officer
        if office is not None:
            self.office = office
        if organisational_role_parent_staff is not None:
            self.organisational_role_parent_staff = organisational_role_parent_staff
        if organisational_role_type is not None:
            self.organisational_role_type = organisational_role_type

    @property
    def active(self):
        """Gets the active of this Staff.  # noqa: E501


        :return: The active of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Staff.


        :param active: The active of this Staff.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def display_name(self):
        """Gets the display_name of this Staff.  # noqa: E501


        :return: The display_name of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Staff.


        :param display_name: The display_name of this Staff.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email_address(self):
        """Gets the email_address of this Staff.  # noqa: E501


        :return: The email_address of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Staff.


        :param email_address: The email_address of this Staff.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def external_id(self):
        """Gets the external_id of this Staff.  # noqa: E501


        :return: The external_id of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Staff.


        :param external_id: The external_id of this Staff.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def firstname(self):
        """Gets the firstname of this Staff.  # noqa: E501


        :return: The firstname of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this Staff.


        :param firstname: The firstname of this Staff.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def id(self):
        """Gets the id of this Staff.  # noqa: E501


        :return: The id of this Staff.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Staff.


        :param id: The id of this Staff.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Staff.  # noqa: E501


        :return: The image of this Staff.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Staff.


        :param image: The image of this Staff.  # noqa: E501
        :type: Image
        """

        self._image = image

    @property
    def joining_date(self):
        """Gets the joining_date of this Staff.  # noqa: E501


        :return: The joining_date of this Staff.  # noqa: E501
        :rtype: date
        """
        return self._joining_date

    @joining_date.setter
    def joining_date(self, joining_date):
        """Sets the joining_date of this Staff.


        :param joining_date: The joining_date of this Staff.  # noqa: E501
        :type: date
        """

        self._joining_date = joining_date

    @property
    def lastname(self):
        """Gets the lastname of this Staff.  # noqa: E501


        :return: The lastname of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this Staff.


        :param lastname: The lastname of this Staff.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def loan_officer(self):
        """Gets the loan_officer of this Staff.  # noqa: E501


        :return: The loan_officer of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._loan_officer

    @loan_officer.setter
    def loan_officer(self, loan_officer):
        """Sets the loan_officer of this Staff.


        :param loan_officer: The loan_officer of this Staff.  # noqa: E501
        :type: bool
        """

        self._loan_officer = loan_officer

    @property
    def mobile_no(self):
        """Gets the mobile_no of this Staff.  # noqa: E501


        :return: The mobile_no of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._mobile_no

    @mobile_no.setter
    def mobile_no(self, mobile_no):
        """Sets the mobile_no of this Staff.


        :param mobile_no: The mobile_no of this Staff.  # noqa: E501
        :type: str
        """

        self._mobile_no = mobile_no

    @property
    def new(self):
        """Gets the new of this Staff.  # noqa: E501


        :return: The new of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this Staff.


        :param new: The new of this Staff.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def not_active(self):
        """Gets the not_active of this Staff.  # noqa: E501


        :return: The not_active of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._not_active

    @not_active.setter
    def not_active(self, not_active):
        """Sets the not_active of this Staff.


        :param not_active: The not_active of this Staff.  # noqa: E501
        :type: bool
        """

        self._not_active = not_active

    @property
    def not_loan_officer(self):
        """Gets the not_loan_officer of this Staff.  # noqa: E501


        :return: The not_loan_officer of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._not_loan_officer

    @not_loan_officer.setter
    def not_loan_officer(self, not_loan_officer):
        """Sets the not_loan_officer of this Staff.


        :param not_loan_officer: The not_loan_officer of this Staff.  # noqa: E501
        :type: bool
        """

        self._not_loan_officer = not_loan_officer

    @property
    def office(self):
        """Gets the office of this Staff.  # noqa: E501


        :return: The office of this Staff.  # noqa: E501
        :rtype: Office
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this Staff.


        :param office: The office of this Staff.  # noqa: E501
        :type: Office
        """

        self._office = office

    @property
    def organisational_role_parent_staff(self):
        """Gets the organisational_role_parent_staff of this Staff.  # noqa: E501


        :return: The organisational_role_parent_staff of this Staff.  # noqa: E501
        :rtype: Staff
        """
        return self._organisational_role_parent_staff

    @organisational_role_parent_staff.setter
    def organisational_role_parent_staff(self, organisational_role_parent_staff):
        """Sets the organisational_role_parent_staff of this Staff.


        :param organisational_role_parent_staff: The organisational_role_parent_staff of this Staff.  # noqa: E501
        :type: Staff
        """

        self._organisational_role_parent_staff = organisational_role_parent_staff

    @property
    def organisational_role_type(self):
        """Gets the organisational_role_type of this Staff.  # noqa: E501


        :return: The organisational_role_type of this Staff.  # noqa: E501
        :rtype: int
        """
        return self._organisational_role_type

    @organisational_role_type.setter
    def organisational_role_type(self, organisational_role_type):
        """Sets the organisational_role_type of this Staff.


        :param organisational_role_type: The organisational_role_type of this Staff.  # noqa: E501
        :type: int
        """

        self._organisational_role_type = organisational_role_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Staff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Staff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
