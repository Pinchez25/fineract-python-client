# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansLoanIdSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_disburse': 'bool',
        'charge_off_reason': 'str',
        'charge_off_reason_id': 'int',
        'currency': 'GetLoansLoanIdCurrency',
        'disbursement_details': 'list[GetLoansLoanIdDisbursementDetails]',
        'emi_amount_variations': 'list[GetLoansLoanIdEmiVariations]',
        'fee_adjustments': 'float',
        'fee_charges_charged': 'float',
        'fee_charges_due_at_disbursement_charged': 'float',
        'fee_charges_outstanding': 'float',
        'fee_charges_overdue': 'float',
        'fee_charges_paid': 'float',
        'fee_charges_waived': 'float',
        'fee_charges_written_off': 'float',
        'fixed_emi_amount': 'float',
        'in_arrears': 'bool',
        'interest_charged': 'float',
        'interest_outstanding': 'float',
        'interest_overdue': 'float',
        'interest_paid': 'float',
        'interest_waived': 'float',
        'interest_written_off': 'float',
        'is_npa': 'bool',
        'linked_account': 'GetLoansLoanIdLinkedAccount',
        'max_outstanding_loan_balance': 'float',
        'overdue_charges': 'list[GetLoansLoanIdOverdueCharges]',
        'overdue_since_date': 'date',
        'penalty_adjustments': 'float',
        'penalty_charges_charged': 'float',
        'penalty_charges_outstanding': 'float',
        'penalty_charges_overdue': 'float',
        'penalty_charges_paid': 'float',
        'penalty_charges_waived': 'float',
        'penalty_charges_written_off': 'float',
        'principal_adjustments': 'float',
        'principal_disbursed': 'float',
        'principal_outstanding': 'float',
        'principal_overdue': 'float',
        'principal_paid': 'float',
        'principal_written_off': 'float',
        'total_charge_adjustment': 'float',
        'total_charge_adjustment_reversed': 'float',
        'total_chargeback': 'float',
        'total_cost_of_loan': 'float',
        'total_credit_balance_refund': 'float',
        'total_credit_balance_refund_reversed': 'float',
        'total_expected_cost_of_loan': 'float',
        'total_expected_repayment': 'float',
        'total_goodwill_credit': 'float',
        'total_goodwill_credit_reversed': 'float',
        'total_interest_payment_waiver': 'float',
        'total_interest_refund': 'float',
        'total_merchant_refund': 'float',
        'total_merchant_refund_reversed': 'float',
        'total_outstanding': 'float',
        'total_overdue': 'float',
        'total_payout_refund': 'float',
        'total_payout_refund_reversed': 'float',
        'total_recovered': 'float',
        'total_repayment': 'float',
        'total_repayment_transaction': 'float',
        'total_repayment_transaction_reversed': 'float',
        'total_unpaid_payable_due_interest': 'float',
        'total_unpaid_payable_not_due_interest': 'float',
        'total_waived': 'float',
        'total_written_off': 'float',
        'writeoff_reason': 'str',
        'writeoff_reason_id': 'int'
    }

    attribute_map = {
        'can_disburse': 'canDisburse',
        'charge_off_reason': 'chargeOffReason',
        'charge_off_reason_id': 'chargeOffReasonId',
        'currency': 'currency',
        'disbursement_details': 'disbursementDetails',
        'emi_amount_variations': 'emiAmountVariations',
        'fee_adjustments': 'feeAdjustments',
        'fee_charges_charged': 'feeChargesCharged',
        'fee_charges_due_at_disbursement_charged': 'feeChargesDueAtDisbursementCharged',
        'fee_charges_outstanding': 'feeChargesOutstanding',
        'fee_charges_overdue': 'feeChargesOverdue',
        'fee_charges_paid': 'feeChargesPaid',
        'fee_charges_waived': 'feeChargesWaived',
        'fee_charges_written_off': 'feeChargesWrittenOff',
        'fixed_emi_amount': 'fixedEmiAmount',
        'in_arrears': 'inArrears',
        'interest_charged': 'interestCharged',
        'interest_outstanding': 'interestOutstanding',
        'interest_overdue': 'interestOverdue',
        'interest_paid': 'interestPaid',
        'interest_waived': 'interestWaived',
        'interest_written_off': 'interestWrittenOff',
        'is_npa': 'isNPA',
        'linked_account': 'linkedAccount',
        'max_outstanding_loan_balance': 'maxOutstandingLoanBalance',
        'overdue_charges': 'overdueCharges',
        'overdue_since_date': 'overdueSinceDate',
        'penalty_adjustments': 'penaltyAdjustments',
        'penalty_charges_charged': 'penaltyChargesCharged',
        'penalty_charges_outstanding': 'penaltyChargesOutstanding',
        'penalty_charges_overdue': 'penaltyChargesOverdue',
        'penalty_charges_paid': 'penaltyChargesPaid',
        'penalty_charges_waived': 'penaltyChargesWaived',
        'penalty_charges_written_off': 'penaltyChargesWrittenOff',
        'principal_adjustments': 'principalAdjustments',
        'principal_disbursed': 'principalDisbursed',
        'principal_outstanding': 'principalOutstanding',
        'principal_overdue': 'principalOverdue',
        'principal_paid': 'principalPaid',
        'principal_written_off': 'principalWrittenOff',
        'total_charge_adjustment': 'totalChargeAdjustment',
        'total_charge_adjustment_reversed': 'totalChargeAdjustmentReversed',
        'total_chargeback': 'totalChargeback',
        'total_cost_of_loan': 'totalCostOfLoan',
        'total_credit_balance_refund': 'totalCreditBalanceRefund',
        'total_credit_balance_refund_reversed': 'totalCreditBalanceRefundReversed',
        'total_expected_cost_of_loan': 'totalExpectedCostOfLoan',
        'total_expected_repayment': 'totalExpectedRepayment',
        'total_goodwill_credit': 'totalGoodwillCredit',
        'total_goodwill_credit_reversed': 'totalGoodwillCreditReversed',
        'total_interest_payment_waiver': 'totalInterestPaymentWaiver',
        'total_interest_refund': 'totalInterestRefund',
        'total_merchant_refund': 'totalMerchantRefund',
        'total_merchant_refund_reversed': 'totalMerchantRefundReversed',
        'total_outstanding': 'totalOutstanding',
        'total_overdue': 'totalOverdue',
        'total_payout_refund': 'totalPayoutRefund',
        'total_payout_refund_reversed': 'totalPayoutRefundReversed',
        'total_recovered': 'totalRecovered',
        'total_repayment': 'totalRepayment',
        'total_repayment_transaction': 'totalRepaymentTransaction',
        'total_repayment_transaction_reversed': 'totalRepaymentTransactionReversed',
        'total_unpaid_payable_due_interest': 'totalUnpaidPayableDueInterest',
        'total_unpaid_payable_not_due_interest': 'totalUnpaidPayableNotDueInterest',
        'total_waived': 'totalWaived',
        'total_written_off': 'totalWrittenOff',
        'writeoff_reason': 'writeoffReason',
        'writeoff_reason_id': 'writeoffReasonId'
    }

    def __init__(self, can_disburse=None, charge_off_reason=None, charge_off_reason_id=None, currency=None, disbursement_details=None, emi_amount_variations=None, fee_adjustments=None, fee_charges_charged=None, fee_charges_due_at_disbursement_charged=None, fee_charges_outstanding=None, fee_charges_overdue=None, fee_charges_paid=None, fee_charges_waived=None, fee_charges_written_off=None, fixed_emi_amount=None, in_arrears=None, interest_charged=None, interest_outstanding=None, interest_overdue=None, interest_paid=None, interest_waived=None, interest_written_off=None, is_npa=None, linked_account=None, max_outstanding_loan_balance=None, overdue_charges=None, overdue_since_date=None, penalty_adjustments=None, penalty_charges_charged=None, penalty_charges_outstanding=None, penalty_charges_overdue=None, penalty_charges_paid=None, penalty_charges_waived=None, penalty_charges_written_off=None, principal_adjustments=None, principal_disbursed=None, principal_outstanding=None, principal_overdue=None, principal_paid=None, principal_written_off=None, total_charge_adjustment=None, total_charge_adjustment_reversed=None, total_chargeback=None, total_cost_of_loan=None, total_credit_balance_refund=None, total_credit_balance_refund_reversed=None, total_expected_cost_of_loan=None, total_expected_repayment=None, total_goodwill_credit=None, total_goodwill_credit_reversed=None, total_interest_payment_waiver=None, total_interest_refund=None, total_merchant_refund=None, total_merchant_refund_reversed=None, total_outstanding=None, total_overdue=None, total_payout_refund=None, total_payout_refund_reversed=None, total_recovered=None, total_repayment=None, total_repayment_transaction=None, total_repayment_transaction_reversed=None, total_unpaid_payable_due_interest=None, total_unpaid_payable_not_due_interest=None, total_waived=None, total_written_off=None, writeoff_reason=None, writeoff_reason_id=None):  # noqa: E501
        """GetLoansLoanIdSummary - a model defined in Swagger"""  # noqa: E501
        self._can_disburse = None
        self._charge_off_reason = None
        self._charge_off_reason_id = None
        self._currency = None
        self._disbursement_details = None
        self._emi_amount_variations = None
        self._fee_adjustments = None
        self._fee_charges_charged = None
        self._fee_charges_due_at_disbursement_charged = None
        self._fee_charges_outstanding = None
        self._fee_charges_overdue = None
        self._fee_charges_paid = None
        self._fee_charges_waived = None
        self._fee_charges_written_off = None
        self._fixed_emi_amount = None
        self._in_arrears = None
        self._interest_charged = None
        self._interest_outstanding = None
        self._interest_overdue = None
        self._interest_paid = None
        self._interest_waived = None
        self._interest_written_off = None
        self._is_npa = None
        self._linked_account = None
        self._max_outstanding_loan_balance = None
        self._overdue_charges = None
        self._overdue_since_date = None
        self._penalty_adjustments = None
        self._penalty_charges_charged = None
        self._penalty_charges_outstanding = None
        self._penalty_charges_overdue = None
        self._penalty_charges_paid = None
        self._penalty_charges_waived = None
        self._penalty_charges_written_off = None
        self._principal_adjustments = None
        self._principal_disbursed = None
        self._principal_outstanding = None
        self._principal_overdue = None
        self._principal_paid = None
        self._principal_written_off = None
        self._total_charge_adjustment = None
        self._total_charge_adjustment_reversed = None
        self._total_chargeback = None
        self._total_cost_of_loan = None
        self._total_credit_balance_refund = None
        self._total_credit_balance_refund_reversed = None
        self._total_expected_cost_of_loan = None
        self._total_expected_repayment = None
        self._total_goodwill_credit = None
        self._total_goodwill_credit_reversed = None
        self._total_interest_payment_waiver = None
        self._total_interest_refund = None
        self._total_merchant_refund = None
        self._total_merchant_refund_reversed = None
        self._total_outstanding = None
        self._total_overdue = None
        self._total_payout_refund = None
        self._total_payout_refund_reversed = None
        self._total_recovered = None
        self._total_repayment = None
        self._total_repayment_transaction = None
        self._total_repayment_transaction_reversed = None
        self._total_unpaid_payable_due_interest = None
        self._total_unpaid_payable_not_due_interest = None
        self._total_waived = None
        self._total_written_off = None
        self._writeoff_reason = None
        self._writeoff_reason_id = None
        self.discriminator = None
        if can_disburse is not None:
            self.can_disburse = can_disburse
        if charge_off_reason is not None:
            self.charge_off_reason = charge_off_reason
        if charge_off_reason_id is not None:
            self.charge_off_reason_id = charge_off_reason_id
        if currency is not None:
            self.currency = currency
        if disbursement_details is not None:
            self.disbursement_details = disbursement_details
        if emi_amount_variations is not None:
            self.emi_amount_variations = emi_amount_variations
        if fee_adjustments is not None:
            self.fee_adjustments = fee_adjustments
        if fee_charges_charged is not None:
            self.fee_charges_charged = fee_charges_charged
        if fee_charges_due_at_disbursement_charged is not None:
            self.fee_charges_due_at_disbursement_charged = fee_charges_due_at_disbursement_charged
        if fee_charges_outstanding is not None:
            self.fee_charges_outstanding = fee_charges_outstanding
        if fee_charges_overdue is not None:
            self.fee_charges_overdue = fee_charges_overdue
        if fee_charges_paid is not None:
            self.fee_charges_paid = fee_charges_paid
        if fee_charges_waived is not None:
            self.fee_charges_waived = fee_charges_waived
        if fee_charges_written_off is not None:
            self.fee_charges_written_off = fee_charges_written_off
        if fixed_emi_amount is not None:
            self.fixed_emi_amount = fixed_emi_amount
        if in_arrears is not None:
            self.in_arrears = in_arrears
        if interest_charged is not None:
            self.interest_charged = interest_charged
        if interest_outstanding is not None:
            self.interest_outstanding = interest_outstanding
        if interest_overdue is not None:
            self.interest_overdue = interest_overdue
        if interest_paid is not None:
            self.interest_paid = interest_paid
        if interest_waived is not None:
            self.interest_waived = interest_waived
        if interest_written_off is not None:
            self.interest_written_off = interest_written_off
        if is_npa is not None:
            self.is_npa = is_npa
        if linked_account is not None:
            self.linked_account = linked_account
        if max_outstanding_loan_balance is not None:
            self.max_outstanding_loan_balance = max_outstanding_loan_balance
        if overdue_charges is not None:
            self.overdue_charges = overdue_charges
        if overdue_since_date is not None:
            self.overdue_since_date = overdue_since_date
        if penalty_adjustments is not None:
            self.penalty_adjustments = penalty_adjustments
        if penalty_charges_charged is not None:
            self.penalty_charges_charged = penalty_charges_charged
        if penalty_charges_outstanding is not None:
            self.penalty_charges_outstanding = penalty_charges_outstanding
        if penalty_charges_overdue is not None:
            self.penalty_charges_overdue = penalty_charges_overdue
        if penalty_charges_paid is not None:
            self.penalty_charges_paid = penalty_charges_paid
        if penalty_charges_waived is not None:
            self.penalty_charges_waived = penalty_charges_waived
        if penalty_charges_written_off is not None:
            self.penalty_charges_written_off = penalty_charges_written_off
        if principal_adjustments is not None:
            self.principal_adjustments = principal_adjustments
        if principal_disbursed is not None:
            self.principal_disbursed = principal_disbursed
        if principal_outstanding is not None:
            self.principal_outstanding = principal_outstanding
        if principal_overdue is not None:
            self.principal_overdue = principal_overdue
        if principal_paid is not None:
            self.principal_paid = principal_paid
        if principal_written_off is not None:
            self.principal_written_off = principal_written_off
        if total_charge_adjustment is not None:
            self.total_charge_adjustment = total_charge_adjustment
        if total_charge_adjustment_reversed is not None:
            self.total_charge_adjustment_reversed = total_charge_adjustment_reversed
        if total_chargeback is not None:
            self.total_chargeback = total_chargeback
        if total_cost_of_loan is not None:
            self.total_cost_of_loan = total_cost_of_loan
        if total_credit_balance_refund is not None:
            self.total_credit_balance_refund = total_credit_balance_refund
        if total_credit_balance_refund_reversed is not None:
            self.total_credit_balance_refund_reversed = total_credit_balance_refund_reversed
        if total_expected_cost_of_loan is not None:
            self.total_expected_cost_of_loan = total_expected_cost_of_loan
        if total_expected_repayment is not None:
            self.total_expected_repayment = total_expected_repayment
        if total_goodwill_credit is not None:
            self.total_goodwill_credit = total_goodwill_credit
        if total_goodwill_credit_reversed is not None:
            self.total_goodwill_credit_reversed = total_goodwill_credit_reversed
        if total_interest_payment_waiver is not None:
            self.total_interest_payment_waiver = total_interest_payment_waiver
        if total_interest_refund is not None:
            self.total_interest_refund = total_interest_refund
        if total_merchant_refund is not None:
            self.total_merchant_refund = total_merchant_refund
        if total_merchant_refund_reversed is not None:
            self.total_merchant_refund_reversed = total_merchant_refund_reversed
        if total_outstanding is not None:
            self.total_outstanding = total_outstanding
        if total_overdue is not None:
            self.total_overdue = total_overdue
        if total_payout_refund is not None:
            self.total_payout_refund = total_payout_refund
        if total_payout_refund_reversed is not None:
            self.total_payout_refund_reversed = total_payout_refund_reversed
        if total_recovered is not None:
            self.total_recovered = total_recovered
        if total_repayment is not None:
            self.total_repayment = total_repayment
        if total_repayment_transaction is not None:
            self.total_repayment_transaction = total_repayment_transaction
        if total_repayment_transaction_reversed is not None:
            self.total_repayment_transaction_reversed = total_repayment_transaction_reversed
        if total_unpaid_payable_due_interest is not None:
            self.total_unpaid_payable_due_interest = total_unpaid_payable_due_interest
        if total_unpaid_payable_not_due_interest is not None:
            self.total_unpaid_payable_not_due_interest = total_unpaid_payable_not_due_interest
        if total_waived is not None:
            self.total_waived = total_waived
        if total_written_off is not None:
            self.total_written_off = total_written_off
        if writeoff_reason is not None:
            self.writeoff_reason = writeoff_reason
        if writeoff_reason_id is not None:
            self.writeoff_reason_id = writeoff_reason_id

    @property
    def can_disburse(self):
        """Gets the can_disburse of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The can_disburse of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: bool
        """
        return self._can_disburse

    @can_disburse.setter
    def can_disburse(self, can_disburse):
        """Sets the can_disburse of this GetLoansLoanIdSummary.


        :param can_disburse: The can_disburse of this GetLoansLoanIdSummary.  # noqa: E501
        :type: bool
        """

        self._can_disburse = can_disburse

    @property
    def charge_off_reason(self):
        """Gets the charge_off_reason of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The charge_off_reason of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: str
        """
        return self._charge_off_reason

    @charge_off_reason.setter
    def charge_off_reason(self, charge_off_reason):
        """Sets the charge_off_reason of this GetLoansLoanIdSummary.


        :param charge_off_reason: The charge_off_reason of this GetLoansLoanIdSummary.  # noqa: E501
        :type: str
        """

        self._charge_off_reason = charge_off_reason

    @property
    def charge_off_reason_id(self):
        """Gets the charge_off_reason_id of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The charge_off_reason_id of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: int
        """
        return self._charge_off_reason_id

    @charge_off_reason_id.setter
    def charge_off_reason_id(self, charge_off_reason_id):
        """Sets the charge_off_reason_id of this GetLoansLoanIdSummary.


        :param charge_off_reason_id: The charge_off_reason_id of this GetLoansLoanIdSummary.  # noqa: E501
        :type: int
        """

        self._charge_off_reason_id = charge_off_reason_id

    @property
    def currency(self):
        """Gets the currency of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The currency of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: GetLoansLoanIdCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GetLoansLoanIdSummary.


        :param currency: The currency of this GetLoansLoanIdSummary.  # noqa: E501
        :type: GetLoansLoanIdCurrency
        """

        self._currency = currency

    @property
    def disbursement_details(self):
        """Gets the disbursement_details of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The disbursement_details of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: list[GetLoansLoanIdDisbursementDetails]
        """
        return self._disbursement_details

    @disbursement_details.setter
    def disbursement_details(self, disbursement_details):
        """Sets the disbursement_details of this GetLoansLoanIdSummary.


        :param disbursement_details: The disbursement_details of this GetLoansLoanIdSummary.  # noqa: E501
        :type: list[GetLoansLoanIdDisbursementDetails]
        """

        self._disbursement_details = disbursement_details

    @property
    def emi_amount_variations(self):
        """Gets the emi_amount_variations of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The emi_amount_variations of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: list[GetLoansLoanIdEmiVariations]
        """
        return self._emi_amount_variations

    @emi_amount_variations.setter
    def emi_amount_variations(self, emi_amount_variations):
        """Sets the emi_amount_variations of this GetLoansLoanIdSummary.


        :param emi_amount_variations: The emi_amount_variations of this GetLoansLoanIdSummary.  # noqa: E501
        :type: list[GetLoansLoanIdEmiVariations]
        """

        self._emi_amount_variations = emi_amount_variations

    @property
    def fee_adjustments(self):
        """Gets the fee_adjustments of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The fee_adjustments of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._fee_adjustments

    @fee_adjustments.setter
    def fee_adjustments(self, fee_adjustments):
        """Sets the fee_adjustments of this GetLoansLoanIdSummary.


        :param fee_adjustments: The fee_adjustments of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._fee_adjustments = fee_adjustments

    @property
    def fee_charges_charged(self):
        """Gets the fee_charges_charged of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The fee_charges_charged of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._fee_charges_charged

    @fee_charges_charged.setter
    def fee_charges_charged(self, fee_charges_charged):
        """Sets the fee_charges_charged of this GetLoansLoanIdSummary.


        :param fee_charges_charged: The fee_charges_charged of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._fee_charges_charged = fee_charges_charged

    @property
    def fee_charges_due_at_disbursement_charged(self):
        """Gets the fee_charges_due_at_disbursement_charged of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The fee_charges_due_at_disbursement_charged of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._fee_charges_due_at_disbursement_charged

    @fee_charges_due_at_disbursement_charged.setter
    def fee_charges_due_at_disbursement_charged(self, fee_charges_due_at_disbursement_charged):
        """Sets the fee_charges_due_at_disbursement_charged of this GetLoansLoanIdSummary.


        :param fee_charges_due_at_disbursement_charged: The fee_charges_due_at_disbursement_charged of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._fee_charges_due_at_disbursement_charged = fee_charges_due_at_disbursement_charged

    @property
    def fee_charges_outstanding(self):
        """Gets the fee_charges_outstanding of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The fee_charges_outstanding of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._fee_charges_outstanding

    @fee_charges_outstanding.setter
    def fee_charges_outstanding(self, fee_charges_outstanding):
        """Sets the fee_charges_outstanding of this GetLoansLoanIdSummary.


        :param fee_charges_outstanding: The fee_charges_outstanding of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._fee_charges_outstanding = fee_charges_outstanding

    @property
    def fee_charges_overdue(self):
        """Gets the fee_charges_overdue of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The fee_charges_overdue of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._fee_charges_overdue

    @fee_charges_overdue.setter
    def fee_charges_overdue(self, fee_charges_overdue):
        """Sets the fee_charges_overdue of this GetLoansLoanIdSummary.


        :param fee_charges_overdue: The fee_charges_overdue of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._fee_charges_overdue = fee_charges_overdue

    @property
    def fee_charges_paid(self):
        """Gets the fee_charges_paid of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The fee_charges_paid of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._fee_charges_paid

    @fee_charges_paid.setter
    def fee_charges_paid(self, fee_charges_paid):
        """Sets the fee_charges_paid of this GetLoansLoanIdSummary.


        :param fee_charges_paid: The fee_charges_paid of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._fee_charges_paid = fee_charges_paid

    @property
    def fee_charges_waived(self):
        """Gets the fee_charges_waived of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The fee_charges_waived of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._fee_charges_waived

    @fee_charges_waived.setter
    def fee_charges_waived(self, fee_charges_waived):
        """Sets the fee_charges_waived of this GetLoansLoanIdSummary.


        :param fee_charges_waived: The fee_charges_waived of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._fee_charges_waived = fee_charges_waived

    @property
    def fee_charges_written_off(self):
        """Gets the fee_charges_written_off of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The fee_charges_written_off of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._fee_charges_written_off

    @fee_charges_written_off.setter
    def fee_charges_written_off(self, fee_charges_written_off):
        """Sets the fee_charges_written_off of this GetLoansLoanIdSummary.


        :param fee_charges_written_off: The fee_charges_written_off of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._fee_charges_written_off = fee_charges_written_off

    @property
    def fixed_emi_amount(self):
        """Gets the fixed_emi_amount of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The fixed_emi_amount of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._fixed_emi_amount

    @fixed_emi_amount.setter
    def fixed_emi_amount(self, fixed_emi_amount):
        """Sets the fixed_emi_amount of this GetLoansLoanIdSummary.


        :param fixed_emi_amount: The fixed_emi_amount of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._fixed_emi_amount = fixed_emi_amount

    @property
    def in_arrears(self):
        """Gets the in_arrears of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The in_arrears of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: bool
        """
        return self._in_arrears

    @in_arrears.setter
    def in_arrears(self, in_arrears):
        """Sets the in_arrears of this GetLoansLoanIdSummary.


        :param in_arrears: The in_arrears of this GetLoansLoanIdSummary.  # noqa: E501
        :type: bool
        """

        self._in_arrears = in_arrears

    @property
    def interest_charged(self):
        """Gets the interest_charged of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The interest_charged of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._interest_charged

    @interest_charged.setter
    def interest_charged(self, interest_charged):
        """Sets the interest_charged of this GetLoansLoanIdSummary.


        :param interest_charged: The interest_charged of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._interest_charged = interest_charged

    @property
    def interest_outstanding(self):
        """Gets the interest_outstanding of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The interest_outstanding of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._interest_outstanding

    @interest_outstanding.setter
    def interest_outstanding(self, interest_outstanding):
        """Sets the interest_outstanding of this GetLoansLoanIdSummary.


        :param interest_outstanding: The interest_outstanding of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._interest_outstanding = interest_outstanding

    @property
    def interest_overdue(self):
        """Gets the interest_overdue of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The interest_overdue of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._interest_overdue

    @interest_overdue.setter
    def interest_overdue(self, interest_overdue):
        """Sets the interest_overdue of this GetLoansLoanIdSummary.


        :param interest_overdue: The interest_overdue of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._interest_overdue = interest_overdue

    @property
    def interest_paid(self):
        """Gets the interest_paid of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The interest_paid of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._interest_paid

    @interest_paid.setter
    def interest_paid(self, interest_paid):
        """Sets the interest_paid of this GetLoansLoanIdSummary.


        :param interest_paid: The interest_paid of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._interest_paid = interest_paid

    @property
    def interest_waived(self):
        """Gets the interest_waived of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The interest_waived of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._interest_waived

    @interest_waived.setter
    def interest_waived(self, interest_waived):
        """Sets the interest_waived of this GetLoansLoanIdSummary.


        :param interest_waived: The interest_waived of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._interest_waived = interest_waived

    @property
    def interest_written_off(self):
        """Gets the interest_written_off of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The interest_written_off of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._interest_written_off

    @interest_written_off.setter
    def interest_written_off(self, interest_written_off):
        """Sets the interest_written_off of this GetLoansLoanIdSummary.


        :param interest_written_off: The interest_written_off of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._interest_written_off = interest_written_off

    @property
    def is_npa(self):
        """Gets the is_npa of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The is_npa of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_npa

    @is_npa.setter
    def is_npa(self, is_npa):
        """Sets the is_npa of this GetLoansLoanIdSummary.


        :param is_npa: The is_npa of this GetLoansLoanIdSummary.  # noqa: E501
        :type: bool
        """

        self._is_npa = is_npa

    @property
    def linked_account(self):
        """Gets the linked_account of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The linked_account of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: GetLoansLoanIdLinkedAccount
        """
        return self._linked_account

    @linked_account.setter
    def linked_account(self, linked_account):
        """Sets the linked_account of this GetLoansLoanIdSummary.


        :param linked_account: The linked_account of this GetLoansLoanIdSummary.  # noqa: E501
        :type: GetLoansLoanIdLinkedAccount
        """

        self._linked_account = linked_account

    @property
    def max_outstanding_loan_balance(self):
        """Gets the max_outstanding_loan_balance of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The max_outstanding_loan_balance of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._max_outstanding_loan_balance

    @max_outstanding_loan_balance.setter
    def max_outstanding_loan_balance(self, max_outstanding_loan_balance):
        """Sets the max_outstanding_loan_balance of this GetLoansLoanIdSummary.


        :param max_outstanding_loan_balance: The max_outstanding_loan_balance of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._max_outstanding_loan_balance = max_outstanding_loan_balance

    @property
    def overdue_charges(self):
        """Gets the overdue_charges of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The overdue_charges of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: list[GetLoansLoanIdOverdueCharges]
        """
        return self._overdue_charges

    @overdue_charges.setter
    def overdue_charges(self, overdue_charges):
        """Sets the overdue_charges of this GetLoansLoanIdSummary.


        :param overdue_charges: The overdue_charges of this GetLoansLoanIdSummary.  # noqa: E501
        :type: list[GetLoansLoanIdOverdueCharges]
        """

        self._overdue_charges = overdue_charges

    @property
    def overdue_since_date(self):
        """Gets the overdue_since_date of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The overdue_since_date of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: date
        """
        return self._overdue_since_date

    @overdue_since_date.setter
    def overdue_since_date(self, overdue_since_date):
        """Sets the overdue_since_date of this GetLoansLoanIdSummary.


        :param overdue_since_date: The overdue_since_date of this GetLoansLoanIdSummary.  # noqa: E501
        :type: date
        """

        self._overdue_since_date = overdue_since_date

    @property
    def penalty_adjustments(self):
        """Gets the penalty_adjustments of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The penalty_adjustments of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._penalty_adjustments

    @penalty_adjustments.setter
    def penalty_adjustments(self, penalty_adjustments):
        """Sets the penalty_adjustments of this GetLoansLoanIdSummary.


        :param penalty_adjustments: The penalty_adjustments of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._penalty_adjustments = penalty_adjustments

    @property
    def penalty_charges_charged(self):
        """Gets the penalty_charges_charged of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The penalty_charges_charged of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._penalty_charges_charged

    @penalty_charges_charged.setter
    def penalty_charges_charged(self, penalty_charges_charged):
        """Sets the penalty_charges_charged of this GetLoansLoanIdSummary.


        :param penalty_charges_charged: The penalty_charges_charged of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._penalty_charges_charged = penalty_charges_charged

    @property
    def penalty_charges_outstanding(self):
        """Gets the penalty_charges_outstanding of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The penalty_charges_outstanding of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._penalty_charges_outstanding

    @penalty_charges_outstanding.setter
    def penalty_charges_outstanding(self, penalty_charges_outstanding):
        """Sets the penalty_charges_outstanding of this GetLoansLoanIdSummary.


        :param penalty_charges_outstanding: The penalty_charges_outstanding of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._penalty_charges_outstanding = penalty_charges_outstanding

    @property
    def penalty_charges_overdue(self):
        """Gets the penalty_charges_overdue of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The penalty_charges_overdue of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._penalty_charges_overdue

    @penalty_charges_overdue.setter
    def penalty_charges_overdue(self, penalty_charges_overdue):
        """Sets the penalty_charges_overdue of this GetLoansLoanIdSummary.


        :param penalty_charges_overdue: The penalty_charges_overdue of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._penalty_charges_overdue = penalty_charges_overdue

    @property
    def penalty_charges_paid(self):
        """Gets the penalty_charges_paid of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The penalty_charges_paid of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._penalty_charges_paid

    @penalty_charges_paid.setter
    def penalty_charges_paid(self, penalty_charges_paid):
        """Sets the penalty_charges_paid of this GetLoansLoanIdSummary.


        :param penalty_charges_paid: The penalty_charges_paid of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._penalty_charges_paid = penalty_charges_paid

    @property
    def penalty_charges_waived(self):
        """Gets the penalty_charges_waived of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The penalty_charges_waived of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._penalty_charges_waived

    @penalty_charges_waived.setter
    def penalty_charges_waived(self, penalty_charges_waived):
        """Sets the penalty_charges_waived of this GetLoansLoanIdSummary.


        :param penalty_charges_waived: The penalty_charges_waived of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._penalty_charges_waived = penalty_charges_waived

    @property
    def penalty_charges_written_off(self):
        """Gets the penalty_charges_written_off of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The penalty_charges_written_off of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._penalty_charges_written_off

    @penalty_charges_written_off.setter
    def penalty_charges_written_off(self, penalty_charges_written_off):
        """Sets the penalty_charges_written_off of this GetLoansLoanIdSummary.


        :param penalty_charges_written_off: The penalty_charges_written_off of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._penalty_charges_written_off = penalty_charges_written_off

    @property
    def principal_adjustments(self):
        """Gets the principal_adjustments of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The principal_adjustments of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._principal_adjustments

    @principal_adjustments.setter
    def principal_adjustments(self, principal_adjustments):
        """Sets the principal_adjustments of this GetLoansLoanIdSummary.


        :param principal_adjustments: The principal_adjustments of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._principal_adjustments = principal_adjustments

    @property
    def principal_disbursed(self):
        """Gets the principal_disbursed of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The principal_disbursed of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._principal_disbursed

    @principal_disbursed.setter
    def principal_disbursed(self, principal_disbursed):
        """Sets the principal_disbursed of this GetLoansLoanIdSummary.


        :param principal_disbursed: The principal_disbursed of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._principal_disbursed = principal_disbursed

    @property
    def principal_outstanding(self):
        """Gets the principal_outstanding of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The principal_outstanding of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._principal_outstanding

    @principal_outstanding.setter
    def principal_outstanding(self, principal_outstanding):
        """Sets the principal_outstanding of this GetLoansLoanIdSummary.


        :param principal_outstanding: The principal_outstanding of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._principal_outstanding = principal_outstanding

    @property
    def principal_overdue(self):
        """Gets the principal_overdue of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The principal_overdue of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._principal_overdue

    @principal_overdue.setter
    def principal_overdue(self, principal_overdue):
        """Sets the principal_overdue of this GetLoansLoanIdSummary.


        :param principal_overdue: The principal_overdue of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._principal_overdue = principal_overdue

    @property
    def principal_paid(self):
        """Gets the principal_paid of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The principal_paid of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._principal_paid

    @principal_paid.setter
    def principal_paid(self, principal_paid):
        """Sets the principal_paid of this GetLoansLoanIdSummary.


        :param principal_paid: The principal_paid of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._principal_paid = principal_paid

    @property
    def principal_written_off(self):
        """Gets the principal_written_off of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The principal_written_off of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._principal_written_off

    @principal_written_off.setter
    def principal_written_off(self, principal_written_off):
        """Sets the principal_written_off of this GetLoansLoanIdSummary.


        :param principal_written_off: The principal_written_off of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._principal_written_off = principal_written_off

    @property
    def total_charge_adjustment(self):
        """Gets the total_charge_adjustment of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_charge_adjustment of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_charge_adjustment

    @total_charge_adjustment.setter
    def total_charge_adjustment(self, total_charge_adjustment):
        """Sets the total_charge_adjustment of this GetLoansLoanIdSummary.


        :param total_charge_adjustment: The total_charge_adjustment of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_charge_adjustment = total_charge_adjustment

    @property
    def total_charge_adjustment_reversed(self):
        """Gets the total_charge_adjustment_reversed of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_charge_adjustment_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_charge_adjustment_reversed

    @total_charge_adjustment_reversed.setter
    def total_charge_adjustment_reversed(self, total_charge_adjustment_reversed):
        """Sets the total_charge_adjustment_reversed of this GetLoansLoanIdSummary.


        :param total_charge_adjustment_reversed: The total_charge_adjustment_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_charge_adjustment_reversed = total_charge_adjustment_reversed

    @property
    def total_chargeback(self):
        """Gets the total_chargeback of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_chargeback of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_chargeback

    @total_chargeback.setter
    def total_chargeback(self, total_chargeback):
        """Sets the total_chargeback of this GetLoansLoanIdSummary.


        :param total_chargeback: The total_chargeback of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_chargeback = total_chargeback

    @property
    def total_cost_of_loan(self):
        """Gets the total_cost_of_loan of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_cost_of_loan of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_cost_of_loan

    @total_cost_of_loan.setter
    def total_cost_of_loan(self, total_cost_of_loan):
        """Sets the total_cost_of_loan of this GetLoansLoanIdSummary.


        :param total_cost_of_loan: The total_cost_of_loan of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_cost_of_loan = total_cost_of_loan

    @property
    def total_credit_balance_refund(self):
        """Gets the total_credit_balance_refund of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_credit_balance_refund of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_credit_balance_refund

    @total_credit_balance_refund.setter
    def total_credit_balance_refund(self, total_credit_balance_refund):
        """Sets the total_credit_balance_refund of this GetLoansLoanIdSummary.


        :param total_credit_balance_refund: The total_credit_balance_refund of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_credit_balance_refund = total_credit_balance_refund

    @property
    def total_credit_balance_refund_reversed(self):
        """Gets the total_credit_balance_refund_reversed of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_credit_balance_refund_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_credit_balance_refund_reversed

    @total_credit_balance_refund_reversed.setter
    def total_credit_balance_refund_reversed(self, total_credit_balance_refund_reversed):
        """Sets the total_credit_balance_refund_reversed of this GetLoansLoanIdSummary.


        :param total_credit_balance_refund_reversed: The total_credit_balance_refund_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_credit_balance_refund_reversed = total_credit_balance_refund_reversed

    @property
    def total_expected_cost_of_loan(self):
        """Gets the total_expected_cost_of_loan of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_expected_cost_of_loan of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_expected_cost_of_loan

    @total_expected_cost_of_loan.setter
    def total_expected_cost_of_loan(self, total_expected_cost_of_loan):
        """Sets the total_expected_cost_of_loan of this GetLoansLoanIdSummary.


        :param total_expected_cost_of_loan: The total_expected_cost_of_loan of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_expected_cost_of_loan = total_expected_cost_of_loan

    @property
    def total_expected_repayment(self):
        """Gets the total_expected_repayment of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_expected_repayment of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_expected_repayment

    @total_expected_repayment.setter
    def total_expected_repayment(self, total_expected_repayment):
        """Sets the total_expected_repayment of this GetLoansLoanIdSummary.


        :param total_expected_repayment: The total_expected_repayment of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_expected_repayment = total_expected_repayment

    @property
    def total_goodwill_credit(self):
        """Gets the total_goodwill_credit of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_goodwill_credit of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_goodwill_credit

    @total_goodwill_credit.setter
    def total_goodwill_credit(self, total_goodwill_credit):
        """Sets the total_goodwill_credit of this GetLoansLoanIdSummary.


        :param total_goodwill_credit: The total_goodwill_credit of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_goodwill_credit = total_goodwill_credit

    @property
    def total_goodwill_credit_reversed(self):
        """Gets the total_goodwill_credit_reversed of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_goodwill_credit_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_goodwill_credit_reversed

    @total_goodwill_credit_reversed.setter
    def total_goodwill_credit_reversed(self, total_goodwill_credit_reversed):
        """Sets the total_goodwill_credit_reversed of this GetLoansLoanIdSummary.


        :param total_goodwill_credit_reversed: The total_goodwill_credit_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_goodwill_credit_reversed = total_goodwill_credit_reversed

    @property
    def total_interest_payment_waiver(self):
        """Gets the total_interest_payment_waiver of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_interest_payment_waiver of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_interest_payment_waiver

    @total_interest_payment_waiver.setter
    def total_interest_payment_waiver(self, total_interest_payment_waiver):
        """Sets the total_interest_payment_waiver of this GetLoansLoanIdSummary.


        :param total_interest_payment_waiver: The total_interest_payment_waiver of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_interest_payment_waiver = total_interest_payment_waiver

    @property
    def total_interest_refund(self):
        """Gets the total_interest_refund of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_interest_refund of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_interest_refund

    @total_interest_refund.setter
    def total_interest_refund(self, total_interest_refund):
        """Sets the total_interest_refund of this GetLoansLoanIdSummary.


        :param total_interest_refund: The total_interest_refund of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_interest_refund = total_interest_refund

    @property
    def total_merchant_refund(self):
        """Gets the total_merchant_refund of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_merchant_refund of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_merchant_refund

    @total_merchant_refund.setter
    def total_merchant_refund(self, total_merchant_refund):
        """Sets the total_merchant_refund of this GetLoansLoanIdSummary.


        :param total_merchant_refund: The total_merchant_refund of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_merchant_refund = total_merchant_refund

    @property
    def total_merchant_refund_reversed(self):
        """Gets the total_merchant_refund_reversed of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_merchant_refund_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_merchant_refund_reversed

    @total_merchant_refund_reversed.setter
    def total_merchant_refund_reversed(self, total_merchant_refund_reversed):
        """Sets the total_merchant_refund_reversed of this GetLoansLoanIdSummary.


        :param total_merchant_refund_reversed: The total_merchant_refund_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_merchant_refund_reversed = total_merchant_refund_reversed

    @property
    def total_outstanding(self):
        """Gets the total_outstanding of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_outstanding of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_outstanding

    @total_outstanding.setter
    def total_outstanding(self, total_outstanding):
        """Sets the total_outstanding of this GetLoansLoanIdSummary.


        :param total_outstanding: The total_outstanding of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_outstanding = total_outstanding

    @property
    def total_overdue(self):
        """Gets the total_overdue of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_overdue of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_overdue

    @total_overdue.setter
    def total_overdue(self, total_overdue):
        """Sets the total_overdue of this GetLoansLoanIdSummary.


        :param total_overdue: The total_overdue of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_overdue = total_overdue

    @property
    def total_payout_refund(self):
        """Gets the total_payout_refund of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_payout_refund of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_payout_refund

    @total_payout_refund.setter
    def total_payout_refund(self, total_payout_refund):
        """Sets the total_payout_refund of this GetLoansLoanIdSummary.


        :param total_payout_refund: The total_payout_refund of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_payout_refund = total_payout_refund

    @property
    def total_payout_refund_reversed(self):
        """Gets the total_payout_refund_reversed of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_payout_refund_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_payout_refund_reversed

    @total_payout_refund_reversed.setter
    def total_payout_refund_reversed(self, total_payout_refund_reversed):
        """Sets the total_payout_refund_reversed of this GetLoansLoanIdSummary.


        :param total_payout_refund_reversed: The total_payout_refund_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_payout_refund_reversed = total_payout_refund_reversed

    @property
    def total_recovered(self):
        """Gets the total_recovered of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_recovered of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_recovered

    @total_recovered.setter
    def total_recovered(self, total_recovered):
        """Sets the total_recovered of this GetLoansLoanIdSummary.


        :param total_recovered: The total_recovered of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_recovered = total_recovered

    @property
    def total_repayment(self):
        """Gets the total_repayment of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_repayment of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_repayment

    @total_repayment.setter
    def total_repayment(self, total_repayment):
        """Sets the total_repayment of this GetLoansLoanIdSummary.


        :param total_repayment: The total_repayment of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_repayment = total_repayment

    @property
    def total_repayment_transaction(self):
        """Gets the total_repayment_transaction of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_repayment_transaction of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_repayment_transaction

    @total_repayment_transaction.setter
    def total_repayment_transaction(self, total_repayment_transaction):
        """Sets the total_repayment_transaction of this GetLoansLoanIdSummary.


        :param total_repayment_transaction: The total_repayment_transaction of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_repayment_transaction = total_repayment_transaction

    @property
    def total_repayment_transaction_reversed(self):
        """Gets the total_repayment_transaction_reversed of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_repayment_transaction_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_repayment_transaction_reversed

    @total_repayment_transaction_reversed.setter
    def total_repayment_transaction_reversed(self, total_repayment_transaction_reversed):
        """Sets the total_repayment_transaction_reversed of this GetLoansLoanIdSummary.


        :param total_repayment_transaction_reversed: The total_repayment_transaction_reversed of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_repayment_transaction_reversed = total_repayment_transaction_reversed

    @property
    def total_unpaid_payable_due_interest(self):
        """Gets the total_unpaid_payable_due_interest of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_unpaid_payable_due_interest of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_unpaid_payable_due_interest

    @total_unpaid_payable_due_interest.setter
    def total_unpaid_payable_due_interest(self, total_unpaid_payable_due_interest):
        """Sets the total_unpaid_payable_due_interest of this GetLoansLoanIdSummary.


        :param total_unpaid_payable_due_interest: The total_unpaid_payable_due_interest of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_unpaid_payable_due_interest = total_unpaid_payable_due_interest

    @property
    def total_unpaid_payable_not_due_interest(self):
        """Gets the total_unpaid_payable_not_due_interest of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_unpaid_payable_not_due_interest of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_unpaid_payable_not_due_interest

    @total_unpaid_payable_not_due_interest.setter
    def total_unpaid_payable_not_due_interest(self, total_unpaid_payable_not_due_interest):
        """Sets the total_unpaid_payable_not_due_interest of this GetLoansLoanIdSummary.


        :param total_unpaid_payable_not_due_interest: The total_unpaid_payable_not_due_interest of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_unpaid_payable_not_due_interest = total_unpaid_payable_not_due_interest

    @property
    def total_waived(self):
        """Gets the total_waived of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_waived of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_waived

    @total_waived.setter
    def total_waived(self, total_waived):
        """Sets the total_waived of this GetLoansLoanIdSummary.


        :param total_waived: The total_waived of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_waived = total_waived

    @property
    def total_written_off(self):
        """Gets the total_written_off of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The total_written_off of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_written_off

    @total_written_off.setter
    def total_written_off(self, total_written_off):
        """Sets the total_written_off of this GetLoansLoanIdSummary.


        :param total_written_off: The total_written_off of this GetLoansLoanIdSummary.  # noqa: E501
        :type: float
        """

        self._total_written_off = total_written_off

    @property
    def writeoff_reason(self):
        """Gets the writeoff_reason of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The writeoff_reason of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: str
        """
        return self._writeoff_reason

    @writeoff_reason.setter
    def writeoff_reason(self, writeoff_reason):
        """Sets the writeoff_reason of this GetLoansLoanIdSummary.


        :param writeoff_reason: The writeoff_reason of this GetLoansLoanIdSummary.  # noqa: E501
        :type: str
        """

        self._writeoff_reason = writeoff_reason

    @property
    def writeoff_reason_id(self):
        """Gets the writeoff_reason_id of this GetLoansLoanIdSummary.  # noqa: E501


        :return: The writeoff_reason_id of this GetLoansLoanIdSummary.  # noqa: E501
        :rtype: int
        """
        return self._writeoff_reason_id

    @writeoff_reason_id.setter
    def writeoff_reason_id(self, writeoff_reason_id):
        """Sets the writeoff_reason_id of this GetLoansLoanIdSummary.


        :param writeoff_reason_id: The writeoff_reason_id of this GetLoansLoanIdSummary.  # noqa: E501
        :type: int
        """

        self._writeoff_reason_id = writeoff_reason_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansLoanIdSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansLoanIdSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
