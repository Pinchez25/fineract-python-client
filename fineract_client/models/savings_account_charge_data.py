# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SavingsAccountChargeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'amount': 'float',
        'amount_or_percentage': 'float',
        'amount_outstanding': 'float',
        'amount_paid': 'float',
        'amount_percentage_applied_to': 'float',
        'amount_waived': 'float',
        'amount_written_off': 'float',
        'annual_fee': 'bool',
        'charge_calculation_type': 'EnumOptionData',
        'charge_data': 'ChargeData',
        'charge_id': 'int',
        'charge_options': 'list[ChargeData]',
        'charge_time_type': 'EnumOptionData',
        'currency': 'CurrencyData',
        'due_date': 'date',
        'fee_charge': 'bool',
        'fee_interval': 'int',
        'fee_on_month_day': 'ChargeFeeOnMonthDay',
        'free_withdrawal_charge_frequency': 'int',
        'id': 'int',
        'inactivation_date': 'date',
        'is_active': 'bool',
        'is_free_withdrawal': 'bool',
        'name': 'str',
        'penalty': 'bool',
        'percentage': 'float',
        'restart_frequency': 'int',
        'restart_frequency_enum': 'int',
        'savings_activation': 'bool',
        'withdrawal_fee': 'bool'
    }

    attribute_map = {
        'account_id': 'accountId',
        'amount': 'amount',
        'amount_or_percentage': 'amountOrPercentage',
        'amount_outstanding': 'amountOutstanding',
        'amount_paid': 'amountPaid',
        'amount_percentage_applied_to': 'amountPercentageAppliedTo',
        'amount_waived': 'amountWaived',
        'amount_written_off': 'amountWrittenOff',
        'annual_fee': 'annualFee',
        'charge_calculation_type': 'chargeCalculationType',
        'charge_data': 'chargeData',
        'charge_id': 'chargeId',
        'charge_options': 'chargeOptions',
        'charge_time_type': 'chargeTimeType',
        'currency': 'currency',
        'due_date': 'dueDate',
        'fee_charge': 'feeCharge',
        'fee_interval': 'feeInterval',
        'fee_on_month_day': 'feeOnMonthDay',
        'free_withdrawal_charge_frequency': 'freeWithdrawalChargeFrequency',
        'id': 'id',
        'inactivation_date': 'inactivationDate',
        'is_active': 'isActive',
        'is_free_withdrawal': 'isFreeWithdrawal',
        'name': 'name',
        'penalty': 'penalty',
        'percentage': 'percentage',
        'restart_frequency': 'restartFrequency',
        'restart_frequency_enum': 'restartFrequencyEnum',
        'savings_activation': 'savingsActivation',
        'withdrawal_fee': 'withdrawalFee'
    }

    def __init__(self, account_id=None, amount=None, amount_or_percentage=None, amount_outstanding=None, amount_paid=None, amount_percentage_applied_to=None, amount_waived=None, amount_written_off=None, annual_fee=None, charge_calculation_type=None, charge_data=None, charge_id=None, charge_options=None, charge_time_type=None, currency=None, due_date=None, fee_charge=None, fee_interval=None, fee_on_month_day=None, free_withdrawal_charge_frequency=None, id=None, inactivation_date=None, is_active=None, is_free_withdrawal=None, name=None, penalty=None, percentage=None, restart_frequency=None, restart_frequency_enum=None, savings_activation=None, withdrawal_fee=None):  # noqa: E501
        """SavingsAccountChargeData - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._amount = None
        self._amount_or_percentage = None
        self._amount_outstanding = None
        self._amount_paid = None
        self._amount_percentage_applied_to = None
        self._amount_waived = None
        self._amount_written_off = None
        self._annual_fee = None
        self._charge_calculation_type = None
        self._charge_data = None
        self._charge_id = None
        self._charge_options = None
        self._charge_time_type = None
        self._currency = None
        self._due_date = None
        self._fee_charge = None
        self._fee_interval = None
        self._fee_on_month_day = None
        self._free_withdrawal_charge_frequency = None
        self._id = None
        self._inactivation_date = None
        self._is_active = None
        self._is_free_withdrawal = None
        self._name = None
        self._penalty = None
        self._percentage = None
        self._restart_frequency = None
        self._restart_frequency_enum = None
        self._savings_activation = None
        self._withdrawal_fee = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if amount is not None:
            self.amount = amount
        if amount_or_percentage is not None:
            self.amount_or_percentage = amount_or_percentage
        if amount_outstanding is not None:
            self.amount_outstanding = amount_outstanding
        if amount_paid is not None:
            self.amount_paid = amount_paid
        if amount_percentage_applied_to is not None:
            self.amount_percentage_applied_to = amount_percentage_applied_to
        if amount_waived is not None:
            self.amount_waived = amount_waived
        if amount_written_off is not None:
            self.amount_written_off = amount_written_off
        if annual_fee is not None:
            self.annual_fee = annual_fee
        if charge_calculation_type is not None:
            self.charge_calculation_type = charge_calculation_type
        if charge_data is not None:
            self.charge_data = charge_data
        if charge_id is not None:
            self.charge_id = charge_id
        if charge_options is not None:
            self.charge_options = charge_options
        if charge_time_type is not None:
            self.charge_time_type = charge_time_type
        if currency is not None:
            self.currency = currency
        if due_date is not None:
            self.due_date = due_date
        if fee_charge is not None:
            self.fee_charge = fee_charge
        if fee_interval is not None:
            self.fee_interval = fee_interval
        if fee_on_month_day is not None:
            self.fee_on_month_day = fee_on_month_day
        if free_withdrawal_charge_frequency is not None:
            self.free_withdrawal_charge_frequency = free_withdrawal_charge_frequency
        if id is not None:
            self.id = id
        if inactivation_date is not None:
            self.inactivation_date = inactivation_date
        if is_active is not None:
            self.is_active = is_active
        if is_free_withdrawal is not None:
            self.is_free_withdrawal = is_free_withdrawal
        if name is not None:
            self.name = name
        if penalty is not None:
            self.penalty = penalty
        if percentage is not None:
            self.percentage = percentage
        if restart_frequency is not None:
            self.restart_frequency = restart_frequency
        if restart_frequency_enum is not None:
            self.restart_frequency_enum = restart_frequency_enum
        if savings_activation is not None:
            self.savings_activation = savings_activation
        if withdrawal_fee is not None:
            self.withdrawal_fee = withdrawal_fee

    @property
    def account_id(self):
        """Gets the account_id of this SavingsAccountChargeData.  # noqa: E501


        :return: The account_id of this SavingsAccountChargeData.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SavingsAccountChargeData.


        :param account_id: The account_id of this SavingsAccountChargeData.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this SavingsAccountChargeData.  # noqa: E501


        :return: The amount of this SavingsAccountChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SavingsAccountChargeData.


        :param amount: The amount of this SavingsAccountChargeData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_or_percentage(self):
        """Gets the amount_or_percentage of this SavingsAccountChargeData.  # noqa: E501


        :return: The amount_or_percentage of this SavingsAccountChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_or_percentage

    @amount_or_percentage.setter
    def amount_or_percentage(self, amount_or_percentage):
        """Sets the amount_or_percentage of this SavingsAccountChargeData.


        :param amount_or_percentage: The amount_or_percentage of this SavingsAccountChargeData.  # noqa: E501
        :type: float
        """

        self._amount_or_percentage = amount_or_percentage

    @property
    def amount_outstanding(self):
        """Gets the amount_outstanding of this SavingsAccountChargeData.  # noqa: E501


        :return: The amount_outstanding of this SavingsAccountChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_outstanding

    @amount_outstanding.setter
    def amount_outstanding(self, amount_outstanding):
        """Sets the amount_outstanding of this SavingsAccountChargeData.


        :param amount_outstanding: The amount_outstanding of this SavingsAccountChargeData.  # noqa: E501
        :type: float
        """

        self._amount_outstanding = amount_outstanding

    @property
    def amount_paid(self):
        """Gets the amount_paid of this SavingsAccountChargeData.  # noqa: E501


        :return: The amount_paid of this SavingsAccountChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this SavingsAccountChargeData.


        :param amount_paid: The amount_paid of this SavingsAccountChargeData.  # noqa: E501
        :type: float
        """

        self._amount_paid = amount_paid

    @property
    def amount_percentage_applied_to(self):
        """Gets the amount_percentage_applied_to of this SavingsAccountChargeData.  # noqa: E501


        :return: The amount_percentage_applied_to of this SavingsAccountChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_percentage_applied_to

    @amount_percentage_applied_to.setter
    def amount_percentage_applied_to(self, amount_percentage_applied_to):
        """Sets the amount_percentage_applied_to of this SavingsAccountChargeData.


        :param amount_percentage_applied_to: The amount_percentage_applied_to of this SavingsAccountChargeData.  # noqa: E501
        :type: float
        """

        self._amount_percentage_applied_to = amount_percentage_applied_to

    @property
    def amount_waived(self):
        """Gets the amount_waived of this SavingsAccountChargeData.  # noqa: E501


        :return: The amount_waived of this SavingsAccountChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_waived

    @amount_waived.setter
    def amount_waived(self, amount_waived):
        """Sets the amount_waived of this SavingsAccountChargeData.


        :param amount_waived: The amount_waived of this SavingsAccountChargeData.  # noqa: E501
        :type: float
        """

        self._amount_waived = amount_waived

    @property
    def amount_written_off(self):
        """Gets the amount_written_off of this SavingsAccountChargeData.  # noqa: E501


        :return: The amount_written_off of this SavingsAccountChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_written_off

    @amount_written_off.setter
    def amount_written_off(self, amount_written_off):
        """Sets the amount_written_off of this SavingsAccountChargeData.


        :param amount_written_off: The amount_written_off of this SavingsAccountChargeData.  # noqa: E501
        :type: float
        """

        self._amount_written_off = amount_written_off

    @property
    def annual_fee(self):
        """Gets the annual_fee of this SavingsAccountChargeData.  # noqa: E501


        :return: The annual_fee of this SavingsAccountChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._annual_fee

    @annual_fee.setter
    def annual_fee(self, annual_fee):
        """Sets the annual_fee of this SavingsAccountChargeData.


        :param annual_fee: The annual_fee of this SavingsAccountChargeData.  # noqa: E501
        :type: bool
        """

        self._annual_fee = annual_fee

    @property
    def charge_calculation_type(self):
        """Gets the charge_calculation_type of this SavingsAccountChargeData.  # noqa: E501


        :return: The charge_calculation_type of this SavingsAccountChargeData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._charge_calculation_type

    @charge_calculation_type.setter
    def charge_calculation_type(self, charge_calculation_type):
        """Sets the charge_calculation_type of this SavingsAccountChargeData.


        :param charge_calculation_type: The charge_calculation_type of this SavingsAccountChargeData.  # noqa: E501
        :type: EnumOptionData
        """

        self._charge_calculation_type = charge_calculation_type

    @property
    def charge_data(self):
        """Gets the charge_data of this SavingsAccountChargeData.  # noqa: E501


        :return: The charge_data of this SavingsAccountChargeData.  # noqa: E501
        :rtype: ChargeData
        """
        return self._charge_data

    @charge_data.setter
    def charge_data(self, charge_data):
        """Sets the charge_data of this SavingsAccountChargeData.


        :param charge_data: The charge_data of this SavingsAccountChargeData.  # noqa: E501
        :type: ChargeData
        """

        self._charge_data = charge_data

    @property
    def charge_id(self):
        """Gets the charge_id of this SavingsAccountChargeData.  # noqa: E501


        :return: The charge_id of this SavingsAccountChargeData.  # noqa: E501
        :rtype: int
        """
        return self._charge_id

    @charge_id.setter
    def charge_id(self, charge_id):
        """Sets the charge_id of this SavingsAccountChargeData.


        :param charge_id: The charge_id of this SavingsAccountChargeData.  # noqa: E501
        :type: int
        """

        self._charge_id = charge_id

    @property
    def charge_options(self):
        """Gets the charge_options of this SavingsAccountChargeData.  # noqa: E501


        :return: The charge_options of this SavingsAccountChargeData.  # noqa: E501
        :rtype: list[ChargeData]
        """
        return self._charge_options

    @charge_options.setter
    def charge_options(self, charge_options):
        """Sets the charge_options of this SavingsAccountChargeData.


        :param charge_options: The charge_options of this SavingsAccountChargeData.  # noqa: E501
        :type: list[ChargeData]
        """

        self._charge_options = charge_options

    @property
    def charge_time_type(self):
        """Gets the charge_time_type of this SavingsAccountChargeData.  # noqa: E501


        :return: The charge_time_type of this SavingsAccountChargeData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._charge_time_type

    @charge_time_type.setter
    def charge_time_type(self, charge_time_type):
        """Sets the charge_time_type of this SavingsAccountChargeData.


        :param charge_time_type: The charge_time_type of this SavingsAccountChargeData.  # noqa: E501
        :type: EnumOptionData
        """

        self._charge_time_type = charge_time_type

    @property
    def currency(self):
        """Gets the currency of this SavingsAccountChargeData.  # noqa: E501


        :return: The currency of this SavingsAccountChargeData.  # noqa: E501
        :rtype: CurrencyData
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SavingsAccountChargeData.


        :param currency: The currency of this SavingsAccountChargeData.  # noqa: E501
        :type: CurrencyData
        """

        self._currency = currency

    @property
    def due_date(self):
        """Gets the due_date of this SavingsAccountChargeData.  # noqa: E501


        :return: The due_date of this SavingsAccountChargeData.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this SavingsAccountChargeData.


        :param due_date: The due_date of this SavingsAccountChargeData.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def fee_charge(self):
        """Gets the fee_charge of this SavingsAccountChargeData.  # noqa: E501


        :return: The fee_charge of this SavingsAccountChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._fee_charge

    @fee_charge.setter
    def fee_charge(self, fee_charge):
        """Sets the fee_charge of this SavingsAccountChargeData.


        :param fee_charge: The fee_charge of this SavingsAccountChargeData.  # noqa: E501
        :type: bool
        """

        self._fee_charge = fee_charge

    @property
    def fee_interval(self):
        """Gets the fee_interval of this SavingsAccountChargeData.  # noqa: E501


        :return: The fee_interval of this SavingsAccountChargeData.  # noqa: E501
        :rtype: int
        """
        return self._fee_interval

    @fee_interval.setter
    def fee_interval(self, fee_interval):
        """Sets the fee_interval of this SavingsAccountChargeData.


        :param fee_interval: The fee_interval of this SavingsAccountChargeData.  # noqa: E501
        :type: int
        """

        self._fee_interval = fee_interval

    @property
    def fee_on_month_day(self):
        """Gets the fee_on_month_day of this SavingsAccountChargeData.  # noqa: E501


        :return: The fee_on_month_day of this SavingsAccountChargeData.  # noqa: E501
        :rtype: ChargeFeeOnMonthDay
        """
        return self._fee_on_month_day

    @fee_on_month_day.setter
    def fee_on_month_day(self, fee_on_month_day):
        """Sets the fee_on_month_day of this SavingsAccountChargeData.


        :param fee_on_month_day: The fee_on_month_day of this SavingsAccountChargeData.  # noqa: E501
        :type: ChargeFeeOnMonthDay
        """

        self._fee_on_month_day = fee_on_month_day

    @property
    def free_withdrawal_charge_frequency(self):
        """Gets the free_withdrawal_charge_frequency of this SavingsAccountChargeData.  # noqa: E501


        :return: The free_withdrawal_charge_frequency of this SavingsAccountChargeData.  # noqa: E501
        :rtype: int
        """
        return self._free_withdrawal_charge_frequency

    @free_withdrawal_charge_frequency.setter
    def free_withdrawal_charge_frequency(self, free_withdrawal_charge_frequency):
        """Sets the free_withdrawal_charge_frequency of this SavingsAccountChargeData.


        :param free_withdrawal_charge_frequency: The free_withdrawal_charge_frequency of this SavingsAccountChargeData.  # noqa: E501
        :type: int
        """

        self._free_withdrawal_charge_frequency = free_withdrawal_charge_frequency

    @property
    def id(self):
        """Gets the id of this SavingsAccountChargeData.  # noqa: E501


        :return: The id of this SavingsAccountChargeData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavingsAccountChargeData.


        :param id: The id of this SavingsAccountChargeData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def inactivation_date(self):
        """Gets the inactivation_date of this SavingsAccountChargeData.  # noqa: E501


        :return: The inactivation_date of this SavingsAccountChargeData.  # noqa: E501
        :rtype: date
        """
        return self._inactivation_date

    @inactivation_date.setter
    def inactivation_date(self, inactivation_date):
        """Sets the inactivation_date of this SavingsAccountChargeData.


        :param inactivation_date: The inactivation_date of this SavingsAccountChargeData.  # noqa: E501
        :type: date
        """

        self._inactivation_date = inactivation_date

    @property
    def is_active(self):
        """Gets the is_active of this SavingsAccountChargeData.  # noqa: E501


        :return: The is_active of this SavingsAccountChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SavingsAccountChargeData.


        :param is_active: The is_active of this SavingsAccountChargeData.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_free_withdrawal(self):
        """Gets the is_free_withdrawal of this SavingsAccountChargeData.  # noqa: E501


        :return: The is_free_withdrawal of this SavingsAccountChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._is_free_withdrawal

    @is_free_withdrawal.setter
    def is_free_withdrawal(self, is_free_withdrawal):
        """Sets the is_free_withdrawal of this SavingsAccountChargeData.


        :param is_free_withdrawal: The is_free_withdrawal of this SavingsAccountChargeData.  # noqa: E501
        :type: bool
        """

        self._is_free_withdrawal = is_free_withdrawal

    @property
    def name(self):
        """Gets the name of this SavingsAccountChargeData.  # noqa: E501


        :return: The name of this SavingsAccountChargeData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SavingsAccountChargeData.


        :param name: The name of this SavingsAccountChargeData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def penalty(self):
        """Gets the penalty of this SavingsAccountChargeData.  # noqa: E501


        :return: The penalty of this SavingsAccountChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this SavingsAccountChargeData.


        :param penalty: The penalty of this SavingsAccountChargeData.  # noqa: E501
        :type: bool
        """

        self._penalty = penalty

    @property
    def percentage(self):
        """Gets the percentage of this SavingsAccountChargeData.  # noqa: E501


        :return: The percentage of this SavingsAccountChargeData.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this SavingsAccountChargeData.


        :param percentage: The percentage of this SavingsAccountChargeData.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def restart_frequency(self):
        """Gets the restart_frequency of this SavingsAccountChargeData.  # noqa: E501


        :return: The restart_frequency of this SavingsAccountChargeData.  # noqa: E501
        :rtype: int
        """
        return self._restart_frequency

    @restart_frequency.setter
    def restart_frequency(self, restart_frequency):
        """Sets the restart_frequency of this SavingsAccountChargeData.


        :param restart_frequency: The restart_frequency of this SavingsAccountChargeData.  # noqa: E501
        :type: int
        """

        self._restart_frequency = restart_frequency

    @property
    def restart_frequency_enum(self):
        """Gets the restart_frequency_enum of this SavingsAccountChargeData.  # noqa: E501


        :return: The restart_frequency_enum of this SavingsAccountChargeData.  # noqa: E501
        :rtype: int
        """
        return self._restart_frequency_enum

    @restart_frequency_enum.setter
    def restart_frequency_enum(self, restart_frequency_enum):
        """Sets the restart_frequency_enum of this SavingsAccountChargeData.


        :param restart_frequency_enum: The restart_frequency_enum of this SavingsAccountChargeData.  # noqa: E501
        :type: int
        """

        self._restart_frequency_enum = restart_frequency_enum

    @property
    def savings_activation(self):
        """Gets the savings_activation of this SavingsAccountChargeData.  # noqa: E501


        :return: The savings_activation of this SavingsAccountChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._savings_activation

    @savings_activation.setter
    def savings_activation(self, savings_activation):
        """Sets the savings_activation of this SavingsAccountChargeData.


        :param savings_activation: The savings_activation of this SavingsAccountChargeData.  # noqa: E501
        :type: bool
        """

        self._savings_activation = savings_activation

    @property
    def withdrawal_fee(self):
        """Gets the withdrawal_fee of this SavingsAccountChargeData.  # noqa: E501


        :return: The withdrawal_fee of this SavingsAccountChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._withdrawal_fee

    @withdrawal_fee.setter
    def withdrawal_fee(self, withdrawal_fee):
        """Sets the withdrawal_fee of this SavingsAccountChargeData.


        :param withdrawal_fee: The withdrawal_fee of this SavingsAccountChargeData.  # noqa: E501
        :type: bool
        """

        self._withdrawal_fee = withdrawal_fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavingsAccountChargeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavingsAccountChargeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
