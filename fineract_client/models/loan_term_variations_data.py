# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanTermVariationsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_value': 'date',
        'decimal_value': 'float',
        'id': 'int',
        'is_processed': 'bool',
        'is_specific_to_installment': 'bool',
        'term_type': 'LoanTermTypeOptions',
        'term_variation_applicable_from': 'date'
    }

    attribute_map = {
        'date_value': 'dateValue',
        'decimal_value': 'decimalValue',
        'id': 'id',
        'is_processed': 'isProcessed',
        'is_specific_to_installment': 'isSpecificToInstallment',
        'term_type': 'termType',
        'term_variation_applicable_from': 'termVariationApplicableFrom'
    }

    def __init__(self, date_value=None, decimal_value=None, id=None, is_processed=None, is_specific_to_installment=None, term_type=None, term_variation_applicable_from=None):  # noqa: E501
        """LoanTermVariationsData - a model defined in Swagger"""  # noqa: E501
        self._date_value = None
        self._decimal_value = None
        self._id = None
        self._is_processed = None
        self._is_specific_to_installment = None
        self._term_type = None
        self._term_variation_applicable_from = None
        self.discriminator = None
        if date_value is not None:
            self.date_value = date_value
        if decimal_value is not None:
            self.decimal_value = decimal_value
        if id is not None:
            self.id = id
        if is_processed is not None:
            self.is_processed = is_processed
        if is_specific_to_installment is not None:
            self.is_specific_to_installment = is_specific_to_installment
        if term_type is not None:
            self.term_type = term_type
        if term_variation_applicable_from is not None:
            self.term_variation_applicable_from = term_variation_applicable_from

    @property
    def date_value(self):
        """Gets the date_value of this LoanTermVariationsData.  # noqa: E501


        :return: The date_value of this LoanTermVariationsData.  # noqa: E501
        :rtype: date
        """
        return self._date_value

    @date_value.setter
    def date_value(self, date_value):
        """Sets the date_value of this LoanTermVariationsData.


        :param date_value: The date_value of this LoanTermVariationsData.  # noqa: E501
        :type: date
        """

        self._date_value = date_value

    @property
    def decimal_value(self):
        """Gets the decimal_value of this LoanTermVariationsData.  # noqa: E501


        :return: The decimal_value of this LoanTermVariationsData.  # noqa: E501
        :rtype: float
        """
        return self._decimal_value

    @decimal_value.setter
    def decimal_value(self, decimal_value):
        """Sets the decimal_value of this LoanTermVariationsData.


        :param decimal_value: The decimal_value of this LoanTermVariationsData.  # noqa: E501
        :type: float
        """

        self._decimal_value = decimal_value

    @property
    def id(self):
        """Gets the id of this LoanTermVariationsData.  # noqa: E501


        :return: The id of this LoanTermVariationsData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoanTermVariationsData.


        :param id: The id of this LoanTermVariationsData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_processed(self):
        """Gets the is_processed of this LoanTermVariationsData.  # noqa: E501


        :return: The is_processed of this LoanTermVariationsData.  # noqa: E501
        :rtype: bool
        """
        return self._is_processed

    @is_processed.setter
    def is_processed(self, is_processed):
        """Sets the is_processed of this LoanTermVariationsData.


        :param is_processed: The is_processed of this LoanTermVariationsData.  # noqa: E501
        :type: bool
        """

        self._is_processed = is_processed

    @property
    def is_specific_to_installment(self):
        """Gets the is_specific_to_installment of this LoanTermVariationsData.  # noqa: E501


        :return: The is_specific_to_installment of this LoanTermVariationsData.  # noqa: E501
        :rtype: bool
        """
        return self._is_specific_to_installment

    @is_specific_to_installment.setter
    def is_specific_to_installment(self, is_specific_to_installment):
        """Sets the is_specific_to_installment of this LoanTermVariationsData.


        :param is_specific_to_installment: The is_specific_to_installment of this LoanTermVariationsData.  # noqa: E501
        :type: bool
        """

        self._is_specific_to_installment = is_specific_to_installment

    @property
    def term_type(self):
        """Gets the term_type of this LoanTermVariationsData.  # noqa: E501


        :return: The term_type of this LoanTermVariationsData.  # noqa: E501
        :rtype: LoanTermTypeOptions
        """
        return self._term_type

    @term_type.setter
    def term_type(self, term_type):
        """Sets the term_type of this LoanTermVariationsData.


        :param term_type: The term_type of this LoanTermVariationsData.  # noqa: E501
        :type: LoanTermTypeOptions
        """

        self._term_type = term_type

    @property
    def term_variation_applicable_from(self):
        """Gets the term_variation_applicable_from of this LoanTermVariationsData.  # noqa: E501


        :return: The term_variation_applicable_from of this LoanTermVariationsData.  # noqa: E501
        :rtype: date
        """
        return self._term_variation_applicable_from

    @term_variation_applicable_from.setter
    def term_variation_applicable_from(self, term_variation_applicable_from):
        """Sets the term_variation_applicable_from of this LoanTermVariationsData.


        :param term_variation_applicable_from: The term_variation_applicable_from of this LoanTermVariationsData.  # noqa: E501
        :type: date
        """

        self._term_variation_applicable_from = term_variation_applicable_from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanTermVariationsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanTermVariationsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
