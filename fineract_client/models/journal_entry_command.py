# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JournalEntryCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'accounting_rule_id': 'int',
        'amount': 'float',
        'bank_number': 'str',
        'check_number': 'str',
        'comments': 'str',
        'credits': 'list[SingleDebitOrCreditEntryCommand]',
        'currency_code': 'str',
        'debits': 'list[SingleDebitOrCreditEntryCommand]',
        'office_id': 'int',
        'payment_type_id': 'int',
        'receipt_number': 'str',
        'reference_number': 'str',
        'routing_code': 'str',
        'transaction_date': 'date'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'accounting_rule_id': 'accountingRuleId',
        'amount': 'amount',
        'bank_number': 'bankNumber',
        'check_number': 'checkNumber',
        'comments': 'comments',
        'credits': 'credits',
        'currency_code': 'currencyCode',
        'debits': 'debits',
        'office_id': 'officeId',
        'payment_type_id': 'paymentTypeId',
        'receipt_number': 'receiptNumber',
        'reference_number': 'referenceNumber',
        'routing_code': 'routingCode',
        'transaction_date': 'transactionDate'
    }

    def __init__(self, account_number=None, accounting_rule_id=None, amount=None, bank_number=None, check_number=None, comments=None, credits=None, currency_code=None, debits=None, office_id=None, payment_type_id=None, receipt_number=None, reference_number=None, routing_code=None, transaction_date=None):  # noqa: E501
        """JournalEntryCommand - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._accounting_rule_id = None
        self._amount = None
        self._bank_number = None
        self._check_number = None
        self._comments = None
        self._credits = None
        self._currency_code = None
        self._debits = None
        self._office_id = None
        self._payment_type_id = None
        self._receipt_number = None
        self._reference_number = None
        self._routing_code = None
        self._transaction_date = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if accounting_rule_id is not None:
            self.accounting_rule_id = accounting_rule_id
        if amount is not None:
            self.amount = amount
        if bank_number is not None:
            self.bank_number = bank_number
        if check_number is not None:
            self.check_number = check_number
        if comments is not None:
            self.comments = comments
        if credits is not None:
            self.credits = credits
        if currency_code is not None:
            self.currency_code = currency_code
        if debits is not None:
            self.debits = debits
        if office_id is not None:
            self.office_id = office_id
        if payment_type_id is not None:
            self.payment_type_id = payment_type_id
        if receipt_number is not None:
            self.receipt_number = receipt_number
        if reference_number is not None:
            self.reference_number = reference_number
        if routing_code is not None:
            self.routing_code = routing_code
        if transaction_date is not None:
            self.transaction_date = transaction_date

    @property
    def account_number(self):
        """Gets the account_number of this JournalEntryCommand.  # noqa: E501


        :return: The account_number of this JournalEntryCommand.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this JournalEntryCommand.


        :param account_number: The account_number of this JournalEntryCommand.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def accounting_rule_id(self):
        """Gets the accounting_rule_id of this JournalEntryCommand.  # noqa: E501


        :return: The accounting_rule_id of this JournalEntryCommand.  # noqa: E501
        :rtype: int
        """
        return self._accounting_rule_id

    @accounting_rule_id.setter
    def accounting_rule_id(self, accounting_rule_id):
        """Sets the accounting_rule_id of this JournalEntryCommand.


        :param accounting_rule_id: The accounting_rule_id of this JournalEntryCommand.  # noqa: E501
        :type: int
        """

        self._accounting_rule_id = accounting_rule_id

    @property
    def amount(self):
        """Gets the amount of this JournalEntryCommand.  # noqa: E501


        :return: The amount of this JournalEntryCommand.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this JournalEntryCommand.


        :param amount: The amount of this JournalEntryCommand.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def bank_number(self):
        """Gets the bank_number of this JournalEntryCommand.  # noqa: E501


        :return: The bank_number of this JournalEntryCommand.  # noqa: E501
        :rtype: str
        """
        return self._bank_number

    @bank_number.setter
    def bank_number(self, bank_number):
        """Sets the bank_number of this JournalEntryCommand.


        :param bank_number: The bank_number of this JournalEntryCommand.  # noqa: E501
        :type: str
        """

        self._bank_number = bank_number

    @property
    def check_number(self):
        """Gets the check_number of this JournalEntryCommand.  # noqa: E501


        :return: The check_number of this JournalEntryCommand.  # noqa: E501
        :rtype: str
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this JournalEntryCommand.


        :param check_number: The check_number of this JournalEntryCommand.  # noqa: E501
        :type: str
        """

        self._check_number = check_number

    @property
    def comments(self):
        """Gets the comments of this JournalEntryCommand.  # noqa: E501


        :return: The comments of this JournalEntryCommand.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this JournalEntryCommand.


        :param comments: The comments of this JournalEntryCommand.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def credits(self):
        """Gets the credits of this JournalEntryCommand.  # noqa: E501


        :return: The credits of this JournalEntryCommand.  # noqa: E501
        :rtype: list[SingleDebitOrCreditEntryCommand]
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this JournalEntryCommand.


        :param credits: The credits of this JournalEntryCommand.  # noqa: E501
        :type: list[SingleDebitOrCreditEntryCommand]
        """

        self._credits = credits

    @property
    def currency_code(self):
        """Gets the currency_code of this JournalEntryCommand.  # noqa: E501


        :return: The currency_code of this JournalEntryCommand.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this JournalEntryCommand.


        :param currency_code: The currency_code of this JournalEntryCommand.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def debits(self):
        """Gets the debits of this JournalEntryCommand.  # noqa: E501


        :return: The debits of this JournalEntryCommand.  # noqa: E501
        :rtype: list[SingleDebitOrCreditEntryCommand]
        """
        return self._debits

    @debits.setter
    def debits(self, debits):
        """Sets the debits of this JournalEntryCommand.


        :param debits: The debits of this JournalEntryCommand.  # noqa: E501
        :type: list[SingleDebitOrCreditEntryCommand]
        """

        self._debits = debits

    @property
    def office_id(self):
        """Gets the office_id of this JournalEntryCommand.  # noqa: E501


        :return: The office_id of this JournalEntryCommand.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this JournalEntryCommand.


        :param office_id: The office_id of this JournalEntryCommand.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def payment_type_id(self):
        """Gets the payment_type_id of this JournalEntryCommand.  # noqa: E501


        :return: The payment_type_id of this JournalEntryCommand.  # noqa: E501
        :rtype: int
        """
        return self._payment_type_id

    @payment_type_id.setter
    def payment_type_id(self, payment_type_id):
        """Sets the payment_type_id of this JournalEntryCommand.


        :param payment_type_id: The payment_type_id of this JournalEntryCommand.  # noqa: E501
        :type: int
        """

        self._payment_type_id = payment_type_id

    @property
    def receipt_number(self):
        """Gets the receipt_number of this JournalEntryCommand.  # noqa: E501


        :return: The receipt_number of this JournalEntryCommand.  # noqa: E501
        :rtype: str
        """
        return self._receipt_number

    @receipt_number.setter
    def receipt_number(self, receipt_number):
        """Sets the receipt_number of this JournalEntryCommand.


        :param receipt_number: The receipt_number of this JournalEntryCommand.  # noqa: E501
        :type: str
        """

        self._receipt_number = receipt_number

    @property
    def reference_number(self):
        """Gets the reference_number of this JournalEntryCommand.  # noqa: E501


        :return: The reference_number of this JournalEntryCommand.  # noqa: E501
        :rtype: str
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this JournalEntryCommand.


        :param reference_number: The reference_number of this JournalEntryCommand.  # noqa: E501
        :type: str
        """

        self._reference_number = reference_number

    @property
    def routing_code(self):
        """Gets the routing_code of this JournalEntryCommand.  # noqa: E501


        :return: The routing_code of this JournalEntryCommand.  # noqa: E501
        :rtype: str
        """
        return self._routing_code

    @routing_code.setter
    def routing_code(self, routing_code):
        """Sets the routing_code of this JournalEntryCommand.


        :param routing_code: The routing_code of this JournalEntryCommand.  # noqa: E501
        :type: str
        """

        self._routing_code = routing_code

    @property
    def transaction_date(self):
        """Gets the transaction_date of this JournalEntryCommand.  # noqa: E501


        :return: The transaction_date of this JournalEntryCommand.  # noqa: E501
        :rtype: date
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this JournalEntryCommand.


        :param transaction_date: The transaction_date of this JournalEntryCommand.  # noqa: E501
        :type: date
        """

        self._transaction_date = transaction_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JournalEntryCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JournalEntryCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
