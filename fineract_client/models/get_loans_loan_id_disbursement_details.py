# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansLoanIdDisbursementDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_disbursement_date': 'date',
        'approved_principal': 'float',
        'charge_amount': 'float',
        'date_format': 'str',
        'expected_disbursement_date': 'date',
        'id': 'int',
        'loan_charge_id': 'str',
        'locale': 'str',
        'net_disbursal_amount': 'float',
        'note': 'str',
        'principal': 'float',
        'waived_charge_amount': 'float'
    }

    attribute_map = {
        'actual_disbursement_date': 'actualDisbursementDate',
        'approved_principal': 'approvedPrincipal',
        'charge_amount': 'chargeAmount',
        'date_format': 'dateFormat',
        'expected_disbursement_date': 'expectedDisbursementDate',
        'id': 'id',
        'loan_charge_id': 'loanChargeId',
        'locale': 'locale',
        'net_disbursal_amount': 'netDisbursalAmount',
        'note': 'note',
        'principal': 'principal',
        'waived_charge_amount': 'waivedChargeAmount'
    }

    def __init__(self, actual_disbursement_date=None, approved_principal=None, charge_amount=None, date_format=None, expected_disbursement_date=None, id=None, loan_charge_id=None, locale=None, net_disbursal_amount=None, note=None, principal=None, waived_charge_amount=None):  # noqa: E501
        """GetLoansLoanIdDisbursementDetails - a model defined in Swagger"""  # noqa: E501
        self._actual_disbursement_date = None
        self._approved_principal = None
        self._charge_amount = None
        self._date_format = None
        self._expected_disbursement_date = None
        self._id = None
        self._loan_charge_id = None
        self._locale = None
        self._net_disbursal_amount = None
        self._note = None
        self._principal = None
        self._waived_charge_amount = None
        self.discriminator = None
        if actual_disbursement_date is not None:
            self.actual_disbursement_date = actual_disbursement_date
        if approved_principal is not None:
            self.approved_principal = approved_principal
        if charge_amount is not None:
            self.charge_amount = charge_amount
        if date_format is not None:
            self.date_format = date_format
        if expected_disbursement_date is not None:
            self.expected_disbursement_date = expected_disbursement_date
        if id is not None:
            self.id = id
        if loan_charge_id is not None:
            self.loan_charge_id = loan_charge_id
        if locale is not None:
            self.locale = locale
        if net_disbursal_amount is not None:
            self.net_disbursal_amount = net_disbursal_amount
        if note is not None:
            self.note = note
        if principal is not None:
            self.principal = principal
        if waived_charge_amount is not None:
            self.waived_charge_amount = waived_charge_amount

    @property
    def actual_disbursement_date(self):
        """Gets the actual_disbursement_date of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The actual_disbursement_date of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: date
        """
        return self._actual_disbursement_date

    @actual_disbursement_date.setter
    def actual_disbursement_date(self, actual_disbursement_date):
        """Sets the actual_disbursement_date of this GetLoansLoanIdDisbursementDetails.


        :param actual_disbursement_date: The actual_disbursement_date of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: date
        """

        self._actual_disbursement_date = actual_disbursement_date

    @property
    def approved_principal(self):
        """Gets the approved_principal of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The approved_principal of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: float
        """
        return self._approved_principal

    @approved_principal.setter
    def approved_principal(self, approved_principal):
        """Sets the approved_principal of this GetLoansLoanIdDisbursementDetails.


        :param approved_principal: The approved_principal of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: float
        """

        self._approved_principal = approved_principal

    @property
    def charge_amount(self):
        """Gets the charge_amount of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The charge_amount of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: float
        """
        return self._charge_amount

    @charge_amount.setter
    def charge_amount(self, charge_amount):
        """Sets the charge_amount of this GetLoansLoanIdDisbursementDetails.


        :param charge_amount: The charge_amount of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: float
        """

        self._charge_amount = charge_amount

    @property
    def date_format(self):
        """Gets the date_format of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The date_format of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this GetLoansLoanIdDisbursementDetails.


        :param date_format: The date_format of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def expected_disbursement_date(self):
        """Gets the expected_disbursement_date of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The expected_disbursement_date of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: date
        """
        return self._expected_disbursement_date

    @expected_disbursement_date.setter
    def expected_disbursement_date(self, expected_disbursement_date):
        """Sets the expected_disbursement_date of this GetLoansLoanIdDisbursementDetails.


        :param expected_disbursement_date: The expected_disbursement_date of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: date
        """

        self._expected_disbursement_date = expected_disbursement_date

    @property
    def id(self):
        """Gets the id of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The id of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetLoansLoanIdDisbursementDetails.


        :param id: The id of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def loan_charge_id(self):
        """Gets the loan_charge_id of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The loan_charge_id of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: str
        """
        return self._loan_charge_id

    @loan_charge_id.setter
    def loan_charge_id(self, loan_charge_id):
        """Sets the loan_charge_id of this GetLoansLoanIdDisbursementDetails.


        :param loan_charge_id: The loan_charge_id of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: str
        """

        self._loan_charge_id = loan_charge_id

    @property
    def locale(self):
        """Gets the locale of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The locale of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this GetLoansLoanIdDisbursementDetails.


        :param locale: The locale of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def net_disbursal_amount(self):
        """Gets the net_disbursal_amount of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The net_disbursal_amount of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: float
        """
        return self._net_disbursal_amount

    @net_disbursal_amount.setter
    def net_disbursal_amount(self, net_disbursal_amount):
        """Sets the net_disbursal_amount of this GetLoansLoanIdDisbursementDetails.


        :param net_disbursal_amount: The net_disbursal_amount of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: float
        """

        self._net_disbursal_amount = net_disbursal_amount

    @property
    def note(self):
        """Gets the note of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The note of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this GetLoansLoanIdDisbursementDetails.


        :param note: The note of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def principal(self):
        """Gets the principal of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The principal of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: float
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this GetLoansLoanIdDisbursementDetails.


        :param principal: The principal of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: float
        """

        self._principal = principal

    @property
    def waived_charge_amount(self):
        """Gets the waived_charge_amount of this GetLoansLoanIdDisbursementDetails.  # noqa: E501


        :return: The waived_charge_amount of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :rtype: float
        """
        return self._waived_charge_amount

    @waived_charge_amount.setter
    def waived_charge_amount(self, waived_charge_amount):
        """Sets the waived_charge_amount of this GetLoansLoanIdDisbursementDetails.


        :param waived_charge_amount: The waived_charge_amount of this GetLoansLoanIdDisbursementDetails.  # noqa: E501
        :type: float
        """

        self._waived_charge_amount = waived_charge_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansLoanIdDisbursementDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansLoanIdDisbursementDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
