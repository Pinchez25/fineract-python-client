# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Field(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_name': 'str',
        'field_type': 'str',
        'field_value': 'str',
        'optional': 'bool',
        'placeholder': 'str'
    }

    attribute_map = {
        'field_name': 'fieldName',
        'field_type': 'fieldType',
        'field_value': 'fieldValue',
        'optional': 'optional',
        'placeholder': 'placeholder'
    }

    def __init__(self, field_name=None, field_type=None, field_value=None, optional=None, placeholder=None):  # noqa: E501
        """Field - a model defined in Swagger"""  # noqa: E501
        self._field_name = None
        self._field_type = None
        self._field_value = None
        self._optional = None
        self._placeholder = None
        self.discriminator = None
        if field_name is not None:
            self.field_name = field_name
        if field_type is not None:
            self.field_type = field_type
        if field_value is not None:
            self.field_value = field_value
        if optional is not None:
            self.optional = optional
        if placeholder is not None:
            self.placeholder = placeholder

    @property
    def field_name(self):
        """Gets the field_name of this Field.  # noqa: E501


        :return: The field_name of this Field.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this Field.


        :param field_name: The field_name of this Field.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def field_type(self):
        """Gets the field_type of this Field.  # noqa: E501


        :return: The field_type of this Field.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this Field.


        :param field_type: The field_type of this Field.  # noqa: E501
        :type: str
        """

        self._field_type = field_type

    @property
    def field_value(self):
        """Gets the field_value of this Field.  # noqa: E501


        :return: The field_value of this Field.  # noqa: E501
        :rtype: str
        """
        return self._field_value

    @field_value.setter
    def field_value(self, field_value):
        """Sets the field_value of this Field.


        :param field_value: The field_value of this Field.  # noqa: E501
        :type: str
        """

        self._field_value = field_value

    @property
    def optional(self):
        """Gets the optional of this Field.  # noqa: E501


        :return: The optional of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this Field.


        :param optional: The optional of this Field.  # noqa: E501
        :type: bool
        """

        self._optional = optional

    @property
    def placeholder(self):
        """Gets the placeholder of this Field.  # noqa: E501


        :return: The placeholder of this Field.  # noqa: E501
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this Field.


        :param placeholder: The placeholder of this Field.  # noqa: E501
        :type: str
        """

        self._placeholder = placeholder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Field, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Field):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
