# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansLoanIdLoanChargeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'amount_or_percentage': 'float',
        'amount_outstanding': 'float',
        'amount_paid': 'float',
        'amount_percentage_applied_to': 'float',
        'amount_waived': 'float',
        'amount_written_off': 'float',
        'charge_calculation_type': 'GetLoansLoanIdEnumOptionData',
        'charge_id': 'int',
        'charge_payable': 'bool',
        'charge_payment_mode': 'GetLoansLoanIdEnumOptionData',
        'charge_time_type': 'GetLoansLoanIdEnumOptionData',
        'currency': 'GetLoansLoanIdCurrency',
        'due_date': 'date',
        'id': 'int',
        'installment_charge_data': 'list[GetLoansLoanIdLoanInstallmentChargeData]',
        'loan_id': 'int',
        'max_cap': 'float',
        'min_cap': 'float',
        'name': 'str',
        'paid': 'bool',
        'penalty': 'bool',
        'percentage': 'float',
        'waived': 'bool'
    }

    attribute_map = {
        'amount': 'amount',
        'amount_or_percentage': 'amountOrPercentage',
        'amount_outstanding': 'amountOutstanding',
        'amount_paid': 'amountPaid',
        'amount_percentage_applied_to': 'amountPercentageAppliedTo',
        'amount_waived': 'amountWaived',
        'amount_written_off': 'amountWrittenOff',
        'charge_calculation_type': 'chargeCalculationType',
        'charge_id': 'chargeId',
        'charge_payable': 'chargePayable',
        'charge_payment_mode': 'chargePaymentMode',
        'charge_time_type': 'chargeTimeType',
        'currency': 'currency',
        'due_date': 'dueDate',
        'id': 'id',
        'installment_charge_data': 'installmentChargeData',
        'loan_id': 'loanId',
        'max_cap': 'maxCap',
        'min_cap': 'minCap',
        'name': 'name',
        'paid': 'paid',
        'penalty': 'penalty',
        'percentage': 'percentage',
        'waived': 'waived'
    }

    def __init__(self, amount=None, amount_or_percentage=None, amount_outstanding=None, amount_paid=None, amount_percentage_applied_to=None, amount_waived=None, amount_written_off=None, charge_calculation_type=None, charge_id=None, charge_payable=None, charge_payment_mode=None, charge_time_type=None, currency=None, due_date=None, id=None, installment_charge_data=None, loan_id=None, max_cap=None, min_cap=None, name=None, paid=None, penalty=None, percentage=None, waived=None):  # noqa: E501
        """GetLoansLoanIdLoanChargeData - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._amount_or_percentage = None
        self._amount_outstanding = None
        self._amount_paid = None
        self._amount_percentage_applied_to = None
        self._amount_waived = None
        self._amount_written_off = None
        self._charge_calculation_type = None
        self._charge_id = None
        self._charge_payable = None
        self._charge_payment_mode = None
        self._charge_time_type = None
        self._currency = None
        self._due_date = None
        self._id = None
        self._installment_charge_data = None
        self._loan_id = None
        self._max_cap = None
        self._min_cap = None
        self._name = None
        self._paid = None
        self._penalty = None
        self._percentage = None
        self._waived = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if amount_or_percentage is not None:
            self.amount_or_percentage = amount_or_percentage
        if amount_outstanding is not None:
            self.amount_outstanding = amount_outstanding
        if amount_paid is not None:
            self.amount_paid = amount_paid
        if amount_percentage_applied_to is not None:
            self.amount_percentage_applied_to = amount_percentage_applied_to
        if amount_waived is not None:
            self.amount_waived = amount_waived
        if amount_written_off is not None:
            self.amount_written_off = amount_written_off
        if charge_calculation_type is not None:
            self.charge_calculation_type = charge_calculation_type
        if charge_id is not None:
            self.charge_id = charge_id
        if charge_payable is not None:
            self.charge_payable = charge_payable
        if charge_payment_mode is not None:
            self.charge_payment_mode = charge_payment_mode
        if charge_time_type is not None:
            self.charge_time_type = charge_time_type
        if currency is not None:
            self.currency = currency
        if due_date is not None:
            self.due_date = due_date
        if id is not None:
            self.id = id
        if installment_charge_data is not None:
            self.installment_charge_data = installment_charge_data
        if loan_id is not None:
            self.loan_id = loan_id
        if max_cap is not None:
            self.max_cap = max_cap
        if min_cap is not None:
            self.min_cap = min_cap
        if name is not None:
            self.name = name
        if paid is not None:
            self.paid = paid
        if penalty is not None:
            self.penalty = penalty
        if percentage is not None:
            self.percentage = percentage
        if waived is not None:
            self.waived = waived

    @property
    def amount(self):
        """Gets the amount of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The amount of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetLoansLoanIdLoanChargeData.


        :param amount: The amount of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_or_percentage(self):
        """Gets the amount_or_percentage of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The amount_or_percentage of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_or_percentage

    @amount_or_percentage.setter
    def amount_or_percentage(self, amount_or_percentage):
        """Sets the amount_or_percentage of this GetLoansLoanIdLoanChargeData.


        :param amount_or_percentage: The amount_or_percentage of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: float
        """

        self._amount_or_percentage = amount_or_percentage

    @property
    def amount_outstanding(self):
        """Gets the amount_outstanding of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The amount_outstanding of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_outstanding

    @amount_outstanding.setter
    def amount_outstanding(self, amount_outstanding):
        """Sets the amount_outstanding of this GetLoansLoanIdLoanChargeData.


        :param amount_outstanding: The amount_outstanding of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: float
        """

        self._amount_outstanding = amount_outstanding

    @property
    def amount_paid(self):
        """Gets the amount_paid of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The amount_paid of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this GetLoansLoanIdLoanChargeData.


        :param amount_paid: The amount_paid of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: float
        """

        self._amount_paid = amount_paid

    @property
    def amount_percentage_applied_to(self):
        """Gets the amount_percentage_applied_to of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The amount_percentage_applied_to of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_percentage_applied_to

    @amount_percentage_applied_to.setter
    def amount_percentage_applied_to(self, amount_percentage_applied_to):
        """Sets the amount_percentage_applied_to of this GetLoansLoanIdLoanChargeData.


        :param amount_percentage_applied_to: The amount_percentage_applied_to of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: float
        """

        self._amount_percentage_applied_to = amount_percentage_applied_to

    @property
    def amount_waived(self):
        """Gets the amount_waived of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The amount_waived of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_waived

    @amount_waived.setter
    def amount_waived(self, amount_waived):
        """Sets the amount_waived of this GetLoansLoanIdLoanChargeData.


        :param amount_waived: The amount_waived of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: float
        """

        self._amount_waived = amount_waived

    @property
    def amount_written_off(self):
        """Gets the amount_written_off of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The amount_written_off of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_written_off

    @amount_written_off.setter
    def amount_written_off(self, amount_written_off):
        """Sets the amount_written_off of this GetLoansLoanIdLoanChargeData.


        :param amount_written_off: The amount_written_off of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: float
        """

        self._amount_written_off = amount_written_off

    @property
    def charge_calculation_type(self):
        """Gets the charge_calculation_type of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The charge_calculation_type of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: GetLoansLoanIdEnumOptionData
        """
        return self._charge_calculation_type

    @charge_calculation_type.setter
    def charge_calculation_type(self, charge_calculation_type):
        """Sets the charge_calculation_type of this GetLoansLoanIdLoanChargeData.


        :param charge_calculation_type: The charge_calculation_type of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: GetLoansLoanIdEnumOptionData
        """

        self._charge_calculation_type = charge_calculation_type

    @property
    def charge_id(self):
        """Gets the charge_id of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The charge_id of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: int
        """
        return self._charge_id

    @charge_id.setter
    def charge_id(self, charge_id):
        """Sets the charge_id of this GetLoansLoanIdLoanChargeData.


        :param charge_id: The charge_id of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: int
        """

        self._charge_id = charge_id

    @property
    def charge_payable(self):
        """Gets the charge_payable of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The charge_payable of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._charge_payable

    @charge_payable.setter
    def charge_payable(self, charge_payable):
        """Sets the charge_payable of this GetLoansLoanIdLoanChargeData.


        :param charge_payable: The charge_payable of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: bool
        """

        self._charge_payable = charge_payable

    @property
    def charge_payment_mode(self):
        """Gets the charge_payment_mode of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The charge_payment_mode of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: GetLoansLoanIdEnumOptionData
        """
        return self._charge_payment_mode

    @charge_payment_mode.setter
    def charge_payment_mode(self, charge_payment_mode):
        """Sets the charge_payment_mode of this GetLoansLoanIdLoanChargeData.


        :param charge_payment_mode: The charge_payment_mode of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: GetLoansLoanIdEnumOptionData
        """

        self._charge_payment_mode = charge_payment_mode

    @property
    def charge_time_type(self):
        """Gets the charge_time_type of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The charge_time_type of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: GetLoansLoanIdEnumOptionData
        """
        return self._charge_time_type

    @charge_time_type.setter
    def charge_time_type(self, charge_time_type):
        """Sets the charge_time_type of this GetLoansLoanIdLoanChargeData.


        :param charge_time_type: The charge_time_type of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: GetLoansLoanIdEnumOptionData
        """

        self._charge_time_type = charge_time_type

    @property
    def currency(self):
        """Gets the currency of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The currency of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: GetLoansLoanIdCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GetLoansLoanIdLoanChargeData.


        :param currency: The currency of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: GetLoansLoanIdCurrency
        """

        self._currency = currency

    @property
    def due_date(self):
        """Gets the due_date of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The due_date of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this GetLoansLoanIdLoanChargeData.


        :param due_date: The due_date of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def id(self):
        """Gets the id of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The id of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetLoansLoanIdLoanChargeData.


        :param id: The id of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def installment_charge_data(self):
        """Gets the installment_charge_data of this GetLoansLoanIdLoanChargeData.  # noqa: E501

        List of GetLoansLoanIdLoanInstallmentChargeData  # noqa: E501

        :return: The installment_charge_data of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: list[GetLoansLoanIdLoanInstallmentChargeData]
        """
        return self._installment_charge_data

    @installment_charge_data.setter
    def installment_charge_data(self, installment_charge_data):
        """Sets the installment_charge_data of this GetLoansLoanIdLoanChargeData.

        List of GetLoansLoanIdLoanInstallmentChargeData  # noqa: E501

        :param installment_charge_data: The installment_charge_data of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: list[GetLoansLoanIdLoanInstallmentChargeData]
        """

        self._installment_charge_data = installment_charge_data

    @property
    def loan_id(self):
        """Gets the loan_id of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The loan_id of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: int
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """Sets the loan_id of this GetLoansLoanIdLoanChargeData.


        :param loan_id: The loan_id of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: int
        """

        self._loan_id = loan_id

    @property
    def max_cap(self):
        """Gets the max_cap of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The max_cap of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: float
        """
        return self._max_cap

    @max_cap.setter
    def max_cap(self, max_cap):
        """Sets the max_cap of this GetLoansLoanIdLoanChargeData.


        :param max_cap: The max_cap of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: float
        """

        self._max_cap = max_cap

    @property
    def min_cap(self):
        """Gets the min_cap of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The min_cap of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: float
        """
        return self._min_cap

    @min_cap.setter
    def min_cap(self, min_cap):
        """Sets the min_cap of this GetLoansLoanIdLoanChargeData.


        :param min_cap: The min_cap of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: float
        """

        self._min_cap = min_cap

    @property
    def name(self):
        """Gets the name of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The name of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetLoansLoanIdLoanChargeData.


        :param name: The name of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def paid(self):
        """Gets the paid of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The paid of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this GetLoansLoanIdLoanChargeData.


        :param paid: The paid of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: bool
        """

        self._paid = paid

    @property
    def penalty(self):
        """Gets the penalty of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The penalty of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this GetLoansLoanIdLoanChargeData.


        :param penalty: The penalty of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: bool
        """

        self._penalty = penalty

    @property
    def percentage(self):
        """Gets the percentage of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The percentage of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this GetLoansLoanIdLoanChargeData.


        :param percentage: The percentage of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def waived(self):
        """Gets the waived of this GetLoansLoanIdLoanChargeData.  # noqa: E501


        :return: The waived of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :rtype: bool
        """
        return self._waived

    @waived.setter
    def waived(self, waived):
        """Sets the waived of this GetLoansLoanIdLoanChargeData.


        :param waived: The waived of this GetLoansLoanIdLoanChargeData.  # noqa: E501
        :type: bool
        """

        self._waived = waived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansLoanIdLoanChargeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansLoanIdLoanChargeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
