# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PutSelfLoansLoanIdRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amortization_type': 'int',
        'date_format': 'str',
        'expected_disbursement_date': 'str',
        'interest_calculation_period_type': 'int',
        'interest_rate_per_period': 'int',
        'interest_type': 'int',
        'loan_term_frequency': 'int',
        'loan_term_frequency_type': 'int',
        'locale': 'str',
        'number_of_repayments': 'int',
        'principal': 'int',
        'product_id': 'int',
        'repayment_every': 'int',
        'repayment_frequency_type': 'int',
        'transaction_processing_strategy_code': 'str'
    }

    attribute_map = {
        'amortization_type': 'amortizationType',
        'date_format': 'dateFormat',
        'expected_disbursement_date': 'expectedDisbursementDate',
        'interest_calculation_period_type': 'interestCalculationPeriodType',
        'interest_rate_per_period': 'interestRatePerPeriod',
        'interest_type': 'interestType',
        'loan_term_frequency': 'loanTermFrequency',
        'loan_term_frequency_type': 'loanTermFrequencyType',
        'locale': 'locale',
        'number_of_repayments': 'numberOfRepayments',
        'principal': 'principal',
        'product_id': 'productId',
        'repayment_every': 'repaymentEvery',
        'repayment_frequency_type': 'repaymentFrequencyType',
        'transaction_processing_strategy_code': 'transactionProcessingStrategyCode'
    }

    def __init__(self, amortization_type=None, date_format=None, expected_disbursement_date=None, interest_calculation_period_type=None, interest_rate_per_period=None, interest_type=None, loan_term_frequency=None, loan_term_frequency_type=None, locale=None, number_of_repayments=None, principal=None, product_id=None, repayment_every=None, repayment_frequency_type=None, transaction_processing_strategy_code=None):  # noqa: E501
        """PutSelfLoansLoanIdRequest - a model defined in Swagger"""  # noqa: E501
        self._amortization_type = None
        self._date_format = None
        self._expected_disbursement_date = None
        self._interest_calculation_period_type = None
        self._interest_rate_per_period = None
        self._interest_type = None
        self._loan_term_frequency = None
        self._loan_term_frequency_type = None
        self._locale = None
        self._number_of_repayments = None
        self._principal = None
        self._product_id = None
        self._repayment_every = None
        self._repayment_frequency_type = None
        self._transaction_processing_strategy_code = None
        self.discriminator = None
        if amortization_type is not None:
            self.amortization_type = amortization_type
        if date_format is not None:
            self.date_format = date_format
        if expected_disbursement_date is not None:
            self.expected_disbursement_date = expected_disbursement_date
        if interest_calculation_period_type is not None:
            self.interest_calculation_period_type = interest_calculation_period_type
        if interest_rate_per_period is not None:
            self.interest_rate_per_period = interest_rate_per_period
        if interest_type is not None:
            self.interest_type = interest_type
        if loan_term_frequency is not None:
            self.loan_term_frequency = loan_term_frequency
        if loan_term_frequency_type is not None:
            self.loan_term_frequency_type = loan_term_frequency_type
        if locale is not None:
            self.locale = locale
        if number_of_repayments is not None:
            self.number_of_repayments = number_of_repayments
        if principal is not None:
            self.principal = principal
        if product_id is not None:
            self.product_id = product_id
        if repayment_every is not None:
            self.repayment_every = repayment_every
        if repayment_frequency_type is not None:
            self.repayment_frequency_type = repayment_frequency_type
        if transaction_processing_strategy_code is not None:
            self.transaction_processing_strategy_code = transaction_processing_strategy_code

    @property
    def amortization_type(self):
        """Gets the amortization_type of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The amortization_type of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._amortization_type

    @amortization_type.setter
    def amortization_type(self, amortization_type):
        """Sets the amortization_type of this PutSelfLoansLoanIdRequest.


        :param amortization_type: The amortization_type of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._amortization_type = amortization_type

    @property
    def date_format(self):
        """Gets the date_format of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The date_format of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this PutSelfLoansLoanIdRequest.


        :param date_format: The date_format of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def expected_disbursement_date(self):
        """Gets the expected_disbursement_date of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The expected_disbursement_date of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._expected_disbursement_date

    @expected_disbursement_date.setter
    def expected_disbursement_date(self, expected_disbursement_date):
        """Sets the expected_disbursement_date of this PutSelfLoansLoanIdRequest.


        :param expected_disbursement_date: The expected_disbursement_date of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._expected_disbursement_date = expected_disbursement_date

    @property
    def interest_calculation_period_type(self):
        """Gets the interest_calculation_period_type of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The interest_calculation_period_type of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._interest_calculation_period_type

    @interest_calculation_period_type.setter
    def interest_calculation_period_type(self, interest_calculation_period_type):
        """Sets the interest_calculation_period_type of this PutSelfLoansLoanIdRequest.


        :param interest_calculation_period_type: The interest_calculation_period_type of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._interest_calculation_period_type = interest_calculation_period_type

    @property
    def interest_rate_per_period(self):
        """Gets the interest_rate_per_period of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The interest_rate_per_period of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._interest_rate_per_period

    @interest_rate_per_period.setter
    def interest_rate_per_period(self, interest_rate_per_period):
        """Sets the interest_rate_per_period of this PutSelfLoansLoanIdRequest.


        :param interest_rate_per_period: The interest_rate_per_period of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._interest_rate_per_period = interest_rate_per_period

    @property
    def interest_type(self):
        """Gets the interest_type of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The interest_type of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._interest_type

    @interest_type.setter
    def interest_type(self, interest_type):
        """Sets the interest_type of this PutSelfLoansLoanIdRequest.


        :param interest_type: The interest_type of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._interest_type = interest_type

    @property
    def loan_term_frequency(self):
        """Gets the loan_term_frequency of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The loan_term_frequency of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._loan_term_frequency

    @loan_term_frequency.setter
    def loan_term_frequency(self, loan_term_frequency):
        """Sets the loan_term_frequency of this PutSelfLoansLoanIdRequest.


        :param loan_term_frequency: The loan_term_frequency of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._loan_term_frequency = loan_term_frequency

    @property
    def loan_term_frequency_type(self):
        """Gets the loan_term_frequency_type of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The loan_term_frequency_type of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._loan_term_frequency_type

    @loan_term_frequency_type.setter
    def loan_term_frequency_type(self, loan_term_frequency_type):
        """Sets the loan_term_frequency_type of this PutSelfLoansLoanIdRequest.


        :param loan_term_frequency_type: The loan_term_frequency_type of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._loan_term_frequency_type = loan_term_frequency_type

    @property
    def locale(self):
        """Gets the locale of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The locale of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PutSelfLoansLoanIdRequest.


        :param locale: The locale of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def number_of_repayments(self):
        """Gets the number_of_repayments of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The number_of_repayments of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_repayments

    @number_of_repayments.setter
    def number_of_repayments(self, number_of_repayments):
        """Sets the number_of_repayments of this PutSelfLoansLoanIdRequest.


        :param number_of_repayments: The number_of_repayments of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._number_of_repayments = number_of_repayments

    @property
    def principal(self):
        """Gets the principal of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The principal of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this PutSelfLoansLoanIdRequest.


        :param principal: The principal of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._principal = principal

    @property
    def product_id(self):
        """Gets the product_id of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The product_id of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this PutSelfLoansLoanIdRequest.


        :param product_id: The product_id of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def repayment_every(self):
        """Gets the repayment_every of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The repayment_every of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._repayment_every

    @repayment_every.setter
    def repayment_every(self, repayment_every):
        """Sets the repayment_every of this PutSelfLoansLoanIdRequest.


        :param repayment_every: The repayment_every of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._repayment_every = repayment_every

    @property
    def repayment_frequency_type(self):
        """Gets the repayment_frequency_type of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The repayment_frequency_type of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._repayment_frequency_type

    @repayment_frequency_type.setter
    def repayment_frequency_type(self, repayment_frequency_type):
        """Sets the repayment_frequency_type of this PutSelfLoansLoanIdRequest.


        :param repayment_frequency_type: The repayment_frequency_type of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._repayment_frequency_type = repayment_frequency_type

    @property
    def transaction_processing_strategy_code(self):
        """Gets the transaction_processing_strategy_code of this PutSelfLoansLoanIdRequest.  # noqa: E501


        :return: The transaction_processing_strategy_code of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_processing_strategy_code

    @transaction_processing_strategy_code.setter
    def transaction_processing_strategy_code(self, transaction_processing_strategy_code):
        """Sets the transaction_processing_strategy_code of this PutSelfLoansLoanIdRequest.


        :param transaction_processing_strategy_code: The transaction_processing_strategy_code of this PutSelfLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._transaction_processing_strategy_code = transaction_processing_strategy_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutSelfLoansLoanIdRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutSelfLoansLoanIdRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
