# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetObligeeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'amount_released': 'float',
        'amount_transferred': 'float',
        'display_name': 'str',
        'first_name': 'str',
        'guarantee_amount': 'float',
        'last_name': 'str',
        'loan_amount': 'float'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'amount_released': 'amountReleased',
        'amount_transferred': 'amountTransferred',
        'display_name': 'displayName',
        'first_name': 'firstName',
        'guarantee_amount': 'guaranteeAmount',
        'last_name': 'lastName',
        'loan_amount': 'loanAmount'
    }

    def __init__(self, account_number=None, amount_released=None, amount_transferred=None, display_name=None, first_name=None, guarantee_amount=None, last_name=None, loan_amount=None):  # noqa: E501
        """GetObligeeData - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._amount_released = None
        self._amount_transferred = None
        self._display_name = None
        self._first_name = None
        self._guarantee_amount = None
        self._last_name = None
        self._loan_amount = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if amount_released is not None:
            self.amount_released = amount_released
        if amount_transferred is not None:
            self.amount_transferred = amount_transferred
        if display_name is not None:
            self.display_name = display_name
        if first_name is not None:
            self.first_name = first_name
        if guarantee_amount is not None:
            self.guarantee_amount = guarantee_amount
        if last_name is not None:
            self.last_name = last_name
        if loan_amount is not None:
            self.loan_amount = loan_amount

    @property
    def account_number(self):
        """Gets the account_number of this GetObligeeData.  # noqa: E501


        :return: The account_number of this GetObligeeData.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this GetObligeeData.


        :param account_number: The account_number of this GetObligeeData.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def amount_released(self):
        """Gets the amount_released of this GetObligeeData.  # noqa: E501


        :return: The amount_released of this GetObligeeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_released

    @amount_released.setter
    def amount_released(self, amount_released):
        """Sets the amount_released of this GetObligeeData.


        :param amount_released: The amount_released of this GetObligeeData.  # noqa: E501
        :type: float
        """

        self._amount_released = amount_released

    @property
    def amount_transferred(self):
        """Gets the amount_transferred of this GetObligeeData.  # noqa: E501


        :return: The amount_transferred of this GetObligeeData.  # noqa: E501
        :rtype: float
        """
        return self._amount_transferred

    @amount_transferred.setter
    def amount_transferred(self, amount_transferred):
        """Sets the amount_transferred of this GetObligeeData.


        :param amount_transferred: The amount_transferred of this GetObligeeData.  # noqa: E501
        :type: float
        """

        self._amount_transferred = amount_transferred

    @property
    def display_name(self):
        """Gets the display_name of this GetObligeeData.  # noqa: E501


        :return: The display_name of this GetObligeeData.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GetObligeeData.


        :param display_name: The display_name of this GetObligeeData.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def first_name(self):
        """Gets the first_name of this GetObligeeData.  # noqa: E501


        :return: The first_name of this GetObligeeData.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this GetObligeeData.


        :param first_name: The first_name of this GetObligeeData.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def guarantee_amount(self):
        """Gets the guarantee_amount of this GetObligeeData.  # noqa: E501


        :return: The guarantee_amount of this GetObligeeData.  # noqa: E501
        :rtype: float
        """
        return self._guarantee_amount

    @guarantee_amount.setter
    def guarantee_amount(self, guarantee_amount):
        """Sets the guarantee_amount of this GetObligeeData.


        :param guarantee_amount: The guarantee_amount of this GetObligeeData.  # noqa: E501
        :type: float
        """

        self._guarantee_amount = guarantee_amount

    @property
    def last_name(self):
        """Gets the last_name of this GetObligeeData.  # noqa: E501


        :return: The last_name of this GetObligeeData.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this GetObligeeData.


        :param last_name: The last_name of this GetObligeeData.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def loan_amount(self):
        """Gets the loan_amount of this GetObligeeData.  # noqa: E501


        :return: The loan_amount of this GetObligeeData.  # noqa: E501
        :rtype: float
        """
        return self._loan_amount

    @loan_amount.setter
    def loan_amount(self, loan_amount):
        """Sets the loan_amount of this GetObligeeData.


        :param loan_amount: The loan_amount of this GetObligeeData.  # noqa: E501
        :type: float
        """

        self._loan_amount = loan_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetObligeeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetObligeeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
