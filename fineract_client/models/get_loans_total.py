# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansTotal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'currency_code': 'str',
        'default_name': 'str',
        'digits_after_decimal': 'int',
        'display_symbol': 'str',
        'display_symbol_value': 'str',
        'greater_than_zero': 'bool',
        'in_multiples_of': 'int',
        'name_code': 'str',
        'zero': 'bool'
    }

    attribute_map = {
        'amount': 'amount',
        'currency_code': 'currencyCode',
        'default_name': 'defaultName',
        'digits_after_decimal': 'digitsAfterDecimal',
        'display_symbol': 'displaySymbol',
        'display_symbol_value': 'displaySymbolValue',
        'greater_than_zero': 'greaterThanZero',
        'in_multiples_of': 'inMultiplesOf',
        'name_code': 'nameCode',
        'zero': 'zero'
    }

    def __init__(self, amount=None, currency_code=None, default_name=None, digits_after_decimal=None, display_symbol=None, display_symbol_value=None, greater_than_zero=None, in_multiples_of=None, name_code=None, zero=None):  # noqa: E501
        """GetLoansTotal - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._currency_code = None
        self._default_name = None
        self._digits_after_decimal = None
        self._display_symbol = None
        self._display_symbol_value = None
        self._greater_than_zero = None
        self._in_multiples_of = None
        self._name_code = None
        self._zero = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if currency_code is not None:
            self.currency_code = currency_code
        if default_name is not None:
            self.default_name = default_name
        if digits_after_decimal is not None:
            self.digits_after_decimal = digits_after_decimal
        if display_symbol is not None:
            self.display_symbol = display_symbol
        if display_symbol_value is not None:
            self.display_symbol_value = display_symbol_value
        if greater_than_zero is not None:
            self.greater_than_zero = greater_than_zero
        if in_multiples_of is not None:
            self.in_multiples_of = in_multiples_of
        if name_code is not None:
            self.name_code = name_code
        if zero is not None:
            self.zero = zero

    @property
    def amount(self):
        """Gets the amount of this GetLoansTotal.  # noqa: E501


        :return: The amount of this GetLoansTotal.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetLoansTotal.


        :param amount: The amount of this GetLoansTotal.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def currency_code(self):
        """Gets the currency_code of this GetLoansTotal.  # noqa: E501


        :return: The currency_code of this GetLoansTotal.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GetLoansTotal.


        :param currency_code: The currency_code of this GetLoansTotal.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def default_name(self):
        """Gets the default_name of this GetLoansTotal.  # noqa: E501


        :return: The default_name of this GetLoansTotal.  # noqa: E501
        :rtype: str
        """
        return self._default_name

    @default_name.setter
    def default_name(self, default_name):
        """Sets the default_name of this GetLoansTotal.


        :param default_name: The default_name of this GetLoansTotal.  # noqa: E501
        :type: str
        """

        self._default_name = default_name

    @property
    def digits_after_decimal(self):
        """Gets the digits_after_decimal of this GetLoansTotal.  # noqa: E501


        :return: The digits_after_decimal of this GetLoansTotal.  # noqa: E501
        :rtype: int
        """
        return self._digits_after_decimal

    @digits_after_decimal.setter
    def digits_after_decimal(self, digits_after_decimal):
        """Sets the digits_after_decimal of this GetLoansTotal.


        :param digits_after_decimal: The digits_after_decimal of this GetLoansTotal.  # noqa: E501
        :type: int
        """

        self._digits_after_decimal = digits_after_decimal

    @property
    def display_symbol(self):
        """Gets the display_symbol of this GetLoansTotal.  # noqa: E501


        :return: The display_symbol of this GetLoansTotal.  # noqa: E501
        :rtype: str
        """
        return self._display_symbol

    @display_symbol.setter
    def display_symbol(self, display_symbol):
        """Sets the display_symbol of this GetLoansTotal.


        :param display_symbol: The display_symbol of this GetLoansTotal.  # noqa: E501
        :type: str
        """

        self._display_symbol = display_symbol

    @property
    def display_symbol_value(self):
        """Gets the display_symbol_value of this GetLoansTotal.  # noqa: E501


        :return: The display_symbol_value of this GetLoansTotal.  # noqa: E501
        :rtype: str
        """
        return self._display_symbol_value

    @display_symbol_value.setter
    def display_symbol_value(self, display_symbol_value):
        """Sets the display_symbol_value of this GetLoansTotal.


        :param display_symbol_value: The display_symbol_value of this GetLoansTotal.  # noqa: E501
        :type: str
        """

        self._display_symbol_value = display_symbol_value

    @property
    def greater_than_zero(self):
        """Gets the greater_than_zero of this GetLoansTotal.  # noqa: E501


        :return: The greater_than_zero of this GetLoansTotal.  # noqa: E501
        :rtype: bool
        """
        return self._greater_than_zero

    @greater_than_zero.setter
    def greater_than_zero(self, greater_than_zero):
        """Sets the greater_than_zero of this GetLoansTotal.


        :param greater_than_zero: The greater_than_zero of this GetLoansTotal.  # noqa: E501
        :type: bool
        """

        self._greater_than_zero = greater_than_zero

    @property
    def in_multiples_of(self):
        """Gets the in_multiples_of of this GetLoansTotal.  # noqa: E501


        :return: The in_multiples_of of this GetLoansTotal.  # noqa: E501
        :rtype: int
        """
        return self._in_multiples_of

    @in_multiples_of.setter
    def in_multiples_of(self, in_multiples_of):
        """Sets the in_multiples_of of this GetLoansTotal.


        :param in_multiples_of: The in_multiples_of of this GetLoansTotal.  # noqa: E501
        :type: int
        """

        self._in_multiples_of = in_multiples_of

    @property
    def name_code(self):
        """Gets the name_code of this GetLoansTotal.  # noqa: E501


        :return: The name_code of this GetLoansTotal.  # noqa: E501
        :rtype: str
        """
        return self._name_code

    @name_code.setter
    def name_code(self, name_code):
        """Sets the name_code of this GetLoansTotal.


        :param name_code: The name_code of this GetLoansTotal.  # noqa: E501
        :type: str
        """

        self._name_code = name_code

    @property
    def zero(self):
        """Gets the zero of this GetLoansTotal.  # noqa: E501


        :return: The zero of this GetLoansTotal.  # noqa: E501
        :rtype: bool
        """
        return self._zero

    @zero.setter
    def zero(self, zero):
        """Sets the zero of this GetLoansTotal.


        :param zero: The zero of this GetLoansTotal.  # noqa: E501
        :type: bool
        """

        self._zero = zero

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansTotal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansTotal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
