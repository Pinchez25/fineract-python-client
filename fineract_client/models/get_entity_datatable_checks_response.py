# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetEntityDatatableChecksResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datatable_name': 'str',
        'entity': 'str',
        'id': 'int',
        'order': 'int',
        'product_id': 'int',
        'product_name': 'str',
        'status': 'EnumOptionData',
        'system_defined': 'bool'
    }

    attribute_map = {
        'datatable_name': 'datatableName',
        'entity': 'entity',
        'id': 'id',
        'order': 'order',
        'product_id': 'productId',
        'product_name': 'productName',
        'status': 'status',
        'system_defined': 'systemDefined'
    }

    def __init__(self, datatable_name=None, entity=None, id=None, order=None, product_id=None, product_name=None, status=None, system_defined=None):  # noqa: E501
        """GetEntityDatatableChecksResponse - a model defined in Swagger"""  # noqa: E501
        self._datatable_name = None
        self._entity = None
        self._id = None
        self._order = None
        self._product_id = None
        self._product_name = None
        self._status = None
        self._system_defined = None
        self.discriminator = None
        if datatable_name is not None:
            self.datatable_name = datatable_name
        if entity is not None:
            self.entity = entity
        if id is not None:
            self.id = id
        if order is not None:
            self.order = order
        if product_id is not None:
            self.product_id = product_id
        if product_name is not None:
            self.product_name = product_name
        if status is not None:
            self.status = status
        if system_defined is not None:
            self.system_defined = system_defined

    @property
    def datatable_name(self):
        """Gets the datatable_name of this GetEntityDatatableChecksResponse.  # noqa: E501


        :return: The datatable_name of this GetEntityDatatableChecksResponse.  # noqa: E501
        :rtype: str
        """
        return self._datatable_name

    @datatable_name.setter
    def datatable_name(self, datatable_name):
        """Sets the datatable_name of this GetEntityDatatableChecksResponse.


        :param datatable_name: The datatable_name of this GetEntityDatatableChecksResponse.  # noqa: E501
        :type: str
        """

        self._datatable_name = datatable_name

    @property
    def entity(self):
        """Gets the entity of this GetEntityDatatableChecksResponse.  # noqa: E501


        :return: The entity of this GetEntityDatatableChecksResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this GetEntityDatatableChecksResponse.


        :param entity: The entity of this GetEntityDatatableChecksResponse.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def id(self):
        """Gets the id of this GetEntityDatatableChecksResponse.  # noqa: E501


        :return: The id of this GetEntityDatatableChecksResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetEntityDatatableChecksResponse.


        :param id: The id of this GetEntityDatatableChecksResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def order(self):
        """Gets the order of this GetEntityDatatableChecksResponse.  # noqa: E501


        :return: The order of this GetEntityDatatableChecksResponse.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this GetEntityDatatableChecksResponse.


        :param order: The order of this GetEntityDatatableChecksResponse.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def product_id(self):
        """Gets the product_id of this GetEntityDatatableChecksResponse.  # noqa: E501


        :return: The product_id of this GetEntityDatatableChecksResponse.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this GetEntityDatatableChecksResponse.


        :param product_id: The product_id of this GetEntityDatatableChecksResponse.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this GetEntityDatatableChecksResponse.  # noqa: E501


        :return: The product_name of this GetEntityDatatableChecksResponse.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this GetEntityDatatableChecksResponse.


        :param product_name: The product_name of this GetEntityDatatableChecksResponse.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def status(self):
        """Gets the status of this GetEntityDatatableChecksResponse.  # noqa: E501


        :return: The status of this GetEntityDatatableChecksResponse.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetEntityDatatableChecksResponse.


        :param status: The status of this GetEntityDatatableChecksResponse.  # noqa: E501
        :type: EnumOptionData
        """

        self._status = status

    @property
    def system_defined(self):
        """Gets the system_defined of this GetEntityDatatableChecksResponse.  # noqa: E501


        :return: The system_defined of this GetEntityDatatableChecksResponse.  # noqa: E501
        :rtype: bool
        """
        return self._system_defined

    @system_defined.setter
    def system_defined(self, system_defined):
        """Sets the system_defined of this GetEntityDatatableChecksResponse.


        :param system_defined: The system_defined of this GetEntityDatatableChecksResponse.  # noqa: E501
        :type: bool
        """

        self._system_defined = system_defined

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetEntityDatatableChecksResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetEntityDatatableChecksResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
