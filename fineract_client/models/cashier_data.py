# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CashierData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'end_date': 'date',
        'end_time': 'str',
        'id': 'int',
        'is_full_day': 'bool',
        'office_id': 'int',
        'office_name': 'str',
        'staff_id': 'int',
        'staff_name': 'str',
        'staff_options': 'list[StaffData]',
        'start_date': 'date',
        'start_time': 'str',
        'teller_id': 'int',
        'teller_name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'end_date': 'endDate',
        'end_time': 'endTime',
        'id': 'id',
        'is_full_day': 'isFullDay',
        'office_id': 'officeId',
        'office_name': 'officeName',
        'staff_id': 'staffId',
        'staff_name': 'staffName',
        'staff_options': 'staffOptions',
        'start_date': 'startDate',
        'start_time': 'startTime',
        'teller_id': 'tellerId',
        'teller_name': 'tellerName'
    }

    def __init__(self, description=None, end_date=None, end_time=None, id=None, is_full_day=None, office_id=None, office_name=None, staff_id=None, staff_name=None, staff_options=None, start_date=None, start_time=None, teller_id=None, teller_name=None):  # noqa: E501
        """CashierData - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._end_date = None
        self._end_time = None
        self._id = None
        self._is_full_day = None
        self._office_id = None
        self._office_name = None
        self._staff_id = None
        self._staff_name = None
        self._staff_options = None
        self._start_date = None
        self._start_time = None
        self._teller_id = None
        self._teller_name = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if end_date is not None:
            self.end_date = end_date
        if end_time is not None:
            self.end_time = end_time
        if id is not None:
            self.id = id
        if is_full_day is not None:
            self.is_full_day = is_full_day
        if office_id is not None:
            self.office_id = office_id
        if office_name is not None:
            self.office_name = office_name
        if staff_id is not None:
            self.staff_id = staff_id
        if staff_name is not None:
            self.staff_name = staff_name
        if staff_options is not None:
            self.staff_options = staff_options
        if start_date is not None:
            self.start_date = start_date
        if start_time is not None:
            self.start_time = start_time
        if teller_id is not None:
            self.teller_id = teller_id
        if teller_name is not None:
            self.teller_name = teller_name

    @property
    def description(self):
        """Gets the description of this CashierData.  # noqa: E501


        :return: The description of this CashierData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CashierData.


        :param description: The description of this CashierData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this CashierData.  # noqa: E501


        :return: The end_date of this CashierData.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CashierData.


        :param end_date: The end_date of this CashierData.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def end_time(self):
        """Gets the end_time of this CashierData.  # noqa: E501


        :return: The end_time of this CashierData.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CashierData.


        :param end_time: The end_time of this CashierData.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def id(self):
        """Gets the id of this CashierData.  # noqa: E501


        :return: The id of this CashierData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CashierData.


        :param id: The id of this CashierData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_full_day(self):
        """Gets the is_full_day of this CashierData.  # noqa: E501


        :return: The is_full_day of this CashierData.  # noqa: E501
        :rtype: bool
        """
        return self._is_full_day

    @is_full_day.setter
    def is_full_day(self, is_full_day):
        """Sets the is_full_day of this CashierData.


        :param is_full_day: The is_full_day of this CashierData.  # noqa: E501
        :type: bool
        """

        self._is_full_day = is_full_day

    @property
    def office_id(self):
        """Gets the office_id of this CashierData.  # noqa: E501


        :return: The office_id of this CashierData.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this CashierData.


        :param office_id: The office_id of this CashierData.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def office_name(self):
        """Gets the office_name of this CashierData.  # noqa: E501


        :return: The office_name of this CashierData.  # noqa: E501
        :rtype: str
        """
        return self._office_name

    @office_name.setter
    def office_name(self, office_name):
        """Sets the office_name of this CashierData.


        :param office_name: The office_name of this CashierData.  # noqa: E501
        :type: str
        """

        self._office_name = office_name

    @property
    def staff_id(self):
        """Gets the staff_id of this CashierData.  # noqa: E501


        :return: The staff_id of this CashierData.  # noqa: E501
        :rtype: int
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this CashierData.


        :param staff_id: The staff_id of this CashierData.  # noqa: E501
        :type: int
        """

        self._staff_id = staff_id

    @property
    def staff_name(self):
        """Gets the staff_name of this CashierData.  # noqa: E501


        :return: The staff_name of this CashierData.  # noqa: E501
        :rtype: str
        """
        return self._staff_name

    @staff_name.setter
    def staff_name(self, staff_name):
        """Sets the staff_name of this CashierData.


        :param staff_name: The staff_name of this CashierData.  # noqa: E501
        :type: str
        """

        self._staff_name = staff_name

    @property
    def staff_options(self):
        """Gets the staff_options of this CashierData.  # noqa: E501


        :return: The staff_options of this CashierData.  # noqa: E501
        :rtype: list[StaffData]
        """
        return self._staff_options

    @staff_options.setter
    def staff_options(self, staff_options):
        """Sets the staff_options of this CashierData.


        :param staff_options: The staff_options of this CashierData.  # noqa: E501
        :type: list[StaffData]
        """

        self._staff_options = staff_options

    @property
    def start_date(self):
        """Gets the start_date of this CashierData.  # noqa: E501


        :return: The start_date of this CashierData.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CashierData.


        :param start_date: The start_date of this CashierData.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def start_time(self):
        """Gets the start_time of this CashierData.  # noqa: E501


        :return: The start_time of this CashierData.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CashierData.


        :param start_time: The start_time of this CashierData.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def teller_id(self):
        """Gets the teller_id of this CashierData.  # noqa: E501


        :return: The teller_id of this CashierData.  # noqa: E501
        :rtype: int
        """
        return self._teller_id

    @teller_id.setter
    def teller_id(self, teller_id):
        """Sets the teller_id of this CashierData.


        :param teller_id: The teller_id of this CashierData.  # noqa: E501
        :type: int
        """

        self._teller_id = teller_id

    @property
    def teller_name(self):
        """Gets the teller_name of this CashierData.  # noqa: E501


        :return: The teller_name of this CashierData.  # noqa: E501
        :rtype: str
        """
        return self._teller_name

    @teller_name.setter
    def teller_name(self, teller_name):
        """Sets the teller_name of this CashierData.


        :param teller_name: The teller_name of this CashierData.  # noqa: E501
        :type: str
        """

        self._teller_name = teller_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CashierData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CashierData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
