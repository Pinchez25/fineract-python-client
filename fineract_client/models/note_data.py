# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NoteData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'int',
        'created_by_id': 'int',
        'created_by_username': 'str',
        'created_on': 'datetime',
        'deposit_account_id': 'int',
        'group_id': 'int',
        'id': 'int',
        'loan_id': 'int',
        'loan_transaction_id': 'int',
        'note': 'str',
        'note_type': 'EnumOptionData',
        'saving_account_id': 'int',
        'updated_by_id': 'int',
        'updated_by_username': 'str',
        'updated_on': 'datetime'
    }

    attribute_map = {
        'client_id': 'clientId',
        'created_by_id': 'createdById',
        'created_by_username': 'createdByUsername',
        'created_on': 'createdOn',
        'deposit_account_id': 'depositAccountId',
        'group_id': 'groupId',
        'id': 'id',
        'loan_id': 'loanId',
        'loan_transaction_id': 'loanTransactionId',
        'note': 'note',
        'note_type': 'noteType',
        'saving_account_id': 'savingAccountId',
        'updated_by_id': 'updatedById',
        'updated_by_username': 'updatedByUsername',
        'updated_on': 'updatedOn'
    }

    def __init__(self, client_id=None, created_by_id=None, created_by_username=None, created_on=None, deposit_account_id=None, group_id=None, id=None, loan_id=None, loan_transaction_id=None, note=None, note_type=None, saving_account_id=None, updated_by_id=None, updated_by_username=None, updated_on=None):  # noqa: E501
        """NoteData - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._created_by_id = None
        self._created_by_username = None
        self._created_on = None
        self._deposit_account_id = None
        self._group_id = None
        self._id = None
        self._loan_id = None
        self._loan_transaction_id = None
        self._note = None
        self._note_type = None
        self._saving_account_id = None
        self._updated_by_id = None
        self._updated_by_username = None
        self._updated_on = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_by_username is not None:
            self.created_by_username = created_by_username
        if created_on is not None:
            self.created_on = created_on
        if deposit_account_id is not None:
            self.deposit_account_id = deposit_account_id
        if group_id is not None:
            self.group_id = group_id
        if id is not None:
            self.id = id
        if loan_id is not None:
            self.loan_id = loan_id
        if loan_transaction_id is not None:
            self.loan_transaction_id = loan_transaction_id
        if note is not None:
            self.note = note
        if note_type is not None:
            self.note_type = note_type
        if saving_account_id is not None:
            self.saving_account_id = saving_account_id
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_by_username is not None:
            self.updated_by_username = updated_by_username
        if updated_on is not None:
            self.updated_on = updated_on

    @property
    def client_id(self):
        """Gets the client_id of this NoteData.  # noqa: E501


        :return: The client_id of this NoteData.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this NoteData.


        :param client_id: The client_id of this NoteData.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def created_by_id(self):
        """Gets the created_by_id of this NoteData.  # noqa: E501


        :return: The created_by_id of this NoteData.  # noqa: E501
        :rtype: int
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this NoteData.


        :param created_by_id: The created_by_id of this NoteData.  # noqa: E501
        :type: int
        """

        self._created_by_id = created_by_id

    @property
    def created_by_username(self):
        """Gets the created_by_username of this NoteData.  # noqa: E501


        :return: The created_by_username of this NoteData.  # noqa: E501
        :rtype: str
        """
        return self._created_by_username

    @created_by_username.setter
    def created_by_username(self, created_by_username):
        """Sets the created_by_username of this NoteData.


        :param created_by_username: The created_by_username of this NoteData.  # noqa: E501
        :type: str
        """

        self._created_by_username = created_by_username

    @property
    def created_on(self):
        """Gets the created_on of this NoteData.  # noqa: E501


        :return: The created_on of this NoteData.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this NoteData.


        :param created_on: The created_on of this NoteData.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def deposit_account_id(self):
        """Gets the deposit_account_id of this NoteData.  # noqa: E501


        :return: The deposit_account_id of this NoteData.  # noqa: E501
        :rtype: int
        """
        return self._deposit_account_id

    @deposit_account_id.setter
    def deposit_account_id(self, deposit_account_id):
        """Sets the deposit_account_id of this NoteData.


        :param deposit_account_id: The deposit_account_id of this NoteData.  # noqa: E501
        :type: int
        """

        self._deposit_account_id = deposit_account_id

    @property
    def group_id(self):
        """Gets the group_id of this NoteData.  # noqa: E501


        :return: The group_id of this NoteData.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NoteData.


        :param group_id: The group_id of this NoteData.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this NoteData.  # noqa: E501


        :return: The id of this NoteData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NoteData.


        :param id: The id of this NoteData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def loan_id(self):
        """Gets the loan_id of this NoteData.  # noqa: E501


        :return: The loan_id of this NoteData.  # noqa: E501
        :rtype: int
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """Sets the loan_id of this NoteData.


        :param loan_id: The loan_id of this NoteData.  # noqa: E501
        :type: int
        """

        self._loan_id = loan_id

    @property
    def loan_transaction_id(self):
        """Gets the loan_transaction_id of this NoteData.  # noqa: E501


        :return: The loan_transaction_id of this NoteData.  # noqa: E501
        :rtype: int
        """
        return self._loan_transaction_id

    @loan_transaction_id.setter
    def loan_transaction_id(self, loan_transaction_id):
        """Sets the loan_transaction_id of this NoteData.


        :param loan_transaction_id: The loan_transaction_id of this NoteData.  # noqa: E501
        :type: int
        """

        self._loan_transaction_id = loan_transaction_id

    @property
    def note(self):
        """Gets the note of this NoteData.  # noqa: E501


        :return: The note of this NoteData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this NoteData.


        :param note: The note of this NoteData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def note_type(self):
        """Gets the note_type of this NoteData.  # noqa: E501


        :return: The note_type of this NoteData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this NoteData.


        :param note_type: The note_type of this NoteData.  # noqa: E501
        :type: EnumOptionData
        """

        self._note_type = note_type

    @property
    def saving_account_id(self):
        """Gets the saving_account_id of this NoteData.  # noqa: E501


        :return: The saving_account_id of this NoteData.  # noqa: E501
        :rtype: int
        """
        return self._saving_account_id

    @saving_account_id.setter
    def saving_account_id(self, saving_account_id):
        """Sets the saving_account_id of this NoteData.


        :param saving_account_id: The saving_account_id of this NoteData.  # noqa: E501
        :type: int
        """

        self._saving_account_id = saving_account_id

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this NoteData.  # noqa: E501


        :return: The updated_by_id of this NoteData.  # noqa: E501
        :rtype: int
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this NoteData.


        :param updated_by_id: The updated_by_id of this NoteData.  # noqa: E501
        :type: int
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_by_username(self):
        """Gets the updated_by_username of this NoteData.  # noqa: E501


        :return: The updated_by_username of this NoteData.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_username

    @updated_by_username.setter
    def updated_by_username(self, updated_by_username):
        """Sets the updated_by_username of this NoteData.


        :param updated_by_username: The updated_by_username of this NoteData.  # noqa: E501
        :type: str
        """

        self._updated_by_username = updated_by_username

    @property
    def updated_on(self):
        """Gets the updated_on of this NoteData.  # noqa: E501


        :return: The updated_on of this NoteData.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this NoteData.


        :param updated_on: The updated_on of this NoteData.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NoteData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoteData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
