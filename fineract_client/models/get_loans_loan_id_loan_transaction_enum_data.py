# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansLoanIdLoanTransactionEnumData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accrual': 'bool',
        'approve_transfer': 'bool',
        'charge_adjustment': 'bool',
        'charge_payment': 'bool',
        'chargeoff': 'bool',
        'code': 'str',
        'contra': 'bool',
        'credit_balance_refund': 'bool',
        'disbursement': 'bool',
        'goodwill_credit': 'bool',
        'id': 'int',
        'initiate_transfer': 'bool',
        'merchant_issued_refund': 'bool',
        'payout_refund': 'bool',
        'recovery_repayment': 'bool',
        'refund': 'bool',
        'refund_for_active_loans': 'bool',
        'reject_transfer': 'bool',
        'repayment': 'bool',
        'repayment_at_disbursement': 'bool',
        'value': 'str',
        'waive_charges': 'bool',
        'waive_interest': 'bool',
        'withdraw_transfer': 'bool',
        'write_off': 'bool'
    }

    attribute_map = {
        'accrual': 'accrual',
        'approve_transfer': 'approveTransfer',
        'charge_adjustment': 'chargeAdjustment',
        'charge_payment': 'chargePayment',
        'chargeoff': 'chargeoff',
        'code': 'code',
        'contra': 'contra',
        'credit_balance_refund': 'creditBalanceRefund',
        'disbursement': 'disbursement',
        'goodwill_credit': 'goodwillCredit',
        'id': 'id',
        'initiate_transfer': 'initiateTransfer',
        'merchant_issued_refund': 'merchantIssuedRefund',
        'payout_refund': 'payoutRefund',
        'recovery_repayment': 'recoveryRepayment',
        'refund': 'refund',
        'refund_for_active_loans': 'refundForActiveLoans',
        'reject_transfer': 'rejectTransfer',
        'repayment': 'repayment',
        'repayment_at_disbursement': 'repaymentAtDisbursement',
        'value': 'value',
        'waive_charges': 'waiveCharges',
        'waive_interest': 'waiveInterest',
        'withdraw_transfer': 'withdrawTransfer',
        'write_off': 'writeOff'
    }

    def __init__(self, accrual=None, approve_transfer=None, charge_adjustment=None, charge_payment=None, chargeoff=None, code=None, contra=None, credit_balance_refund=None, disbursement=None, goodwill_credit=None, id=None, initiate_transfer=None, merchant_issued_refund=None, payout_refund=None, recovery_repayment=None, refund=None, refund_for_active_loans=None, reject_transfer=None, repayment=None, repayment_at_disbursement=None, value=None, waive_charges=None, waive_interest=None, withdraw_transfer=None, write_off=None):  # noqa: E501
        """GetLoansLoanIdLoanTransactionEnumData - a model defined in Swagger"""  # noqa: E501
        self._accrual = None
        self._approve_transfer = None
        self._charge_adjustment = None
        self._charge_payment = None
        self._chargeoff = None
        self._code = None
        self._contra = None
        self._credit_balance_refund = None
        self._disbursement = None
        self._goodwill_credit = None
        self._id = None
        self._initiate_transfer = None
        self._merchant_issued_refund = None
        self._payout_refund = None
        self._recovery_repayment = None
        self._refund = None
        self._refund_for_active_loans = None
        self._reject_transfer = None
        self._repayment = None
        self._repayment_at_disbursement = None
        self._value = None
        self._waive_charges = None
        self._waive_interest = None
        self._withdraw_transfer = None
        self._write_off = None
        self.discriminator = None
        if accrual is not None:
            self.accrual = accrual
        if approve_transfer is not None:
            self.approve_transfer = approve_transfer
        if charge_adjustment is not None:
            self.charge_adjustment = charge_adjustment
        if charge_payment is not None:
            self.charge_payment = charge_payment
        if chargeoff is not None:
            self.chargeoff = chargeoff
        if code is not None:
            self.code = code
        if contra is not None:
            self.contra = contra
        if credit_balance_refund is not None:
            self.credit_balance_refund = credit_balance_refund
        if disbursement is not None:
            self.disbursement = disbursement
        if goodwill_credit is not None:
            self.goodwill_credit = goodwill_credit
        if id is not None:
            self.id = id
        if initiate_transfer is not None:
            self.initiate_transfer = initiate_transfer
        if merchant_issued_refund is not None:
            self.merchant_issued_refund = merchant_issued_refund
        if payout_refund is not None:
            self.payout_refund = payout_refund
        if recovery_repayment is not None:
            self.recovery_repayment = recovery_repayment
        if refund is not None:
            self.refund = refund
        if refund_for_active_loans is not None:
            self.refund_for_active_loans = refund_for_active_loans
        if reject_transfer is not None:
            self.reject_transfer = reject_transfer
        if repayment is not None:
            self.repayment = repayment
        if repayment_at_disbursement is not None:
            self.repayment_at_disbursement = repayment_at_disbursement
        if value is not None:
            self.value = value
        if waive_charges is not None:
            self.waive_charges = waive_charges
        if waive_interest is not None:
            self.waive_interest = waive_interest
        if withdraw_transfer is not None:
            self.withdraw_transfer = withdraw_transfer
        if write_off is not None:
            self.write_off = write_off

    @property
    def accrual(self):
        """Gets the accrual of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The accrual of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._accrual

    @accrual.setter
    def accrual(self, accrual):
        """Sets the accrual of this GetLoansLoanIdLoanTransactionEnumData.


        :param accrual: The accrual of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._accrual = accrual

    @property
    def approve_transfer(self):
        """Gets the approve_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The approve_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._approve_transfer

    @approve_transfer.setter
    def approve_transfer(self, approve_transfer):
        """Sets the approve_transfer of this GetLoansLoanIdLoanTransactionEnumData.


        :param approve_transfer: The approve_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._approve_transfer = approve_transfer

    @property
    def charge_adjustment(self):
        """Gets the charge_adjustment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The charge_adjustment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._charge_adjustment

    @charge_adjustment.setter
    def charge_adjustment(self, charge_adjustment):
        """Sets the charge_adjustment of this GetLoansLoanIdLoanTransactionEnumData.


        :param charge_adjustment: The charge_adjustment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._charge_adjustment = charge_adjustment

    @property
    def charge_payment(self):
        """Gets the charge_payment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The charge_payment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._charge_payment

    @charge_payment.setter
    def charge_payment(self, charge_payment):
        """Sets the charge_payment of this GetLoansLoanIdLoanTransactionEnumData.


        :param charge_payment: The charge_payment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._charge_payment = charge_payment

    @property
    def chargeoff(self):
        """Gets the chargeoff of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The chargeoff of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._chargeoff

    @chargeoff.setter
    def chargeoff(self, chargeoff):
        """Sets the chargeoff of this GetLoansLoanIdLoanTransactionEnumData.


        :param chargeoff: The chargeoff of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._chargeoff = chargeoff

    @property
    def code(self):
        """Gets the code of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The code of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GetLoansLoanIdLoanTransactionEnumData.


        :param code: The code of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def contra(self):
        """Gets the contra of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The contra of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._contra

    @contra.setter
    def contra(self, contra):
        """Sets the contra of this GetLoansLoanIdLoanTransactionEnumData.


        :param contra: The contra of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._contra = contra

    @property
    def credit_balance_refund(self):
        """Gets the credit_balance_refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The credit_balance_refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._credit_balance_refund

    @credit_balance_refund.setter
    def credit_balance_refund(self, credit_balance_refund):
        """Sets the credit_balance_refund of this GetLoansLoanIdLoanTransactionEnumData.


        :param credit_balance_refund: The credit_balance_refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._credit_balance_refund = credit_balance_refund

    @property
    def disbursement(self):
        """Gets the disbursement of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The disbursement of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._disbursement

    @disbursement.setter
    def disbursement(self, disbursement):
        """Sets the disbursement of this GetLoansLoanIdLoanTransactionEnumData.


        :param disbursement: The disbursement of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._disbursement = disbursement

    @property
    def goodwill_credit(self):
        """Gets the goodwill_credit of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The goodwill_credit of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._goodwill_credit

    @goodwill_credit.setter
    def goodwill_credit(self, goodwill_credit):
        """Sets the goodwill_credit of this GetLoansLoanIdLoanTransactionEnumData.


        :param goodwill_credit: The goodwill_credit of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._goodwill_credit = goodwill_credit

    @property
    def id(self):
        """Gets the id of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The id of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetLoansLoanIdLoanTransactionEnumData.


        :param id: The id of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def initiate_transfer(self):
        """Gets the initiate_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The initiate_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._initiate_transfer

    @initiate_transfer.setter
    def initiate_transfer(self, initiate_transfer):
        """Sets the initiate_transfer of this GetLoansLoanIdLoanTransactionEnumData.


        :param initiate_transfer: The initiate_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._initiate_transfer = initiate_transfer

    @property
    def merchant_issued_refund(self):
        """Gets the merchant_issued_refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The merchant_issued_refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._merchant_issued_refund

    @merchant_issued_refund.setter
    def merchant_issued_refund(self, merchant_issued_refund):
        """Sets the merchant_issued_refund of this GetLoansLoanIdLoanTransactionEnumData.


        :param merchant_issued_refund: The merchant_issued_refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._merchant_issued_refund = merchant_issued_refund

    @property
    def payout_refund(self):
        """Gets the payout_refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The payout_refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._payout_refund

    @payout_refund.setter
    def payout_refund(self, payout_refund):
        """Sets the payout_refund of this GetLoansLoanIdLoanTransactionEnumData.


        :param payout_refund: The payout_refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._payout_refund = payout_refund

    @property
    def recovery_repayment(self):
        """Gets the recovery_repayment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The recovery_repayment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._recovery_repayment

    @recovery_repayment.setter
    def recovery_repayment(self, recovery_repayment):
        """Sets the recovery_repayment of this GetLoansLoanIdLoanTransactionEnumData.


        :param recovery_repayment: The recovery_repayment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._recovery_repayment = recovery_repayment

    @property
    def refund(self):
        """Gets the refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._refund

    @refund.setter
    def refund(self, refund):
        """Sets the refund of this GetLoansLoanIdLoanTransactionEnumData.


        :param refund: The refund of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._refund = refund

    @property
    def refund_for_active_loans(self):
        """Gets the refund_for_active_loans of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The refund_for_active_loans of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._refund_for_active_loans

    @refund_for_active_loans.setter
    def refund_for_active_loans(self, refund_for_active_loans):
        """Sets the refund_for_active_loans of this GetLoansLoanIdLoanTransactionEnumData.


        :param refund_for_active_loans: The refund_for_active_loans of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._refund_for_active_loans = refund_for_active_loans

    @property
    def reject_transfer(self):
        """Gets the reject_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The reject_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._reject_transfer

    @reject_transfer.setter
    def reject_transfer(self, reject_transfer):
        """Sets the reject_transfer of this GetLoansLoanIdLoanTransactionEnumData.


        :param reject_transfer: The reject_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._reject_transfer = reject_transfer

    @property
    def repayment(self):
        """Gets the repayment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The repayment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._repayment

    @repayment.setter
    def repayment(self, repayment):
        """Sets the repayment of this GetLoansLoanIdLoanTransactionEnumData.


        :param repayment: The repayment of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._repayment = repayment

    @property
    def repayment_at_disbursement(self):
        """Gets the repayment_at_disbursement of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The repayment_at_disbursement of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._repayment_at_disbursement

    @repayment_at_disbursement.setter
    def repayment_at_disbursement(self, repayment_at_disbursement):
        """Sets the repayment_at_disbursement of this GetLoansLoanIdLoanTransactionEnumData.


        :param repayment_at_disbursement: The repayment_at_disbursement of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._repayment_at_disbursement = repayment_at_disbursement

    @property
    def value(self):
        """Gets the value of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The value of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetLoansLoanIdLoanTransactionEnumData.


        :param value: The value of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def waive_charges(self):
        """Gets the waive_charges of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The waive_charges of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._waive_charges

    @waive_charges.setter
    def waive_charges(self, waive_charges):
        """Sets the waive_charges of this GetLoansLoanIdLoanTransactionEnumData.


        :param waive_charges: The waive_charges of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._waive_charges = waive_charges

    @property
    def waive_interest(self):
        """Gets the waive_interest of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The waive_interest of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._waive_interest

    @waive_interest.setter
    def waive_interest(self, waive_interest):
        """Sets the waive_interest of this GetLoansLoanIdLoanTransactionEnumData.


        :param waive_interest: The waive_interest of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._waive_interest = waive_interest

    @property
    def withdraw_transfer(self):
        """Gets the withdraw_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The withdraw_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._withdraw_transfer

    @withdraw_transfer.setter
    def withdraw_transfer(self, withdraw_transfer):
        """Sets the withdraw_transfer of this GetLoansLoanIdLoanTransactionEnumData.


        :param withdraw_transfer: The withdraw_transfer of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._withdraw_transfer = withdraw_transfer

    @property
    def write_off(self):
        """Gets the write_off of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501


        :return: The write_off of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._write_off

    @write_off.setter
    def write_off(self, write_off):
        """Sets the write_off of this GetLoansLoanIdLoanTransactionEnumData.


        :param write_off: The write_off of this GetLoansLoanIdLoanTransactionEnumData.  # noqa: E501
        :type: bool
        """

        self._write_off = write_off

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansLoanIdLoanTransactionEnumData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansLoanIdLoanTransactionEnumData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
