# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostReportMailingJobsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_format': 'str',
        'description': 'str',
        'email_message': 'str',
        'email_recipients': 'str',
        'email_subject': 'str',
        'is_active': 'bool',
        'locale': 'str',
        'name': 'str',
        'recurrence': 'str',
        'start_date_time': 'datetime',
        'stretchy_report_id': 'int',
        'stretchy_report_param_map': 'str'
    }

    attribute_map = {
        'date_format': 'dateFormat',
        'description': 'description',
        'email_message': 'emailMessage',
        'email_recipients': 'emailRecipients',
        'email_subject': 'emailSubject',
        'is_active': 'isActive',
        'locale': 'locale',
        'name': 'name',
        'recurrence': 'recurrence',
        'start_date_time': 'startDateTime',
        'stretchy_report_id': 'stretchyReportId',
        'stretchy_report_param_map': 'stretchyReportParamMap'
    }

    def __init__(self, date_format=None, description=None, email_message=None, email_recipients=None, email_subject=None, is_active=None, locale=None, name=None, recurrence=None, start_date_time=None, stretchy_report_id=None, stretchy_report_param_map=None):  # noqa: E501
        """PostReportMailingJobsRequest - a model defined in Swagger"""  # noqa: E501
        self._date_format = None
        self._description = None
        self._email_message = None
        self._email_recipients = None
        self._email_subject = None
        self._is_active = None
        self._locale = None
        self._name = None
        self._recurrence = None
        self._start_date_time = None
        self._stretchy_report_id = None
        self._stretchy_report_param_map = None
        self.discriminator = None
        if date_format is not None:
            self.date_format = date_format
        if description is not None:
            self.description = description
        if email_message is not None:
            self.email_message = email_message
        if email_recipients is not None:
            self.email_recipients = email_recipients
        if email_subject is not None:
            self.email_subject = email_subject
        if is_active is not None:
            self.is_active = is_active
        if locale is not None:
            self.locale = locale
        if name is not None:
            self.name = name
        if recurrence is not None:
            self.recurrence = recurrence
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if stretchy_report_id is not None:
            self.stretchy_report_id = stretchy_report_id
        if stretchy_report_param_map is not None:
            self.stretchy_report_param_map = stretchy_report_param_map

    @property
    def date_format(self):
        """Gets the date_format of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The date_format of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this PostReportMailingJobsRequest.


        :param date_format: The date_format of this PostReportMailingJobsRequest.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def description(self):
        """Gets the description of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The description of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostReportMailingJobsRequest.


        :param description: The description of this PostReportMailingJobsRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def email_message(self):
        """Gets the email_message of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The email_message of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_message

    @email_message.setter
    def email_message(self, email_message):
        """Sets the email_message of this PostReportMailingJobsRequest.


        :param email_message: The email_message of this PostReportMailingJobsRequest.  # noqa: E501
        :type: str
        """

        self._email_message = email_message

    @property
    def email_recipients(self):
        """Gets the email_recipients of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The email_recipients of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_recipients

    @email_recipients.setter
    def email_recipients(self, email_recipients):
        """Sets the email_recipients of this PostReportMailingJobsRequest.


        :param email_recipients: The email_recipients of this PostReportMailingJobsRequest.  # noqa: E501
        :type: str
        """

        self._email_recipients = email_recipients

    @property
    def email_subject(self):
        """Gets the email_subject of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The email_subject of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_subject

    @email_subject.setter
    def email_subject(self, email_subject):
        """Sets the email_subject of this PostReportMailingJobsRequest.


        :param email_subject: The email_subject of this PostReportMailingJobsRequest.  # noqa: E501
        :type: str
        """

        self._email_subject = email_subject

    @property
    def is_active(self):
        """Gets the is_active of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The is_active of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PostReportMailingJobsRequest.


        :param is_active: The is_active of this PostReportMailingJobsRequest.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def locale(self):
        """Gets the locale of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The locale of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PostReportMailingJobsRequest.


        :param locale: The locale of this PostReportMailingJobsRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The name of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostReportMailingJobsRequest.


        :param name: The name of this PostReportMailingJobsRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def recurrence(self):
        """Gets the recurrence of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The recurrence of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this PostReportMailingJobsRequest.


        :param recurrence: The recurrence of this PostReportMailingJobsRequest.  # noqa: E501
        :type: str
        """

        self._recurrence = recurrence

    @property
    def start_date_time(self):
        """Gets the start_date_time of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The start_date_time of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this PostReportMailingJobsRequest.


        :param start_date_time: The start_date_time of this PostReportMailingJobsRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def stretchy_report_id(self):
        """Gets the stretchy_report_id of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The stretchy_report_id of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: int
        """
        return self._stretchy_report_id

    @stretchy_report_id.setter
    def stretchy_report_id(self, stretchy_report_id):
        """Sets the stretchy_report_id of this PostReportMailingJobsRequest.


        :param stretchy_report_id: The stretchy_report_id of this PostReportMailingJobsRequest.  # noqa: E501
        :type: int
        """

        self._stretchy_report_id = stretchy_report_id

    @property
    def stretchy_report_param_map(self):
        """Gets the stretchy_report_param_map of this PostReportMailingJobsRequest.  # noqa: E501


        :return: The stretchy_report_param_map of this PostReportMailingJobsRequest.  # noqa: E501
        :rtype: str
        """
        return self._stretchy_report_param_map

    @stretchy_report_param_map.setter
    def stretchy_report_param_map(self, stretchy_report_param_map):
        """Sets the stretchy_report_param_map of this PostReportMailingJobsRequest.


        :param stretchy_report_param_map: The stretchy_report_param_map of this PostReportMailingJobsRequest.  # noqa: E501
        :type: str
        """

        self._stretchy_report_param_map = stretchy_report_param_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostReportMailingJobsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostReportMailingJobsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
