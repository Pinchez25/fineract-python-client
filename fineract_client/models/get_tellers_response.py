# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetTellersResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_account_id': 'int',
        'debit_account_id': 'int',
        'id': 'int',
        'name': 'str',
        'office_id': 'int',
        'office_name': 'str',
        'start_date': 'date',
        'status': 'str'
    }

    attribute_map = {
        'credit_account_id': 'creditAccountId',
        'debit_account_id': 'debitAccountId',
        'id': 'id',
        'name': 'name',
        'office_id': 'officeId',
        'office_name': 'officeName',
        'start_date': 'startDate',
        'status': 'status'
    }

    def __init__(self, credit_account_id=None, debit_account_id=None, id=None, name=None, office_id=None, office_name=None, start_date=None, status=None):  # noqa: E501
        """GetTellersResponse - a model defined in Swagger"""  # noqa: E501
        self._credit_account_id = None
        self._debit_account_id = None
        self._id = None
        self._name = None
        self._office_id = None
        self._office_name = None
        self._start_date = None
        self._status = None
        self.discriminator = None
        if credit_account_id is not None:
            self.credit_account_id = credit_account_id
        if debit_account_id is not None:
            self.debit_account_id = debit_account_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if office_id is not None:
            self.office_id = office_id
        if office_name is not None:
            self.office_name = office_name
        if start_date is not None:
            self.start_date = start_date
        if status is not None:
            self.status = status

    @property
    def credit_account_id(self):
        """Gets the credit_account_id of this GetTellersResponse.  # noqa: E501


        :return: The credit_account_id of this GetTellersResponse.  # noqa: E501
        :rtype: int
        """
        return self._credit_account_id

    @credit_account_id.setter
    def credit_account_id(self, credit_account_id):
        """Sets the credit_account_id of this GetTellersResponse.


        :param credit_account_id: The credit_account_id of this GetTellersResponse.  # noqa: E501
        :type: int
        """

        self._credit_account_id = credit_account_id

    @property
    def debit_account_id(self):
        """Gets the debit_account_id of this GetTellersResponse.  # noqa: E501


        :return: The debit_account_id of this GetTellersResponse.  # noqa: E501
        :rtype: int
        """
        return self._debit_account_id

    @debit_account_id.setter
    def debit_account_id(self, debit_account_id):
        """Sets the debit_account_id of this GetTellersResponse.


        :param debit_account_id: The debit_account_id of this GetTellersResponse.  # noqa: E501
        :type: int
        """

        self._debit_account_id = debit_account_id

    @property
    def id(self):
        """Gets the id of this GetTellersResponse.  # noqa: E501


        :return: The id of this GetTellersResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetTellersResponse.


        :param id: The id of this GetTellersResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetTellersResponse.  # noqa: E501


        :return: The name of this GetTellersResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetTellersResponse.


        :param name: The name of this GetTellersResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def office_id(self):
        """Gets the office_id of this GetTellersResponse.  # noqa: E501


        :return: The office_id of this GetTellersResponse.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this GetTellersResponse.


        :param office_id: The office_id of this GetTellersResponse.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def office_name(self):
        """Gets the office_name of this GetTellersResponse.  # noqa: E501


        :return: The office_name of this GetTellersResponse.  # noqa: E501
        :rtype: str
        """
        return self._office_name

    @office_name.setter
    def office_name(self, office_name):
        """Sets the office_name of this GetTellersResponse.


        :param office_name: The office_name of this GetTellersResponse.  # noqa: E501
        :type: str
        """

        self._office_name = office_name

    @property
    def start_date(self):
        """Gets the start_date of this GetTellersResponse.  # noqa: E501


        :return: The start_date of this GetTellersResponse.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GetTellersResponse.


        :param start_date: The start_date of this GetTellersResponse.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this GetTellersResponse.  # noqa: E501


        :return: The status of this GetTellersResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetTellersResponse.


        :param status: The status of this GetTellersResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "PENDING", "ACTIVE", "INACTIVE", "CLOSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetTellersResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTellersResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
