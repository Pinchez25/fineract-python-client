# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Scorecard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_user': 'AppUser',
        'client': 'Client',
        'created_on': 'datetime',
        'id': 'int',
        'new': 'bool',
        'question': 'Question',
        'response': 'Response',
        'survey': 'Survey',
        'value': 'int'
    }

    attribute_map = {
        'app_user': 'appUser',
        'client': 'client',
        'created_on': 'createdOn',
        'id': 'id',
        'new': 'new',
        'question': 'question',
        'response': 'response',
        'survey': 'survey',
        'value': 'value'
    }

    def __init__(self, app_user=None, client=None, created_on=None, id=None, new=None, question=None, response=None, survey=None, value=None):  # noqa: E501
        """Scorecard - a model defined in Swagger"""  # noqa: E501
        self._app_user = None
        self._client = None
        self._created_on = None
        self._id = None
        self._new = None
        self._question = None
        self._response = None
        self._survey = None
        self._value = None
        self.discriminator = None
        if app_user is not None:
            self.app_user = app_user
        if client is not None:
            self.client = client
        if created_on is not None:
            self.created_on = created_on
        if id is not None:
            self.id = id
        if new is not None:
            self.new = new
        if question is not None:
            self.question = question
        if response is not None:
            self.response = response
        if survey is not None:
            self.survey = survey
        if value is not None:
            self.value = value

    @property
    def app_user(self):
        """Gets the app_user of this Scorecard.  # noqa: E501


        :return: The app_user of this Scorecard.  # noqa: E501
        :rtype: AppUser
        """
        return self._app_user

    @app_user.setter
    def app_user(self, app_user):
        """Sets the app_user of this Scorecard.


        :param app_user: The app_user of this Scorecard.  # noqa: E501
        :type: AppUser
        """

        self._app_user = app_user

    @property
    def client(self):
        """Gets the client of this Scorecard.  # noqa: E501


        :return: The client of this Scorecard.  # noqa: E501
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Scorecard.


        :param client: The client of this Scorecard.  # noqa: E501
        :type: Client
        """

        self._client = client

    @property
    def created_on(self):
        """Gets the created_on of this Scorecard.  # noqa: E501


        :return: The created_on of this Scorecard.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Scorecard.


        :param created_on: The created_on of this Scorecard.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def id(self):
        """Gets the id of this Scorecard.  # noqa: E501


        :return: The id of this Scorecard.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Scorecard.


        :param id: The id of this Scorecard.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def new(self):
        """Gets the new of this Scorecard.  # noqa: E501


        :return: The new of this Scorecard.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this Scorecard.


        :param new: The new of this Scorecard.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def question(self):
        """Gets the question of this Scorecard.  # noqa: E501


        :return: The question of this Scorecard.  # noqa: E501
        :rtype: Question
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this Scorecard.


        :param question: The question of this Scorecard.  # noqa: E501
        :type: Question
        """

        self._question = question

    @property
    def response(self):
        """Gets the response of this Scorecard.  # noqa: E501


        :return: The response of this Scorecard.  # noqa: E501
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this Scorecard.


        :param response: The response of this Scorecard.  # noqa: E501
        :type: Response
        """

        self._response = response

    @property
    def survey(self):
        """Gets the survey of this Scorecard.  # noqa: E501


        :return: The survey of this Scorecard.  # noqa: E501
        :rtype: Survey
        """
        return self._survey

    @survey.setter
    def survey(self, survey):
        """Sets the survey of this Scorecard.


        :param survey: The survey of this Scorecard.  # noqa: E501
        :type: Survey
        """

        self._survey = survey

    @property
    def value(self):
        """Gets the value of this Scorecard.  # noqa: E501


        :return: The value of this Scorecard.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Scorecard.


        :param value: The value of this Scorecard.  # noqa: E501
        :type: int
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Scorecard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scorecard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
