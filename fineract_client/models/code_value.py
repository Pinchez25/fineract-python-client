# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodeValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'code': 'Code',
        'description': 'str',
        'id': 'int',
        'label': 'str',
        'mandatory': 'bool',
        'new': 'bool',
        'position': 'int'
    }

    attribute_map = {
        'active': 'active',
        'code': 'code',
        'description': 'description',
        'id': 'id',
        'label': 'label',
        'mandatory': 'mandatory',
        'new': 'new',
        'position': 'position'
    }

    def __init__(self, active=None, code=None, description=None, id=None, label=None, mandatory=None, new=None, position=None):  # noqa: E501
        """CodeValue - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._code = None
        self._description = None
        self._id = None
        self._label = None
        self._mandatory = None
        self._new = None
        self._position = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if mandatory is not None:
            self.mandatory = mandatory
        if new is not None:
            self.new = new
        if position is not None:
            self.position = position

    @property
    def active(self):
        """Gets the active of this CodeValue.  # noqa: E501


        :return: The active of this CodeValue.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CodeValue.


        :param active: The active of this CodeValue.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def code(self):
        """Gets the code of this CodeValue.  # noqa: E501


        :return: The code of this CodeValue.  # noqa: E501
        :rtype: Code
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CodeValue.


        :param code: The code of this CodeValue.  # noqa: E501
        :type: Code
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this CodeValue.  # noqa: E501


        :return: The description of this CodeValue.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CodeValue.


        :param description: The description of this CodeValue.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this CodeValue.  # noqa: E501


        :return: The id of this CodeValue.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodeValue.


        :param id: The id of this CodeValue.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this CodeValue.  # noqa: E501


        :return: The label of this CodeValue.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CodeValue.


        :param label: The label of this CodeValue.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def mandatory(self):
        """Gets the mandatory of this CodeValue.  # noqa: E501


        :return: The mandatory of this CodeValue.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this CodeValue.


        :param mandatory: The mandatory of this CodeValue.  # noqa: E501
        :type: bool
        """

        self._mandatory = mandatory

    @property
    def new(self):
        """Gets the new of this CodeValue.  # noqa: E501


        :return: The new of this CodeValue.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this CodeValue.


        :param new: The new of this CodeValue.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def position(self):
        """Gets the position of this CodeValue.  # noqa: E501


        :return: The position of this CodeValue.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CodeValue.


        :param position: The position of this CodeValue.  # noqa: E501
        :type: int
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodeValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodeValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
