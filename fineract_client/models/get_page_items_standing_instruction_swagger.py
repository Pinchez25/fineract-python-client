# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetPageItemsStandingInstructionSwagger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_detail_id': 'int',
        'amount': 'float',
        'from_account': 'GetFromAccountStandingInstructionSwagger',
        'from_account_type': 'GetFromAccountTypeStandingInstructionSwagger',
        'from_client': 'GetFromClientStandingInstructionSwagger',
        'from_office': 'GetFromOfficeStandingInstructionSwagger',
        'id': 'int',
        'instruction_type': 'GetInstructionTypeStandingInstructionSwagger',
        'name': 'str',
        'priority': 'GetPriorityStandingInstructionSwagger',
        'recurrence_frequency': 'GetRecurrenceFrequencyStandingInstructionSwagger',
        'recurrence_interval': 'int',
        'recurrence_on_month_day': 'date',
        'recurrence_type': 'GetRecurrenceTypeStandingInstructionSwagger',
        'status': 'GetStatusStandingInstructionSwagger',
        'to_account': 'GetToAccountStandingInstructionSwagger',
        'to_account_type': 'GetToAccountTypeStandingInstructionSwagger',
        'to_client': 'GetToClientStandingInstructionSwagger',
        'to_office': 'GetToOfficeStandingInstructionSwagger',
        'transfer_type': 'GetTransferTypeStandingInstructionSwagger',
        'valid_from': 'date'
    }

    attribute_map = {
        'account_detail_id': 'accountDetailId',
        'amount': 'amount',
        'from_account': 'fromAccount',
        'from_account_type': 'fromAccountType',
        'from_client': 'fromClient',
        'from_office': 'fromOffice',
        'id': 'id',
        'instruction_type': 'instructionType',
        'name': 'name',
        'priority': 'priority',
        'recurrence_frequency': 'recurrenceFrequency',
        'recurrence_interval': 'recurrenceInterval',
        'recurrence_on_month_day': 'recurrenceOnMonthDay',
        'recurrence_type': 'recurrenceType',
        'status': 'status',
        'to_account': 'toAccount',
        'to_account_type': 'toAccountType',
        'to_client': 'toClient',
        'to_office': 'toOffice',
        'transfer_type': 'transferType',
        'valid_from': 'validFrom'
    }

    def __init__(self, account_detail_id=None, amount=None, from_account=None, from_account_type=None, from_client=None, from_office=None, id=None, instruction_type=None, name=None, priority=None, recurrence_frequency=None, recurrence_interval=None, recurrence_on_month_day=None, recurrence_type=None, status=None, to_account=None, to_account_type=None, to_client=None, to_office=None, transfer_type=None, valid_from=None):  # noqa: E501
        """GetPageItemsStandingInstructionSwagger - a model defined in Swagger"""  # noqa: E501
        self._account_detail_id = None
        self._amount = None
        self._from_account = None
        self._from_account_type = None
        self._from_client = None
        self._from_office = None
        self._id = None
        self._instruction_type = None
        self._name = None
        self._priority = None
        self._recurrence_frequency = None
        self._recurrence_interval = None
        self._recurrence_on_month_day = None
        self._recurrence_type = None
        self._status = None
        self._to_account = None
        self._to_account_type = None
        self._to_client = None
        self._to_office = None
        self._transfer_type = None
        self._valid_from = None
        self.discriminator = None
        if account_detail_id is not None:
            self.account_detail_id = account_detail_id
        if amount is not None:
            self.amount = amount
        if from_account is not None:
            self.from_account = from_account
        if from_account_type is not None:
            self.from_account_type = from_account_type
        if from_client is not None:
            self.from_client = from_client
        if from_office is not None:
            self.from_office = from_office
        if id is not None:
            self.id = id
        if instruction_type is not None:
            self.instruction_type = instruction_type
        if name is not None:
            self.name = name
        if priority is not None:
            self.priority = priority
        if recurrence_frequency is not None:
            self.recurrence_frequency = recurrence_frequency
        if recurrence_interval is not None:
            self.recurrence_interval = recurrence_interval
        if recurrence_on_month_day is not None:
            self.recurrence_on_month_day = recurrence_on_month_day
        if recurrence_type is not None:
            self.recurrence_type = recurrence_type
        if status is not None:
            self.status = status
        if to_account is not None:
            self.to_account = to_account
        if to_account_type is not None:
            self.to_account_type = to_account_type
        if to_client is not None:
            self.to_client = to_client
        if to_office is not None:
            self.to_office = to_office
        if transfer_type is not None:
            self.transfer_type = transfer_type
        if valid_from is not None:
            self.valid_from = valid_from

    @property
    def account_detail_id(self):
        """Gets the account_detail_id of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The account_detail_id of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: int
        """
        return self._account_detail_id

    @account_detail_id.setter
    def account_detail_id(self, account_detail_id):
        """Sets the account_detail_id of this GetPageItemsStandingInstructionSwagger.


        :param account_detail_id: The account_detail_id of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: int
        """

        self._account_detail_id = account_detail_id

    @property
    def amount(self):
        """Gets the amount of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The amount of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetPageItemsStandingInstructionSwagger.


        :param amount: The amount of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def from_account(self):
        """Gets the from_account of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The from_account of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetFromAccountStandingInstructionSwagger
        """
        return self._from_account

    @from_account.setter
    def from_account(self, from_account):
        """Sets the from_account of this GetPageItemsStandingInstructionSwagger.


        :param from_account: The from_account of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetFromAccountStandingInstructionSwagger
        """

        self._from_account = from_account

    @property
    def from_account_type(self):
        """Gets the from_account_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The from_account_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetFromAccountTypeStandingInstructionSwagger
        """
        return self._from_account_type

    @from_account_type.setter
    def from_account_type(self, from_account_type):
        """Sets the from_account_type of this GetPageItemsStandingInstructionSwagger.


        :param from_account_type: The from_account_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetFromAccountTypeStandingInstructionSwagger
        """

        self._from_account_type = from_account_type

    @property
    def from_client(self):
        """Gets the from_client of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The from_client of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetFromClientStandingInstructionSwagger
        """
        return self._from_client

    @from_client.setter
    def from_client(self, from_client):
        """Sets the from_client of this GetPageItemsStandingInstructionSwagger.


        :param from_client: The from_client of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetFromClientStandingInstructionSwagger
        """

        self._from_client = from_client

    @property
    def from_office(self):
        """Gets the from_office of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The from_office of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetFromOfficeStandingInstructionSwagger
        """
        return self._from_office

    @from_office.setter
    def from_office(self, from_office):
        """Sets the from_office of this GetPageItemsStandingInstructionSwagger.


        :param from_office: The from_office of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetFromOfficeStandingInstructionSwagger
        """

        self._from_office = from_office

    @property
    def id(self):
        """Gets the id of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The id of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetPageItemsStandingInstructionSwagger.


        :param id: The id of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def instruction_type(self):
        """Gets the instruction_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The instruction_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetInstructionTypeStandingInstructionSwagger
        """
        return self._instruction_type

    @instruction_type.setter
    def instruction_type(self, instruction_type):
        """Sets the instruction_type of this GetPageItemsStandingInstructionSwagger.


        :param instruction_type: The instruction_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetInstructionTypeStandingInstructionSwagger
        """

        self._instruction_type = instruction_type

    @property
    def name(self):
        """Gets the name of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The name of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetPageItemsStandingInstructionSwagger.


        :param name: The name of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The priority of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetPriorityStandingInstructionSwagger
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this GetPageItemsStandingInstructionSwagger.


        :param priority: The priority of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetPriorityStandingInstructionSwagger
        """

        self._priority = priority

    @property
    def recurrence_frequency(self):
        """Gets the recurrence_frequency of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The recurrence_frequency of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetRecurrenceFrequencyStandingInstructionSwagger
        """
        return self._recurrence_frequency

    @recurrence_frequency.setter
    def recurrence_frequency(self, recurrence_frequency):
        """Sets the recurrence_frequency of this GetPageItemsStandingInstructionSwagger.


        :param recurrence_frequency: The recurrence_frequency of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetRecurrenceFrequencyStandingInstructionSwagger
        """

        self._recurrence_frequency = recurrence_frequency

    @property
    def recurrence_interval(self):
        """Gets the recurrence_interval of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The recurrence_interval of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_interval

    @recurrence_interval.setter
    def recurrence_interval(self, recurrence_interval):
        """Sets the recurrence_interval of this GetPageItemsStandingInstructionSwagger.


        :param recurrence_interval: The recurrence_interval of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: int
        """

        self._recurrence_interval = recurrence_interval

    @property
    def recurrence_on_month_day(self):
        """Gets the recurrence_on_month_day of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The recurrence_on_month_day of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: date
        """
        return self._recurrence_on_month_day

    @recurrence_on_month_day.setter
    def recurrence_on_month_day(self, recurrence_on_month_day):
        """Sets the recurrence_on_month_day of this GetPageItemsStandingInstructionSwagger.


        :param recurrence_on_month_day: The recurrence_on_month_day of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: date
        """

        self._recurrence_on_month_day = recurrence_on_month_day

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The recurrence_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetRecurrenceTypeStandingInstructionSwagger
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this GetPageItemsStandingInstructionSwagger.


        :param recurrence_type: The recurrence_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetRecurrenceTypeStandingInstructionSwagger
        """

        self._recurrence_type = recurrence_type

    @property
    def status(self):
        """Gets the status of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The status of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetStatusStandingInstructionSwagger
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetPageItemsStandingInstructionSwagger.


        :param status: The status of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetStatusStandingInstructionSwagger
        """

        self._status = status

    @property
    def to_account(self):
        """Gets the to_account of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The to_account of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetToAccountStandingInstructionSwagger
        """
        return self._to_account

    @to_account.setter
    def to_account(self, to_account):
        """Sets the to_account of this GetPageItemsStandingInstructionSwagger.


        :param to_account: The to_account of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetToAccountStandingInstructionSwagger
        """

        self._to_account = to_account

    @property
    def to_account_type(self):
        """Gets the to_account_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The to_account_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetToAccountTypeStandingInstructionSwagger
        """
        return self._to_account_type

    @to_account_type.setter
    def to_account_type(self, to_account_type):
        """Sets the to_account_type of this GetPageItemsStandingInstructionSwagger.


        :param to_account_type: The to_account_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetToAccountTypeStandingInstructionSwagger
        """

        self._to_account_type = to_account_type

    @property
    def to_client(self):
        """Gets the to_client of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The to_client of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetToClientStandingInstructionSwagger
        """
        return self._to_client

    @to_client.setter
    def to_client(self, to_client):
        """Sets the to_client of this GetPageItemsStandingInstructionSwagger.


        :param to_client: The to_client of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetToClientStandingInstructionSwagger
        """

        self._to_client = to_client

    @property
    def to_office(self):
        """Gets the to_office of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The to_office of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetToOfficeStandingInstructionSwagger
        """
        return self._to_office

    @to_office.setter
    def to_office(self, to_office):
        """Sets the to_office of this GetPageItemsStandingInstructionSwagger.


        :param to_office: The to_office of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetToOfficeStandingInstructionSwagger
        """

        self._to_office = to_office

    @property
    def transfer_type(self):
        """Gets the transfer_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The transfer_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: GetTransferTypeStandingInstructionSwagger
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this GetPageItemsStandingInstructionSwagger.


        :param transfer_type: The transfer_type of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: GetTransferTypeStandingInstructionSwagger
        """

        self._transfer_type = transfer_type

    @property
    def valid_from(self):
        """Gets the valid_from of this GetPageItemsStandingInstructionSwagger.  # noqa: E501


        :return: The valid_from of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this GetPageItemsStandingInstructionSwagger.


        :param valid_from: The valid_from of this GetPageItemsStandingInstructionSwagger.  # noqa: E501
        :type: date
        """

        self._valid_from = valid_from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPageItemsStandingInstructionSwagger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPageItemsStandingInstructionSwagger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
