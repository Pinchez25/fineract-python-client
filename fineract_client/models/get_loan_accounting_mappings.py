# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoanAccountingMappings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_off_expense_account': 'GetGlAccountMapping',
        'charge_off_fraud_expense_account': 'GetGlAccountMapping',
        'fund_source_account': 'GetGlAccountMapping',
        'goodwill_credit_account': 'GetGlAccountMapping',
        'income_from_charge_off_fees_account': 'GetGlAccountMapping',
        'income_from_charge_off_interest_account': 'GetGlAccountMapping',
        'income_from_charge_off_penalty_account': 'GetGlAccountMapping',
        'income_from_fee_account': 'GetGlAccountMapping',
        'income_from_goodwill_credit_fees_account': 'GetGlAccountMapping',
        'income_from_goodwill_credit_interest_account': 'GetGlAccountMapping',
        'income_from_goodwill_credit_penalty_account': 'GetGlAccountMapping',
        'income_from_penalty_account': 'GetGlAccountMapping',
        'income_from_recovery_account': 'GetGlAccountMapping',
        'interest_on_loan_account': 'GetGlAccountMapping',
        'loan_portfolio_account': 'GetGlAccountMapping',
        'overpayment_liability_account': 'GetGlAccountMapping',
        'receivable_fee_account': 'GetGlAccountMapping',
        'receivable_interest_account': 'GetGlAccountMapping',
        'receivable_penalty_account': 'GetGlAccountMapping',
        'transfers_in_suspense_account': 'GetGlAccountMapping',
        'write_off_account': 'GetGlAccountMapping'
    }

    attribute_map = {
        'charge_off_expense_account': 'chargeOffExpenseAccount',
        'charge_off_fraud_expense_account': 'chargeOffFraudExpenseAccount',
        'fund_source_account': 'fundSourceAccount',
        'goodwill_credit_account': 'goodwillCreditAccount',
        'income_from_charge_off_fees_account': 'incomeFromChargeOffFeesAccount',
        'income_from_charge_off_interest_account': 'incomeFromChargeOffInterestAccount',
        'income_from_charge_off_penalty_account': 'incomeFromChargeOffPenaltyAccount',
        'income_from_fee_account': 'incomeFromFeeAccount',
        'income_from_goodwill_credit_fees_account': 'incomeFromGoodwillCreditFeesAccount',
        'income_from_goodwill_credit_interest_account': 'incomeFromGoodwillCreditInterestAccount',
        'income_from_goodwill_credit_penalty_account': 'incomeFromGoodwillCreditPenaltyAccount',
        'income_from_penalty_account': 'incomeFromPenaltyAccount',
        'income_from_recovery_account': 'incomeFromRecoveryAccount',
        'interest_on_loan_account': 'interestOnLoanAccount',
        'loan_portfolio_account': 'loanPortfolioAccount',
        'overpayment_liability_account': 'overpaymentLiabilityAccount',
        'receivable_fee_account': 'receivableFeeAccount',
        'receivable_interest_account': 'receivableInterestAccount',
        'receivable_penalty_account': 'receivablePenaltyAccount',
        'transfers_in_suspense_account': 'transfersInSuspenseAccount',
        'write_off_account': 'writeOffAccount'
    }

    def __init__(self, charge_off_expense_account=None, charge_off_fraud_expense_account=None, fund_source_account=None, goodwill_credit_account=None, income_from_charge_off_fees_account=None, income_from_charge_off_interest_account=None, income_from_charge_off_penalty_account=None, income_from_fee_account=None, income_from_goodwill_credit_fees_account=None, income_from_goodwill_credit_interest_account=None, income_from_goodwill_credit_penalty_account=None, income_from_penalty_account=None, income_from_recovery_account=None, interest_on_loan_account=None, loan_portfolio_account=None, overpayment_liability_account=None, receivable_fee_account=None, receivable_interest_account=None, receivable_penalty_account=None, transfers_in_suspense_account=None, write_off_account=None):  # noqa: E501
        """GetLoanAccountingMappings - a model defined in Swagger"""  # noqa: E501
        self._charge_off_expense_account = None
        self._charge_off_fraud_expense_account = None
        self._fund_source_account = None
        self._goodwill_credit_account = None
        self._income_from_charge_off_fees_account = None
        self._income_from_charge_off_interest_account = None
        self._income_from_charge_off_penalty_account = None
        self._income_from_fee_account = None
        self._income_from_goodwill_credit_fees_account = None
        self._income_from_goodwill_credit_interest_account = None
        self._income_from_goodwill_credit_penalty_account = None
        self._income_from_penalty_account = None
        self._income_from_recovery_account = None
        self._interest_on_loan_account = None
        self._loan_portfolio_account = None
        self._overpayment_liability_account = None
        self._receivable_fee_account = None
        self._receivable_interest_account = None
        self._receivable_penalty_account = None
        self._transfers_in_suspense_account = None
        self._write_off_account = None
        self.discriminator = None
        if charge_off_expense_account is not None:
            self.charge_off_expense_account = charge_off_expense_account
        if charge_off_fraud_expense_account is not None:
            self.charge_off_fraud_expense_account = charge_off_fraud_expense_account
        if fund_source_account is not None:
            self.fund_source_account = fund_source_account
        if goodwill_credit_account is not None:
            self.goodwill_credit_account = goodwill_credit_account
        if income_from_charge_off_fees_account is not None:
            self.income_from_charge_off_fees_account = income_from_charge_off_fees_account
        if income_from_charge_off_interest_account is not None:
            self.income_from_charge_off_interest_account = income_from_charge_off_interest_account
        if income_from_charge_off_penalty_account is not None:
            self.income_from_charge_off_penalty_account = income_from_charge_off_penalty_account
        if income_from_fee_account is not None:
            self.income_from_fee_account = income_from_fee_account
        if income_from_goodwill_credit_fees_account is not None:
            self.income_from_goodwill_credit_fees_account = income_from_goodwill_credit_fees_account
        if income_from_goodwill_credit_interest_account is not None:
            self.income_from_goodwill_credit_interest_account = income_from_goodwill_credit_interest_account
        if income_from_goodwill_credit_penalty_account is not None:
            self.income_from_goodwill_credit_penalty_account = income_from_goodwill_credit_penalty_account
        if income_from_penalty_account is not None:
            self.income_from_penalty_account = income_from_penalty_account
        if income_from_recovery_account is not None:
            self.income_from_recovery_account = income_from_recovery_account
        if interest_on_loan_account is not None:
            self.interest_on_loan_account = interest_on_loan_account
        if loan_portfolio_account is not None:
            self.loan_portfolio_account = loan_portfolio_account
        if overpayment_liability_account is not None:
            self.overpayment_liability_account = overpayment_liability_account
        if receivable_fee_account is not None:
            self.receivable_fee_account = receivable_fee_account
        if receivable_interest_account is not None:
            self.receivable_interest_account = receivable_interest_account
        if receivable_penalty_account is not None:
            self.receivable_penalty_account = receivable_penalty_account
        if transfers_in_suspense_account is not None:
            self.transfers_in_suspense_account = transfers_in_suspense_account
        if write_off_account is not None:
            self.write_off_account = write_off_account

    @property
    def charge_off_expense_account(self):
        """Gets the charge_off_expense_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The charge_off_expense_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._charge_off_expense_account

    @charge_off_expense_account.setter
    def charge_off_expense_account(self, charge_off_expense_account):
        """Sets the charge_off_expense_account of this GetLoanAccountingMappings.


        :param charge_off_expense_account: The charge_off_expense_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._charge_off_expense_account = charge_off_expense_account

    @property
    def charge_off_fraud_expense_account(self):
        """Gets the charge_off_fraud_expense_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The charge_off_fraud_expense_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._charge_off_fraud_expense_account

    @charge_off_fraud_expense_account.setter
    def charge_off_fraud_expense_account(self, charge_off_fraud_expense_account):
        """Sets the charge_off_fraud_expense_account of this GetLoanAccountingMappings.


        :param charge_off_fraud_expense_account: The charge_off_fraud_expense_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._charge_off_fraud_expense_account = charge_off_fraud_expense_account

    @property
    def fund_source_account(self):
        """Gets the fund_source_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The fund_source_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._fund_source_account

    @fund_source_account.setter
    def fund_source_account(self, fund_source_account):
        """Sets the fund_source_account of this GetLoanAccountingMappings.


        :param fund_source_account: The fund_source_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._fund_source_account = fund_source_account

    @property
    def goodwill_credit_account(self):
        """Gets the goodwill_credit_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The goodwill_credit_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._goodwill_credit_account

    @goodwill_credit_account.setter
    def goodwill_credit_account(self, goodwill_credit_account):
        """Sets the goodwill_credit_account of this GetLoanAccountingMappings.


        :param goodwill_credit_account: The goodwill_credit_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._goodwill_credit_account = goodwill_credit_account

    @property
    def income_from_charge_off_fees_account(self):
        """Gets the income_from_charge_off_fees_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The income_from_charge_off_fees_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._income_from_charge_off_fees_account

    @income_from_charge_off_fees_account.setter
    def income_from_charge_off_fees_account(self, income_from_charge_off_fees_account):
        """Sets the income_from_charge_off_fees_account of this GetLoanAccountingMappings.


        :param income_from_charge_off_fees_account: The income_from_charge_off_fees_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._income_from_charge_off_fees_account = income_from_charge_off_fees_account

    @property
    def income_from_charge_off_interest_account(self):
        """Gets the income_from_charge_off_interest_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The income_from_charge_off_interest_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._income_from_charge_off_interest_account

    @income_from_charge_off_interest_account.setter
    def income_from_charge_off_interest_account(self, income_from_charge_off_interest_account):
        """Sets the income_from_charge_off_interest_account of this GetLoanAccountingMappings.


        :param income_from_charge_off_interest_account: The income_from_charge_off_interest_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._income_from_charge_off_interest_account = income_from_charge_off_interest_account

    @property
    def income_from_charge_off_penalty_account(self):
        """Gets the income_from_charge_off_penalty_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The income_from_charge_off_penalty_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._income_from_charge_off_penalty_account

    @income_from_charge_off_penalty_account.setter
    def income_from_charge_off_penalty_account(self, income_from_charge_off_penalty_account):
        """Sets the income_from_charge_off_penalty_account of this GetLoanAccountingMappings.


        :param income_from_charge_off_penalty_account: The income_from_charge_off_penalty_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._income_from_charge_off_penalty_account = income_from_charge_off_penalty_account

    @property
    def income_from_fee_account(self):
        """Gets the income_from_fee_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The income_from_fee_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._income_from_fee_account

    @income_from_fee_account.setter
    def income_from_fee_account(self, income_from_fee_account):
        """Sets the income_from_fee_account of this GetLoanAccountingMappings.


        :param income_from_fee_account: The income_from_fee_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._income_from_fee_account = income_from_fee_account

    @property
    def income_from_goodwill_credit_fees_account(self):
        """Gets the income_from_goodwill_credit_fees_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The income_from_goodwill_credit_fees_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._income_from_goodwill_credit_fees_account

    @income_from_goodwill_credit_fees_account.setter
    def income_from_goodwill_credit_fees_account(self, income_from_goodwill_credit_fees_account):
        """Sets the income_from_goodwill_credit_fees_account of this GetLoanAccountingMappings.


        :param income_from_goodwill_credit_fees_account: The income_from_goodwill_credit_fees_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._income_from_goodwill_credit_fees_account = income_from_goodwill_credit_fees_account

    @property
    def income_from_goodwill_credit_interest_account(self):
        """Gets the income_from_goodwill_credit_interest_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The income_from_goodwill_credit_interest_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._income_from_goodwill_credit_interest_account

    @income_from_goodwill_credit_interest_account.setter
    def income_from_goodwill_credit_interest_account(self, income_from_goodwill_credit_interest_account):
        """Sets the income_from_goodwill_credit_interest_account of this GetLoanAccountingMappings.


        :param income_from_goodwill_credit_interest_account: The income_from_goodwill_credit_interest_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._income_from_goodwill_credit_interest_account = income_from_goodwill_credit_interest_account

    @property
    def income_from_goodwill_credit_penalty_account(self):
        """Gets the income_from_goodwill_credit_penalty_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The income_from_goodwill_credit_penalty_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._income_from_goodwill_credit_penalty_account

    @income_from_goodwill_credit_penalty_account.setter
    def income_from_goodwill_credit_penalty_account(self, income_from_goodwill_credit_penalty_account):
        """Sets the income_from_goodwill_credit_penalty_account of this GetLoanAccountingMappings.


        :param income_from_goodwill_credit_penalty_account: The income_from_goodwill_credit_penalty_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._income_from_goodwill_credit_penalty_account = income_from_goodwill_credit_penalty_account

    @property
    def income_from_penalty_account(self):
        """Gets the income_from_penalty_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The income_from_penalty_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._income_from_penalty_account

    @income_from_penalty_account.setter
    def income_from_penalty_account(self, income_from_penalty_account):
        """Sets the income_from_penalty_account of this GetLoanAccountingMappings.


        :param income_from_penalty_account: The income_from_penalty_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._income_from_penalty_account = income_from_penalty_account

    @property
    def income_from_recovery_account(self):
        """Gets the income_from_recovery_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The income_from_recovery_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._income_from_recovery_account

    @income_from_recovery_account.setter
    def income_from_recovery_account(self, income_from_recovery_account):
        """Sets the income_from_recovery_account of this GetLoanAccountingMappings.


        :param income_from_recovery_account: The income_from_recovery_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._income_from_recovery_account = income_from_recovery_account

    @property
    def interest_on_loan_account(self):
        """Gets the interest_on_loan_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The interest_on_loan_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._interest_on_loan_account

    @interest_on_loan_account.setter
    def interest_on_loan_account(self, interest_on_loan_account):
        """Sets the interest_on_loan_account of this GetLoanAccountingMappings.


        :param interest_on_loan_account: The interest_on_loan_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._interest_on_loan_account = interest_on_loan_account

    @property
    def loan_portfolio_account(self):
        """Gets the loan_portfolio_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The loan_portfolio_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._loan_portfolio_account

    @loan_portfolio_account.setter
    def loan_portfolio_account(self, loan_portfolio_account):
        """Sets the loan_portfolio_account of this GetLoanAccountingMappings.


        :param loan_portfolio_account: The loan_portfolio_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._loan_portfolio_account = loan_portfolio_account

    @property
    def overpayment_liability_account(self):
        """Gets the overpayment_liability_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The overpayment_liability_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._overpayment_liability_account

    @overpayment_liability_account.setter
    def overpayment_liability_account(self, overpayment_liability_account):
        """Sets the overpayment_liability_account of this GetLoanAccountingMappings.


        :param overpayment_liability_account: The overpayment_liability_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._overpayment_liability_account = overpayment_liability_account

    @property
    def receivable_fee_account(self):
        """Gets the receivable_fee_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The receivable_fee_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._receivable_fee_account

    @receivable_fee_account.setter
    def receivable_fee_account(self, receivable_fee_account):
        """Sets the receivable_fee_account of this GetLoanAccountingMappings.


        :param receivable_fee_account: The receivable_fee_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._receivable_fee_account = receivable_fee_account

    @property
    def receivable_interest_account(self):
        """Gets the receivable_interest_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The receivable_interest_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._receivable_interest_account

    @receivable_interest_account.setter
    def receivable_interest_account(self, receivable_interest_account):
        """Sets the receivable_interest_account of this GetLoanAccountingMappings.


        :param receivable_interest_account: The receivable_interest_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._receivable_interest_account = receivable_interest_account

    @property
    def receivable_penalty_account(self):
        """Gets the receivable_penalty_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The receivable_penalty_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._receivable_penalty_account

    @receivable_penalty_account.setter
    def receivable_penalty_account(self, receivable_penalty_account):
        """Sets the receivable_penalty_account of this GetLoanAccountingMappings.


        :param receivable_penalty_account: The receivable_penalty_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._receivable_penalty_account = receivable_penalty_account

    @property
    def transfers_in_suspense_account(self):
        """Gets the transfers_in_suspense_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The transfers_in_suspense_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._transfers_in_suspense_account

    @transfers_in_suspense_account.setter
    def transfers_in_suspense_account(self, transfers_in_suspense_account):
        """Sets the transfers_in_suspense_account of this GetLoanAccountingMappings.


        :param transfers_in_suspense_account: The transfers_in_suspense_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._transfers_in_suspense_account = transfers_in_suspense_account

    @property
    def write_off_account(self):
        """Gets the write_off_account of this GetLoanAccountingMappings.  # noqa: E501


        :return: The write_off_account of this GetLoanAccountingMappings.  # noqa: E501
        :rtype: GetGlAccountMapping
        """
        return self._write_off_account

    @write_off_account.setter
    def write_off_account(self, write_off_account):
        """Sets the write_off_account of this GetLoanAccountingMappings.


        :param write_off_account: The write_off_account of this GetLoanAccountingMappings.  # noqa: E501
        :type: GetGlAccountMapping
        """

        self._write_off_account = write_off_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoanAccountingMappings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoanAccountingMappings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
