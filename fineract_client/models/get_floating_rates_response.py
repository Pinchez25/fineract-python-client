# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetFloatingRatesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_on': 'str',
        'id': 'int',
        'is_active': 'bool',
        'is_base_lending_rate': 'bool',
        'modified_by': 'str',
        'modified_on': 'str',
        'name': 'str'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'id': 'id',
        'is_active': 'isActive',
        'is_base_lending_rate': 'isBaseLendingRate',
        'modified_by': 'modifiedBy',
        'modified_on': 'modifiedOn',
        'name': 'name'
    }

    def __init__(self, created_by=None, created_on=None, id=None, is_active=None, is_base_lending_rate=None, modified_by=None, modified_on=None, name=None):  # noqa: E501
        """GetFloatingRatesResponse - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._created_on = None
        self._id = None
        self._is_active = None
        self._is_base_lending_rate = None
        self._modified_by = None
        self._modified_on = None
        self._name = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if id is not None:
            self.id = id
        if is_active is not None:
            self.is_active = is_active
        if is_base_lending_rate is not None:
            self.is_base_lending_rate = is_base_lending_rate
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_on is not None:
            self.modified_on = modified_on
        if name is not None:
            self.name = name

    @property
    def created_by(self):
        """Gets the created_by of this GetFloatingRatesResponse.  # noqa: E501


        :return: The created_by of this GetFloatingRatesResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetFloatingRatesResponse.


        :param created_by: The created_by of this GetFloatingRatesResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this GetFloatingRatesResponse.  # noqa: E501


        :return: The created_on of this GetFloatingRatesResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this GetFloatingRatesResponse.


        :param created_on: The created_on of this GetFloatingRatesResponse.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def id(self):
        """Gets the id of this GetFloatingRatesResponse.  # noqa: E501


        :return: The id of this GetFloatingRatesResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetFloatingRatesResponse.


        :param id: The id of this GetFloatingRatesResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this GetFloatingRatesResponse.  # noqa: E501


        :return: The is_active of this GetFloatingRatesResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this GetFloatingRatesResponse.


        :param is_active: The is_active of this GetFloatingRatesResponse.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_base_lending_rate(self):
        """Gets the is_base_lending_rate of this GetFloatingRatesResponse.  # noqa: E501


        :return: The is_base_lending_rate of this GetFloatingRatesResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_base_lending_rate

    @is_base_lending_rate.setter
    def is_base_lending_rate(self, is_base_lending_rate):
        """Sets the is_base_lending_rate of this GetFloatingRatesResponse.


        :param is_base_lending_rate: The is_base_lending_rate of this GetFloatingRatesResponse.  # noqa: E501
        :type: bool
        """

        self._is_base_lending_rate = is_base_lending_rate

    @property
    def modified_by(self):
        """Gets the modified_by of this GetFloatingRatesResponse.  # noqa: E501


        :return: The modified_by of this GetFloatingRatesResponse.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this GetFloatingRatesResponse.


        :param modified_by: The modified_by of this GetFloatingRatesResponse.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def modified_on(self):
        """Gets the modified_on of this GetFloatingRatesResponse.  # noqa: E501


        :return: The modified_on of this GetFloatingRatesResponse.  # noqa: E501
        :rtype: str
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this GetFloatingRatesResponse.


        :param modified_on: The modified_on of this GetFloatingRatesResponse.  # noqa: E501
        :type: str
        """

        self._modified_on = modified_on

    @property
    def name(self):
        """Gets the name of this GetFloatingRatesResponse.  # noqa: E501


        :return: The name of this GetFloatingRatesResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetFloatingRatesResponse.


        :param name: The name of this GetFloatingRatesResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetFloatingRatesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetFloatingRatesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
