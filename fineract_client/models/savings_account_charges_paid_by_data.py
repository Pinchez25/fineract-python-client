# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SavingsAccountChargesPaidByData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'charge_id': 'int',
        'fee_charge': 'bool',
        'penalty_charge': 'bool',
        'savings_account_charge_data': 'SavingsAccountChargeData'
    }

    attribute_map = {
        'amount': 'amount',
        'charge_id': 'chargeId',
        'fee_charge': 'feeCharge',
        'penalty_charge': 'penaltyCharge',
        'savings_account_charge_data': 'savingsAccountChargeData'
    }

    def __init__(self, amount=None, charge_id=None, fee_charge=None, penalty_charge=None, savings_account_charge_data=None):  # noqa: E501
        """SavingsAccountChargesPaidByData - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._charge_id = None
        self._fee_charge = None
        self._penalty_charge = None
        self._savings_account_charge_data = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if charge_id is not None:
            self.charge_id = charge_id
        if fee_charge is not None:
            self.fee_charge = fee_charge
        if penalty_charge is not None:
            self.penalty_charge = penalty_charge
        if savings_account_charge_data is not None:
            self.savings_account_charge_data = savings_account_charge_data

    @property
    def amount(self):
        """Gets the amount of this SavingsAccountChargesPaidByData.  # noqa: E501


        :return: The amount of this SavingsAccountChargesPaidByData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SavingsAccountChargesPaidByData.


        :param amount: The amount of this SavingsAccountChargesPaidByData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def charge_id(self):
        """Gets the charge_id of this SavingsAccountChargesPaidByData.  # noqa: E501


        :return: The charge_id of this SavingsAccountChargesPaidByData.  # noqa: E501
        :rtype: int
        """
        return self._charge_id

    @charge_id.setter
    def charge_id(self, charge_id):
        """Sets the charge_id of this SavingsAccountChargesPaidByData.


        :param charge_id: The charge_id of this SavingsAccountChargesPaidByData.  # noqa: E501
        :type: int
        """

        self._charge_id = charge_id

    @property
    def fee_charge(self):
        """Gets the fee_charge of this SavingsAccountChargesPaidByData.  # noqa: E501


        :return: The fee_charge of this SavingsAccountChargesPaidByData.  # noqa: E501
        :rtype: bool
        """
        return self._fee_charge

    @fee_charge.setter
    def fee_charge(self, fee_charge):
        """Sets the fee_charge of this SavingsAccountChargesPaidByData.


        :param fee_charge: The fee_charge of this SavingsAccountChargesPaidByData.  # noqa: E501
        :type: bool
        """

        self._fee_charge = fee_charge

    @property
    def penalty_charge(self):
        """Gets the penalty_charge of this SavingsAccountChargesPaidByData.  # noqa: E501


        :return: The penalty_charge of this SavingsAccountChargesPaidByData.  # noqa: E501
        :rtype: bool
        """
        return self._penalty_charge

    @penalty_charge.setter
    def penalty_charge(self, penalty_charge):
        """Sets the penalty_charge of this SavingsAccountChargesPaidByData.


        :param penalty_charge: The penalty_charge of this SavingsAccountChargesPaidByData.  # noqa: E501
        :type: bool
        """

        self._penalty_charge = penalty_charge

    @property
    def savings_account_charge_data(self):
        """Gets the savings_account_charge_data of this SavingsAccountChargesPaidByData.  # noqa: E501


        :return: The savings_account_charge_data of this SavingsAccountChargesPaidByData.  # noqa: E501
        :rtype: SavingsAccountChargeData
        """
        return self._savings_account_charge_data

    @savings_account_charge_data.setter
    def savings_account_charge_data(self, savings_account_charge_data):
        """Sets the savings_account_charge_data of this SavingsAccountChargesPaidByData.


        :param savings_account_charge_data: The savings_account_charge_data of this SavingsAccountChargesPaidByData.  # noqa: E501
        :type: SavingsAccountChargeData
        """

        self._savings_account_charge_data = savings_account_charge_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavingsAccountChargesPaidByData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavingsAccountChargesPaidByData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
