# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'account_number_requires_auto_generation': 'bool',
        'activated_by': 'AppUser',
        'activation_date': 'date',
        'active': 'bool',
        'client_classification': 'CodeValue',
        'client_type': 'CodeValue',
        'closed': 'bool',
        'closed_by': 'AppUser',
        'closure_date': 'date',
        'closure_reason': 'CodeValue',
        'created_by': 'int',
        'created_date': 'datetime',
        'created_date_time': 'datetime',
        'date_of_birth': 'date',
        'display_name': 'str',
        'email_address': 'str',
        'external_id': 'ExternalId',
        'firstname': 'str',
        'fullname': 'str',
        'gender': 'CodeValue',
        'groups': 'list[Group]',
        'id': 'int',
        'identifiers': 'list[ClientIdentifier]',
        'image': 'Image',
        'last_modified_by': 'int',
        'last_modified_date': 'datetime',
        'last_modified_date_time': 'datetime',
        'lastname': 'str',
        'legal_form': 'int',
        'middlename': 'str',
        'mobile_no': 'str',
        'new': 'bool',
        'not_active': 'bool',
        'not_pending': 'bool',
        'not_staff': 'bool',
        'office': 'Office',
        'office_joining_date': 'date',
        'pending': 'bool',
        'proposed_transfer_date': 'date',
        'reactivate_date': 'date',
        'reactivated_by': 'AppUser',
        'rejected': 'bool',
        'rejected_by': 'AppUser',
        'rejected_date': 'date',
        'rejection_date': 'date',
        'rejection_reason': 'CodeValue',
        'reopened_by': 'AppUser',
        'reopened_date': 'date',
        'savings_account_id': 'int',
        'savings_product_id': 'int',
        'staff': 'Staff',
        'status': 'int',
        'sub_status': 'CodeValue',
        'submitted_on_date': 'date',
        'transfer_in_progress': 'bool',
        'transfer_in_progress_or_on_hold': 'bool',
        'transfer_on_hold': 'bool',
        'transfer_to_office': 'Office',
        'withdrawal_date': 'date',
        'withdrawal_reason': 'CodeValue',
        'withdrawn': 'bool',
        'withdrawn_by': 'AppUser'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'account_number_requires_auto_generation': 'accountNumberRequiresAutoGeneration',
        'activated_by': 'activatedBy',
        'activation_date': 'activationDate',
        'active': 'active',
        'client_classification': 'clientClassification',
        'client_type': 'clientType',
        'closed': 'closed',
        'closed_by': 'closedBy',
        'closure_date': 'closureDate',
        'closure_reason': 'closureReason',
        'created_by': 'createdBy',
        'created_date': 'createdDate',
        'created_date_time': 'createdDateTime',
        'date_of_birth': 'dateOfBirth',
        'display_name': 'displayName',
        'email_address': 'emailAddress',
        'external_id': 'externalId',
        'firstname': 'firstname',
        'fullname': 'fullname',
        'gender': 'gender',
        'groups': 'groups',
        'id': 'id',
        'identifiers': 'identifiers',
        'image': 'image',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_date': 'lastModifiedDate',
        'last_modified_date_time': 'lastModifiedDateTime',
        'lastname': 'lastname',
        'legal_form': 'legalForm',
        'middlename': 'middlename',
        'mobile_no': 'mobileNo',
        'new': 'new',
        'not_active': 'notActive',
        'not_pending': 'notPending',
        'not_staff': 'notStaff',
        'office': 'office',
        'office_joining_date': 'officeJoiningDate',
        'pending': 'pending',
        'proposed_transfer_date': 'proposedTransferDate',
        'reactivate_date': 'reactivateDate',
        'reactivated_by': 'reactivatedBy',
        'rejected': 'rejected',
        'rejected_by': 'rejectedBy',
        'rejected_date': 'rejectedDate',
        'rejection_date': 'rejectionDate',
        'rejection_reason': 'rejectionReason',
        'reopened_by': 'reopenedBy',
        'reopened_date': 'reopenedDate',
        'savings_account_id': 'savingsAccountId',
        'savings_product_id': 'savingsProductId',
        'staff': 'staff',
        'status': 'status',
        'sub_status': 'subStatus',
        'submitted_on_date': 'submittedOnDate',
        'transfer_in_progress': 'transferInProgress',
        'transfer_in_progress_or_on_hold': 'transferInProgressOrOnHold',
        'transfer_on_hold': 'transferOnHold',
        'transfer_to_office': 'transferToOffice',
        'withdrawal_date': 'withdrawalDate',
        'withdrawal_reason': 'withdrawalReason',
        'withdrawn': 'withdrawn',
        'withdrawn_by': 'withdrawnBy'
    }

    def __init__(self, account_number=None, account_number_requires_auto_generation=None, activated_by=None, activation_date=None, active=None, client_classification=None, client_type=None, closed=None, closed_by=None, closure_date=None, closure_reason=None, created_by=None, created_date=None, created_date_time=None, date_of_birth=None, display_name=None, email_address=None, external_id=None, firstname=None, fullname=None, gender=None, groups=None, id=None, identifiers=None, image=None, last_modified_by=None, last_modified_date=None, last_modified_date_time=None, lastname=None, legal_form=None, middlename=None, mobile_no=None, new=None, not_active=None, not_pending=None, not_staff=None, office=None, office_joining_date=None, pending=None, proposed_transfer_date=None, reactivate_date=None, reactivated_by=None, rejected=None, rejected_by=None, rejected_date=None, rejection_date=None, rejection_reason=None, reopened_by=None, reopened_date=None, savings_account_id=None, savings_product_id=None, staff=None, status=None, sub_status=None, submitted_on_date=None, transfer_in_progress=None, transfer_in_progress_or_on_hold=None, transfer_on_hold=None, transfer_to_office=None, withdrawal_date=None, withdrawal_reason=None, withdrawn=None, withdrawn_by=None):  # noqa: E501
        """Client - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._account_number_requires_auto_generation = None
        self._activated_by = None
        self._activation_date = None
        self._active = None
        self._client_classification = None
        self._client_type = None
        self._closed = None
        self._closed_by = None
        self._closure_date = None
        self._closure_reason = None
        self._created_by = None
        self._created_date = None
        self._created_date_time = None
        self._date_of_birth = None
        self._display_name = None
        self._email_address = None
        self._external_id = None
        self._firstname = None
        self._fullname = None
        self._gender = None
        self._groups = None
        self._id = None
        self._identifiers = None
        self._image = None
        self._last_modified_by = None
        self._last_modified_date = None
        self._last_modified_date_time = None
        self._lastname = None
        self._legal_form = None
        self._middlename = None
        self._mobile_no = None
        self._new = None
        self._not_active = None
        self._not_pending = None
        self._not_staff = None
        self._office = None
        self._office_joining_date = None
        self._pending = None
        self._proposed_transfer_date = None
        self._reactivate_date = None
        self._reactivated_by = None
        self._rejected = None
        self._rejected_by = None
        self._rejected_date = None
        self._rejection_date = None
        self._rejection_reason = None
        self._reopened_by = None
        self._reopened_date = None
        self._savings_account_id = None
        self._savings_product_id = None
        self._staff = None
        self._status = None
        self._sub_status = None
        self._submitted_on_date = None
        self._transfer_in_progress = None
        self._transfer_in_progress_or_on_hold = None
        self._transfer_on_hold = None
        self._transfer_to_office = None
        self._withdrawal_date = None
        self._withdrawal_reason = None
        self._withdrawn = None
        self._withdrawn_by = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if account_number_requires_auto_generation is not None:
            self.account_number_requires_auto_generation = account_number_requires_auto_generation
        if activated_by is not None:
            self.activated_by = activated_by
        if activation_date is not None:
            self.activation_date = activation_date
        if active is not None:
            self.active = active
        if client_classification is not None:
            self.client_classification = client_classification
        if client_type is not None:
            self.client_type = client_type
        if closed is not None:
            self.closed = closed
        if closed_by is not None:
            self.closed_by = closed_by
        if closure_date is not None:
            self.closure_date = closure_date
        if closure_reason is not None:
            self.closure_reason = closure_reason
        self.created_by = created_by
        self.created_date = created_date
        self.created_date_time = created_date_time
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if display_name is not None:
            self.display_name = display_name
        if email_address is not None:
            self.email_address = email_address
        if external_id is not None:
            self.external_id = external_id
        if firstname is not None:
            self.firstname = firstname
        if fullname is not None:
            self.fullname = fullname
        if gender is not None:
            self.gender = gender
        if groups is not None:
            self.groups = groups
        if id is not None:
            self.id = id
        if identifiers is not None:
            self.identifiers = identifiers
        if image is not None:
            self.image = image
        self.last_modified_by = last_modified_by
        self.last_modified_date = last_modified_date
        self.last_modified_date_time = last_modified_date_time
        if lastname is not None:
            self.lastname = lastname
        if legal_form is not None:
            self.legal_form = legal_form
        if middlename is not None:
            self.middlename = middlename
        if mobile_no is not None:
            self.mobile_no = mobile_no
        if new is not None:
            self.new = new
        if not_active is not None:
            self.not_active = not_active
        if not_pending is not None:
            self.not_pending = not_pending
        if not_staff is not None:
            self.not_staff = not_staff
        if office is not None:
            self.office = office
        if office_joining_date is not None:
            self.office_joining_date = office_joining_date
        if pending is not None:
            self.pending = pending
        if proposed_transfer_date is not None:
            self.proposed_transfer_date = proposed_transfer_date
        if reactivate_date is not None:
            self.reactivate_date = reactivate_date
        if reactivated_by is not None:
            self.reactivated_by = reactivated_by
        if rejected is not None:
            self.rejected = rejected
        if rejected_by is not None:
            self.rejected_by = rejected_by
        if rejected_date is not None:
            self.rejected_date = rejected_date
        if rejection_date is not None:
            self.rejection_date = rejection_date
        if rejection_reason is not None:
            self.rejection_reason = rejection_reason
        if reopened_by is not None:
            self.reopened_by = reopened_by
        if reopened_date is not None:
            self.reopened_date = reopened_date
        if savings_account_id is not None:
            self.savings_account_id = savings_account_id
        if savings_product_id is not None:
            self.savings_product_id = savings_product_id
        if staff is not None:
            self.staff = staff
        if status is not None:
            self.status = status
        if sub_status is not None:
            self.sub_status = sub_status
        if submitted_on_date is not None:
            self.submitted_on_date = submitted_on_date
        if transfer_in_progress is not None:
            self.transfer_in_progress = transfer_in_progress
        if transfer_in_progress_or_on_hold is not None:
            self.transfer_in_progress_or_on_hold = transfer_in_progress_or_on_hold
        if transfer_on_hold is not None:
            self.transfer_on_hold = transfer_on_hold
        if transfer_to_office is not None:
            self.transfer_to_office = transfer_to_office
        if withdrawal_date is not None:
            self.withdrawal_date = withdrawal_date
        if withdrawal_reason is not None:
            self.withdrawal_reason = withdrawal_reason
        if withdrawn is not None:
            self.withdrawn = withdrawn
        if withdrawn_by is not None:
            self.withdrawn_by = withdrawn_by

    @property
    def account_number(self):
        """Gets the account_number of this Client.  # noqa: E501


        :return: The account_number of this Client.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Client.


        :param account_number: The account_number of this Client.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def account_number_requires_auto_generation(self):
        """Gets the account_number_requires_auto_generation of this Client.  # noqa: E501


        :return: The account_number_requires_auto_generation of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._account_number_requires_auto_generation

    @account_number_requires_auto_generation.setter
    def account_number_requires_auto_generation(self, account_number_requires_auto_generation):
        """Sets the account_number_requires_auto_generation of this Client.


        :param account_number_requires_auto_generation: The account_number_requires_auto_generation of this Client.  # noqa: E501
        :type: bool
        """

        self._account_number_requires_auto_generation = account_number_requires_auto_generation

    @property
    def activated_by(self):
        """Gets the activated_by of this Client.  # noqa: E501


        :return: The activated_by of this Client.  # noqa: E501
        :rtype: AppUser
        """
        return self._activated_by

    @activated_by.setter
    def activated_by(self, activated_by):
        """Sets the activated_by of this Client.


        :param activated_by: The activated_by of this Client.  # noqa: E501
        :type: AppUser
        """

        self._activated_by = activated_by

    @property
    def activation_date(self):
        """Gets the activation_date of this Client.  # noqa: E501


        :return: The activation_date of this Client.  # noqa: E501
        :rtype: date
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this Client.


        :param activation_date: The activation_date of this Client.  # noqa: E501
        :type: date
        """

        self._activation_date = activation_date

    @property
    def active(self):
        """Gets the active of this Client.  # noqa: E501


        :return: The active of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Client.


        :param active: The active of this Client.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def client_classification(self):
        """Gets the client_classification of this Client.  # noqa: E501


        :return: The client_classification of this Client.  # noqa: E501
        :rtype: CodeValue
        """
        return self._client_classification

    @client_classification.setter
    def client_classification(self, client_classification):
        """Sets the client_classification of this Client.


        :param client_classification: The client_classification of this Client.  # noqa: E501
        :type: CodeValue
        """

        self._client_classification = client_classification

    @property
    def client_type(self):
        """Gets the client_type of this Client.  # noqa: E501


        :return: The client_type of this Client.  # noqa: E501
        :rtype: CodeValue
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this Client.


        :param client_type: The client_type of this Client.  # noqa: E501
        :type: CodeValue
        """

        self._client_type = client_type

    @property
    def closed(self):
        """Gets the closed of this Client.  # noqa: E501


        :return: The closed of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Client.


        :param closed: The closed of this Client.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def closed_by(self):
        """Gets the closed_by of this Client.  # noqa: E501


        :return: The closed_by of this Client.  # noqa: E501
        :rtype: AppUser
        """
        return self._closed_by

    @closed_by.setter
    def closed_by(self, closed_by):
        """Sets the closed_by of this Client.


        :param closed_by: The closed_by of this Client.  # noqa: E501
        :type: AppUser
        """

        self._closed_by = closed_by

    @property
    def closure_date(self):
        """Gets the closure_date of this Client.  # noqa: E501


        :return: The closure_date of this Client.  # noqa: E501
        :rtype: date
        """
        return self._closure_date

    @closure_date.setter
    def closure_date(self, closure_date):
        """Sets the closure_date of this Client.


        :param closure_date: The closure_date of this Client.  # noqa: E501
        :type: date
        """

        self._closure_date = closure_date

    @property
    def closure_reason(self):
        """Gets the closure_reason of this Client.  # noqa: E501


        :return: The closure_reason of this Client.  # noqa: E501
        :rtype: CodeValue
        """
        return self._closure_reason

    @closure_reason.setter
    def closure_reason(self, closure_reason):
        """Sets the closure_reason of this Client.


        :param closure_reason: The closure_reason of this Client.  # noqa: E501
        :type: CodeValue
        """

        self._closure_reason = closure_reason

    @property
    def created_by(self):
        """Gets the created_by of this Client.  # noqa: E501


        :return: The created_by of this Client.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Client.


        :param created_by: The created_by of this Client.  # noqa: E501
        :type: int
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this Client.  # noqa: E501


        :return: The created_date of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Client.


        :param created_date: The created_date of this Client.  # noqa: E501
        :type: datetime
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def created_date_time(self):
        """Gets the created_date_time of this Client.  # noqa: E501


        :return: The created_date_time of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this Client.


        :param created_date_time: The created_date_time of this Client.  # noqa: E501
        :type: datetime
        """
        if created_date_time is None:
            raise ValueError("Invalid value for `created_date_time`, must not be `None`")  # noqa: E501

        self._created_date_time = created_date_time

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Client.  # noqa: E501


        :return: The date_of_birth of this Client.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Client.


        :param date_of_birth: The date_of_birth of this Client.  # noqa: E501
        :type: date
        """

        self._date_of_birth = date_of_birth

    @property
    def display_name(self):
        """Gets the display_name of this Client.  # noqa: E501


        :return: The display_name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Client.


        :param display_name: The display_name of this Client.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email_address(self):
        """Gets the email_address of this Client.  # noqa: E501


        :return: The email_address of this Client.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Client.


        :param email_address: The email_address of this Client.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def external_id(self):
        """Gets the external_id of this Client.  # noqa: E501


        :return: The external_id of this Client.  # noqa: E501
        :rtype: ExternalId
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Client.


        :param external_id: The external_id of this Client.  # noqa: E501
        :type: ExternalId
        """

        self._external_id = external_id

    @property
    def firstname(self):
        """Gets the firstname of this Client.  # noqa: E501


        :return: The firstname of this Client.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this Client.


        :param firstname: The firstname of this Client.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def fullname(self):
        """Gets the fullname of this Client.  # noqa: E501


        :return: The fullname of this Client.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this Client.


        :param fullname: The fullname of this Client.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def gender(self):
        """Gets the gender of this Client.  # noqa: E501


        :return: The gender of this Client.  # noqa: E501
        :rtype: CodeValue
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Client.


        :param gender: The gender of this Client.  # noqa: E501
        :type: CodeValue
        """

        self._gender = gender

    @property
    def groups(self):
        """Gets the groups of this Client.  # noqa: E501


        :return: The groups of this Client.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Client.


        :param groups: The groups of this Client.  # noqa: E501
        :type: list[Group]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this Client.  # noqa: E501


        :return: The id of this Client.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Client.


        :param id: The id of this Client.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def identifiers(self):
        """Gets the identifiers of this Client.  # noqa: E501


        :return: The identifiers of this Client.  # noqa: E501
        :rtype: list[ClientIdentifier]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Client.


        :param identifiers: The identifiers of this Client.  # noqa: E501
        :type: list[ClientIdentifier]
        """

        self._identifiers = identifiers

    @property
    def image(self):
        """Gets the image of this Client.  # noqa: E501


        :return: The image of this Client.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Client.


        :param image: The image of this Client.  # noqa: E501
        :type: Image
        """

        self._image = image

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this Client.  # noqa: E501


        :return: The last_modified_by of this Client.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this Client.


        :param last_modified_by: The last_modified_by of this Client.  # noqa: E501
        :type: int
        """
        if last_modified_by is None:
            raise ValueError("Invalid value for `last_modified_by`, must not be `None`")  # noqa: E501

        self._last_modified_by = last_modified_by

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Client.  # noqa: E501


        :return: The last_modified_date of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Client.


        :param last_modified_date: The last_modified_date of this Client.  # noqa: E501
        :type: datetime
        """
        if last_modified_date is None:
            raise ValueError("Invalid value for `last_modified_date`, must not be `None`")  # noqa: E501

        self._last_modified_date = last_modified_date

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this Client.  # noqa: E501


        :return: The last_modified_date_time of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this Client.


        :param last_modified_date_time: The last_modified_date_time of this Client.  # noqa: E501
        :type: datetime
        """
        if last_modified_date_time is None:
            raise ValueError("Invalid value for `last_modified_date_time`, must not be `None`")  # noqa: E501

        self._last_modified_date_time = last_modified_date_time

    @property
    def lastname(self):
        """Gets the lastname of this Client.  # noqa: E501


        :return: The lastname of this Client.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this Client.


        :param lastname: The lastname of this Client.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def legal_form(self):
        """Gets the legal_form of this Client.  # noqa: E501


        :return: The legal_form of this Client.  # noqa: E501
        :rtype: int
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this Client.


        :param legal_form: The legal_form of this Client.  # noqa: E501
        :type: int
        """

        self._legal_form = legal_form

    @property
    def middlename(self):
        """Gets the middlename of this Client.  # noqa: E501


        :return: The middlename of this Client.  # noqa: E501
        :rtype: str
        """
        return self._middlename

    @middlename.setter
    def middlename(self, middlename):
        """Sets the middlename of this Client.


        :param middlename: The middlename of this Client.  # noqa: E501
        :type: str
        """

        self._middlename = middlename

    @property
    def mobile_no(self):
        """Gets the mobile_no of this Client.  # noqa: E501


        :return: The mobile_no of this Client.  # noqa: E501
        :rtype: str
        """
        return self._mobile_no

    @mobile_no.setter
    def mobile_no(self, mobile_no):
        """Sets the mobile_no of this Client.


        :param mobile_no: The mobile_no of this Client.  # noqa: E501
        :type: str
        """

        self._mobile_no = mobile_no

    @property
    def new(self):
        """Gets the new of this Client.  # noqa: E501


        :return: The new of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this Client.


        :param new: The new of this Client.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def not_active(self):
        """Gets the not_active of this Client.  # noqa: E501


        :return: The not_active of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._not_active

    @not_active.setter
    def not_active(self, not_active):
        """Sets the not_active of this Client.


        :param not_active: The not_active of this Client.  # noqa: E501
        :type: bool
        """

        self._not_active = not_active

    @property
    def not_pending(self):
        """Gets the not_pending of this Client.  # noqa: E501


        :return: The not_pending of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._not_pending

    @not_pending.setter
    def not_pending(self, not_pending):
        """Sets the not_pending of this Client.


        :param not_pending: The not_pending of this Client.  # noqa: E501
        :type: bool
        """

        self._not_pending = not_pending

    @property
    def not_staff(self):
        """Gets the not_staff of this Client.  # noqa: E501


        :return: The not_staff of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._not_staff

    @not_staff.setter
    def not_staff(self, not_staff):
        """Sets the not_staff of this Client.


        :param not_staff: The not_staff of this Client.  # noqa: E501
        :type: bool
        """

        self._not_staff = not_staff

    @property
    def office(self):
        """Gets the office of this Client.  # noqa: E501


        :return: The office of this Client.  # noqa: E501
        :rtype: Office
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this Client.


        :param office: The office of this Client.  # noqa: E501
        :type: Office
        """

        self._office = office

    @property
    def office_joining_date(self):
        """Gets the office_joining_date of this Client.  # noqa: E501


        :return: The office_joining_date of this Client.  # noqa: E501
        :rtype: date
        """
        return self._office_joining_date

    @office_joining_date.setter
    def office_joining_date(self, office_joining_date):
        """Sets the office_joining_date of this Client.


        :param office_joining_date: The office_joining_date of this Client.  # noqa: E501
        :type: date
        """

        self._office_joining_date = office_joining_date

    @property
    def pending(self):
        """Gets the pending of this Client.  # noqa: E501


        :return: The pending of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this Client.


        :param pending: The pending of this Client.  # noqa: E501
        :type: bool
        """

        self._pending = pending

    @property
    def proposed_transfer_date(self):
        """Gets the proposed_transfer_date of this Client.  # noqa: E501


        :return: The proposed_transfer_date of this Client.  # noqa: E501
        :rtype: date
        """
        return self._proposed_transfer_date

    @proposed_transfer_date.setter
    def proposed_transfer_date(self, proposed_transfer_date):
        """Sets the proposed_transfer_date of this Client.


        :param proposed_transfer_date: The proposed_transfer_date of this Client.  # noqa: E501
        :type: date
        """

        self._proposed_transfer_date = proposed_transfer_date

    @property
    def reactivate_date(self):
        """Gets the reactivate_date of this Client.  # noqa: E501


        :return: The reactivate_date of this Client.  # noqa: E501
        :rtype: date
        """
        return self._reactivate_date

    @reactivate_date.setter
    def reactivate_date(self, reactivate_date):
        """Sets the reactivate_date of this Client.


        :param reactivate_date: The reactivate_date of this Client.  # noqa: E501
        :type: date
        """

        self._reactivate_date = reactivate_date

    @property
    def reactivated_by(self):
        """Gets the reactivated_by of this Client.  # noqa: E501


        :return: The reactivated_by of this Client.  # noqa: E501
        :rtype: AppUser
        """
        return self._reactivated_by

    @reactivated_by.setter
    def reactivated_by(self, reactivated_by):
        """Sets the reactivated_by of this Client.


        :param reactivated_by: The reactivated_by of this Client.  # noqa: E501
        :type: AppUser
        """

        self._reactivated_by = reactivated_by

    @property
    def rejected(self):
        """Gets the rejected of this Client.  # noqa: E501


        :return: The rejected of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this Client.


        :param rejected: The rejected of this Client.  # noqa: E501
        :type: bool
        """

        self._rejected = rejected

    @property
    def rejected_by(self):
        """Gets the rejected_by of this Client.  # noqa: E501


        :return: The rejected_by of this Client.  # noqa: E501
        :rtype: AppUser
        """
        return self._rejected_by

    @rejected_by.setter
    def rejected_by(self, rejected_by):
        """Sets the rejected_by of this Client.


        :param rejected_by: The rejected_by of this Client.  # noqa: E501
        :type: AppUser
        """

        self._rejected_by = rejected_by

    @property
    def rejected_date(self):
        """Gets the rejected_date of this Client.  # noqa: E501


        :return: The rejected_date of this Client.  # noqa: E501
        :rtype: date
        """
        return self._rejected_date

    @rejected_date.setter
    def rejected_date(self, rejected_date):
        """Sets the rejected_date of this Client.


        :param rejected_date: The rejected_date of this Client.  # noqa: E501
        :type: date
        """

        self._rejected_date = rejected_date

    @property
    def rejection_date(self):
        """Gets the rejection_date of this Client.  # noqa: E501


        :return: The rejection_date of this Client.  # noqa: E501
        :rtype: date
        """
        return self._rejection_date

    @rejection_date.setter
    def rejection_date(self, rejection_date):
        """Sets the rejection_date of this Client.


        :param rejection_date: The rejection_date of this Client.  # noqa: E501
        :type: date
        """

        self._rejection_date = rejection_date

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this Client.  # noqa: E501


        :return: The rejection_reason of this Client.  # noqa: E501
        :rtype: CodeValue
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this Client.


        :param rejection_reason: The rejection_reason of this Client.  # noqa: E501
        :type: CodeValue
        """

        self._rejection_reason = rejection_reason

    @property
    def reopened_by(self):
        """Gets the reopened_by of this Client.  # noqa: E501


        :return: The reopened_by of this Client.  # noqa: E501
        :rtype: AppUser
        """
        return self._reopened_by

    @reopened_by.setter
    def reopened_by(self, reopened_by):
        """Sets the reopened_by of this Client.


        :param reopened_by: The reopened_by of this Client.  # noqa: E501
        :type: AppUser
        """

        self._reopened_by = reopened_by

    @property
    def reopened_date(self):
        """Gets the reopened_date of this Client.  # noqa: E501


        :return: The reopened_date of this Client.  # noqa: E501
        :rtype: date
        """
        return self._reopened_date

    @reopened_date.setter
    def reopened_date(self, reopened_date):
        """Sets the reopened_date of this Client.


        :param reopened_date: The reopened_date of this Client.  # noqa: E501
        :type: date
        """

        self._reopened_date = reopened_date

    @property
    def savings_account_id(self):
        """Gets the savings_account_id of this Client.  # noqa: E501


        :return: The savings_account_id of this Client.  # noqa: E501
        :rtype: int
        """
        return self._savings_account_id

    @savings_account_id.setter
    def savings_account_id(self, savings_account_id):
        """Sets the savings_account_id of this Client.


        :param savings_account_id: The savings_account_id of this Client.  # noqa: E501
        :type: int
        """

        self._savings_account_id = savings_account_id

    @property
    def savings_product_id(self):
        """Gets the savings_product_id of this Client.  # noqa: E501


        :return: The savings_product_id of this Client.  # noqa: E501
        :rtype: int
        """
        return self._savings_product_id

    @savings_product_id.setter
    def savings_product_id(self, savings_product_id):
        """Sets the savings_product_id of this Client.


        :param savings_product_id: The savings_product_id of this Client.  # noqa: E501
        :type: int
        """

        self._savings_product_id = savings_product_id

    @property
    def staff(self):
        """Gets the staff of this Client.  # noqa: E501


        :return: The staff of this Client.  # noqa: E501
        :rtype: Staff
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this Client.


        :param staff: The staff of this Client.  # noqa: E501
        :type: Staff
        """

        self._staff = staff

    @property
    def status(self):
        """Gets the status of this Client.  # noqa: E501


        :return: The status of this Client.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Client.


        :param status: The status of this Client.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def sub_status(self):
        """Gets the sub_status of this Client.  # noqa: E501


        :return: The sub_status of this Client.  # noqa: E501
        :rtype: CodeValue
        """
        return self._sub_status

    @sub_status.setter
    def sub_status(self, sub_status):
        """Sets the sub_status of this Client.


        :param sub_status: The sub_status of this Client.  # noqa: E501
        :type: CodeValue
        """

        self._sub_status = sub_status

    @property
    def submitted_on_date(self):
        """Gets the submitted_on_date of this Client.  # noqa: E501


        :return: The submitted_on_date of this Client.  # noqa: E501
        :rtype: date
        """
        return self._submitted_on_date

    @submitted_on_date.setter
    def submitted_on_date(self, submitted_on_date):
        """Sets the submitted_on_date of this Client.


        :param submitted_on_date: The submitted_on_date of this Client.  # noqa: E501
        :type: date
        """

        self._submitted_on_date = submitted_on_date

    @property
    def transfer_in_progress(self):
        """Gets the transfer_in_progress of this Client.  # noqa: E501


        :return: The transfer_in_progress of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._transfer_in_progress

    @transfer_in_progress.setter
    def transfer_in_progress(self, transfer_in_progress):
        """Sets the transfer_in_progress of this Client.


        :param transfer_in_progress: The transfer_in_progress of this Client.  # noqa: E501
        :type: bool
        """

        self._transfer_in_progress = transfer_in_progress

    @property
    def transfer_in_progress_or_on_hold(self):
        """Gets the transfer_in_progress_or_on_hold of this Client.  # noqa: E501


        :return: The transfer_in_progress_or_on_hold of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._transfer_in_progress_or_on_hold

    @transfer_in_progress_or_on_hold.setter
    def transfer_in_progress_or_on_hold(self, transfer_in_progress_or_on_hold):
        """Sets the transfer_in_progress_or_on_hold of this Client.


        :param transfer_in_progress_or_on_hold: The transfer_in_progress_or_on_hold of this Client.  # noqa: E501
        :type: bool
        """

        self._transfer_in_progress_or_on_hold = transfer_in_progress_or_on_hold

    @property
    def transfer_on_hold(self):
        """Gets the transfer_on_hold of this Client.  # noqa: E501


        :return: The transfer_on_hold of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._transfer_on_hold

    @transfer_on_hold.setter
    def transfer_on_hold(self, transfer_on_hold):
        """Sets the transfer_on_hold of this Client.


        :param transfer_on_hold: The transfer_on_hold of this Client.  # noqa: E501
        :type: bool
        """

        self._transfer_on_hold = transfer_on_hold

    @property
    def transfer_to_office(self):
        """Gets the transfer_to_office of this Client.  # noqa: E501


        :return: The transfer_to_office of this Client.  # noqa: E501
        :rtype: Office
        """
        return self._transfer_to_office

    @transfer_to_office.setter
    def transfer_to_office(self, transfer_to_office):
        """Sets the transfer_to_office of this Client.


        :param transfer_to_office: The transfer_to_office of this Client.  # noqa: E501
        :type: Office
        """

        self._transfer_to_office = transfer_to_office

    @property
    def withdrawal_date(self):
        """Gets the withdrawal_date of this Client.  # noqa: E501


        :return: The withdrawal_date of this Client.  # noqa: E501
        :rtype: date
        """
        return self._withdrawal_date

    @withdrawal_date.setter
    def withdrawal_date(self, withdrawal_date):
        """Sets the withdrawal_date of this Client.


        :param withdrawal_date: The withdrawal_date of this Client.  # noqa: E501
        :type: date
        """

        self._withdrawal_date = withdrawal_date

    @property
    def withdrawal_reason(self):
        """Gets the withdrawal_reason of this Client.  # noqa: E501


        :return: The withdrawal_reason of this Client.  # noqa: E501
        :rtype: CodeValue
        """
        return self._withdrawal_reason

    @withdrawal_reason.setter
    def withdrawal_reason(self, withdrawal_reason):
        """Sets the withdrawal_reason of this Client.


        :param withdrawal_reason: The withdrawal_reason of this Client.  # noqa: E501
        :type: CodeValue
        """

        self._withdrawal_reason = withdrawal_reason

    @property
    def withdrawn(self):
        """Gets the withdrawn of this Client.  # noqa: E501


        :return: The withdrawn of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._withdrawn

    @withdrawn.setter
    def withdrawn(self, withdrawn):
        """Sets the withdrawn of this Client.


        :param withdrawn: The withdrawn of this Client.  # noqa: E501
        :type: bool
        """

        self._withdrawn = withdrawn

    @property
    def withdrawn_by(self):
        """Gets the withdrawn_by of this Client.  # noqa: E501


        :return: The withdrawn_by of this Client.  # noqa: E501
        :rtype: AppUser
        """
        return self._withdrawn_by

    @withdrawn_by.setter
    def withdrawn_by(self, withdrawn_by):
        """Sets the withdrawn_by of this Client.


        :param withdrawn_by: The withdrawn_by of this Client.  # noqa: E501
        :type: AppUser
        """

        self._withdrawn_by = withdrawn_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Client, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
