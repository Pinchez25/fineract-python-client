# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetSearchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_account_no': 'int',
        'entity_external_id': 'str',
        'entity_id': 'int',
        'entity_name': 'str',
        'entity_status': 'EnumOptionData',
        'entity_type': 'str',
        'parent_id': 'int',
        'parent_name': 'str'
    }

    attribute_map = {
        'entity_account_no': 'entityAccountNo',
        'entity_external_id': 'entityExternalId',
        'entity_id': 'entityId',
        'entity_name': 'entityName',
        'entity_status': 'entityStatus',
        'entity_type': 'entityType',
        'parent_id': 'parentId',
        'parent_name': 'parentName'
    }

    def __init__(self, entity_account_no=None, entity_external_id=None, entity_id=None, entity_name=None, entity_status=None, entity_type=None, parent_id=None, parent_name=None):  # noqa: E501
        """GetSearchResponse - a model defined in Swagger"""  # noqa: E501
        self._entity_account_no = None
        self._entity_external_id = None
        self._entity_id = None
        self._entity_name = None
        self._entity_status = None
        self._entity_type = None
        self._parent_id = None
        self._parent_name = None
        self.discriminator = None
        if entity_account_no is not None:
            self.entity_account_no = entity_account_no
        if entity_external_id is not None:
            self.entity_external_id = entity_external_id
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_name is not None:
            self.entity_name = entity_name
        if entity_status is not None:
            self.entity_status = entity_status
        if entity_type is not None:
            self.entity_type = entity_type
        if parent_id is not None:
            self.parent_id = parent_id
        if parent_name is not None:
            self.parent_name = parent_name

    @property
    def entity_account_no(self):
        """Gets the entity_account_no of this GetSearchResponse.  # noqa: E501


        :return: The entity_account_no of this GetSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._entity_account_no

    @entity_account_no.setter
    def entity_account_no(self, entity_account_no):
        """Sets the entity_account_no of this GetSearchResponse.


        :param entity_account_no: The entity_account_no of this GetSearchResponse.  # noqa: E501
        :type: int
        """

        self._entity_account_no = entity_account_no

    @property
    def entity_external_id(self):
        """Gets the entity_external_id of this GetSearchResponse.  # noqa: E501


        :return: The entity_external_id of this GetSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_external_id

    @entity_external_id.setter
    def entity_external_id(self, entity_external_id):
        """Sets the entity_external_id of this GetSearchResponse.


        :param entity_external_id: The entity_external_id of this GetSearchResponse.  # noqa: E501
        :type: str
        """

        self._entity_external_id = entity_external_id

    @property
    def entity_id(self):
        """Gets the entity_id of this GetSearchResponse.  # noqa: E501


        :return: The entity_id of this GetSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this GetSearchResponse.


        :param entity_id: The entity_id of this GetSearchResponse.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_name(self):
        """Gets the entity_name of this GetSearchResponse.  # noqa: E501


        :return: The entity_name of this GetSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this GetSearchResponse.


        :param entity_name: The entity_name of this GetSearchResponse.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    @property
    def entity_status(self):
        """Gets the entity_status of this GetSearchResponse.  # noqa: E501


        :return: The entity_status of this GetSearchResponse.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this GetSearchResponse.


        :param entity_status: The entity_status of this GetSearchResponse.  # noqa: E501
        :type: EnumOptionData
        """

        self._entity_status = entity_status

    @property
    def entity_type(self):
        """Gets the entity_type of this GetSearchResponse.  # noqa: E501


        :return: The entity_type of this GetSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this GetSearchResponse.


        :param entity_type: The entity_type of this GetSearchResponse.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def parent_id(self):
        """Gets the parent_id of this GetSearchResponse.  # noqa: E501


        :return: The parent_id of this GetSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this GetSearchResponse.


        :param parent_id: The parent_id of this GetSearchResponse.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def parent_name(self):
        """Gets the parent_name of this GetSearchResponse.  # noqa: E501


        :return: The parent_name of this GetSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this GetSearchResponse.


        :param parent_name: The parent_name of this GetSearchResponse.  # noqa: E501
        :type: str
        """

        self._parent_name = parent_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSearchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSearchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
