# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PutLoansLoanIdRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amortization_type': 'int',
        'charges': 'list[PutLoansLoanIdChanges]',
        'client_id': 'int',
        'collateral': 'list[PutLoansLoanIdCollateral]',
        'create_standing_instruction_at_disbursement': 'bool',
        'date_format': 'str',
        'disbursed_amount_percentage_for_down_payment': 'float',
        'disbursement_data': 'list[PutLoansLoanIdDisbursementData]',
        'enable_auto_repayment_for_down_payment': 'bool',
        'enable_down_payment': 'bool',
        'enable_installment_level_delinquency': 'bool',
        'expected_disbursement_date': 'str',
        'fixed_length': 'int',
        'fixed_principal_percentage_per_installment': 'float',
        'fraud': 'bool',
        'grace_on_arrears_ageing': 'int',
        'interest_calculation_period_type': 'int',
        'interest_charged_from_date': 'str',
        'interest_rate_per_period': 'float',
        'interest_type': 'int',
        'is_equal_amortization': 'bool',
        'is_topup': 'bool',
        'link_account_id': 'int',
        'loan_id_to_close': 'int',
        'loan_schedule_processing_type': 'str',
        'loan_term_frequency': 'int',
        'loan_term_frequency_type': 'int',
        'loan_type': 'str',
        'locale': 'str',
        'max_outstanding_loan_balance': 'int',
        'number_of_repayments': 'int',
        'principal': 'int',
        'product_id': 'int',
        'repayment_every': 'int',
        'repayment_frequency_day_of_week_type': 'int',
        'repayment_frequency_nth_day_type': 'int',
        'repayment_frequency_type': 'int',
        'repayments_starting_from_date': 'str',
        'submitted_on_date': 'str',
        'transaction_processing_strategy_code': 'str'
    }

    attribute_map = {
        'amortization_type': 'amortizationType',
        'charges': 'charges',
        'client_id': 'clientId',
        'collateral': 'collateral',
        'create_standing_instruction_at_disbursement': 'createStandingInstructionAtDisbursement',
        'date_format': 'dateFormat',
        'disbursed_amount_percentage_for_down_payment': 'disbursedAmountPercentageForDownPayment',
        'disbursement_data': 'disbursementData',
        'enable_auto_repayment_for_down_payment': 'enableAutoRepaymentForDownPayment',
        'enable_down_payment': 'enableDownPayment',
        'enable_installment_level_delinquency': 'enableInstallmentLevelDelinquency',
        'expected_disbursement_date': 'expectedDisbursementDate',
        'fixed_length': 'fixedLength',
        'fixed_principal_percentage_per_installment': 'fixedPrincipalPercentagePerInstallment',
        'fraud': 'fraud',
        'grace_on_arrears_ageing': 'graceOnArrearsAgeing',
        'interest_calculation_period_type': 'interestCalculationPeriodType',
        'interest_charged_from_date': 'interestChargedFromDate',
        'interest_rate_per_period': 'interestRatePerPeriod',
        'interest_type': 'interestType',
        'is_equal_amortization': 'isEqualAmortization',
        'is_topup': 'isTopup',
        'link_account_id': 'linkAccountId',
        'loan_id_to_close': 'loanIdToClose',
        'loan_schedule_processing_type': 'loanScheduleProcessingType',
        'loan_term_frequency': 'loanTermFrequency',
        'loan_term_frequency_type': 'loanTermFrequencyType',
        'loan_type': 'loanType',
        'locale': 'locale',
        'max_outstanding_loan_balance': 'maxOutstandingLoanBalance',
        'number_of_repayments': 'numberOfRepayments',
        'principal': 'principal',
        'product_id': 'productId',
        'repayment_every': 'repaymentEvery',
        'repayment_frequency_day_of_week_type': 'repaymentFrequencyDayOfWeekType',
        'repayment_frequency_nth_day_type': 'repaymentFrequencyNthDayType',
        'repayment_frequency_type': 'repaymentFrequencyType',
        'repayments_starting_from_date': 'repaymentsStartingFromDate',
        'submitted_on_date': 'submittedOnDate',
        'transaction_processing_strategy_code': 'transactionProcessingStrategyCode'
    }

    def __init__(self, amortization_type=None, charges=None, client_id=None, collateral=None, create_standing_instruction_at_disbursement=None, date_format=None, disbursed_amount_percentage_for_down_payment=None, disbursement_data=None, enable_auto_repayment_for_down_payment=None, enable_down_payment=None, enable_installment_level_delinquency=None, expected_disbursement_date=None, fixed_length=None, fixed_principal_percentage_per_installment=None, fraud=None, grace_on_arrears_ageing=None, interest_calculation_period_type=None, interest_charged_from_date=None, interest_rate_per_period=None, interest_type=None, is_equal_amortization=None, is_topup=None, link_account_id=None, loan_id_to_close=None, loan_schedule_processing_type=None, loan_term_frequency=None, loan_term_frequency_type=None, loan_type=None, locale=None, max_outstanding_loan_balance=None, number_of_repayments=None, principal=None, product_id=None, repayment_every=None, repayment_frequency_day_of_week_type=None, repayment_frequency_nth_day_type=None, repayment_frequency_type=None, repayments_starting_from_date=None, submitted_on_date=None, transaction_processing_strategy_code=None):  # noqa: E501
        """PutLoansLoanIdRequest - a model defined in Swagger"""  # noqa: E501
        self._amortization_type = None
        self._charges = None
        self._client_id = None
        self._collateral = None
        self._create_standing_instruction_at_disbursement = None
        self._date_format = None
        self._disbursed_amount_percentage_for_down_payment = None
        self._disbursement_data = None
        self._enable_auto_repayment_for_down_payment = None
        self._enable_down_payment = None
        self._enable_installment_level_delinquency = None
        self._expected_disbursement_date = None
        self._fixed_length = None
        self._fixed_principal_percentage_per_installment = None
        self._fraud = None
        self._grace_on_arrears_ageing = None
        self._interest_calculation_period_type = None
        self._interest_charged_from_date = None
        self._interest_rate_per_period = None
        self._interest_type = None
        self._is_equal_amortization = None
        self._is_topup = None
        self._link_account_id = None
        self._loan_id_to_close = None
        self._loan_schedule_processing_type = None
        self._loan_term_frequency = None
        self._loan_term_frequency_type = None
        self._loan_type = None
        self._locale = None
        self._max_outstanding_loan_balance = None
        self._number_of_repayments = None
        self._principal = None
        self._product_id = None
        self._repayment_every = None
        self._repayment_frequency_day_of_week_type = None
        self._repayment_frequency_nth_day_type = None
        self._repayment_frequency_type = None
        self._repayments_starting_from_date = None
        self._submitted_on_date = None
        self._transaction_processing_strategy_code = None
        self.discriminator = None
        if amortization_type is not None:
            self.amortization_type = amortization_type
        if charges is not None:
            self.charges = charges
        if client_id is not None:
            self.client_id = client_id
        if collateral is not None:
            self.collateral = collateral
        if create_standing_instruction_at_disbursement is not None:
            self.create_standing_instruction_at_disbursement = create_standing_instruction_at_disbursement
        if date_format is not None:
            self.date_format = date_format
        if disbursed_amount_percentage_for_down_payment is not None:
            self.disbursed_amount_percentage_for_down_payment = disbursed_amount_percentage_for_down_payment
        if disbursement_data is not None:
            self.disbursement_data = disbursement_data
        if enable_auto_repayment_for_down_payment is not None:
            self.enable_auto_repayment_for_down_payment = enable_auto_repayment_for_down_payment
        if enable_down_payment is not None:
            self.enable_down_payment = enable_down_payment
        if enable_installment_level_delinquency is not None:
            self.enable_installment_level_delinquency = enable_installment_level_delinquency
        if expected_disbursement_date is not None:
            self.expected_disbursement_date = expected_disbursement_date
        if fixed_length is not None:
            self.fixed_length = fixed_length
        if fixed_principal_percentage_per_installment is not None:
            self.fixed_principal_percentage_per_installment = fixed_principal_percentage_per_installment
        if fraud is not None:
            self.fraud = fraud
        if grace_on_arrears_ageing is not None:
            self.grace_on_arrears_ageing = grace_on_arrears_ageing
        if interest_calculation_period_type is not None:
            self.interest_calculation_period_type = interest_calculation_period_type
        if interest_charged_from_date is not None:
            self.interest_charged_from_date = interest_charged_from_date
        if interest_rate_per_period is not None:
            self.interest_rate_per_period = interest_rate_per_period
        if interest_type is not None:
            self.interest_type = interest_type
        if is_equal_amortization is not None:
            self.is_equal_amortization = is_equal_amortization
        if is_topup is not None:
            self.is_topup = is_topup
        if link_account_id is not None:
            self.link_account_id = link_account_id
        if loan_id_to_close is not None:
            self.loan_id_to_close = loan_id_to_close
        if loan_schedule_processing_type is not None:
            self.loan_schedule_processing_type = loan_schedule_processing_type
        if loan_term_frequency is not None:
            self.loan_term_frequency = loan_term_frequency
        if loan_term_frequency_type is not None:
            self.loan_term_frequency_type = loan_term_frequency_type
        if loan_type is not None:
            self.loan_type = loan_type
        if locale is not None:
            self.locale = locale
        if max_outstanding_loan_balance is not None:
            self.max_outstanding_loan_balance = max_outstanding_loan_balance
        if number_of_repayments is not None:
            self.number_of_repayments = number_of_repayments
        if principal is not None:
            self.principal = principal
        if product_id is not None:
            self.product_id = product_id
        if repayment_every is not None:
            self.repayment_every = repayment_every
        if repayment_frequency_day_of_week_type is not None:
            self.repayment_frequency_day_of_week_type = repayment_frequency_day_of_week_type
        if repayment_frequency_nth_day_type is not None:
            self.repayment_frequency_nth_day_type = repayment_frequency_nth_day_type
        if repayment_frequency_type is not None:
            self.repayment_frequency_type = repayment_frequency_type
        if repayments_starting_from_date is not None:
            self.repayments_starting_from_date = repayments_starting_from_date
        if submitted_on_date is not None:
            self.submitted_on_date = submitted_on_date
        if transaction_processing_strategy_code is not None:
            self.transaction_processing_strategy_code = transaction_processing_strategy_code

    @property
    def amortization_type(self):
        """Gets the amortization_type of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The amortization_type of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._amortization_type

    @amortization_type.setter
    def amortization_type(self, amortization_type):
        """Sets the amortization_type of this PutLoansLoanIdRequest.


        :param amortization_type: The amortization_type of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._amortization_type = amortization_type

    @property
    def charges(self):
        """Gets the charges of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The charges of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: list[PutLoansLoanIdChanges]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this PutLoansLoanIdRequest.


        :param charges: The charges of this PutLoansLoanIdRequest.  # noqa: E501
        :type: list[PutLoansLoanIdChanges]
        """

        self._charges = charges

    @property
    def client_id(self):
        """Gets the client_id of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The client_id of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PutLoansLoanIdRequest.


        :param client_id: The client_id of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def collateral(self):
        """Gets the collateral of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The collateral of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: list[PutLoansLoanIdCollateral]
        """
        return self._collateral

    @collateral.setter
    def collateral(self, collateral):
        """Sets the collateral of this PutLoansLoanIdRequest.


        :param collateral: The collateral of this PutLoansLoanIdRequest.  # noqa: E501
        :type: list[PutLoansLoanIdCollateral]
        """

        self._collateral = collateral

    @property
    def create_standing_instruction_at_disbursement(self):
        """Gets the create_standing_instruction_at_disbursement of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The create_standing_instruction_at_disbursement of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: bool
        """
        return self._create_standing_instruction_at_disbursement

    @create_standing_instruction_at_disbursement.setter
    def create_standing_instruction_at_disbursement(self, create_standing_instruction_at_disbursement):
        """Sets the create_standing_instruction_at_disbursement of this PutLoansLoanIdRequest.


        :param create_standing_instruction_at_disbursement: The create_standing_instruction_at_disbursement of this PutLoansLoanIdRequest.  # noqa: E501
        :type: bool
        """

        self._create_standing_instruction_at_disbursement = create_standing_instruction_at_disbursement

    @property
    def date_format(self):
        """Gets the date_format of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The date_format of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this PutLoansLoanIdRequest.


        :param date_format: The date_format of this PutLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def disbursed_amount_percentage_for_down_payment(self):
        """Gets the disbursed_amount_percentage_for_down_payment of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The disbursed_amount_percentage_for_down_payment of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: float
        """
        return self._disbursed_amount_percentage_for_down_payment

    @disbursed_amount_percentage_for_down_payment.setter
    def disbursed_amount_percentage_for_down_payment(self, disbursed_amount_percentage_for_down_payment):
        """Sets the disbursed_amount_percentage_for_down_payment of this PutLoansLoanIdRequest.


        :param disbursed_amount_percentage_for_down_payment: The disbursed_amount_percentage_for_down_payment of this PutLoansLoanIdRequest.  # noqa: E501
        :type: float
        """

        self._disbursed_amount_percentage_for_down_payment = disbursed_amount_percentage_for_down_payment

    @property
    def disbursement_data(self):
        """Gets the disbursement_data of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The disbursement_data of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: list[PutLoansLoanIdDisbursementData]
        """
        return self._disbursement_data

    @disbursement_data.setter
    def disbursement_data(self, disbursement_data):
        """Sets the disbursement_data of this PutLoansLoanIdRequest.


        :param disbursement_data: The disbursement_data of this PutLoansLoanIdRequest.  # noqa: E501
        :type: list[PutLoansLoanIdDisbursementData]
        """

        self._disbursement_data = disbursement_data

    @property
    def enable_auto_repayment_for_down_payment(self):
        """Gets the enable_auto_repayment_for_down_payment of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The enable_auto_repayment_for_down_payment of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auto_repayment_for_down_payment

    @enable_auto_repayment_for_down_payment.setter
    def enable_auto_repayment_for_down_payment(self, enable_auto_repayment_for_down_payment):
        """Sets the enable_auto_repayment_for_down_payment of this PutLoansLoanIdRequest.


        :param enable_auto_repayment_for_down_payment: The enable_auto_repayment_for_down_payment of this PutLoansLoanIdRequest.  # noqa: E501
        :type: bool
        """

        self._enable_auto_repayment_for_down_payment = enable_auto_repayment_for_down_payment

    @property
    def enable_down_payment(self):
        """Gets the enable_down_payment of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The enable_down_payment of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_down_payment

    @enable_down_payment.setter
    def enable_down_payment(self, enable_down_payment):
        """Sets the enable_down_payment of this PutLoansLoanIdRequest.


        :param enable_down_payment: The enable_down_payment of this PutLoansLoanIdRequest.  # noqa: E501
        :type: bool
        """

        self._enable_down_payment = enable_down_payment

    @property
    def enable_installment_level_delinquency(self):
        """Gets the enable_installment_level_delinquency of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The enable_installment_level_delinquency of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_installment_level_delinquency

    @enable_installment_level_delinquency.setter
    def enable_installment_level_delinquency(self, enable_installment_level_delinquency):
        """Sets the enable_installment_level_delinquency of this PutLoansLoanIdRequest.


        :param enable_installment_level_delinquency: The enable_installment_level_delinquency of this PutLoansLoanIdRequest.  # noqa: E501
        :type: bool
        """

        self._enable_installment_level_delinquency = enable_installment_level_delinquency

    @property
    def expected_disbursement_date(self):
        """Gets the expected_disbursement_date of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The expected_disbursement_date of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._expected_disbursement_date

    @expected_disbursement_date.setter
    def expected_disbursement_date(self, expected_disbursement_date):
        """Sets the expected_disbursement_date of this PutLoansLoanIdRequest.


        :param expected_disbursement_date: The expected_disbursement_date of this PutLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._expected_disbursement_date = expected_disbursement_date

    @property
    def fixed_length(self):
        """Gets the fixed_length of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The fixed_length of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._fixed_length

    @fixed_length.setter
    def fixed_length(self, fixed_length):
        """Sets the fixed_length of this PutLoansLoanIdRequest.


        :param fixed_length: The fixed_length of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._fixed_length = fixed_length

    @property
    def fixed_principal_percentage_per_installment(self):
        """Gets the fixed_principal_percentage_per_installment of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The fixed_principal_percentage_per_installment of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: float
        """
        return self._fixed_principal_percentage_per_installment

    @fixed_principal_percentage_per_installment.setter
    def fixed_principal_percentage_per_installment(self, fixed_principal_percentage_per_installment):
        """Sets the fixed_principal_percentage_per_installment of this PutLoansLoanIdRequest.


        :param fixed_principal_percentage_per_installment: The fixed_principal_percentage_per_installment of this PutLoansLoanIdRequest.  # noqa: E501
        :type: float
        """

        self._fixed_principal_percentage_per_installment = fixed_principal_percentage_per_installment

    @property
    def fraud(self):
        """Gets the fraud of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The fraud of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: bool
        """
        return self._fraud

    @fraud.setter
    def fraud(self, fraud):
        """Sets the fraud of this PutLoansLoanIdRequest.


        :param fraud: The fraud of this PutLoansLoanIdRequest.  # noqa: E501
        :type: bool
        """

        self._fraud = fraud

    @property
    def grace_on_arrears_ageing(self):
        """Gets the grace_on_arrears_ageing of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The grace_on_arrears_ageing of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._grace_on_arrears_ageing

    @grace_on_arrears_ageing.setter
    def grace_on_arrears_ageing(self, grace_on_arrears_ageing):
        """Sets the grace_on_arrears_ageing of this PutLoansLoanIdRequest.


        :param grace_on_arrears_ageing: The grace_on_arrears_ageing of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._grace_on_arrears_ageing = grace_on_arrears_ageing

    @property
    def interest_calculation_period_type(self):
        """Gets the interest_calculation_period_type of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The interest_calculation_period_type of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._interest_calculation_period_type

    @interest_calculation_period_type.setter
    def interest_calculation_period_type(self, interest_calculation_period_type):
        """Sets the interest_calculation_period_type of this PutLoansLoanIdRequest.


        :param interest_calculation_period_type: The interest_calculation_period_type of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._interest_calculation_period_type = interest_calculation_period_type

    @property
    def interest_charged_from_date(self):
        """Gets the interest_charged_from_date of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The interest_charged_from_date of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._interest_charged_from_date

    @interest_charged_from_date.setter
    def interest_charged_from_date(self, interest_charged_from_date):
        """Sets the interest_charged_from_date of this PutLoansLoanIdRequest.


        :param interest_charged_from_date: The interest_charged_from_date of this PutLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._interest_charged_from_date = interest_charged_from_date

    @property
    def interest_rate_per_period(self):
        """Gets the interest_rate_per_period of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The interest_rate_per_period of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate_per_period

    @interest_rate_per_period.setter
    def interest_rate_per_period(self, interest_rate_per_period):
        """Sets the interest_rate_per_period of this PutLoansLoanIdRequest.


        :param interest_rate_per_period: The interest_rate_per_period of this PutLoansLoanIdRequest.  # noqa: E501
        :type: float
        """

        self._interest_rate_per_period = interest_rate_per_period

    @property
    def interest_type(self):
        """Gets the interest_type of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The interest_type of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._interest_type

    @interest_type.setter
    def interest_type(self, interest_type):
        """Sets the interest_type of this PutLoansLoanIdRequest.


        :param interest_type: The interest_type of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._interest_type = interest_type

    @property
    def is_equal_amortization(self):
        """Gets the is_equal_amortization of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The is_equal_amortization of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_equal_amortization

    @is_equal_amortization.setter
    def is_equal_amortization(self, is_equal_amortization):
        """Sets the is_equal_amortization of this PutLoansLoanIdRequest.


        :param is_equal_amortization: The is_equal_amortization of this PutLoansLoanIdRequest.  # noqa: E501
        :type: bool
        """

        self._is_equal_amortization = is_equal_amortization

    @property
    def is_topup(self):
        """Gets the is_topup of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The is_topup of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_topup

    @is_topup.setter
    def is_topup(self, is_topup):
        """Sets the is_topup of this PutLoansLoanIdRequest.


        :param is_topup: The is_topup of this PutLoansLoanIdRequest.  # noqa: E501
        :type: bool
        """

        self._is_topup = is_topup

    @property
    def link_account_id(self):
        """Gets the link_account_id of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The link_account_id of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._link_account_id

    @link_account_id.setter
    def link_account_id(self, link_account_id):
        """Sets the link_account_id of this PutLoansLoanIdRequest.


        :param link_account_id: The link_account_id of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._link_account_id = link_account_id

    @property
    def loan_id_to_close(self):
        """Gets the loan_id_to_close of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The loan_id_to_close of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._loan_id_to_close

    @loan_id_to_close.setter
    def loan_id_to_close(self, loan_id_to_close):
        """Sets the loan_id_to_close of this PutLoansLoanIdRequest.


        :param loan_id_to_close: The loan_id_to_close of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._loan_id_to_close = loan_id_to_close

    @property
    def loan_schedule_processing_type(self):
        """Gets the loan_schedule_processing_type of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The loan_schedule_processing_type of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._loan_schedule_processing_type

    @loan_schedule_processing_type.setter
    def loan_schedule_processing_type(self, loan_schedule_processing_type):
        """Sets the loan_schedule_processing_type of this PutLoansLoanIdRequest.


        :param loan_schedule_processing_type: The loan_schedule_processing_type of this PutLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._loan_schedule_processing_type = loan_schedule_processing_type

    @property
    def loan_term_frequency(self):
        """Gets the loan_term_frequency of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The loan_term_frequency of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._loan_term_frequency

    @loan_term_frequency.setter
    def loan_term_frequency(self, loan_term_frequency):
        """Sets the loan_term_frequency of this PutLoansLoanIdRequest.


        :param loan_term_frequency: The loan_term_frequency of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._loan_term_frequency = loan_term_frequency

    @property
    def loan_term_frequency_type(self):
        """Gets the loan_term_frequency_type of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The loan_term_frequency_type of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._loan_term_frequency_type

    @loan_term_frequency_type.setter
    def loan_term_frequency_type(self, loan_term_frequency_type):
        """Sets the loan_term_frequency_type of this PutLoansLoanIdRequest.


        :param loan_term_frequency_type: The loan_term_frequency_type of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._loan_term_frequency_type = loan_term_frequency_type

    @property
    def loan_type(self):
        """Gets the loan_type of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The loan_type of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._loan_type

    @loan_type.setter
    def loan_type(self, loan_type):
        """Sets the loan_type of this PutLoansLoanIdRequest.


        :param loan_type: The loan_type of this PutLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._loan_type = loan_type

    @property
    def locale(self):
        """Gets the locale of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The locale of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PutLoansLoanIdRequest.


        :param locale: The locale of this PutLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def max_outstanding_loan_balance(self):
        """Gets the max_outstanding_loan_balance of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The max_outstanding_loan_balance of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_outstanding_loan_balance

    @max_outstanding_loan_balance.setter
    def max_outstanding_loan_balance(self, max_outstanding_loan_balance):
        """Sets the max_outstanding_loan_balance of this PutLoansLoanIdRequest.


        :param max_outstanding_loan_balance: The max_outstanding_loan_balance of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._max_outstanding_loan_balance = max_outstanding_loan_balance

    @property
    def number_of_repayments(self):
        """Gets the number_of_repayments of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The number_of_repayments of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_repayments

    @number_of_repayments.setter
    def number_of_repayments(self, number_of_repayments):
        """Sets the number_of_repayments of this PutLoansLoanIdRequest.


        :param number_of_repayments: The number_of_repayments of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._number_of_repayments = number_of_repayments

    @property
    def principal(self):
        """Gets the principal of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The principal of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this PutLoansLoanIdRequest.


        :param principal: The principal of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._principal = principal

    @property
    def product_id(self):
        """Gets the product_id of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The product_id of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this PutLoansLoanIdRequest.


        :param product_id: The product_id of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def repayment_every(self):
        """Gets the repayment_every of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The repayment_every of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._repayment_every

    @repayment_every.setter
    def repayment_every(self, repayment_every):
        """Sets the repayment_every of this PutLoansLoanIdRequest.


        :param repayment_every: The repayment_every of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._repayment_every = repayment_every

    @property
    def repayment_frequency_day_of_week_type(self):
        """Gets the repayment_frequency_day_of_week_type of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The repayment_frequency_day_of_week_type of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._repayment_frequency_day_of_week_type

    @repayment_frequency_day_of_week_type.setter
    def repayment_frequency_day_of_week_type(self, repayment_frequency_day_of_week_type):
        """Sets the repayment_frequency_day_of_week_type of this PutLoansLoanIdRequest.


        :param repayment_frequency_day_of_week_type: The repayment_frequency_day_of_week_type of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._repayment_frequency_day_of_week_type = repayment_frequency_day_of_week_type

    @property
    def repayment_frequency_nth_day_type(self):
        """Gets the repayment_frequency_nth_day_type of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The repayment_frequency_nth_day_type of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._repayment_frequency_nth_day_type

    @repayment_frequency_nth_day_type.setter
    def repayment_frequency_nth_day_type(self, repayment_frequency_nth_day_type):
        """Sets the repayment_frequency_nth_day_type of this PutLoansLoanIdRequest.


        :param repayment_frequency_nth_day_type: The repayment_frequency_nth_day_type of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._repayment_frequency_nth_day_type = repayment_frequency_nth_day_type

    @property
    def repayment_frequency_type(self):
        """Gets the repayment_frequency_type of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The repayment_frequency_type of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._repayment_frequency_type

    @repayment_frequency_type.setter
    def repayment_frequency_type(self, repayment_frequency_type):
        """Sets the repayment_frequency_type of this PutLoansLoanIdRequest.


        :param repayment_frequency_type: The repayment_frequency_type of this PutLoansLoanIdRequest.  # noqa: E501
        :type: int
        """

        self._repayment_frequency_type = repayment_frequency_type

    @property
    def repayments_starting_from_date(self):
        """Gets the repayments_starting_from_date of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The repayments_starting_from_date of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._repayments_starting_from_date

    @repayments_starting_from_date.setter
    def repayments_starting_from_date(self, repayments_starting_from_date):
        """Sets the repayments_starting_from_date of this PutLoansLoanIdRequest.


        :param repayments_starting_from_date: The repayments_starting_from_date of this PutLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._repayments_starting_from_date = repayments_starting_from_date

    @property
    def submitted_on_date(self):
        """Gets the submitted_on_date of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The submitted_on_date of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._submitted_on_date

    @submitted_on_date.setter
    def submitted_on_date(self, submitted_on_date):
        """Sets the submitted_on_date of this PutLoansLoanIdRequest.


        :param submitted_on_date: The submitted_on_date of this PutLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._submitted_on_date = submitted_on_date

    @property
    def transaction_processing_strategy_code(self):
        """Gets the transaction_processing_strategy_code of this PutLoansLoanIdRequest.  # noqa: E501


        :return: The transaction_processing_strategy_code of this PutLoansLoanIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_processing_strategy_code

    @transaction_processing_strategy_code.setter
    def transaction_processing_strategy_code(self, transaction_processing_strategy_code):
        """Sets the transaction_processing_strategy_code of this PutLoansLoanIdRequest.


        :param transaction_processing_strategy_code: The transaction_processing_strategy_code of this PutLoansLoanIdRequest.  # noqa: E501
        :type: str
        """

        self._transaction_processing_strategy_code = transaction_processing_strategy_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutLoansLoanIdRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutLoansLoanIdRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
