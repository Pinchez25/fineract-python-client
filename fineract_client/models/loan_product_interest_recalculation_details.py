# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanProductInterestRecalculationDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arrears_based_on_original_schedule': 'bool',
        'compounding_frequency_nth_day': 'int',
        'compounding_frequency_on_day': 'int',
        'compounding_frequency_type': 'str',
        'compounding_frequency_weekday': 'int',
        'compounding_interval': 'int',
        'id': 'int',
        'interest_recalculation_compounding_method': 'int',
        'is_compounding_to_be_posted_as_transaction': 'bool',
        'new': 'bool',
        'reschedule_strategy_method': 'int',
        'rest_frequency_nth_day': 'int',
        'rest_frequency_on_day': 'int',
        'rest_frequency_type': 'str',
        'rest_frequency_weekday': 'int',
        'rest_interval': 'int'
    }

    attribute_map = {
        'arrears_based_on_original_schedule': 'arrearsBasedOnOriginalSchedule',
        'compounding_frequency_nth_day': 'compoundingFrequencyNthDay',
        'compounding_frequency_on_day': 'compoundingFrequencyOnDay',
        'compounding_frequency_type': 'compoundingFrequencyType',
        'compounding_frequency_weekday': 'compoundingFrequencyWeekday',
        'compounding_interval': 'compoundingInterval',
        'id': 'id',
        'interest_recalculation_compounding_method': 'interestRecalculationCompoundingMethod',
        'is_compounding_to_be_posted_as_transaction': 'isCompoundingToBePostedAsTransaction',
        'new': 'new',
        'reschedule_strategy_method': 'rescheduleStrategyMethod',
        'rest_frequency_nth_day': 'restFrequencyNthDay',
        'rest_frequency_on_day': 'restFrequencyOnDay',
        'rest_frequency_type': 'restFrequencyType',
        'rest_frequency_weekday': 'restFrequencyWeekday',
        'rest_interval': 'restInterval'
    }

    def __init__(self, arrears_based_on_original_schedule=None, compounding_frequency_nth_day=None, compounding_frequency_on_day=None, compounding_frequency_type=None, compounding_frequency_weekday=None, compounding_interval=None, id=None, interest_recalculation_compounding_method=None, is_compounding_to_be_posted_as_transaction=None, new=None, reschedule_strategy_method=None, rest_frequency_nth_day=None, rest_frequency_on_day=None, rest_frequency_type=None, rest_frequency_weekday=None, rest_interval=None):  # noqa: E501
        """LoanProductInterestRecalculationDetails - a model defined in Swagger"""  # noqa: E501
        self._arrears_based_on_original_schedule = None
        self._compounding_frequency_nth_day = None
        self._compounding_frequency_on_day = None
        self._compounding_frequency_type = None
        self._compounding_frequency_weekday = None
        self._compounding_interval = None
        self._id = None
        self._interest_recalculation_compounding_method = None
        self._is_compounding_to_be_posted_as_transaction = None
        self._new = None
        self._reschedule_strategy_method = None
        self._rest_frequency_nth_day = None
        self._rest_frequency_on_day = None
        self._rest_frequency_type = None
        self._rest_frequency_weekday = None
        self._rest_interval = None
        self.discriminator = None
        if arrears_based_on_original_schedule is not None:
            self.arrears_based_on_original_schedule = arrears_based_on_original_schedule
        if compounding_frequency_nth_day is not None:
            self.compounding_frequency_nth_day = compounding_frequency_nth_day
        if compounding_frequency_on_day is not None:
            self.compounding_frequency_on_day = compounding_frequency_on_day
        if compounding_frequency_type is not None:
            self.compounding_frequency_type = compounding_frequency_type
        if compounding_frequency_weekday is not None:
            self.compounding_frequency_weekday = compounding_frequency_weekday
        if compounding_interval is not None:
            self.compounding_interval = compounding_interval
        if id is not None:
            self.id = id
        if interest_recalculation_compounding_method is not None:
            self.interest_recalculation_compounding_method = interest_recalculation_compounding_method
        if is_compounding_to_be_posted_as_transaction is not None:
            self.is_compounding_to_be_posted_as_transaction = is_compounding_to_be_posted_as_transaction
        if new is not None:
            self.new = new
        if reschedule_strategy_method is not None:
            self.reschedule_strategy_method = reschedule_strategy_method
        if rest_frequency_nth_day is not None:
            self.rest_frequency_nth_day = rest_frequency_nth_day
        if rest_frequency_on_day is not None:
            self.rest_frequency_on_day = rest_frequency_on_day
        if rest_frequency_type is not None:
            self.rest_frequency_type = rest_frequency_type
        if rest_frequency_weekday is not None:
            self.rest_frequency_weekday = rest_frequency_weekday
        if rest_interval is not None:
            self.rest_interval = rest_interval

    @property
    def arrears_based_on_original_schedule(self):
        """Gets the arrears_based_on_original_schedule of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The arrears_based_on_original_schedule of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._arrears_based_on_original_schedule

    @arrears_based_on_original_schedule.setter
    def arrears_based_on_original_schedule(self, arrears_based_on_original_schedule):
        """Sets the arrears_based_on_original_schedule of this LoanProductInterestRecalculationDetails.


        :param arrears_based_on_original_schedule: The arrears_based_on_original_schedule of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: bool
        """

        self._arrears_based_on_original_schedule = arrears_based_on_original_schedule

    @property
    def compounding_frequency_nth_day(self):
        """Gets the compounding_frequency_nth_day of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The compounding_frequency_nth_day of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._compounding_frequency_nth_day

    @compounding_frequency_nth_day.setter
    def compounding_frequency_nth_day(self, compounding_frequency_nth_day):
        """Sets the compounding_frequency_nth_day of this LoanProductInterestRecalculationDetails.


        :param compounding_frequency_nth_day: The compounding_frequency_nth_day of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._compounding_frequency_nth_day = compounding_frequency_nth_day

    @property
    def compounding_frequency_on_day(self):
        """Gets the compounding_frequency_on_day of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The compounding_frequency_on_day of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._compounding_frequency_on_day

    @compounding_frequency_on_day.setter
    def compounding_frequency_on_day(self, compounding_frequency_on_day):
        """Sets the compounding_frequency_on_day of this LoanProductInterestRecalculationDetails.


        :param compounding_frequency_on_day: The compounding_frequency_on_day of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._compounding_frequency_on_day = compounding_frequency_on_day

    @property
    def compounding_frequency_type(self):
        """Gets the compounding_frequency_type of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The compounding_frequency_type of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: str
        """
        return self._compounding_frequency_type

    @compounding_frequency_type.setter
    def compounding_frequency_type(self, compounding_frequency_type):
        """Sets the compounding_frequency_type of this LoanProductInterestRecalculationDetails.


        :param compounding_frequency_type: The compounding_frequency_type of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "SAME_AS_REPAYMENT_PERIOD", "DAILY", "WEEKLY", "MONTHLY"]  # noqa: E501
        if compounding_frequency_type not in allowed_values:
            raise ValueError(
                "Invalid value for `compounding_frequency_type` ({0}), must be one of {1}"  # noqa: E501
                .format(compounding_frequency_type, allowed_values)
            )

        self._compounding_frequency_type = compounding_frequency_type

    @property
    def compounding_frequency_weekday(self):
        """Gets the compounding_frequency_weekday of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The compounding_frequency_weekday of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._compounding_frequency_weekday

    @compounding_frequency_weekday.setter
    def compounding_frequency_weekday(self, compounding_frequency_weekday):
        """Sets the compounding_frequency_weekday of this LoanProductInterestRecalculationDetails.


        :param compounding_frequency_weekday: The compounding_frequency_weekday of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._compounding_frequency_weekday = compounding_frequency_weekday

    @property
    def compounding_interval(self):
        """Gets the compounding_interval of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The compounding_interval of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._compounding_interval

    @compounding_interval.setter
    def compounding_interval(self, compounding_interval):
        """Sets the compounding_interval of this LoanProductInterestRecalculationDetails.


        :param compounding_interval: The compounding_interval of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._compounding_interval = compounding_interval

    @property
    def id(self):
        """Gets the id of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The id of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoanProductInterestRecalculationDetails.


        :param id: The id of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interest_recalculation_compounding_method(self):
        """Gets the interest_recalculation_compounding_method of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The interest_recalculation_compounding_method of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._interest_recalculation_compounding_method

    @interest_recalculation_compounding_method.setter
    def interest_recalculation_compounding_method(self, interest_recalculation_compounding_method):
        """Sets the interest_recalculation_compounding_method of this LoanProductInterestRecalculationDetails.


        :param interest_recalculation_compounding_method: The interest_recalculation_compounding_method of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._interest_recalculation_compounding_method = interest_recalculation_compounding_method

    @property
    def is_compounding_to_be_posted_as_transaction(self):
        """Gets the is_compounding_to_be_posted_as_transaction of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The is_compounding_to_be_posted_as_transaction of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_compounding_to_be_posted_as_transaction

    @is_compounding_to_be_posted_as_transaction.setter
    def is_compounding_to_be_posted_as_transaction(self, is_compounding_to_be_posted_as_transaction):
        """Sets the is_compounding_to_be_posted_as_transaction of this LoanProductInterestRecalculationDetails.


        :param is_compounding_to_be_posted_as_transaction: The is_compounding_to_be_posted_as_transaction of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: bool
        """

        self._is_compounding_to_be_posted_as_transaction = is_compounding_to_be_posted_as_transaction

    @property
    def new(self):
        """Gets the new of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The new of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this LoanProductInterestRecalculationDetails.


        :param new: The new of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def reschedule_strategy_method(self):
        """Gets the reschedule_strategy_method of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The reschedule_strategy_method of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._reschedule_strategy_method

    @reschedule_strategy_method.setter
    def reschedule_strategy_method(self, reschedule_strategy_method):
        """Sets the reschedule_strategy_method of this LoanProductInterestRecalculationDetails.


        :param reschedule_strategy_method: The reschedule_strategy_method of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._reschedule_strategy_method = reschedule_strategy_method

    @property
    def rest_frequency_nth_day(self):
        """Gets the rest_frequency_nth_day of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The rest_frequency_nth_day of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._rest_frequency_nth_day

    @rest_frequency_nth_day.setter
    def rest_frequency_nth_day(self, rest_frequency_nth_day):
        """Sets the rest_frequency_nth_day of this LoanProductInterestRecalculationDetails.


        :param rest_frequency_nth_day: The rest_frequency_nth_day of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._rest_frequency_nth_day = rest_frequency_nth_day

    @property
    def rest_frequency_on_day(self):
        """Gets the rest_frequency_on_day of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The rest_frequency_on_day of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._rest_frequency_on_day

    @rest_frequency_on_day.setter
    def rest_frequency_on_day(self, rest_frequency_on_day):
        """Sets the rest_frequency_on_day of this LoanProductInterestRecalculationDetails.


        :param rest_frequency_on_day: The rest_frequency_on_day of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._rest_frequency_on_day = rest_frequency_on_day

    @property
    def rest_frequency_type(self):
        """Gets the rest_frequency_type of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The rest_frequency_type of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: str
        """
        return self._rest_frequency_type

    @rest_frequency_type.setter
    def rest_frequency_type(self, rest_frequency_type):
        """Sets the rest_frequency_type of this LoanProductInterestRecalculationDetails.


        :param rest_frequency_type: The rest_frequency_type of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "SAME_AS_REPAYMENT_PERIOD", "DAILY", "WEEKLY", "MONTHLY"]  # noqa: E501
        if rest_frequency_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rest_frequency_type` ({0}), must be one of {1}"  # noqa: E501
                .format(rest_frequency_type, allowed_values)
            )

        self._rest_frequency_type = rest_frequency_type

    @property
    def rest_frequency_weekday(self):
        """Gets the rest_frequency_weekday of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The rest_frequency_weekday of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._rest_frequency_weekday

    @rest_frequency_weekday.setter
    def rest_frequency_weekday(self, rest_frequency_weekday):
        """Sets the rest_frequency_weekday of this LoanProductInterestRecalculationDetails.


        :param rest_frequency_weekday: The rest_frequency_weekday of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._rest_frequency_weekday = rest_frequency_weekday

    @property
    def rest_interval(self):
        """Gets the rest_interval of this LoanProductInterestRecalculationDetails.  # noqa: E501


        :return: The rest_interval of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :rtype: int
        """
        return self._rest_interval

    @rest_interval.setter
    def rest_interval(self, rest_interval):
        """Sets the rest_interval of this LoanProductInterestRecalculationDetails.


        :param rest_interval: The rest_interval of this LoanProductInterestRecalculationDetails.  # noqa: E501
        :type: int
        """

        self._rest_interval = rest_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanProductInterestRecalculationDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanProductInterestRecalculationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
