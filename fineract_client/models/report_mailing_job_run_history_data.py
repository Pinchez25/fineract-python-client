# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportMailingJobRunHistoryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date_time': 'datetime',
        'error_log': 'str',
        'error_message': 'str',
        'id': 'int',
        'report_mailing_job_id': 'int',
        'start_date_time': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'end_date_time': 'endDateTime',
        'error_log': 'errorLog',
        'error_message': 'errorMessage',
        'id': 'id',
        'report_mailing_job_id': 'reportMailingJobId',
        'start_date_time': 'startDateTime',
        'status': 'status'
    }

    def __init__(self, end_date_time=None, error_log=None, error_message=None, id=None, report_mailing_job_id=None, start_date_time=None, status=None):  # noqa: E501
        """ReportMailingJobRunHistoryData - a model defined in Swagger"""  # noqa: E501
        self._end_date_time = None
        self._error_log = None
        self._error_message = None
        self._id = None
        self._report_mailing_job_id = None
        self._start_date_time = None
        self._status = None
        self.discriminator = None
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if error_log is not None:
            self.error_log = error_log
        if error_message is not None:
            self.error_message = error_message
        if id is not None:
            self.id = id
        if report_mailing_job_id is not None:
            self.report_mailing_job_id = report_mailing_job_id
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if status is not None:
            self.status = status

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ReportMailingJobRunHistoryData.  # noqa: E501


        :return: The end_date_time of this ReportMailingJobRunHistoryData.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ReportMailingJobRunHistoryData.


        :param end_date_time: The end_date_time of this ReportMailingJobRunHistoryData.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def error_log(self):
        """Gets the error_log of this ReportMailingJobRunHistoryData.  # noqa: E501


        :return: The error_log of this ReportMailingJobRunHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._error_log

    @error_log.setter
    def error_log(self, error_log):
        """Sets the error_log of this ReportMailingJobRunHistoryData.


        :param error_log: The error_log of this ReportMailingJobRunHistoryData.  # noqa: E501
        :type: str
        """

        self._error_log = error_log

    @property
    def error_message(self):
        """Gets the error_message of this ReportMailingJobRunHistoryData.  # noqa: E501


        :return: The error_message of this ReportMailingJobRunHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ReportMailingJobRunHistoryData.


        :param error_message: The error_message of this ReportMailingJobRunHistoryData.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def id(self):
        """Gets the id of this ReportMailingJobRunHistoryData.  # noqa: E501


        :return: The id of this ReportMailingJobRunHistoryData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportMailingJobRunHistoryData.


        :param id: The id of this ReportMailingJobRunHistoryData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def report_mailing_job_id(self):
        """Gets the report_mailing_job_id of this ReportMailingJobRunHistoryData.  # noqa: E501


        :return: The report_mailing_job_id of this ReportMailingJobRunHistoryData.  # noqa: E501
        :rtype: int
        """
        return self._report_mailing_job_id

    @report_mailing_job_id.setter
    def report_mailing_job_id(self, report_mailing_job_id):
        """Sets the report_mailing_job_id of this ReportMailingJobRunHistoryData.


        :param report_mailing_job_id: The report_mailing_job_id of this ReportMailingJobRunHistoryData.  # noqa: E501
        :type: int
        """

        self._report_mailing_job_id = report_mailing_job_id

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ReportMailingJobRunHistoryData.  # noqa: E501


        :return: The start_date_time of this ReportMailingJobRunHistoryData.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ReportMailingJobRunHistoryData.


        :param start_date_time: The start_date_time of this ReportMailingJobRunHistoryData.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def status(self):
        """Gets the status of this ReportMailingJobRunHistoryData.  # noqa: E501


        :return: The status of this ReportMailingJobRunHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReportMailingJobRunHistoryData.


        :param status: The status of this ReportMailingJobRunHistoryData.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportMailingJobRunHistoryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportMailingJobRunHistoryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
