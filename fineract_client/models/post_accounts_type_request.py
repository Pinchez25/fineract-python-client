# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostAccountsTypeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_dividend_calculation_for_inactive_clients': 'bool',
        'application_date': 'str',
        'charges': 'list[PostAccountsCharges]',
        'client_id': 'int',
        'date_format': 'str',
        'external_id': 'str',
        'locale': 'str',
        'lockin_period_frequency': 'int',
        'lockin_period_frequency_type': 'int',
        'minimum_active_period': 'int',
        'minimum_active_period_frequency_type': 'int',
        'product_id': 'int',
        'requested_shares': 'int',
        'savings_account_id': 'int',
        'submitted_date': 'str'
    }

    attribute_map = {
        'allow_dividend_calculation_for_inactive_clients': 'allowDividendCalculationForInactiveClients',
        'application_date': 'applicationDate',
        'charges': 'charges',
        'client_id': 'clientId',
        'date_format': 'dateFormat',
        'external_id': 'externalId',
        'locale': 'locale',
        'lockin_period_frequency': 'lockinPeriodFrequency',
        'lockin_period_frequency_type': 'lockinPeriodFrequencyType',
        'minimum_active_period': 'minimumActivePeriod',
        'minimum_active_period_frequency_type': 'minimumActivePeriodFrequencyType',
        'product_id': 'productId',
        'requested_shares': 'requestedShares',
        'savings_account_id': 'savingsAccountId',
        'submitted_date': 'submittedDate'
    }

    def __init__(self, allow_dividend_calculation_for_inactive_clients=None, application_date=None, charges=None, client_id=None, date_format=None, external_id=None, locale=None, lockin_period_frequency=None, lockin_period_frequency_type=None, minimum_active_period=None, minimum_active_period_frequency_type=None, product_id=None, requested_shares=None, savings_account_id=None, submitted_date=None):  # noqa: E501
        """PostAccountsTypeRequest - a model defined in Swagger"""  # noqa: E501
        self._allow_dividend_calculation_for_inactive_clients = None
        self._application_date = None
        self._charges = None
        self._client_id = None
        self._date_format = None
        self._external_id = None
        self._locale = None
        self._lockin_period_frequency = None
        self._lockin_period_frequency_type = None
        self._minimum_active_period = None
        self._minimum_active_period_frequency_type = None
        self._product_id = None
        self._requested_shares = None
        self._savings_account_id = None
        self._submitted_date = None
        self.discriminator = None
        if allow_dividend_calculation_for_inactive_clients is not None:
            self.allow_dividend_calculation_for_inactive_clients = allow_dividend_calculation_for_inactive_clients
        if application_date is not None:
            self.application_date = application_date
        if charges is not None:
            self.charges = charges
        if client_id is not None:
            self.client_id = client_id
        if date_format is not None:
            self.date_format = date_format
        if external_id is not None:
            self.external_id = external_id
        if locale is not None:
            self.locale = locale
        if lockin_period_frequency is not None:
            self.lockin_period_frequency = lockin_period_frequency
        if lockin_period_frequency_type is not None:
            self.lockin_period_frequency_type = lockin_period_frequency_type
        if minimum_active_period is not None:
            self.minimum_active_period = minimum_active_period
        if minimum_active_period_frequency_type is not None:
            self.minimum_active_period_frequency_type = minimum_active_period_frequency_type
        if product_id is not None:
            self.product_id = product_id
        if requested_shares is not None:
            self.requested_shares = requested_shares
        if savings_account_id is not None:
            self.savings_account_id = savings_account_id
        if submitted_date is not None:
            self.submitted_date = submitted_date

    @property
    def allow_dividend_calculation_for_inactive_clients(self):
        """Gets the allow_dividend_calculation_for_inactive_clients of this PostAccountsTypeRequest.  # noqa: E501


        :return: The allow_dividend_calculation_for_inactive_clients of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_dividend_calculation_for_inactive_clients

    @allow_dividend_calculation_for_inactive_clients.setter
    def allow_dividend_calculation_for_inactive_clients(self, allow_dividend_calculation_for_inactive_clients):
        """Sets the allow_dividend_calculation_for_inactive_clients of this PostAccountsTypeRequest.


        :param allow_dividend_calculation_for_inactive_clients: The allow_dividend_calculation_for_inactive_clients of this PostAccountsTypeRequest.  # noqa: E501
        :type: bool
        """

        self._allow_dividend_calculation_for_inactive_clients = allow_dividend_calculation_for_inactive_clients

    @property
    def application_date(self):
        """Gets the application_date of this PostAccountsTypeRequest.  # noqa: E501


        :return: The application_date of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._application_date

    @application_date.setter
    def application_date(self, application_date):
        """Sets the application_date of this PostAccountsTypeRequest.


        :param application_date: The application_date of this PostAccountsTypeRequest.  # noqa: E501
        :type: str
        """

        self._application_date = application_date

    @property
    def charges(self):
        """Gets the charges of this PostAccountsTypeRequest.  # noqa: E501


        :return: The charges of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: list[PostAccountsCharges]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this PostAccountsTypeRequest.


        :param charges: The charges of this PostAccountsTypeRequest.  # noqa: E501
        :type: list[PostAccountsCharges]
        """

        self._charges = charges

    @property
    def client_id(self):
        """Gets the client_id of this PostAccountsTypeRequest.  # noqa: E501


        :return: The client_id of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PostAccountsTypeRequest.


        :param client_id: The client_id of this PostAccountsTypeRequest.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def date_format(self):
        """Gets the date_format of this PostAccountsTypeRequest.  # noqa: E501


        :return: The date_format of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this PostAccountsTypeRequest.


        :param date_format: The date_format of this PostAccountsTypeRequest.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def external_id(self):
        """Gets the external_id of this PostAccountsTypeRequest.  # noqa: E501


        :return: The external_id of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this PostAccountsTypeRequest.


        :param external_id: The external_id of this PostAccountsTypeRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def locale(self):
        """Gets the locale of this PostAccountsTypeRequest.  # noqa: E501


        :return: The locale of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PostAccountsTypeRequest.


        :param locale: The locale of this PostAccountsTypeRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def lockin_period_frequency(self):
        """Gets the lockin_period_frequency of this PostAccountsTypeRequest.  # noqa: E501


        :return: The lockin_period_frequency of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._lockin_period_frequency

    @lockin_period_frequency.setter
    def lockin_period_frequency(self, lockin_period_frequency):
        """Sets the lockin_period_frequency of this PostAccountsTypeRequest.


        :param lockin_period_frequency: The lockin_period_frequency of this PostAccountsTypeRequest.  # noqa: E501
        :type: int
        """

        self._lockin_period_frequency = lockin_period_frequency

    @property
    def lockin_period_frequency_type(self):
        """Gets the lockin_period_frequency_type of this PostAccountsTypeRequest.  # noqa: E501


        :return: The lockin_period_frequency_type of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._lockin_period_frequency_type

    @lockin_period_frequency_type.setter
    def lockin_period_frequency_type(self, lockin_period_frequency_type):
        """Sets the lockin_period_frequency_type of this PostAccountsTypeRequest.


        :param lockin_period_frequency_type: The lockin_period_frequency_type of this PostAccountsTypeRequest.  # noqa: E501
        :type: int
        """

        self._lockin_period_frequency_type = lockin_period_frequency_type

    @property
    def minimum_active_period(self):
        """Gets the minimum_active_period of this PostAccountsTypeRequest.  # noqa: E501


        :return: The minimum_active_period of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._minimum_active_period

    @minimum_active_period.setter
    def minimum_active_period(self, minimum_active_period):
        """Sets the minimum_active_period of this PostAccountsTypeRequest.


        :param minimum_active_period: The minimum_active_period of this PostAccountsTypeRequest.  # noqa: E501
        :type: int
        """

        self._minimum_active_period = minimum_active_period

    @property
    def minimum_active_period_frequency_type(self):
        """Gets the minimum_active_period_frequency_type of this PostAccountsTypeRequest.  # noqa: E501


        :return: The minimum_active_period_frequency_type of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._minimum_active_period_frequency_type

    @minimum_active_period_frequency_type.setter
    def minimum_active_period_frequency_type(self, minimum_active_period_frequency_type):
        """Sets the minimum_active_period_frequency_type of this PostAccountsTypeRequest.


        :param minimum_active_period_frequency_type: The minimum_active_period_frequency_type of this PostAccountsTypeRequest.  # noqa: E501
        :type: int
        """

        self._minimum_active_period_frequency_type = minimum_active_period_frequency_type

    @property
    def product_id(self):
        """Gets the product_id of this PostAccountsTypeRequest.  # noqa: E501


        :return: The product_id of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this PostAccountsTypeRequest.


        :param product_id: The product_id of this PostAccountsTypeRequest.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def requested_shares(self):
        """Gets the requested_shares of this PostAccountsTypeRequest.  # noqa: E501


        :return: The requested_shares of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._requested_shares

    @requested_shares.setter
    def requested_shares(self, requested_shares):
        """Sets the requested_shares of this PostAccountsTypeRequest.


        :param requested_shares: The requested_shares of this PostAccountsTypeRequest.  # noqa: E501
        :type: int
        """

        self._requested_shares = requested_shares

    @property
    def savings_account_id(self):
        """Gets the savings_account_id of this PostAccountsTypeRequest.  # noqa: E501


        :return: The savings_account_id of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._savings_account_id

    @savings_account_id.setter
    def savings_account_id(self, savings_account_id):
        """Sets the savings_account_id of this PostAccountsTypeRequest.


        :param savings_account_id: The savings_account_id of this PostAccountsTypeRequest.  # noqa: E501
        :type: int
        """

        self._savings_account_id = savings_account_id

    @property
    def submitted_date(self):
        """Gets the submitted_date of this PostAccountsTypeRequest.  # noqa: E501


        :return: The submitted_date of this PostAccountsTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._submitted_date

    @submitted_date.setter
    def submitted_date(self, submitted_date):
        """Sets the submitted_date of this PostAccountsTypeRequest.


        :param submitted_date: The submitted_date of this PostAccountsTypeRequest.  # noqa: E501
        :type: str
        """

        self._submitted_date = submitted_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostAccountsTypeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostAccountsTypeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
