# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SavingsAccountData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_no': 'str',
        'accrual_based_accounting_enabled_on_savings_product': 'bool',
        'activated_on_date': 'date',
        'activation_local_date': 'date',
        'allow_overdraft': 'bool',
        'annual_fee': 'SavingsAccountChargeData',
        'cash_based_accounting_enabled_on_savings_product': 'bool',
        'charge_options': 'list[ChargeData]',
        'charges': 'list[SavingsAccountChargeData]',
        'client_data': 'ClientData',
        'client_id': 'int',
        'client_name': 'str',
        'currency': 'CurrencyData',
        'datatables': 'list[DatatableData]',
        'date_format': 'str',
        'days_to_dormancy': 'int',
        'days_to_escheat': 'int',
        'days_to_inactive': 'int',
        'deposit_type': 'EnumOptionData',
        'deposit_type_id': 'int',
        'enforce_min_required_balance': 'bool',
        'existing_reversed_transaction_ids': 'list[int]',
        'existing_transaction_ids': 'list[int]',
        'external_id': 'str',
        'field_officer_id': 'int',
        'field_officer_name': 'str',
        'field_officer_options': 'list[StaffData]',
        'gl_account_id_for_interest_on_savings': 'int',
        'gl_account_id_for_savings_control': 'int',
        'group_general_data': 'GroupGeneralData',
        'group_id': 'int',
        'group_name': 'str',
        'id': 'int',
        'interest_calculation_days_in_year_type': 'EnumOptionData',
        'interest_calculation_days_in_year_type_id': 'int',
        'interest_calculation_days_in_year_type_options': 'list[EnumOptionData]',
        'interest_calculation_type': 'EnumOptionData',
        'interest_calculation_type_id': 'int',
        'interest_calculation_type_options': 'list[EnumOptionData]',
        'interest_compounding_period_type': 'EnumOptionData',
        'interest_compounding_period_type_id': 'int',
        'interest_compounding_period_type_options': 'list[EnumOptionData]',
        'interest_posting_period_type': 'EnumOptionData',
        'interest_posting_period_type_id': 'int',
        'interest_posting_period_type_options': 'list[EnumOptionData]',
        'is_dormancy_tracking_active': 'bool',
        'last_active_transaction_date': 'date',
        'last_savings_account_transaction': 'SavingsAccountTransactionData',
        'lien_allowed': 'bool',
        'locale': 'str',
        'locked_in_until_date': 'date',
        'lockin_period_frequency': 'int',
        'lockin_period_frequency_type': 'EnumOptionData',
        'lockin_period_frequency_type_id': 'int',
        'lockin_period_frequency_type_options': 'list[EnumOptionData]',
        'max_allowed_lien_limit': 'float',
        'min_balance_for_interest_calculation': 'float',
        'min_overdraft_for_interest_calculation': 'float',
        'min_required_balance': 'float',
        'min_required_opening_balance': 'float',
        'new_savings_account_transaction_data': 'list[SavingsAccountTransactionData]',
        'nominal_annual_interest_rate': 'float',
        'nominal_annual_interest_rate_overdraft': 'float',
        'office_id': 'int',
        'on_hold_funds': 'float',
        'overdraft_limit': 'float',
        'product_id': 'int',
        'product_options': 'list[SavingsProductData]',
        'reason_for_block': 'str',
        'row_index': 'int',
        'savings_account_summary_data': 'SavingsAccountSummaryData',
        'savings_account_transaction_data': 'list[SavingsAccountTransactionData]',
        'savings_account_transaction_summary_wrapper': 'SavingsAccountTransactionDataSummaryWrapper',
        'savings_account_transactions_with_pivot_config': 'list[SavingsAccountTransactionData]',
        'savings_amount_on_hold': 'float',
        'savings_helper': 'SavingsHelper',
        'savings_product': 'SavingsProductData',
        'savings_product_data': 'SavingsProductData',
        'savings_product_id': 'int',
        'savings_product_name': 'str',
        'start_interest_calculation_date': 'date',
        'status': 'SavingsAccountStatusEnumData',
        'sub_status': 'SavingsAccountSubStatusEnumData',
        'submitted_on_date': 'date',
        'summary': 'SavingsAccountSummaryData',
        'tax_group': 'TaxGroupData',
        'timeline': 'SavingsAccountApplicationTimelineData',
        'transactions': 'list[SavingsAccountTransactionData]',
        'updated_transactions': 'list[SavingsAccountTransactionData]',
        'with_hold_tax': 'bool',
        'withdrawal_fee': 'SavingsAccountChargeData',
        'withdrawal_fee_for_transfers': 'bool',
        'withdrawal_fee_type_options': 'list[EnumOptionData]'
    }

    attribute_map = {
        'account_no': 'accountNo',
        'accrual_based_accounting_enabled_on_savings_product': 'accrualBasedAccountingEnabledOnSavingsProduct',
        'activated_on_date': 'activatedOnDate',
        'activation_local_date': 'activationLocalDate',
        'allow_overdraft': 'allowOverdraft',
        'annual_fee': 'annualFee',
        'cash_based_accounting_enabled_on_savings_product': 'cashBasedAccountingEnabledOnSavingsProduct',
        'charge_options': 'chargeOptions',
        'charges': 'charges',
        'client_data': 'clientData',
        'client_id': 'clientId',
        'client_name': 'clientName',
        'currency': 'currency',
        'datatables': 'datatables',
        'date_format': 'dateFormat',
        'days_to_dormancy': 'daysToDormancy',
        'days_to_escheat': 'daysToEscheat',
        'days_to_inactive': 'daysToInactive',
        'deposit_type': 'depositType',
        'deposit_type_id': 'depositTypeId',
        'enforce_min_required_balance': 'enforceMinRequiredBalance',
        'existing_reversed_transaction_ids': 'existingReversedTransactionIds',
        'existing_transaction_ids': 'existingTransactionIds',
        'external_id': 'externalId',
        'field_officer_id': 'fieldOfficerId',
        'field_officer_name': 'fieldOfficerName',
        'field_officer_options': 'fieldOfficerOptions',
        'gl_account_id_for_interest_on_savings': 'glAccountIdForInterestOnSavings',
        'gl_account_id_for_savings_control': 'glAccountIdForSavingsControl',
        'group_general_data': 'groupGeneralData',
        'group_id': 'groupId',
        'group_name': 'groupName',
        'id': 'id',
        'interest_calculation_days_in_year_type': 'interestCalculationDaysInYearType',
        'interest_calculation_days_in_year_type_id': 'interestCalculationDaysInYearTypeId',
        'interest_calculation_days_in_year_type_options': 'interestCalculationDaysInYearTypeOptions',
        'interest_calculation_type': 'interestCalculationType',
        'interest_calculation_type_id': 'interestCalculationTypeId',
        'interest_calculation_type_options': 'interestCalculationTypeOptions',
        'interest_compounding_period_type': 'interestCompoundingPeriodType',
        'interest_compounding_period_type_id': 'interestCompoundingPeriodTypeId',
        'interest_compounding_period_type_options': 'interestCompoundingPeriodTypeOptions',
        'interest_posting_period_type': 'interestPostingPeriodType',
        'interest_posting_period_type_id': 'interestPostingPeriodTypeId',
        'interest_posting_period_type_options': 'interestPostingPeriodTypeOptions',
        'is_dormancy_tracking_active': 'isDormancyTrackingActive',
        'last_active_transaction_date': 'lastActiveTransactionDate',
        'last_savings_account_transaction': 'lastSavingsAccountTransaction',
        'lien_allowed': 'lienAllowed',
        'locale': 'locale',
        'locked_in_until_date': 'lockedInUntilDate',
        'lockin_period_frequency': 'lockinPeriodFrequency',
        'lockin_period_frequency_type': 'lockinPeriodFrequencyType',
        'lockin_period_frequency_type_id': 'lockinPeriodFrequencyTypeId',
        'lockin_period_frequency_type_options': 'lockinPeriodFrequencyTypeOptions',
        'max_allowed_lien_limit': 'maxAllowedLienLimit',
        'min_balance_for_interest_calculation': 'minBalanceForInterestCalculation',
        'min_overdraft_for_interest_calculation': 'minOverdraftForInterestCalculation',
        'min_required_balance': 'minRequiredBalance',
        'min_required_opening_balance': 'minRequiredOpeningBalance',
        'new_savings_account_transaction_data': 'newSavingsAccountTransactionData',
        'nominal_annual_interest_rate': 'nominalAnnualInterestRate',
        'nominal_annual_interest_rate_overdraft': 'nominalAnnualInterestRateOverdraft',
        'office_id': 'officeId',
        'on_hold_funds': 'onHoldFunds',
        'overdraft_limit': 'overdraftLimit',
        'product_id': 'productId',
        'product_options': 'productOptions',
        'reason_for_block': 'reasonForBlock',
        'row_index': 'rowIndex',
        'savings_account_summary_data': 'savingsAccountSummaryData',
        'savings_account_transaction_data': 'savingsAccountTransactionData',
        'savings_account_transaction_summary_wrapper': 'savingsAccountTransactionSummaryWrapper',
        'savings_account_transactions_with_pivot_config': 'savingsAccountTransactionsWithPivotConfig',
        'savings_amount_on_hold': 'savingsAmountOnHold',
        'savings_helper': 'savingsHelper',
        'savings_product': 'savingsProduct',
        'savings_product_data': 'savingsProductData',
        'savings_product_id': 'savingsProductId',
        'savings_product_name': 'savingsProductName',
        'start_interest_calculation_date': 'startInterestCalculationDate',
        'status': 'status',
        'sub_status': 'subStatus',
        'submitted_on_date': 'submittedOnDate',
        'summary': 'summary',
        'tax_group': 'taxGroup',
        'timeline': 'timeline',
        'transactions': 'transactions',
        'updated_transactions': 'updatedTransactions',
        'with_hold_tax': 'withHoldTax',
        'withdrawal_fee': 'withdrawalFee',
        'withdrawal_fee_for_transfers': 'withdrawalFeeForTransfers',
        'withdrawal_fee_type_options': 'withdrawalFeeTypeOptions'
    }

    def __init__(self, account_no=None, accrual_based_accounting_enabled_on_savings_product=None, activated_on_date=None, activation_local_date=None, allow_overdraft=None, annual_fee=None, cash_based_accounting_enabled_on_savings_product=None, charge_options=None, charges=None, client_data=None, client_id=None, client_name=None, currency=None, datatables=None, date_format=None, days_to_dormancy=None, days_to_escheat=None, days_to_inactive=None, deposit_type=None, deposit_type_id=None, enforce_min_required_balance=None, existing_reversed_transaction_ids=None, existing_transaction_ids=None, external_id=None, field_officer_id=None, field_officer_name=None, field_officer_options=None, gl_account_id_for_interest_on_savings=None, gl_account_id_for_savings_control=None, group_general_data=None, group_id=None, group_name=None, id=None, interest_calculation_days_in_year_type=None, interest_calculation_days_in_year_type_id=None, interest_calculation_days_in_year_type_options=None, interest_calculation_type=None, interest_calculation_type_id=None, interest_calculation_type_options=None, interest_compounding_period_type=None, interest_compounding_period_type_id=None, interest_compounding_period_type_options=None, interest_posting_period_type=None, interest_posting_period_type_id=None, interest_posting_period_type_options=None, is_dormancy_tracking_active=None, last_active_transaction_date=None, last_savings_account_transaction=None, lien_allowed=None, locale=None, locked_in_until_date=None, lockin_period_frequency=None, lockin_period_frequency_type=None, lockin_period_frequency_type_id=None, lockin_period_frequency_type_options=None, max_allowed_lien_limit=None, min_balance_for_interest_calculation=None, min_overdraft_for_interest_calculation=None, min_required_balance=None, min_required_opening_balance=None, new_savings_account_transaction_data=None, nominal_annual_interest_rate=None, nominal_annual_interest_rate_overdraft=None, office_id=None, on_hold_funds=None, overdraft_limit=None, product_id=None, product_options=None, reason_for_block=None, row_index=None, savings_account_summary_data=None, savings_account_transaction_data=None, savings_account_transaction_summary_wrapper=None, savings_account_transactions_with_pivot_config=None, savings_amount_on_hold=None, savings_helper=None, savings_product=None, savings_product_data=None, savings_product_id=None, savings_product_name=None, start_interest_calculation_date=None, status=None, sub_status=None, submitted_on_date=None, summary=None, tax_group=None, timeline=None, transactions=None, updated_transactions=None, with_hold_tax=None, withdrawal_fee=None, withdrawal_fee_for_transfers=None, withdrawal_fee_type_options=None):  # noqa: E501
        """SavingsAccountData - a model defined in Swagger"""  # noqa: E501
        self._account_no = None
        self._accrual_based_accounting_enabled_on_savings_product = None
        self._activated_on_date = None
        self._activation_local_date = None
        self._allow_overdraft = None
        self._annual_fee = None
        self._cash_based_accounting_enabled_on_savings_product = None
        self._charge_options = None
        self._charges = None
        self._client_data = None
        self._client_id = None
        self._client_name = None
        self._currency = None
        self._datatables = None
        self._date_format = None
        self._days_to_dormancy = None
        self._days_to_escheat = None
        self._days_to_inactive = None
        self._deposit_type = None
        self._deposit_type_id = None
        self._enforce_min_required_balance = None
        self._existing_reversed_transaction_ids = None
        self._existing_transaction_ids = None
        self._external_id = None
        self._field_officer_id = None
        self._field_officer_name = None
        self._field_officer_options = None
        self._gl_account_id_for_interest_on_savings = None
        self._gl_account_id_for_savings_control = None
        self._group_general_data = None
        self._group_id = None
        self._group_name = None
        self._id = None
        self._interest_calculation_days_in_year_type = None
        self._interest_calculation_days_in_year_type_id = None
        self._interest_calculation_days_in_year_type_options = None
        self._interest_calculation_type = None
        self._interest_calculation_type_id = None
        self._interest_calculation_type_options = None
        self._interest_compounding_period_type = None
        self._interest_compounding_period_type_id = None
        self._interest_compounding_period_type_options = None
        self._interest_posting_period_type = None
        self._interest_posting_period_type_id = None
        self._interest_posting_period_type_options = None
        self._is_dormancy_tracking_active = None
        self._last_active_transaction_date = None
        self._last_savings_account_transaction = None
        self._lien_allowed = None
        self._locale = None
        self._locked_in_until_date = None
        self._lockin_period_frequency = None
        self._lockin_period_frequency_type = None
        self._lockin_period_frequency_type_id = None
        self._lockin_period_frequency_type_options = None
        self._max_allowed_lien_limit = None
        self._min_balance_for_interest_calculation = None
        self._min_overdraft_for_interest_calculation = None
        self._min_required_balance = None
        self._min_required_opening_balance = None
        self._new_savings_account_transaction_data = None
        self._nominal_annual_interest_rate = None
        self._nominal_annual_interest_rate_overdraft = None
        self._office_id = None
        self._on_hold_funds = None
        self._overdraft_limit = None
        self._product_id = None
        self._product_options = None
        self._reason_for_block = None
        self._row_index = None
        self._savings_account_summary_data = None
        self._savings_account_transaction_data = None
        self._savings_account_transaction_summary_wrapper = None
        self._savings_account_transactions_with_pivot_config = None
        self._savings_amount_on_hold = None
        self._savings_helper = None
        self._savings_product = None
        self._savings_product_data = None
        self._savings_product_id = None
        self._savings_product_name = None
        self._start_interest_calculation_date = None
        self._status = None
        self._sub_status = None
        self._submitted_on_date = None
        self._summary = None
        self._tax_group = None
        self._timeline = None
        self._transactions = None
        self._updated_transactions = None
        self._with_hold_tax = None
        self._withdrawal_fee = None
        self._withdrawal_fee_for_transfers = None
        self._withdrawal_fee_type_options = None
        self.discriminator = None
        if account_no is not None:
            self.account_no = account_no
        if accrual_based_accounting_enabled_on_savings_product is not None:
            self.accrual_based_accounting_enabled_on_savings_product = accrual_based_accounting_enabled_on_savings_product
        if activated_on_date is not None:
            self.activated_on_date = activated_on_date
        if activation_local_date is not None:
            self.activation_local_date = activation_local_date
        if allow_overdraft is not None:
            self.allow_overdraft = allow_overdraft
        if annual_fee is not None:
            self.annual_fee = annual_fee
        if cash_based_accounting_enabled_on_savings_product is not None:
            self.cash_based_accounting_enabled_on_savings_product = cash_based_accounting_enabled_on_savings_product
        if charge_options is not None:
            self.charge_options = charge_options
        if charges is not None:
            self.charges = charges
        if client_data is not None:
            self.client_data = client_data
        if client_id is not None:
            self.client_id = client_id
        if client_name is not None:
            self.client_name = client_name
        if currency is not None:
            self.currency = currency
        if datatables is not None:
            self.datatables = datatables
        if date_format is not None:
            self.date_format = date_format
        if days_to_dormancy is not None:
            self.days_to_dormancy = days_to_dormancy
        if days_to_escheat is not None:
            self.days_to_escheat = days_to_escheat
        if days_to_inactive is not None:
            self.days_to_inactive = days_to_inactive
        if deposit_type is not None:
            self.deposit_type = deposit_type
        if deposit_type_id is not None:
            self.deposit_type_id = deposit_type_id
        if enforce_min_required_balance is not None:
            self.enforce_min_required_balance = enforce_min_required_balance
        if existing_reversed_transaction_ids is not None:
            self.existing_reversed_transaction_ids = existing_reversed_transaction_ids
        if existing_transaction_ids is not None:
            self.existing_transaction_ids = existing_transaction_ids
        if external_id is not None:
            self.external_id = external_id
        if field_officer_id is not None:
            self.field_officer_id = field_officer_id
        if field_officer_name is not None:
            self.field_officer_name = field_officer_name
        if field_officer_options is not None:
            self.field_officer_options = field_officer_options
        if gl_account_id_for_interest_on_savings is not None:
            self.gl_account_id_for_interest_on_savings = gl_account_id_for_interest_on_savings
        if gl_account_id_for_savings_control is not None:
            self.gl_account_id_for_savings_control = gl_account_id_for_savings_control
        if group_general_data is not None:
            self.group_general_data = group_general_data
        if group_id is not None:
            self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name
        if id is not None:
            self.id = id
        if interest_calculation_days_in_year_type is not None:
            self.interest_calculation_days_in_year_type = interest_calculation_days_in_year_type
        if interest_calculation_days_in_year_type_id is not None:
            self.interest_calculation_days_in_year_type_id = interest_calculation_days_in_year_type_id
        if interest_calculation_days_in_year_type_options is not None:
            self.interest_calculation_days_in_year_type_options = interest_calculation_days_in_year_type_options
        if interest_calculation_type is not None:
            self.interest_calculation_type = interest_calculation_type
        if interest_calculation_type_id is not None:
            self.interest_calculation_type_id = interest_calculation_type_id
        if interest_calculation_type_options is not None:
            self.interest_calculation_type_options = interest_calculation_type_options
        if interest_compounding_period_type is not None:
            self.interest_compounding_period_type = interest_compounding_period_type
        if interest_compounding_period_type_id is not None:
            self.interest_compounding_period_type_id = interest_compounding_period_type_id
        if interest_compounding_period_type_options is not None:
            self.interest_compounding_period_type_options = interest_compounding_period_type_options
        if interest_posting_period_type is not None:
            self.interest_posting_period_type = interest_posting_period_type
        if interest_posting_period_type_id is not None:
            self.interest_posting_period_type_id = interest_posting_period_type_id
        if interest_posting_period_type_options is not None:
            self.interest_posting_period_type_options = interest_posting_period_type_options
        if is_dormancy_tracking_active is not None:
            self.is_dormancy_tracking_active = is_dormancy_tracking_active
        if last_active_transaction_date is not None:
            self.last_active_transaction_date = last_active_transaction_date
        if last_savings_account_transaction is not None:
            self.last_savings_account_transaction = last_savings_account_transaction
        if lien_allowed is not None:
            self.lien_allowed = lien_allowed
        if locale is not None:
            self.locale = locale
        if locked_in_until_date is not None:
            self.locked_in_until_date = locked_in_until_date
        if lockin_period_frequency is not None:
            self.lockin_period_frequency = lockin_period_frequency
        if lockin_period_frequency_type is not None:
            self.lockin_period_frequency_type = lockin_period_frequency_type
        if lockin_period_frequency_type_id is not None:
            self.lockin_period_frequency_type_id = lockin_period_frequency_type_id
        if lockin_period_frequency_type_options is not None:
            self.lockin_period_frequency_type_options = lockin_period_frequency_type_options
        if max_allowed_lien_limit is not None:
            self.max_allowed_lien_limit = max_allowed_lien_limit
        if min_balance_for_interest_calculation is not None:
            self.min_balance_for_interest_calculation = min_balance_for_interest_calculation
        if min_overdraft_for_interest_calculation is not None:
            self.min_overdraft_for_interest_calculation = min_overdraft_for_interest_calculation
        if min_required_balance is not None:
            self.min_required_balance = min_required_balance
        if min_required_opening_balance is not None:
            self.min_required_opening_balance = min_required_opening_balance
        if new_savings_account_transaction_data is not None:
            self.new_savings_account_transaction_data = new_savings_account_transaction_data
        if nominal_annual_interest_rate is not None:
            self.nominal_annual_interest_rate = nominal_annual_interest_rate
        if nominal_annual_interest_rate_overdraft is not None:
            self.nominal_annual_interest_rate_overdraft = nominal_annual_interest_rate_overdraft
        if office_id is not None:
            self.office_id = office_id
        if on_hold_funds is not None:
            self.on_hold_funds = on_hold_funds
        if overdraft_limit is not None:
            self.overdraft_limit = overdraft_limit
        if product_id is not None:
            self.product_id = product_id
        if product_options is not None:
            self.product_options = product_options
        if reason_for_block is not None:
            self.reason_for_block = reason_for_block
        if row_index is not None:
            self.row_index = row_index
        if savings_account_summary_data is not None:
            self.savings_account_summary_data = savings_account_summary_data
        if savings_account_transaction_data is not None:
            self.savings_account_transaction_data = savings_account_transaction_data
        if savings_account_transaction_summary_wrapper is not None:
            self.savings_account_transaction_summary_wrapper = savings_account_transaction_summary_wrapper
        if savings_account_transactions_with_pivot_config is not None:
            self.savings_account_transactions_with_pivot_config = savings_account_transactions_with_pivot_config
        if savings_amount_on_hold is not None:
            self.savings_amount_on_hold = savings_amount_on_hold
        if savings_helper is not None:
            self.savings_helper = savings_helper
        if savings_product is not None:
            self.savings_product = savings_product
        if savings_product_data is not None:
            self.savings_product_data = savings_product_data
        if savings_product_id is not None:
            self.savings_product_id = savings_product_id
        if savings_product_name is not None:
            self.savings_product_name = savings_product_name
        if start_interest_calculation_date is not None:
            self.start_interest_calculation_date = start_interest_calculation_date
        if status is not None:
            self.status = status
        if sub_status is not None:
            self.sub_status = sub_status
        if submitted_on_date is not None:
            self.submitted_on_date = submitted_on_date
        if summary is not None:
            self.summary = summary
        if tax_group is not None:
            self.tax_group = tax_group
        if timeline is not None:
            self.timeline = timeline
        if transactions is not None:
            self.transactions = transactions
        if updated_transactions is not None:
            self.updated_transactions = updated_transactions
        if with_hold_tax is not None:
            self.with_hold_tax = with_hold_tax
        if withdrawal_fee is not None:
            self.withdrawal_fee = withdrawal_fee
        if withdrawal_fee_for_transfers is not None:
            self.withdrawal_fee_for_transfers = withdrawal_fee_for_transfers
        if withdrawal_fee_type_options is not None:
            self.withdrawal_fee_type_options = withdrawal_fee_type_options

    @property
    def account_no(self):
        """Gets the account_no of this SavingsAccountData.  # noqa: E501


        :return: The account_no of this SavingsAccountData.  # noqa: E501
        :rtype: str
        """
        return self._account_no

    @account_no.setter
    def account_no(self, account_no):
        """Sets the account_no of this SavingsAccountData.


        :param account_no: The account_no of this SavingsAccountData.  # noqa: E501
        :type: str
        """

        self._account_no = account_no

    @property
    def accrual_based_accounting_enabled_on_savings_product(self):
        """Gets the accrual_based_accounting_enabled_on_savings_product of this SavingsAccountData.  # noqa: E501


        :return: The accrual_based_accounting_enabled_on_savings_product of this SavingsAccountData.  # noqa: E501
        :rtype: bool
        """
        return self._accrual_based_accounting_enabled_on_savings_product

    @accrual_based_accounting_enabled_on_savings_product.setter
    def accrual_based_accounting_enabled_on_savings_product(self, accrual_based_accounting_enabled_on_savings_product):
        """Sets the accrual_based_accounting_enabled_on_savings_product of this SavingsAccountData.


        :param accrual_based_accounting_enabled_on_savings_product: The accrual_based_accounting_enabled_on_savings_product of this SavingsAccountData.  # noqa: E501
        :type: bool
        """

        self._accrual_based_accounting_enabled_on_savings_product = accrual_based_accounting_enabled_on_savings_product

    @property
    def activated_on_date(self):
        """Gets the activated_on_date of this SavingsAccountData.  # noqa: E501


        :return: The activated_on_date of this SavingsAccountData.  # noqa: E501
        :rtype: date
        """
        return self._activated_on_date

    @activated_on_date.setter
    def activated_on_date(self, activated_on_date):
        """Sets the activated_on_date of this SavingsAccountData.


        :param activated_on_date: The activated_on_date of this SavingsAccountData.  # noqa: E501
        :type: date
        """

        self._activated_on_date = activated_on_date

    @property
    def activation_local_date(self):
        """Gets the activation_local_date of this SavingsAccountData.  # noqa: E501


        :return: The activation_local_date of this SavingsAccountData.  # noqa: E501
        :rtype: date
        """
        return self._activation_local_date

    @activation_local_date.setter
    def activation_local_date(self, activation_local_date):
        """Sets the activation_local_date of this SavingsAccountData.


        :param activation_local_date: The activation_local_date of this SavingsAccountData.  # noqa: E501
        :type: date
        """

        self._activation_local_date = activation_local_date

    @property
    def allow_overdraft(self):
        """Gets the allow_overdraft of this SavingsAccountData.  # noqa: E501


        :return: The allow_overdraft of this SavingsAccountData.  # noqa: E501
        :rtype: bool
        """
        return self._allow_overdraft

    @allow_overdraft.setter
    def allow_overdraft(self, allow_overdraft):
        """Sets the allow_overdraft of this SavingsAccountData.


        :param allow_overdraft: The allow_overdraft of this SavingsAccountData.  # noqa: E501
        :type: bool
        """

        self._allow_overdraft = allow_overdraft

    @property
    def annual_fee(self):
        """Gets the annual_fee of this SavingsAccountData.  # noqa: E501


        :return: The annual_fee of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsAccountChargeData
        """
        return self._annual_fee

    @annual_fee.setter
    def annual_fee(self, annual_fee):
        """Sets the annual_fee of this SavingsAccountData.


        :param annual_fee: The annual_fee of this SavingsAccountData.  # noqa: E501
        :type: SavingsAccountChargeData
        """

        self._annual_fee = annual_fee

    @property
    def cash_based_accounting_enabled_on_savings_product(self):
        """Gets the cash_based_accounting_enabled_on_savings_product of this SavingsAccountData.  # noqa: E501


        :return: The cash_based_accounting_enabled_on_savings_product of this SavingsAccountData.  # noqa: E501
        :rtype: bool
        """
        return self._cash_based_accounting_enabled_on_savings_product

    @cash_based_accounting_enabled_on_savings_product.setter
    def cash_based_accounting_enabled_on_savings_product(self, cash_based_accounting_enabled_on_savings_product):
        """Sets the cash_based_accounting_enabled_on_savings_product of this SavingsAccountData.


        :param cash_based_accounting_enabled_on_savings_product: The cash_based_accounting_enabled_on_savings_product of this SavingsAccountData.  # noqa: E501
        :type: bool
        """

        self._cash_based_accounting_enabled_on_savings_product = cash_based_accounting_enabled_on_savings_product

    @property
    def charge_options(self):
        """Gets the charge_options of this SavingsAccountData.  # noqa: E501


        :return: The charge_options of this SavingsAccountData.  # noqa: E501
        :rtype: list[ChargeData]
        """
        return self._charge_options

    @charge_options.setter
    def charge_options(self, charge_options):
        """Sets the charge_options of this SavingsAccountData.


        :param charge_options: The charge_options of this SavingsAccountData.  # noqa: E501
        :type: list[ChargeData]
        """

        self._charge_options = charge_options

    @property
    def charges(self):
        """Gets the charges of this SavingsAccountData.  # noqa: E501


        :return: The charges of this SavingsAccountData.  # noqa: E501
        :rtype: list[SavingsAccountChargeData]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this SavingsAccountData.


        :param charges: The charges of this SavingsAccountData.  # noqa: E501
        :type: list[SavingsAccountChargeData]
        """

        self._charges = charges

    @property
    def client_data(self):
        """Gets the client_data of this SavingsAccountData.  # noqa: E501


        :return: The client_data of this SavingsAccountData.  # noqa: E501
        :rtype: ClientData
        """
        return self._client_data

    @client_data.setter
    def client_data(self, client_data):
        """Sets the client_data of this SavingsAccountData.


        :param client_data: The client_data of this SavingsAccountData.  # noqa: E501
        :type: ClientData
        """

        self._client_data = client_data

    @property
    def client_id(self):
        """Gets the client_id of this SavingsAccountData.  # noqa: E501


        :return: The client_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SavingsAccountData.


        :param client_id: The client_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this SavingsAccountData.  # noqa: E501


        :return: The client_name of this SavingsAccountData.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this SavingsAccountData.


        :param client_name: The client_name of this SavingsAccountData.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def currency(self):
        """Gets the currency of this SavingsAccountData.  # noqa: E501


        :return: The currency of this SavingsAccountData.  # noqa: E501
        :rtype: CurrencyData
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SavingsAccountData.


        :param currency: The currency of this SavingsAccountData.  # noqa: E501
        :type: CurrencyData
        """

        self._currency = currency

    @property
    def datatables(self):
        """Gets the datatables of this SavingsAccountData.  # noqa: E501


        :return: The datatables of this SavingsAccountData.  # noqa: E501
        :rtype: list[DatatableData]
        """
        return self._datatables

    @datatables.setter
    def datatables(self, datatables):
        """Sets the datatables of this SavingsAccountData.


        :param datatables: The datatables of this SavingsAccountData.  # noqa: E501
        :type: list[DatatableData]
        """

        self._datatables = datatables

    @property
    def date_format(self):
        """Gets the date_format of this SavingsAccountData.  # noqa: E501


        :return: The date_format of this SavingsAccountData.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this SavingsAccountData.


        :param date_format: The date_format of this SavingsAccountData.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def days_to_dormancy(self):
        """Gets the days_to_dormancy of this SavingsAccountData.  # noqa: E501


        :return: The days_to_dormancy of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._days_to_dormancy

    @days_to_dormancy.setter
    def days_to_dormancy(self, days_to_dormancy):
        """Sets the days_to_dormancy of this SavingsAccountData.


        :param days_to_dormancy: The days_to_dormancy of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._days_to_dormancy = days_to_dormancy

    @property
    def days_to_escheat(self):
        """Gets the days_to_escheat of this SavingsAccountData.  # noqa: E501


        :return: The days_to_escheat of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._days_to_escheat

    @days_to_escheat.setter
    def days_to_escheat(self, days_to_escheat):
        """Sets the days_to_escheat of this SavingsAccountData.


        :param days_to_escheat: The days_to_escheat of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._days_to_escheat = days_to_escheat

    @property
    def days_to_inactive(self):
        """Gets the days_to_inactive of this SavingsAccountData.  # noqa: E501


        :return: The days_to_inactive of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._days_to_inactive

    @days_to_inactive.setter
    def days_to_inactive(self, days_to_inactive):
        """Sets the days_to_inactive of this SavingsAccountData.


        :param days_to_inactive: The days_to_inactive of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._days_to_inactive = days_to_inactive

    @property
    def deposit_type(self):
        """Gets the deposit_type of this SavingsAccountData.  # noqa: E501


        :return: The deposit_type of this SavingsAccountData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._deposit_type

    @deposit_type.setter
    def deposit_type(self, deposit_type):
        """Sets the deposit_type of this SavingsAccountData.


        :param deposit_type: The deposit_type of this SavingsAccountData.  # noqa: E501
        :type: EnumOptionData
        """

        self._deposit_type = deposit_type

    @property
    def deposit_type_id(self):
        """Gets the deposit_type_id of this SavingsAccountData.  # noqa: E501


        :return: The deposit_type_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._deposit_type_id

    @deposit_type_id.setter
    def deposit_type_id(self, deposit_type_id):
        """Sets the deposit_type_id of this SavingsAccountData.


        :param deposit_type_id: The deposit_type_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._deposit_type_id = deposit_type_id

    @property
    def enforce_min_required_balance(self):
        """Gets the enforce_min_required_balance of this SavingsAccountData.  # noqa: E501


        :return: The enforce_min_required_balance of this SavingsAccountData.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_min_required_balance

    @enforce_min_required_balance.setter
    def enforce_min_required_balance(self, enforce_min_required_balance):
        """Sets the enforce_min_required_balance of this SavingsAccountData.


        :param enforce_min_required_balance: The enforce_min_required_balance of this SavingsAccountData.  # noqa: E501
        :type: bool
        """

        self._enforce_min_required_balance = enforce_min_required_balance

    @property
    def existing_reversed_transaction_ids(self):
        """Gets the existing_reversed_transaction_ids of this SavingsAccountData.  # noqa: E501


        :return: The existing_reversed_transaction_ids of this SavingsAccountData.  # noqa: E501
        :rtype: list[int]
        """
        return self._existing_reversed_transaction_ids

    @existing_reversed_transaction_ids.setter
    def existing_reversed_transaction_ids(self, existing_reversed_transaction_ids):
        """Sets the existing_reversed_transaction_ids of this SavingsAccountData.


        :param existing_reversed_transaction_ids: The existing_reversed_transaction_ids of this SavingsAccountData.  # noqa: E501
        :type: list[int]
        """

        self._existing_reversed_transaction_ids = existing_reversed_transaction_ids

    @property
    def existing_transaction_ids(self):
        """Gets the existing_transaction_ids of this SavingsAccountData.  # noqa: E501


        :return: The existing_transaction_ids of this SavingsAccountData.  # noqa: E501
        :rtype: list[int]
        """
        return self._existing_transaction_ids

    @existing_transaction_ids.setter
    def existing_transaction_ids(self, existing_transaction_ids):
        """Sets the existing_transaction_ids of this SavingsAccountData.


        :param existing_transaction_ids: The existing_transaction_ids of this SavingsAccountData.  # noqa: E501
        :type: list[int]
        """

        self._existing_transaction_ids = existing_transaction_ids

    @property
    def external_id(self):
        """Gets the external_id of this SavingsAccountData.  # noqa: E501


        :return: The external_id of this SavingsAccountData.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SavingsAccountData.


        :param external_id: The external_id of this SavingsAccountData.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def field_officer_id(self):
        """Gets the field_officer_id of this SavingsAccountData.  # noqa: E501


        :return: The field_officer_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._field_officer_id

    @field_officer_id.setter
    def field_officer_id(self, field_officer_id):
        """Sets the field_officer_id of this SavingsAccountData.


        :param field_officer_id: The field_officer_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._field_officer_id = field_officer_id

    @property
    def field_officer_name(self):
        """Gets the field_officer_name of this SavingsAccountData.  # noqa: E501


        :return: The field_officer_name of this SavingsAccountData.  # noqa: E501
        :rtype: str
        """
        return self._field_officer_name

    @field_officer_name.setter
    def field_officer_name(self, field_officer_name):
        """Sets the field_officer_name of this SavingsAccountData.


        :param field_officer_name: The field_officer_name of this SavingsAccountData.  # noqa: E501
        :type: str
        """

        self._field_officer_name = field_officer_name

    @property
    def field_officer_options(self):
        """Gets the field_officer_options of this SavingsAccountData.  # noqa: E501


        :return: The field_officer_options of this SavingsAccountData.  # noqa: E501
        :rtype: list[StaffData]
        """
        return self._field_officer_options

    @field_officer_options.setter
    def field_officer_options(self, field_officer_options):
        """Sets the field_officer_options of this SavingsAccountData.


        :param field_officer_options: The field_officer_options of this SavingsAccountData.  # noqa: E501
        :type: list[StaffData]
        """

        self._field_officer_options = field_officer_options

    @property
    def gl_account_id_for_interest_on_savings(self):
        """Gets the gl_account_id_for_interest_on_savings of this SavingsAccountData.  # noqa: E501


        :return: The gl_account_id_for_interest_on_savings of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._gl_account_id_for_interest_on_savings

    @gl_account_id_for_interest_on_savings.setter
    def gl_account_id_for_interest_on_savings(self, gl_account_id_for_interest_on_savings):
        """Sets the gl_account_id_for_interest_on_savings of this SavingsAccountData.


        :param gl_account_id_for_interest_on_savings: The gl_account_id_for_interest_on_savings of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._gl_account_id_for_interest_on_savings = gl_account_id_for_interest_on_savings

    @property
    def gl_account_id_for_savings_control(self):
        """Gets the gl_account_id_for_savings_control of this SavingsAccountData.  # noqa: E501


        :return: The gl_account_id_for_savings_control of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._gl_account_id_for_savings_control

    @gl_account_id_for_savings_control.setter
    def gl_account_id_for_savings_control(self, gl_account_id_for_savings_control):
        """Sets the gl_account_id_for_savings_control of this SavingsAccountData.


        :param gl_account_id_for_savings_control: The gl_account_id_for_savings_control of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._gl_account_id_for_savings_control = gl_account_id_for_savings_control

    @property
    def group_general_data(self):
        """Gets the group_general_data of this SavingsAccountData.  # noqa: E501


        :return: The group_general_data of this SavingsAccountData.  # noqa: E501
        :rtype: GroupGeneralData
        """
        return self._group_general_data

    @group_general_data.setter
    def group_general_data(self, group_general_data):
        """Sets the group_general_data of this SavingsAccountData.


        :param group_general_data: The group_general_data of this SavingsAccountData.  # noqa: E501
        :type: GroupGeneralData
        """

        self._group_general_data = group_general_data

    @property
    def group_id(self):
        """Gets the group_id of this SavingsAccountData.  # noqa: E501


        :return: The group_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this SavingsAccountData.


        :param group_id: The group_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this SavingsAccountData.  # noqa: E501


        :return: The group_name of this SavingsAccountData.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this SavingsAccountData.


        :param group_name: The group_name of this SavingsAccountData.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this SavingsAccountData.  # noqa: E501


        :return: The id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavingsAccountData.


        :param id: The id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interest_calculation_days_in_year_type(self):
        """Gets the interest_calculation_days_in_year_type of this SavingsAccountData.  # noqa: E501


        :return: The interest_calculation_days_in_year_type of this SavingsAccountData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_calculation_days_in_year_type

    @interest_calculation_days_in_year_type.setter
    def interest_calculation_days_in_year_type(self, interest_calculation_days_in_year_type):
        """Sets the interest_calculation_days_in_year_type of this SavingsAccountData.


        :param interest_calculation_days_in_year_type: The interest_calculation_days_in_year_type of this SavingsAccountData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_calculation_days_in_year_type = interest_calculation_days_in_year_type

    @property
    def interest_calculation_days_in_year_type_id(self):
        """Gets the interest_calculation_days_in_year_type_id of this SavingsAccountData.  # noqa: E501


        :return: The interest_calculation_days_in_year_type_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._interest_calculation_days_in_year_type_id

    @interest_calculation_days_in_year_type_id.setter
    def interest_calculation_days_in_year_type_id(self, interest_calculation_days_in_year_type_id):
        """Sets the interest_calculation_days_in_year_type_id of this SavingsAccountData.


        :param interest_calculation_days_in_year_type_id: The interest_calculation_days_in_year_type_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._interest_calculation_days_in_year_type_id = interest_calculation_days_in_year_type_id

    @property
    def interest_calculation_days_in_year_type_options(self):
        """Gets the interest_calculation_days_in_year_type_options of this SavingsAccountData.  # noqa: E501


        :return: The interest_calculation_days_in_year_type_options of this SavingsAccountData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_calculation_days_in_year_type_options

    @interest_calculation_days_in_year_type_options.setter
    def interest_calculation_days_in_year_type_options(self, interest_calculation_days_in_year_type_options):
        """Sets the interest_calculation_days_in_year_type_options of this SavingsAccountData.


        :param interest_calculation_days_in_year_type_options: The interest_calculation_days_in_year_type_options of this SavingsAccountData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_calculation_days_in_year_type_options = interest_calculation_days_in_year_type_options

    @property
    def interest_calculation_type(self):
        """Gets the interest_calculation_type of this SavingsAccountData.  # noqa: E501


        :return: The interest_calculation_type of this SavingsAccountData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_calculation_type

    @interest_calculation_type.setter
    def interest_calculation_type(self, interest_calculation_type):
        """Sets the interest_calculation_type of this SavingsAccountData.


        :param interest_calculation_type: The interest_calculation_type of this SavingsAccountData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_calculation_type = interest_calculation_type

    @property
    def interest_calculation_type_id(self):
        """Gets the interest_calculation_type_id of this SavingsAccountData.  # noqa: E501


        :return: The interest_calculation_type_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._interest_calculation_type_id

    @interest_calculation_type_id.setter
    def interest_calculation_type_id(self, interest_calculation_type_id):
        """Sets the interest_calculation_type_id of this SavingsAccountData.


        :param interest_calculation_type_id: The interest_calculation_type_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._interest_calculation_type_id = interest_calculation_type_id

    @property
    def interest_calculation_type_options(self):
        """Gets the interest_calculation_type_options of this SavingsAccountData.  # noqa: E501


        :return: The interest_calculation_type_options of this SavingsAccountData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_calculation_type_options

    @interest_calculation_type_options.setter
    def interest_calculation_type_options(self, interest_calculation_type_options):
        """Sets the interest_calculation_type_options of this SavingsAccountData.


        :param interest_calculation_type_options: The interest_calculation_type_options of this SavingsAccountData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_calculation_type_options = interest_calculation_type_options

    @property
    def interest_compounding_period_type(self):
        """Gets the interest_compounding_period_type of this SavingsAccountData.  # noqa: E501


        :return: The interest_compounding_period_type of this SavingsAccountData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_compounding_period_type

    @interest_compounding_period_type.setter
    def interest_compounding_period_type(self, interest_compounding_period_type):
        """Sets the interest_compounding_period_type of this SavingsAccountData.


        :param interest_compounding_period_type: The interest_compounding_period_type of this SavingsAccountData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_compounding_period_type = interest_compounding_period_type

    @property
    def interest_compounding_period_type_id(self):
        """Gets the interest_compounding_period_type_id of this SavingsAccountData.  # noqa: E501


        :return: The interest_compounding_period_type_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._interest_compounding_period_type_id

    @interest_compounding_period_type_id.setter
    def interest_compounding_period_type_id(self, interest_compounding_period_type_id):
        """Sets the interest_compounding_period_type_id of this SavingsAccountData.


        :param interest_compounding_period_type_id: The interest_compounding_period_type_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._interest_compounding_period_type_id = interest_compounding_period_type_id

    @property
    def interest_compounding_period_type_options(self):
        """Gets the interest_compounding_period_type_options of this SavingsAccountData.  # noqa: E501


        :return: The interest_compounding_period_type_options of this SavingsAccountData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_compounding_period_type_options

    @interest_compounding_period_type_options.setter
    def interest_compounding_period_type_options(self, interest_compounding_period_type_options):
        """Sets the interest_compounding_period_type_options of this SavingsAccountData.


        :param interest_compounding_period_type_options: The interest_compounding_period_type_options of this SavingsAccountData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_compounding_period_type_options = interest_compounding_period_type_options

    @property
    def interest_posting_period_type(self):
        """Gets the interest_posting_period_type of this SavingsAccountData.  # noqa: E501


        :return: The interest_posting_period_type of this SavingsAccountData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_posting_period_type

    @interest_posting_period_type.setter
    def interest_posting_period_type(self, interest_posting_period_type):
        """Sets the interest_posting_period_type of this SavingsAccountData.


        :param interest_posting_period_type: The interest_posting_period_type of this SavingsAccountData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_posting_period_type = interest_posting_period_type

    @property
    def interest_posting_period_type_id(self):
        """Gets the interest_posting_period_type_id of this SavingsAccountData.  # noqa: E501


        :return: The interest_posting_period_type_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._interest_posting_period_type_id

    @interest_posting_period_type_id.setter
    def interest_posting_period_type_id(self, interest_posting_period_type_id):
        """Sets the interest_posting_period_type_id of this SavingsAccountData.


        :param interest_posting_period_type_id: The interest_posting_period_type_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._interest_posting_period_type_id = interest_posting_period_type_id

    @property
    def interest_posting_period_type_options(self):
        """Gets the interest_posting_period_type_options of this SavingsAccountData.  # noqa: E501


        :return: The interest_posting_period_type_options of this SavingsAccountData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_posting_period_type_options

    @interest_posting_period_type_options.setter
    def interest_posting_period_type_options(self, interest_posting_period_type_options):
        """Sets the interest_posting_period_type_options of this SavingsAccountData.


        :param interest_posting_period_type_options: The interest_posting_period_type_options of this SavingsAccountData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_posting_period_type_options = interest_posting_period_type_options

    @property
    def is_dormancy_tracking_active(self):
        """Gets the is_dormancy_tracking_active of this SavingsAccountData.  # noqa: E501


        :return: The is_dormancy_tracking_active of this SavingsAccountData.  # noqa: E501
        :rtype: bool
        """
        return self._is_dormancy_tracking_active

    @is_dormancy_tracking_active.setter
    def is_dormancy_tracking_active(self, is_dormancy_tracking_active):
        """Sets the is_dormancy_tracking_active of this SavingsAccountData.


        :param is_dormancy_tracking_active: The is_dormancy_tracking_active of this SavingsAccountData.  # noqa: E501
        :type: bool
        """

        self._is_dormancy_tracking_active = is_dormancy_tracking_active

    @property
    def last_active_transaction_date(self):
        """Gets the last_active_transaction_date of this SavingsAccountData.  # noqa: E501


        :return: The last_active_transaction_date of this SavingsAccountData.  # noqa: E501
        :rtype: date
        """
        return self._last_active_transaction_date

    @last_active_transaction_date.setter
    def last_active_transaction_date(self, last_active_transaction_date):
        """Sets the last_active_transaction_date of this SavingsAccountData.


        :param last_active_transaction_date: The last_active_transaction_date of this SavingsAccountData.  # noqa: E501
        :type: date
        """

        self._last_active_transaction_date = last_active_transaction_date

    @property
    def last_savings_account_transaction(self):
        """Gets the last_savings_account_transaction of this SavingsAccountData.  # noqa: E501


        :return: The last_savings_account_transaction of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsAccountTransactionData
        """
        return self._last_savings_account_transaction

    @last_savings_account_transaction.setter
    def last_savings_account_transaction(self, last_savings_account_transaction):
        """Sets the last_savings_account_transaction of this SavingsAccountData.


        :param last_savings_account_transaction: The last_savings_account_transaction of this SavingsAccountData.  # noqa: E501
        :type: SavingsAccountTransactionData
        """

        self._last_savings_account_transaction = last_savings_account_transaction

    @property
    def lien_allowed(self):
        """Gets the lien_allowed of this SavingsAccountData.  # noqa: E501


        :return: The lien_allowed of this SavingsAccountData.  # noqa: E501
        :rtype: bool
        """
        return self._lien_allowed

    @lien_allowed.setter
    def lien_allowed(self, lien_allowed):
        """Sets the lien_allowed of this SavingsAccountData.


        :param lien_allowed: The lien_allowed of this SavingsAccountData.  # noqa: E501
        :type: bool
        """

        self._lien_allowed = lien_allowed

    @property
    def locale(self):
        """Gets the locale of this SavingsAccountData.  # noqa: E501


        :return: The locale of this SavingsAccountData.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this SavingsAccountData.


        :param locale: The locale of this SavingsAccountData.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def locked_in_until_date(self):
        """Gets the locked_in_until_date of this SavingsAccountData.  # noqa: E501


        :return: The locked_in_until_date of this SavingsAccountData.  # noqa: E501
        :rtype: date
        """
        return self._locked_in_until_date

    @locked_in_until_date.setter
    def locked_in_until_date(self, locked_in_until_date):
        """Sets the locked_in_until_date of this SavingsAccountData.


        :param locked_in_until_date: The locked_in_until_date of this SavingsAccountData.  # noqa: E501
        :type: date
        """

        self._locked_in_until_date = locked_in_until_date

    @property
    def lockin_period_frequency(self):
        """Gets the lockin_period_frequency of this SavingsAccountData.  # noqa: E501


        :return: The lockin_period_frequency of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._lockin_period_frequency

    @lockin_period_frequency.setter
    def lockin_period_frequency(self, lockin_period_frequency):
        """Sets the lockin_period_frequency of this SavingsAccountData.


        :param lockin_period_frequency: The lockin_period_frequency of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._lockin_period_frequency = lockin_period_frequency

    @property
    def lockin_period_frequency_type(self):
        """Gets the lockin_period_frequency_type of this SavingsAccountData.  # noqa: E501


        :return: The lockin_period_frequency_type of this SavingsAccountData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._lockin_period_frequency_type

    @lockin_period_frequency_type.setter
    def lockin_period_frequency_type(self, lockin_period_frequency_type):
        """Sets the lockin_period_frequency_type of this SavingsAccountData.


        :param lockin_period_frequency_type: The lockin_period_frequency_type of this SavingsAccountData.  # noqa: E501
        :type: EnumOptionData
        """

        self._lockin_period_frequency_type = lockin_period_frequency_type

    @property
    def lockin_period_frequency_type_id(self):
        """Gets the lockin_period_frequency_type_id of this SavingsAccountData.  # noqa: E501


        :return: The lockin_period_frequency_type_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._lockin_period_frequency_type_id

    @lockin_period_frequency_type_id.setter
    def lockin_period_frequency_type_id(self, lockin_period_frequency_type_id):
        """Sets the lockin_period_frequency_type_id of this SavingsAccountData.


        :param lockin_period_frequency_type_id: The lockin_period_frequency_type_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._lockin_period_frequency_type_id = lockin_period_frequency_type_id

    @property
    def lockin_period_frequency_type_options(self):
        """Gets the lockin_period_frequency_type_options of this SavingsAccountData.  # noqa: E501


        :return: The lockin_period_frequency_type_options of this SavingsAccountData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._lockin_period_frequency_type_options

    @lockin_period_frequency_type_options.setter
    def lockin_period_frequency_type_options(self, lockin_period_frequency_type_options):
        """Sets the lockin_period_frequency_type_options of this SavingsAccountData.


        :param lockin_period_frequency_type_options: The lockin_period_frequency_type_options of this SavingsAccountData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._lockin_period_frequency_type_options = lockin_period_frequency_type_options

    @property
    def max_allowed_lien_limit(self):
        """Gets the max_allowed_lien_limit of this SavingsAccountData.  # noqa: E501


        :return: The max_allowed_lien_limit of this SavingsAccountData.  # noqa: E501
        :rtype: float
        """
        return self._max_allowed_lien_limit

    @max_allowed_lien_limit.setter
    def max_allowed_lien_limit(self, max_allowed_lien_limit):
        """Sets the max_allowed_lien_limit of this SavingsAccountData.


        :param max_allowed_lien_limit: The max_allowed_lien_limit of this SavingsAccountData.  # noqa: E501
        :type: float
        """

        self._max_allowed_lien_limit = max_allowed_lien_limit

    @property
    def min_balance_for_interest_calculation(self):
        """Gets the min_balance_for_interest_calculation of this SavingsAccountData.  # noqa: E501


        :return: The min_balance_for_interest_calculation of this SavingsAccountData.  # noqa: E501
        :rtype: float
        """
        return self._min_balance_for_interest_calculation

    @min_balance_for_interest_calculation.setter
    def min_balance_for_interest_calculation(self, min_balance_for_interest_calculation):
        """Sets the min_balance_for_interest_calculation of this SavingsAccountData.


        :param min_balance_for_interest_calculation: The min_balance_for_interest_calculation of this SavingsAccountData.  # noqa: E501
        :type: float
        """

        self._min_balance_for_interest_calculation = min_balance_for_interest_calculation

    @property
    def min_overdraft_for_interest_calculation(self):
        """Gets the min_overdraft_for_interest_calculation of this SavingsAccountData.  # noqa: E501


        :return: The min_overdraft_for_interest_calculation of this SavingsAccountData.  # noqa: E501
        :rtype: float
        """
        return self._min_overdraft_for_interest_calculation

    @min_overdraft_for_interest_calculation.setter
    def min_overdraft_for_interest_calculation(self, min_overdraft_for_interest_calculation):
        """Sets the min_overdraft_for_interest_calculation of this SavingsAccountData.


        :param min_overdraft_for_interest_calculation: The min_overdraft_for_interest_calculation of this SavingsAccountData.  # noqa: E501
        :type: float
        """

        self._min_overdraft_for_interest_calculation = min_overdraft_for_interest_calculation

    @property
    def min_required_balance(self):
        """Gets the min_required_balance of this SavingsAccountData.  # noqa: E501


        :return: The min_required_balance of this SavingsAccountData.  # noqa: E501
        :rtype: float
        """
        return self._min_required_balance

    @min_required_balance.setter
    def min_required_balance(self, min_required_balance):
        """Sets the min_required_balance of this SavingsAccountData.


        :param min_required_balance: The min_required_balance of this SavingsAccountData.  # noqa: E501
        :type: float
        """

        self._min_required_balance = min_required_balance

    @property
    def min_required_opening_balance(self):
        """Gets the min_required_opening_balance of this SavingsAccountData.  # noqa: E501


        :return: The min_required_opening_balance of this SavingsAccountData.  # noqa: E501
        :rtype: float
        """
        return self._min_required_opening_balance

    @min_required_opening_balance.setter
    def min_required_opening_balance(self, min_required_opening_balance):
        """Sets the min_required_opening_balance of this SavingsAccountData.


        :param min_required_opening_balance: The min_required_opening_balance of this SavingsAccountData.  # noqa: E501
        :type: float
        """

        self._min_required_opening_balance = min_required_opening_balance

    @property
    def new_savings_account_transaction_data(self):
        """Gets the new_savings_account_transaction_data of this SavingsAccountData.  # noqa: E501


        :return: The new_savings_account_transaction_data of this SavingsAccountData.  # noqa: E501
        :rtype: list[SavingsAccountTransactionData]
        """
        return self._new_savings_account_transaction_data

    @new_savings_account_transaction_data.setter
    def new_savings_account_transaction_data(self, new_savings_account_transaction_data):
        """Sets the new_savings_account_transaction_data of this SavingsAccountData.


        :param new_savings_account_transaction_data: The new_savings_account_transaction_data of this SavingsAccountData.  # noqa: E501
        :type: list[SavingsAccountTransactionData]
        """

        self._new_savings_account_transaction_data = new_savings_account_transaction_data

    @property
    def nominal_annual_interest_rate(self):
        """Gets the nominal_annual_interest_rate of this SavingsAccountData.  # noqa: E501


        :return: The nominal_annual_interest_rate of this SavingsAccountData.  # noqa: E501
        :rtype: float
        """
        return self._nominal_annual_interest_rate

    @nominal_annual_interest_rate.setter
    def nominal_annual_interest_rate(self, nominal_annual_interest_rate):
        """Sets the nominal_annual_interest_rate of this SavingsAccountData.


        :param nominal_annual_interest_rate: The nominal_annual_interest_rate of this SavingsAccountData.  # noqa: E501
        :type: float
        """

        self._nominal_annual_interest_rate = nominal_annual_interest_rate

    @property
    def nominal_annual_interest_rate_overdraft(self):
        """Gets the nominal_annual_interest_rate_overdraft of this SavingsAccountData.  # noqa: E501


        :return: The nominal_annual_interest_rate_overdraft of this SavingsAccountData.  # noqa: E501
        :rtype: float
        """
        return self._nominal_annual_interest_rate_overdraft

    @nominal_annual_interest_rate_overdraft.setter
    def nominal_annual_interest_rate_overdraft(self, nominal_annual_interest_rate_overdraft):
        """Sets the nominal_annual_interest_rate_overdraft of this SavingsAccountData.


        :param nominal_annual_interest_rate_overdraft: The nominal_annual_interest_rate_overdraft of this SavingsAccountData.  # noqa: E501
        :type: float
        """

        self._nominal_annual_interest_rate_overdraft = nominal_annual_interest_rate_overdraft

    @property
    def office_id(self):
        """Gets the office_id of this SavingsAccountData.  # noqa: E501


        :return: The office_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this SavingsAccountData.


        :param office_id: The office_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def on_hold_funds(self):
        """Gets the on_hold_funds of this SavingsAccountData.  # noqa: E501


        :return: The on_hold_funds of this SavingsAccountData.  # noqa: E501
        :rtype: float
        """
        return self._on_hold_funds

    @on_hold_funds.setter
    def on_hold_funds(self, on_hold_funds):
        """Sets the on_hold_funds of this SavingsAccountData.


        :param on_hold_funds: The on_hold_funds of this SavingsAccountData.  # noqa: E501
        :type: float
        """

        self._on_hold_funds = on_hold_funds

    @property
    def overdraft_limit(self):
        """Gets the overdraft_limit of this SavingsAccountData.  # noqa: E501


        :return: The overdraft_limit of this SavingsAccountData.  # noqa: E501
        :rtype: float
        """
        return self._overdraft_limit

    @overdraft_limit.setter
    def overdraft_limit(self, overdraft_limit):
        """Sets the overdraft_limit of this SavingsAccountData.


        :param overdraft_limit: The overdraft_limit of this SavingsAccountData.  # noqa: E501
        :type: float
        """

        self._overdraft_limit = overdraft_limit

    @property
    def product_id(self):
        """Gets the product_id of this SavingsAccountData.  # noqa: E501


        :return: The product_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SavingsAccountData.


        :param product_id: The product_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def product_options(self):
        """Gets the product_options of this SavingsAccountData.  # noqa: E501


        :return: The product_options of this SavingsAccountData.  # noqa: E501
        :rtype: list[SavingsProductData]
        """
        return self._product_options

    @product_options.setter
    def product_options(self, product_options):
        """Sets the product_options of this SavingsAccountData.


        :param product_options: The product_options of this SavingsAccountData.  # noqa: E501
        :type: list[SavingsProductData]
        """

        self._product_options = product_options

    @property
    def reason_for_block(self):
        """Gets the reason_for_block of this SavingsAccountData.  # noqa: E501


        :return: The reason_for_block of this SavingsAccountData.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_block

    @reason_for_block.setter
    def reason_for_block(self, reason_for_block):
        """Sets the reason_for_block of this SavingsAccountData.


        :param reason_for_block: The reason_for_block of this SavingsAccountData.  # noqa: E501
        :type: str
        """

        self._reason_for_block = reason_for_block

    @property
    def row_index(self):
        """Gets the row_index of this SavingsAccountData.  # noqa: E501


        :return: The row_index of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._row_index

    @row_index.setter
    def row_index(self, row_index):
        """Sets the row_index of this SavingsAccountData.


        :param row_index: The row_index of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._row_index = row_index

    @property
    def savings_account_summary_data(self):
        """Gets the savings_account_summary_data of this SavingsAccountData.  # noqa: E501


        :return: The savings_account_summary_data of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsAccountSummaryData
        """
        return self._savings_account_summary_data

    @savings_account_summary_data.setter
    def savings_account_summary_data(self, savings_account_summary_data):
        """Sets the savings_account_summary_data of this SavingsAccountData.


        :param savings_account_summary_data: The savings_account_summary_data of this SavingsAccountData.  # noqa: E501
        :type: SavingsAccountSummaryData
        """

        self._savings_account_summary_data = savings_account_summary_data

    @property
    def savings_account_transaction_data(self):
        """Gets the savings_account_transaction_data of this SavingsAccountData.  # noqa: E501


        :return: The savings_account_transaction_data of this SavingsAccountData.  # noqa: E501
        :rtype: list[SavingsAccountTransactionData]
        """
        return self._savings_account_transaction_data

    @savings_account_transaction_data.setter
    def savings_account_transaction_data(self, savings_account_transaction_data):
        """Sets the savings_account_transaction_data of this SavingsAccountData.


        :param savings_account_transaction_data: The savings_account_transaction_data of this SavingsAccountData.  # noqa: E501
        :type: list[SavingsAccountTransactionData]
        """

        self._savings_account_transaction_data = savings_account_transaction_data

    @property
    def savings_account_transaction_summary_wrapper(self):
        """Gets the savings_account_transaction_summary_wrapper of this SavingsAccountData.  # noqa: E501


        :return: The savings_account_transaction_summary_wrapper of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsAccountTransactionDataSummaryWrapper
        """
        return self._savings_account_transaction_summary_wrapper

    @savings_account_transaction_summary_wrapper.setter
    def savings_account_transaction_summary_wrapper(self, savings_account_transaction_summary_wrapper):
        """Sets the savings_account_transaction_summary_wrapper of this SavingsAccountData.


        :param savings_account_transaction_summary_wrapper: The savings_account_transaction_summary_wrapper of this SavingsAccountData.  # noqa: E501
        :type: SavingsAccountTransactionDataSummaryWrapper
        """

        self._savings_account_transaction_summary_wrapper = savings_account_transaction_summary_wrapper

    @property
    def savings_account_transactions_with_pivot_config(self):
        """Gets the savings_account_transactions_with_pivot_config of this SavingsAccountData.  # noqa: E501


        :return: The savings_account_transactions_with_pivot_config of this SavingsAccountData.  # noqa: E501
        :rtype: list[SavingsAccountTransactionData]
        """
        return self._savings_account_transactions_with_pivot_config

    @savings_account_transactions_with_pivot_config.setter
    def savings_account_transactions_with_pivot_config(self, savings_account_transactions_with_pivot_config):
        """Sets the savings_account_transactions_with_pivot_config of this SavingsAccountData.


        :param savings_account_transactions_with_pivot_config: The savings_account_transactions_with_pivot_config of this SavingsAccountData.  # noqa: E501
        :type: list[SavingsAccountTransactionData]
        """

        self._savings_account_transactions_with_pivot_config = savings_account_transactions_with_pivot_config

    @property
    def savings_amount_on_hold(self):
        """Gets the savings_amount_on_hold of this SavingsAccountData.  # noqa: E501


        :return: The savings_amount_on_hold of this SavingsAccountData.  # noqa: E501
        :rtype: float
        """
        return self._savings_amount_on_hold

    @savings_amount_on_hold.setter
    def savings_amount_on_hold(self, savings_amount_on_hold):
        """Sets the savings_amount_on_hold of this SavingsAccountData.


        :param savings_amount_on_hold: The savings_amount_on_hold of this SavingsAccountData.  # noqa: E501
        :type: float
        """

        self._savings_amount_on_hold = savings_amount_on_hold

    @property
    def savings_helper(self):
        """Gets the savings_helper of this SavingsAccountData.  # noqa: E501


        :return: The savings_helper of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsHelper
        """
        return self._savings_helper

    @savings_helper.setter
    def savings_helper(self, savings_helper):
        """Sets the savings_helper of this SavingsAccountData.


        :param savings_helper: The savings_helper of this SavingsAccountData.  # noqa: E501
        :type: SavingsHelper
        """

        self._savings_helper = savings_helper

    @property
    def savings_product(self):
        """Gets the savings_product of this SavingsAccountData.  # noqa: E501


        :return: The savings_product of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsProductData
        """
        return self._savings_product

    @savings_product.setter
    def savings_product(self, savings_product):
        """Sets the savings_product of this SavingsAccountData.


        :param savings_product: The savings_product of this SavingsAccountData.  # noqa: E501
        :type: SavingsProductData
        """

        self._savings_product = savings_product

    @property
    def savings_product_data(self):
        """Gets the savings_product_data of this SavingsAccountData.  # noqa: E501


        :return: The savings_product_data of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsProductData
        """
        return self._savings_product_data

    @savings_product_data.setter
    def savings_product_data(self, savings_product_data):
        """Sets the savings_product_data of this SavingsAccountData.


        :param savings_product_data: The savings_product_data of this SavingsAccountData.  # noqa: E501
        :type: SavingsProductData
        """

        self._savings_product_data = savings_product_data

    @property
    def savings_product_id(self):
        """Gets the savings_product_id of this SavingsAccountData.  # noqa: E501


        :return: The savings_product_id of this SavingsAccountData.  # noqa: E501
        :rtype: int
        """
        return self._savings_product_id

    @savings_product_id.setter
    def savings_product_id(self, savings_product_id):
        """Sets the savings_product_id of this SavingsAccountData.


        :param savings_product_id: The savings_product_id of this SavingsAccountData.  # noqa: E501
        :type: int
        """

        self._savings_product_id = savings_product_id

    @property
    def savings_product_name(self):
        """Gets the savings_product_name of this SavingsAccountData.  # noqa: E501


        :return: The savings_product_name of this SavingsAccountData.  # noqa: E501
        :rtype: str
        """
        return self._savings_product_name

    @savings_product_name.setter
    def savings_product_name(self, savings_product_name):
        """Sets the savings_product_name of this SavingsAccountData.


        :param savings_product_name: The savings_product_name of this SavingsAccountData.  # noqa: E501
        :type: str
        """

        self._savings_product_name = savings_product_name

    @property
    def start_interest_calculation_date(self):
        """Gets the start_interest_calculation_date of this SavingsAccountData.  # noqa: E501


        :return: The start_interest_calculation_date of this SavingsAccountData.  # noqa: E501
        :rtype: date
        """
        return self._start_interest_calculation_date

    @start_interest_calculation_date.setter
    def start_interest_calculation_date(self, start_interest_calculation_date):
        """Sets the start_interest_calculation_date of this SavingsAccountData.


        :param start_interest_calculation_date: The start_interest_calculation_date of this SavingsAccountData.  # noqa: E501
        :type: date
        """

        self._start_interest_calculation_date = start_interest_calculation_date

    @property
    def status(self):
        """Gets the status of this SavingsAccountData.  # noqa: E501


        :return: The status of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsAccountStatusEnumData
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SavingsAccountData.


        :param status: The status of this SavingsAccountData.  # noqa: E501
        :type: SavingsAccountStatusEnumData
        """

        self._status = status

    @property
    def sub_status(self):
        """Gets the sub_status of this SavingsAccountData.  # noqa: E501


        :return: The sub_status of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsAccountSubStatusEnumData
        """
        return self._sub_status

    @sub_status.setter
    def sub_status(self, sub_status):
        """Sets the sub_status of this SavingsAccountData.


        :param sub_status: The sub_status of this SavingsAccountData.  # noqa: E501
        :type: SavingsAccountSubStatusEnumData
        """

        self._sub_status = sub_status

    @property
    def submitted_on_date(self):
        """Gets the submitted_on_date of this SavingsAccountData.  # noqa: E501


        :return: The submitted_on_date of this SavingsAccountData.  # noqa: E501
        :rtype: date
        """
        return self._submitted_on_date

    @submitted_on_date.setter
    def submitted_on_date(self, submitted_on_date):
        """Sets the submitted_on_date of this SavingsAccountData.


        :param submitted_on_date: The submitted_on_date of this SavingsAccountData.  # noqa: E501
        :type: date
        """

        self._submitted_on_date = submitted_on_date

    @property
    def summary(self):
        """Gets the summary of this SavingsAccountData.  # noqa: E501


        :return: The summary of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsAccountSummaryData
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this SavingsAccountData.


        :param summary: The summary of this SavingsAccountData.  # noqa: E501
        :type: SavingsAccountSummaryData
        """

        self._summary = summary

    @property
    def tax_group(self):
        """Gets the tax_group of this SavingsAccountData.  # noqa: E501


        :return: The tax_group of this SavingsAccountData.  # noqa: E501
        :rtype: TaxGroupData
        """
        return self._tax_group

    @tax_group.setter
    def tax_group(self, tax_group):
        """Sets the tax_group of this SavingsAccountData.


        :param tax_group: The tax_group of this SavingsAccountData.  # noqa: E501
        :type: TaxGroupData
        """

        self._tax_group = tax_group

    @property
    def timeline(self):
        """Gets the timeline of this SavingsAccountData.  # noqa: E501


        :return: The timeline of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsAccountApplicationTimelineData
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this SavingsAccountData.


        :param timeline: The timeline of this SavingsAccountData.  # noqa: E501
        :type: SavingsAccountApplicationTimelineData
        """

        self._timeline = timeline

    @property
    def transactions(self):
        """Gets the transactions of this SavingsAccountData.  # noqa: E501


        :return: The transactions of this SavingsAccountData.  # noqa: E501
        :rtype: list[SavingsAccountTransactionData]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this SavingsAccountData.


        :param transactions: The transactions of this SavingsAccountData.  # noqa: E501
        :type: list[SavingsAccountTransactionData]
        """

        self._transactions = transactions

    @property
    def updated_transactions(self):
        """Gets the updated_transactions of this SavingsAccountData.  # noqa: E501


        :return: The updated_transactions of this SavingsAccountData.  # noqa: E501
        :rtype: list[SavingsAccountTransactionData]
        """
        return self._updated_transactions

    @updated_transactions.setter
    def updated_transactions(self, updated_transactions):
        """Sets the updated_transactions of this SavingsAccountData.


        :param updated_transactions: The updated_transactions of this SavingsAccountData.  # noqa: E501
        :type: list[SavingsAccountTransactionData]
        """

        self._updated_transactions = updated_transactions

    @property
    def with_hold_tax(self):
        """Gets the with_hold_tax of this SavingsAccountData.  # noqa: E501


        :return: The with_hold_tax of this SavingsAccountData.  # noqa: E501
        :rtype: bool
        """
        return self._with_hold_tax

    @with_hold_tax.setter
    def with_hold_tax(self, with_hold_tax):
        """Sets the with_hold_tax of this SavingsAccountData.


        :param with_hold_tax: The with_hold_tax of this SavingsAccountData.  # noqa: E501
        :type: bool
        """

        self._with_hold_tax = with_hold_tax

    @property
    def withdrawal_fee(self):
        """Gets the withdrawal_fee of this SavingsAccountData.  # noqa: E501


        :return: The withdrawal_fee of this SavingsAccountData.  # noqa: E501
        :rtype: SavingsAccountChargeData
        """
        return self._withdrawal_fee

    @withdrawal_fee.setter
    def withdrawal_fee(self, withdrawal_fee):
        """Sets the withdrawal_fee of this SavingsAccountData.


        :param withdrawal_fee: The withdrawal_fee of this SavingsAccountData.  # noqa: E501
        :type: SavingsAccountChargeData
        """

        self._withdrawal_fee = withdrawal_fee

    @property
    def withdrawal_fee_for_transfers(self):
        """Gets the withdrawal_fee_for_transfers of this SavingsAccountData.  # noqa: E501


        :return: The withdrawal_fee_for_transfers of this SavingsAccountData.  # noqa: E501
        :rtype: bool
        """
        return self._withdrawal_fee_for_transfers

    @withdrawal_fee_for_transfers.setter
    def withdrawal_fee_for_transfers(self, withdrawal_fee_for_transfers):
        """Sets the withdrawal_fee_for_transfers of this SavingsAccountData.


        :param withdrawal_fee_for_transfers: The withdrawal_fee_for_transfers of this SavingsAccountData.  # noqa: E501
        :type: bool
        """

        self._withdrawal_fee_for_transfers = withdrawal_fee_for_transfers

    @property
    def withdrawal_fee_type_options(self):
        """Gets the withdrawal_fee_type_options of this SavingsAccountData.  # noqa: E501


        :return: The withdrawal_fee_type_options of this SavingsAccountData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._withdrawal_fee_type_options

    @withdrawal_fee_type_options.setter
    def withdrawal_fee_type_options(self, withdrawal_fee_type_options):
        """Sets the withdrawal_fee_type_options of this SavingsAccountData.


        :param withdrawal_fee_type_options: The withdrawal_fee_type_options of this SavingsAccountData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._withdrawal_fee_type_options = withdrawal_fee_type_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavingsAccountData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavingsAccountData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
