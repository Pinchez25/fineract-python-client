# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalAssetOwnerSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'effective_from_date': 'date',
        'effective_to_date': 'date',
        'submitted_from_date': 'date',
        'submitted_to_date': 'date',
        'text': 'str'
    }

    attribute_map = {
        'effective_from_date': 'effectiveFromDate',
        'effective_to_date': 'effectiveToDate',
        'submitted_from_date': 'submittedFromDate',
        'submitted_to_date': 'submittedToDate',
        'text': 'text'
    }

    def __init__(self, effective_from_date=None, effective_to_date=None, submitted_from_date=None, submitted_to_date=None, text=None):  # noqa: E501
        """ExternalAssetOwnerSearchRequest - a model defined in Swagger"""  # noqa: E501
        self._effective_from_date = None
        self._effective_to_date = None
        self._submitted_from_date = None
        self._submitted_to_date = None
        self._text = None
        self.discriminator = None
        if effective_from_date is not None:
            self.effective_from_date = effective_from_date
        if effective_to_date is not None:
            self.effective_to_date = effective_to_date
        if submitted_from_date is not None:
            self.submitted_from_date = submitted_from_date
        if submitted_to_date is not None:
            self.submitted_to_date = submitted_to_date
        if text is not None:
            self.text = text

    @property
    def effective_from_date(self):
        """Gets the effective_from_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501


        :return: The effective_from_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501
        :rtype: date
        """
        return self._effective_from_date

    @effective_from_date.setter
    def effective_from_date(self, effective_from_date):
        """Sets the effective_from_date of this ExternalAssetOwnerSearchRequest.


        :param effective_from_date: The effective_from_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501
        :type: date
        """

        self._effective_from_date = effective_from_date

    @property
    def effective_to_date(self):
        """Gets the effective_to_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501


        :return: The effective_to_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501
        :rtype: date
        """
        return self._effective_to_date

    @effective_to_date.setter
    def effective_to_date(self, effective_to_date):
        """Sets the effective_to_date of this ExternalAssetOwnerSearchRequest.


        :param effective_to_date: The effective_to_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501
        :type: date
        """

        self._effective_to_date = effective_to_date

    @property
    def submitted_from_date(self):
        """Gets the submitted_from_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501


        :return: The submitted_from_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501
        :rtype: date
        """
        return self._submitted_from_date

    @submitted_from_date.setter
    def submitted_from_date(self, submitted_from_date):
        """Sets the submitted_from_date of this ExternalAssetOwnerSearchRequest.


        :param submitted_from_date: The submitted_from_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501
        :type: date
        """

        self._submitted_from_date = submitted_from_date

    @property
    def submitted_to_date(self):
        """Gets the submitted_to_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501


        :return: The submitted_to_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501
        :rtype: date
        """
        return self._submitted_to_date

    @submitted_to_date.setter
    def submitted_to_date(self, submitted_to_date):
        """Sets the submitted_to_date of this ExternalAssetOwnerSearchRequest.


        :param submitted_to_date: The submitted_to_date of this ExternalAssetOwnerSearchRequest.  # noqa: E501
        :type: date
        """

        self._submitted_to_date = submitted_to_date

    @property
    def text(self):
        """Gets the text of this ExternalAssetOwnerSearchRequest.  # noqa: E501


        :return: The text of this ExternalAssetOwnerSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ExternalAssetOwnerSearchRequest.


        :param text: The text of this ExternalAssetOwnerSearchRequest.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalAssetOwnerSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalAssetOwnerSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
