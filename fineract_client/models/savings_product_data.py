# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SavingsProductData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accrual_based_accounting_enabled': 'bool',
        'allow_overdraft': 'bool',
        'cash_based_accounting_enabled': 'bool',
        'currency': 'CurrencyData',
        'deposit_account_type': 'str',
        'id': 'int',
        'interest_calculation_days_in_year_type': 'EnumOptionData',
        'interest_calculation_type': 'EnumOptionData',
        'interest_compounding_period_type': 'EnumOptionData',
        'interest_posting_period_type': 'EnumOptionData',
        'lockin_period_frequency': 'int',
        'lockin_period_frequency_type': 'EnumOptionData',
        'max_allowed_lien_limit': 'float',
        'min_required_balance': 'float',
        'min_required_opening_balance': 'float',
        'name': 'str',
        'nominal_annual_interest_rate': 'float',
        'overdraft_limit': 'float',
        'periodic_accrual_accounting': 'bool',
        'upfront_accrual_accounting': 'bool',
        'withdrawal_fee_for_transfers': 'bool'
    }

    attribute_map = {
        'accrual_based_accounting_enabled': 'accrualBasedAccountingEnabled',
        'allow_overdraft': 'allowOverdraft',
        'cash_based_accounting_enabled': 'cashBasedAccountingEnabled',
        'currency': 'currency',
        'deposit_account_type': 'depositAccountType',
        'id': 'id',
        'interest_calculation_days_in_year_type': 'interestCalculationDaysInYearType',
        'interest_calculation_type': 'interestCalculationType',
        'interest_compounding_period_type': 'interestCompoundingPeriodType',
        'interest_posting_period_type': 'interestPostingPeriodType',
        'lockin_period_frequency': 'lockinPeriodFrequency',
        'lockin_period_frequency_type': 'lockinPeriodFrequencyType',
        'max_allowed_lien_limit': 'maxAllowedLienLimit',
        'min_required_balance': 'minRequiredBalance',
        'min_required_opening_balance': 'minRequiredOpeningBalance',
        'name': 'name',
        'nominal_annual_interest_rate': 'nominalAnnualInterestRate',
        'overdraft_limit': 'overdraftLimit',
        'periodic_accrual_accounting': 'periodicAccrualAccounting',
        'upfront_accrual_accounting': 'upfrontAccrualAccounting',
        'withdrawal_fee_for_transfers': 'withdrawalFeeForTransfers'
    }

    def __init__(self, accrual_based_accounting_enabled=None, allow_overdraft=None, cash_based_accounting_enabled=None, currency=None, deposit_account_type=None, id=None, interest_calculation_days_in_year_type=None, interest_calculation_type=None, interest_compounding_period_type=None, interest_posting_period_type=None, lockin_period_frequency=None, lockin_period_frequency_type=None, max_allowed_lien_limit=None, min_required_balance=None, min_required_opening_balance=None, name=None, nominal_annual_interest_rate=None, overdraft_limit=None, periodic_accrual_accounting=None, upfront_accrual_accounting=None, withdrawal_fee_for_transfers=None):  # noqa: E501
        """SavingsProductData - a model defined in Swagger"""  # noqa: E501
        self._accrual_based_accounting_enabled = None
        self._allow_overdraft = None
        self._cash_based_accounting_enabled = None
        self._currency = None
        self._deposit_account_type = None
        self._id = None
        self._interest_calculation_days_in_year_type = None
        self._interest_calculation_type = None
        self._interest_compounding_period_type = None
        self._interest_posting_period_type = None
        self._lockin_period_frequency = None
        self._lockin_period_frequency_type = None
        self._max_allowed_lien_limit = None
        self._min_required_balance = None
        self._min_required_opening_balance = None
        self._name = None
        self._nominal_annual_interest_rate = None
        self._overdraft_limit = None
        self._periodic_accrual_accounting = None
        self._upfront_accrual_accounting = None
        self._withdrawal_fee_for_transfers = None
        self.discriminator = None
        if accrual_based_accounting_enabled is not None:
            self.accrual_based_accounting_enabled = accrual_based_accounting_enabled
        if allow_overdraft is not None:
            self.allow_overdraft = allow_overdraft
        if cash_based_accounting_enabled is not None:
            self.cash_based_accounting_enabled = cash_based_accounting_enabled
        if currency is not None:
            self.currency = currency
        if deposit_account_type is not None:
            self.deposit_account_type = deposit_account_type
        if id is not None:
            self.id = id
        if interest_calculation_days_in_year_type is not None:
            self.interest_calculation_days_in_year_type = interest_calculation_days_in_year_type
        if interest_calculation_type is not None:
            self.interest_calculation_type = interest_calculation_type
        if interest_compounding_period_type is not None:
            self.interest_compounding_period_type = interest_compounding_period_type
        if interest_posting_period_type is not None:
            self.interest_posting_period_type = interest_posting_period_type
        if lockin_period_frequency is not None:
            self.lockin_period_frequency = lockin_period_frequency
        if lockin_period_frequency_type is not None:
            self.lockin_period_frequency_type = lockin_period_frequency_type
        if max_allowed_lien_limit is not None:
            self.max_allowed_lien_limit = max_allowed_lien_limit
        if min_required_balance is not None:
            self.min_required_balance = min_required_balance
        if min_required_opening_balance is not None:
            self.min_required_opening_balance = min_required_opening_balance
        if name is not None:
            self.name = name
        if nominal_annual_interest_rate is not None:
            self.nominal_annual_interest_rate = nominal_annual_interest_rate
        if overdraft_limit is not None:
            self.overdraft_limit = overdraft_limit
        if periodic_accrual_accounting is not None:
            self.periodic_accrual_accounting = periodic_accrual_accounting
        if upfront_accrual_accounting is not None:
            self.upfront_accrual_accounting = upfront_accrual_accounting
        if withdrawal_fee_for_transfers is not None:
            self.withdrawal_fee_for_transfers = withdrawal_fee_for_transfers

    @property
    def accrual_based_accounting_enabled(self):
        """Gets the accrual_based_accounting_enabled of this SavingsProductData.  # noqa: E501


        :return: The accrual_based_accounting_enabled of this SavingsProductData.  # noqa: E501
        :rtype: bool
        """
        return self._accrual_based_accounting_enabled

    @accrual_based_accounting_enabled.setter
    def accrual_based_accounting_enabled(self, accrual_based_accounting_enabled):
        """Sets the accrual_based_accounting_enabled of this SavingsProductData.


        :param accrual_based_accounting_enabled: The accrual_based_accounting_enabled of this SavingsProductData.  # noqa: E501
        :type: bool
        """

        self._accrual_based_accounting_enabled = accrual_based_accounting_enabled

    @property
    def allow_overdraft(self):
        """Gets the allow_overdraft of this SavingsProductData.  # noqa: E501


        :return: The allow_overdraft of this SavingsProductData.  # noqa: E501
        :rtype: bool
        """
        return self._allow_overdraft

    @allow_overdraft.setter
    def allow_overdraft(self, allow_overdraft):
        """Sets the allow_overdraft of this SavingsProductData.


        :param allow_overdraft: The allow_overdraft of this SavingsProductData.  # noqa: E501
        :type: bool
        """

        self._allow_overdraft = allow_overdraft

    @property
    def cash_based_accounting_enabled(self):
        """Gets the cash_based_accounting_enabled of this SavingsProductData.  # noqa: E501


        :return: The cash_based_accounting_enabled of this SavingsProductData.  # noqa: E501
        :rtype: bool
        """
        return self._cash_based_accounting_enabled

    @cash_based_accounting_enabled.setter
    def cash_based_accounting_enabled(self, cash_based_accounting_enabled):
        """Sets the cash_based_accounting_enabled of this SavingsProductData.


        :param cash_based_accounting_enabled: The cash_based_accounting_enabled of this SavingsProductData.  # noqa: E501
        :type: bool
        """

        self._cash_based_accounting_enabled = cash_based_accounting_enabled

    @property
    def currency(self):
        """Gets the currency of this SavingsProductData.  # noqa: E501


        :return: The currency of this SavingsProductData.  # noqa: E501
        :rtype: CurrencyData
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SavingsProductData.


        :param currency: The currency of this SavingsProductData.  # noqa: E501
        :type: CurrencyData
        """

        self._currency = currency

    @property
    def deposit_account_type(self):
        """Gets the deposit_account_type of this SavingsProductData.  # noqa: E501


        :return: The deposit_account_type of this SavingsProductData.  # noqa: E501
        :rtype: str
        """
        return self._deposit_account_type

    @deposit_account_type.setter
    def deposit_account_type(self, deposit_account_type):
        """Sets the deposit_account_type of this SavingsProductData.


        :param deposit_account_type: The deposit_account_type of this SavingsProductData.  # noqa: E501
        :type: str
        """

        self._deposit_account_type = deposit_account_type

    @property
    def id(self):
        """Gets the id of this SavingsProductData.  # noqa: E501


        :return: The id of this SavingsProductData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavingsProductData.


        :param id: The id of this SavingsProductData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interest_calculation_days_in_year_type(self):
        """Gets the interest_calculation_days_in_year_type of this SavingsProductData.  # noqa: E501


        :return: The interest_calculation_days_in_year_type of this SavingsProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_calculation_days_in_year_type

    @interest_calculation_days_in_year_type.setter
    def interest_calculation_days_in_year_type(self, interest_calculation_days_in_year_type):
        """Sets the interest_calculation_days_in_year_type of this SavingsProductData.


        :param interest_calculation_days_in_year_type: The interest_calculation_days_in_year_type of this SavingsProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_calculation_days_in_year_type = interest_calculation_days_in_year_type

    @property
    def interest_calculation_type(self):
        """Gets the interest_calculation_type of this SavingsProductData.  # noqa: E501


        :return: The interest_calculation_type of this SavingsProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_calculation_type

    @interest_calculation_type.setter
    def interest_calculation_type(self, interest_calculation_type):
        """Sets the interest_calculation_type of this SavingsProductData.


        :param interest_calculation_type: The interest_calculation_type of this SavingsProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_calculation_type = interest_calculation_type

    @property
    def interest_compounding_period_type(self):
        """Gets the interest_compounding_period_type of this SavingsProductData.  # noqa: E501


        :return: The interest_compounding_period_type of this SavingsProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_compounding_period_type

    @interest_compounding_period_type.setter
    def interest_compounding_period_type(self, interest_compounding_period_type):
        """Sets the interest_compounding_period_type of this SavingsProductData.


        :param interest_compounding_period_type: The interest_compounding_period_type of this SavingsProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_compounding_period_type = interest_compounding_period_type

    @property
    def interest_posting_period_type(self):
        """Gets the interest_posting_period_type of this SavingsProductData.  # noqa: E501


        :return: The interest_posting_period_type of this SavingsProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_posting_period_type

    @interest_posting_period_type.setter
    def interest_posting_period_type(self, interest_posting_period_type):
        """Sets the interest_posting_period_type of this SavingsProductData.


        :param interest_posting_period_type: The interest_posting_period_type of this SavingsProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_posting_period_type = interest_posting_period_type

    @property
    def lockin_period_frequency(self):
        """Gets the lockin_period_frequency of this SavingsProductData.  # noqa: E501


        :return: The lockin_period_frequency of this SavingsProductData.  # noqa: E501
        :rtype: int
        """
        return self._lockin_period_frequency

    @lockin_period_frequency.setter
    def lockin_period_frequency(self, lockin_period_frequency):
        """Sets the lockin_period_frequency of this SavingsProductData.


        :param lockin_period_frequency: The lockin_period_frequency of this SavingsProductData.  # noqa: E501
        :type: int
        """

        self._lockin_period_frequency = lockin_period_frequency

    @property
    def lockin_period_frequency_type(self):
        """Gets the lockin_period_frequency_type of this SavingsProductData.  # noqa: E501


        :return: The lockin_period_frequency_type of this SavingsProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._lockin_period_frequency_type

    @lockin_period_frequency_type.setter
    def lockin_period_frequency_type(self, lockin_period_frequency_type):
        """Sets the lockin_period_frequency_type of this SavingsProductData.


        :param lockin_period_frequency_type: The lockin_period_frequency_type of this SavingsProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._lockin_period_frequency_type = lockin_period_frequency_type

    @property
    def max_allowed_lien_limit(self):
        """Gets the max_allowed_lien_limit of this SavingsProductData.  # noqa: E501


        :return: The max_allowed_lien_limit of this SavingsProductData.  # noqa: E501
        :rtype: float
        """
        return self._max_allowed_lien_limit

    @max_allowed_lien_limit.setter
    def max_allowed_lien_limit(self, max_allowed_lien_limit):
        """Sets the max_allowed_lien_limit of this SavingsProductData.


        :param max_allowed_lien_limit: The max_allowed_lien_limit of this SavingsProductData.  # noqa: E501
        :type: float
        """

        self._max_allowed_lien_limit = max_allowed_lien_limit

    @property
    def min_required_balance(self):
        """Gets the min_required_balance of this SavingsProductData.  # noqa: E501


        :return: The min_required_balance of this SavingsProductData.  # noqa: E501
        :rtype: float
        """
        return self._min_required_balance

    @min_required_balance.setter
    def min_required_balance(self, min_required_balance):
        """Sets the min_required_balance of this SavingsProductData.


        :param min_required_balance: The min_required_balance of this SavingsProductData.  # noqa: E501
        :type: float
        """

        self._min_required_balance = min_required_balance

    @property
    def min_required_opening_balance(self):
        """Gets the min_required_opening_balance of this SavingsProductData.  # noqa: E501


        :return: The min_required_opening_balance of this SavingsProductData.  # noqa: E501
        :rtype: float
        """
        return self._min_required_opening_balance

    @min_required_opening_balance.setter
    def min_required_opening_balance(self, min_required_opening_balance):
        """Sets the min_required_opening_balance of this SavingsProductData.


        :param min_required_opening_balance: The min_required_opening_balance of this SavingsProductData.  # noqa: E501
        :type: float
        """

        self._min_required_opening_balance = min_required_opening_balance

    @property
    def name(self):
        """Gets the name of this SavingsProductData.  # noqa: E501


        :return: The name of this SavingsProductData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SavingsProductData.


        :param name: The name of this SavingsProductData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nominal_annual_interest_rate(self):
        """Gets the nominal_annual_interest_rate of this SavingsProductData.  # noqa: E501


        :return: The nominal_annual_interest_rate of this SavingsProductData.  # noqa: E501
        :rtype: float
        """
        return self._nominal_annual_interest_rate

    @nominal_annual_interest_rate.setter
    def nominal_annual_interest_rate(self, nominal_annual_interest_rate):
        """Sets the nominal_annual_interest_rate of this SavingsProductData.


        :param nominal_annual_interest_rate: The nominal_annual_interest_rate of this SavingsProductData.  # noqa: E501
        :type: float
        """

        self._nominal_annual_interest_rate = nominal_annual_interest_rate

    @property
    def overdraft_limit(self):
        """Gets the overdraft_limit of this SavingsProductData.  # noqa: E501


        :return: The overdraft_limit of this SavingsProductData.  # noqa: E501
        :rtype: float
        """
        return self._overdraft_limit

    @overdraft_limit.setter
    def overdraft_limit(self, overdraft_limit):
        """Sets the overdraft_limit of this SavingsProductData.


        :param overdraft_limit: The overdraft_limit of this SavingsProductData.  # noqa: E501
        :type: float
        """

        self._overdraft_limit = overdraft_limit

    @property
    def periodic_accrual_accounting(self):
        """Gets the periodic_accrual_accounting of this SavingsProductData.  # noqa: E501


        :return: The periodic_accrual_accounting of this SavingsProductData.  # noqa: E501
        :rtype: bool
        """
        return self._periodic_accrual_accounting

    @periodic_accrual_accounting.setter
    def periodic_accrual_accounting(self, periodic_accrual_accounting):
        """Sets the periodic_accrual_accounting of this SavingsProductData.


        :param periodic_accrual_accounting: The periodic_accrual_accounting of this SavingsProductData.  # noqa: E501
        :type: bool
        """

        self._periodic_accrual_accounting = periodic_accrual_accounting

    @property
    def upfront_accrual_accounting(self):
        """Gets the upfront_accrual_accounting of this SavingsProductData.  # noqa: E501


        :return: The upfront_accrual_accounting of this SavingsProductData.  # noqa: E501
        :rtype: bool
        """
        return self._upfront_accrual_accounting

    @upfront_accrual_accounting.setter
    def upfront_accrual_accounting(self, upfront_accrual_accounting):
        """Sets the upfront_accrual_accounting of this SavingsProductData.


        :param upfront_accrual_accounting: The upfront_accrual_accounting of this SavingsProductData.  # noqa: E501
        :type: bool
        """

        self._upfront_accrual_accounting = upfront_accrual_accounting

    @property
    def withdrawal_fee_for_transfers(self):
        """Gets the withdrawal_fee_for_transfers of this SavingsProductData.  # noqa: E501


        :return: The withdrawal_fee_for_transfers of this SavingsProductData.  # noqa: E501
        :rtype: bool
        """
        return self._withdrawal_fee_for_transfers

    @withdrawal_fee_for_transfers.setter
    def withdrawal_fee_for_transfers(self, withdrawal_fee_for_transfers):
        """Sets the withdrawal_fee_for_transfers of this SavingsProductData.


        :param withdrawal_fee_for_transfers: The withdrawal_fee_for_transfers of this SavingsProductData.  # noqa: E501
        :type: bool
        """

        self._withdrawal_fee_for_transfers = withdrawal_fee_for_transfers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavingsProductData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavingsProductData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
