# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetAccountTransfersTemplateRefundByTransferFromClient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_no': 'int',
        'activation_date': 'date',
        'active': 'bool',
        'client_classification': 'GetAccountTransfersClientClassification',
        'client_type': 'GetAccountTransfersClientType',
        'display_name': 'str',
        'firstname': 'str',
        'gender': 'GetAccountTransfersGender',
        'groups': 'GetAccountTransfersGroups',
        'id': 'int',
        'lastname': 'str',
        'office_id': 'int',
        'office_name': 'str',
        'status': 'GetAccountTransfersStatus',
        'timeline': 'GetAccountTransfersTimeline'
    }

    attribute_map = {
        'account_no': 'accountNo',
        'activation_date': 'activationDate',
        'active': 'active',
        'client_classification': 'clientClassification',
        'client_type': 'clientType',
        'display_name': 'displayName',
        'firstname': 'firstname',
        'gender': 'gender',
        'groups': 'groups',
        'id': 'id',
        'lastname': 'lastname',
        'office_id': 'officeId',
        'office_name': 'officeName',
        'status': 'status',
        'timeline': 'timeline'
    }

    def __init__(self, account_no=None, activation_date=None, active=None, client_classification=None, client_type=None, display_name=None, firstname=None, gender=None, groups=None, id=None, lastname=None, office_id=None, office_name=None, status=None, timeline=None):  # noqa: E501
        """GetAccountTransfersTemplateRefundByTransferFromClient - a model defined in Swagger"""  # noqa: E501
        self._account_no = None
        self._activation_date = None
        self._active = None
        self._client_classification = None
        self._client_type = None
        self._display_name = None
        self._firstname = None
        self._gender = None
        self._groups = None
        self._id = None
        self._lastname = None
        self._office_id = None
        self._office_name = None
        self._status = None
        self._timeline = None
        self.discriminator = None
        if account_no is not None:
            self.account_no = account_no
        if activation_date is not None:
            self.activation_date = activation_date
        if active is not None:
            self.active = active
        if client_classification is not None:
            self.client_classification = client_classification
        if client_type is not None:
            self.client_type = client_type
        if display_name is not None:
            self.display_name = display_name
        if firstname is not None:
            self.firstname = firstname
        if gender is not None:
            self.gender = gender
        if groups is not None:
            self.groups = groups
        if id is not None:
            self.id = id
        if lastname is not None:
            self.lastname = lastname
        if office_id is not None:
            self.office_id = office_id
        if office_name is not None:
            self.office_name = office_name
        if status is not None:
            self.status = status
        if timeline is not None:
            self.timeline = timeline

    @property
    def account_no(self):
        """Gets the account_no of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The account_no of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: int
        """
        return self._account_no

    @account_no.setter
    def account_no(self, account_no):
        """Sets the account_no of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param account_no: The account_no of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: int
        """

        self._account_no = account_no

    @property
    def activation_date(self):
        """Gets the activation_date of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The activation_date of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: date
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param activation_date: The activation_date of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: date
        """

        self._activation_date = activation_date

    @property
    def active(self):
        """Gets the active of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The active of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param active: The active of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def client_classification(self):
        """Gets the client_classification of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The client_classification of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: GetAccountTransfersClientClassification
        """
        return self._client_classification

    @client_classification.setter
    def client_classification(self, client_classification):
        """Sets the client_classification of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param client_classification: The client_classification of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: GetAccountTransfersClientClassification
        """

        self._client_classification = client_classification

    @property
    def client_type(self):
        """Gets the client_type of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The client_type of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: GetAccountTransfersClientType
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param client_type: The client_type of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: GetAccountTransfersClientType
        """

        self._client_type = client_type

    @property
    def display_name(self):
        """Gets the display_name of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The display_name of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param display_name: The display_name of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def firstname(self):
        """Gets the firstname of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The firstname of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param firstname: The firstname of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def gender(self):
        """Gets the gender of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The gender of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: GetAccountTransfersGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param gender: The gender of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: GetAccountTransfersGender
        """

        self._gender = gender

    @property
    def groups(self):
        """Gets the groups of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The groups of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: GetAccountTransfersGroups
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param groups: The groups of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: GetAccountTransfersGroups
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The id of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param id: The id of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lastname(self):
        """Gets the lastname of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The lastname of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param lastname: The lastname of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def office_id(self):
        """Gets the office_id of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The office_id of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param office_id: The office_id of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def office_name(self):
        """Gets the office_name of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The office_name of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: str
        """
        return self._office_name

    @office_name.setter
    def office_name(self, office_name):
        """Sets the office_name of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param office_name: The office_name of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: str
        """

        self._office_name = office_name

    @property
    def status(self):
        """Gets the status of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The status of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: GetAccountTransfersStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param status: The status of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: GetAccountTransfersStatus
        """

        self._status = status

    @property
    def timeline(self):
        """Gets the timeline of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501


        :return: The timeline of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :rtype: GetAccountTransfersTimeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this GetAccountTransfersTemplateRefundByTransferFromClient.


        :param timeline: The timeline of this GetAccountTransfersTemplateRefundByTransferFromClient.  # noqa: E501
        :type: GetAccountTransfersTimeline
        """

        self._timeline = timeline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAccountTransfersTemplateRefundByTransferFromClient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAccountTransfersTemplateRefundByTransferFromClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
