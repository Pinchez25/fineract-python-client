# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostLoansResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'int',
        'currency': 'GetLoansLoanIdCurrency',
        'loan_id': 'int',
        'loan_term_in_days': 'int',
        'office_id': 'int',
        'periods': 'list[PostLoansRepaymentSchedulePeriods]',
        'resource_external_id': 'str',
        'resource_id': 'int',
        'total_fee_charges_charged': 'int',
        'total_interest_charged': 'float',
        'total_outstanding': 'int',
        'total_penalty_charges_charged': 'int',
        'total_principal_disbursed': 'int',
        'total_principal_expected': 'int',
        'total_principal_paid': 'int',
        'total_repayment': 'int',
        'total_repayment_expected': 'float',
        'total_waived': 'int',
        'total_written_off': 'int'
    }

    attribute_map = {
        'client_id': 'clientId',
        'currency': 'currency',
        'loan_id': 'loanId',
        'loan_term_in_days': 'loanTermInDays',
        'office_id': 'officeId',
        'periods': 'periods',
        'resource_external_id': 'resourceExternalId',
        'resource_id': 'resourceId',
        'total_fee_charges_charged': 'totalFeeChargesCharged',
        'total_interest_charged': 'totalInterestCharged',
        'total_outstanding': 'totalOutstanding',
        'total_penalty_charges_charged': 'totalPenaltyChargesCharged',
        'total_principal_disbursed': 'totalPrincipalDisbursed',
        'total_principal_expected': 'totalPrincipalExpected',
        'total_principal_paid': 'totalPrincipalPaid',
        'total_repayment': 'totalRepayment',
        'total_repayment_expected': 'totalRepaymentExpected',
        'total_waived': 'totalWaived',
        'total_written_off': 'totalWrittenOff'
    }

    def __init__(self, client_id=None, currency=None, loan_id=None, loan_term_in_days=None, office_id=None, periods=None, resource_external_id=None, resource_id=None, total_fee_charges_charged=None, total_interest_charged=None, total_outstanding=None, total_penalty_charges_charged=None, total_principal_disbursed=None, total_principal_expected=None, total_principal_paid=None, total_repayment=None, total_repayment_expected=None, total_waived=None, total_written_off=None):  # noqa: E501
        """PostLoansResponse - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._currency = None
        self._loan_id = None
        self._loan_term_in_days = None
        self._office_id = None
        self._periods = None
        self._resource_external_id = None
        self._resource_id = None
        self._total_fee_charges_charged = None
        self._total_interest_charged = None
        self._total_outstanding = None
        self._total_penalty_charges_charged = None
        self._total_principal_disbursed = None
        self._total_principal_expected = None
        self._total_principal_paid = None
        self._total_repayment = None
        self._total_repayment_expected = None
        self._total_waived = None
        self._total_written_off = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if currency is not None:
            self.currency = currency
        if loan_id is not None:
            self.loan_id = loan_id
        if loan_term_in_days is not None:
            self.loan_term_in_days = loan_term_in_days
        if office_id is not None:
            self.office_id = office_id
        if periods is not None:
            self.periods = periods
        if resource_external_id is not None:
            self.resource_external_id = resource_external_id
        if resource_id is not None:
            self.resource_id = resource_id
        if total_fee_charges_charged is not None:
            self.total_fee_charges_charged = total_fee_charges_charged
        if total_interest_charged is not None:
            self.total_interest_charged = total_interest_charged
        if total_outstanding is not None:
            self.total_outstanding = total_outstanding
        if total_penalty_charges_charged is not None:
            self.total_penalty_charges_charged = total_penalty_charges_charged
        if total_principal_disbursed is not None:
            self.total_principal_disbursed = total_principal_disbursed
        if total_principal_expected is not None:
            self.total_principal_expected = total_principal_expected
        if total_principal_paid is not None:
            self.total_principal_paid = total_principal_paid
        if total_repayment is not None:
            self.total_repayment = total_repayment
        if total_repayment_expected is not None:
            self.total_repayment_expected = total_repayment_expected
        if total_waived is not None:
            self.total_waived = total_waived
        if total_written_off is not None:
            self.total_written_off = total_written_off

    @property
    def client_id(self):
        """Gets the client_id of this PostLoansResponse.  # noqa: E501


        :return: The client_id of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PostLoansResponse.


        :param client_id: The client_id of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def currency(self):
        """Gets the currency of this PostLoansResponse.  # noqa: E501


        :return: The currency of this PostLoansResponse.  # noqa: E501
        :rtype: GetLoansLoanIdCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PostLoansResponse.


        :param currency: The currency of this PostLoansResponse.  # noqa: E501
        :type: GetLoansLoanIdCurrency
        """

        self._currency = currency

    @property
    def loan_id(self):
        """Gets the loan_id of this PostLoansResponse.  # noqa: E501


        :return: The loan_id of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """Sets the loan_id of this PostLoansResponse.


        :param loan_id: The loan_id of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._loan_id = loan_id

    @property
    def loan_term_in_days(self):
        """Gets the loan_term_in_days of this PostLoansResponse.  # noqa: E501


        :return: The loan_term_in_days of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._loan_term_in_days

    @loan_term_in_days.setter
    def loan_term_in_days(self, loan_term_in_days):
        """Sets the loan_term_in_days of this PostLoansResponse.


        :param loan_term_in_days: The loan_term_in_days of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._loan_term_in_days = loan_term_in_days

    @property
    def office_id(self):
        """Gets the office_id of this PostLoansResponse.  # noqa: E501


        :return: The office_id of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this PostLoansResponse.


        :param office_id: The office_id of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def periods(self):
        """Gets the periods of this PostLoansResponse.  # noqa: E501


        :return: The periods of this PostLoansResponse.  # noqa: E501
        :rtype: list[PostLoansRepaymentSchedulePeriods]
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this PostLoansResponse.


        :param periods: The periods of this PostLoansResponse.  # noqa: E501
        :type: list[PostLoansRepaymentSchedulePeriods]
        """

        self._periods = periods

    @property
    def resource_external_id(self):
        """Gets the resource_external_id of this PostLoansResponse.  # noqa: E501


        :return: The resource_external_id of this PostLoansResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource_external_id

    @resource_external_id.setter
    def resource_external_id(self, resource_external_id):
        """Sets the resource_external_id of this PostLoansResponse.


        :param resource_external_id: The resource_external_id of this PostLoansResponse.  # noqa: E501
        :type: str
        """

        self._resource_external_id = resource_external_id

    @property
    def resource_id(self):
        """Gets the resource_id of this PostLoansResponse.  # noqa: E501


        :return: The resource_id of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this PostLoansResponse.


        :param resource_id: The resource_id of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._resource_id = resource_id

    @property
    def total_fee_charges_charged(self):
        """Gets the total_fee_charges_charged of this PostLoansResponse.  # noqa: E501


        :return: The total_fee_charges_charged of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_fee_charges_charged

    @total_fee_charges_charged.setter
    def total_fee_charges_charged(self, total_fee_charges_charged):
        """Sets the total_fee_charges_charged of this PostLoansResponse.


        :param total_fee_charges_charged: The total_fee_charges_charged of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._total_fee_charges_charged = total_fee_charges_charged

    @property
    def total_interest_charged(self):
        """Gets the total_interest_charged of this PostLoansResponse.  # noqa: E501


        :return: The total_interest_charged of this PostLoansResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_interest_charged

    @total_interest_charged.setter
    def total_interest_charged(self, total_interest_charged):
        """Sets the total_interest_charged of this PostLoansResponse.


        :param total_interest_charged: The total_interest_charged of this PostLoansResponse.  # noqa: E501
        :type: float
        """

        self._total_interest_charged = total_interest_charged

    @property
    def total_outstanding(self):
        """Gets the total_outstanding of this PostLoansResponse.  # noqa: E501


        :return: The total_outstanding of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_outstanding

    @total_outstanding.setter
    def total_outstanding(self, total_outstanding):
        """Sets the total_outstanding of this PostLoansResponse.


        :param total_outstanding: The total_outstanding of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._total_outstanding = total_outstanding

    @property
    def total_penalty_charges_charged(self):
        """Gets the total_penalty_charges_charged of this PostLoansResponse.  # noqa: E501


        :return: The total_penalty_charges_charged of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_penalty_charges_charged

    @total_penalty_charges_charged.setter
    def total_penalty_charges_charged(self, total_penalty_charges_charged):
        """Sets the total_penalty_charges_charged of this PostLoansResponse.


        :param total_penalty_charges_charged: The total_penalty_charges_charged of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._total_penalty_charges_charged = total_penalty_charges_charged

    @property
    def total_principal_disbursed(self):
        """Gets the total_principal_disbursed of this PostLoansResponse.  # noqa: E501


        :return: The total_principal_disbursed of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_principal_disbursed

    @total_principal_disbursed.setter
    def total_principal_disbursed(self, total_principal_disbursed):
        """Sets the total_principal_disbursed of this PostLoansResponse.


        :param total_principal_disbursed: The total_principal_disbursed of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._total_principal_disbursed = total_principal_disbursed

    @property
    def total_principal_expected(self):
        """Gets the total_principal_expected of this PostLoansResponse.  # noqa: E501


        :return: The total_principal_expected of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_principal_expected

    @total_principal_expected.setter
    def total_principal_expected(self, total_principal_expected):
        """Sets the total_principal_expected of this PostLoansResponse.


        :param total_principal_expected: The total_principal_expected of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._total_principal_expected = total_principal_expected

    @property
    def total_principal_paid(self):
        """Gets the total_principal_paid of this PostLoansResponse.  # noqa: E501


        :return: The total_principal_paid of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_principal_paid

    @total_principal_paid.setter
    def total_principal_paid(self, total_principal_paid):
        """Sets the total_principal_paid of this PostLoansResponse.


        :param total_principal_paid: The total_principal_paid of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._total_principal_paid = total_principal_paid

    @property
    def total_repayment(self):
        """Gets the total_repayment of this PostLoansResponse.  # noqa: E501


        :return: The total_repayment of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_repayment

    @total_repayment.setter
    def total_repayment(self, total_repayment):
        """Sets the total_repayment of this PostLoansResponse.


        :param total_repayment: The total_repayment of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._total_repayment = total_repayment

    @property
    def total_repayment_expected(self):
        """Gets the total_repayment_expected of this PostLoansResponse.  # noqa: E501


        :return: The total_repayment_expected of this PostLoansResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_repayment_expected

    @total_repayment_expected.setter
    def total_repayment_expected(self, total_repayment_expected):
        """Sets the total_repayment_expected of this PostLoansResponse.


        :param total_repayment_expected: The total_repayment_expected of this PostLoansResponse.  # noqa: E501
        :type: float
        """

        self._total_repayment_expected = total_repayment_expected

    @property
    def total_waived(self):
        """Gets the total_waived of this PostLoansResponse.  # noqa: E501


        :return: The total_waived of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_waived

    @total_waived.setter
    def total_waived(self, total_waived):
        """Sets the total_waived of this PostLoansResponse.


        :param total_waived: The total_waived of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._total_waived = total_waived

    @property
    def total_written_off(self):
        """Gets the total_written_off of this PostLoansResponse.  # noqa: E501


        :return: The total_written_off of this PostLoansResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_written_off

    @total_written_off.setter
    def total_written_off(self, total_written_off):
        """Sets the total_written_off of this PostLoansResponse.


        :param total_written_off: The total_written_off of this PostLoansResponse.  # noqa: E501
        :type: int
        """

        self._total_written_off = total_written_off

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostLoansResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostLoansResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
