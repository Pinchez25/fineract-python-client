# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetFieldConfigurationEntityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity': 'str',
        'field': 'str',
        'field_configuration_id': 'int',
        'is_enabled': 'str',
        'is_mandatory': 'str',
        'subentity': 'str',
        'validation_regex': 'str'
    }

    attribute_map = {
        'entity': 'entity',
        'field': 'field',
        'field_configuration_id': 'fieldConfigurationId',
        'is_enabled': 'is_enabled',
        'is_mandatory': 'is_mandatory',
        'subentity': 'subentity',
        'validation_regex': 'validation_regex'
    }

    def __init__(self, entity=None, field=None, field_configuration_id=None, is_enabled=None, is_mandatory=None, subentity=None, validation_regex=None):  # noqa: E501
        """GetFieldConfigurationEntityResponse - a model defined in Swagger"""  # noqa: E501
        self._entity = None
        self._field = None
        self._field_configuration_id = None
        self._is_enabled = None
        self._is_mandatory = None
        self._subentity = None
        self._validation_regex = None
        self.discriminator = None
        if entity is not None:
            self.entity = entity
        if field is not None:
            self.field = field
        if field_configuration_id is not None:
            self.field_configuration_id = field_configuration_id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_mandatory is not None:
            self.is_mandatory = is_mandatory
        if subentity is not None:
            self.subentity = subentity
        if validation_regex is not None:
            self.validation_regex = validation_regex

    @property
    def entity(self):
        """Gets the entity of this GetFieldConfigurationEntityResponse.  # noqa: E501


        :return: The entity of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this GetFieldConfigurationEntityResponse.


        :param entity: The entity of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def field(self):
        """Gets the field of this GetFieldConfigurationEntityResponse.  # noqa: E501


        :return: The field of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this GetFieldConfigurationEntityResponse.


        :param field: The field of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def field_configuration_id(self):
        """Gets the field_configuration_id of this GetFieldConfigurationEntityResponse.  # noqa: E501


        :return: The field_configuration_id of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :rtype: int
        """
        return self._field_configuration_id

    @field_configuration_id.setter
    def field_configuration_id(self, field_configuration_id):
        """Sets the field_configuration_id of this GetFieldConfigurationEntityResponse.


        :param field_configuration_id: The field_configuration_id of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :type: int
        """

        self._field_configuration_id = field_configuration_id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this GetFieldConfigurationEntityResponse.  # noqa: E501


        :return: The is_enabled of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :rtype: str
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this GetFieldConfigurationEntityResponse.


        :param is_enabled: The is_enabled of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :type: str
        """

        self._is_enabled = is_enabled

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this GetFieldConfigurationEntityResponse.  # noqa: E501


        :return: The is_mandatory of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :rtype: str
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this GetFieldConfigurationEntityResponse.


        :param is_mandatory: The is_mandatory of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :type: str
        """

        self._is_mandatory = is_mandatory

    @property
    def subentity(self):
        """Gets the subentity of this GetFieldConfigurationEntityResponse.  # noqa: E501


        :return: The subentity of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :rtype: str
        """
        return self._subentity

    @subentity.setter
    def subentity(self, subentity):
        """Sets the subentity of this GetFieldConfigurationEntityResponse.


        :param subentity: The subentity of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :type: str
        """

        self._subentity = subentity

    @property
    def validation_regex(self):
        """Gets the validation_regex of this GetFieldConfigurationEntityResponse.  # noqa: E501


        :return: The validation_regex of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :rtype: str
        """
        return self._validation_regex

    @validation_regex.setter
    def validation_regex(self, validation_regex):
        """Sets the validation_regex of this GetFieldConfigurationEntityResponse.


        :param validation_regex: The validation_regex of this GetFieldConfigurationEntityResponse.  # noqa: E501
        :type: str
        """

        self._validation_regex = validation_regex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetFieldConfigurationEntityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetFieldConfigurationEntityResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
