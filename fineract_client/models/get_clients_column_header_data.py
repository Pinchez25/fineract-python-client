# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetClientsColumnHeaderData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_display_type': 'str',
        'column_length': 'int',
        'column_name': 'str',
        'column_type': 'str',
        'column_values': 'list[str]',
        'is_column_nullable': 'bool',
        'is_column_primary_key': 'bool'
    }

    attribute_map = {
        'column_display_type': 'columnDisplayType',
        'column_length': 'columnLength',
        'column_name': 'columnName',
        'column_type': 'columnType',
        'column_values': 'columnValues',
        'is_column_nullable': 'isColumnNullable',
        'is_column_primary_key': 'isColumnPrimaryKey'
    }

    def __init__(self, column_display_type=None, column_length=None, column_name=None, column_type=None, column_values=None, is_column_nullable=None, is_column_primary_key=None):  # noqa: E501
        """GetClientsColumnHeaderData - a model defined in Swagger"""  # noqa: E501
        self._column_display_type = None
        self._column_length = None
        self._column_name = None
        self._column_type = None
        self._column_values = None
        self._is_column_nullable = None
        self._is_column_primary_key = None
        self.discriminator = None
        if column_display_type is not None:
            self.column_display_type = column_display_type
        if column_length is not None:
            self.column_length = column_length
        if column_name is not None:
            self.column_name = column_name
        if column_type is not None:
            self.column_type = column_type
        if column_values is not None:
            self.column_values = column_values
        if is_column_nullable is not None:
            self.is_column_nullable = is_column_nullable
        if is_column_primary_key is not None:
            self.is_column_primary_key = is_column_primary_key

    @property
    def column_display_type(self):
        """Gets the column_display_type of this GetClientsColumnHeaderData.  # noqa: E501


        :return: The column_display_type of this GetClientsColumnHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._column_display_type

    @column_display_type.setter
    def column_display_type(self, column_display_type):
        """Sets the column_display_type of this GetClientsColumnHeaderData.


        :param column_display_type: The column_display_type of this GetClientsColumnHeaderData.  # noqa: E501
        :type: str
        """

        self._column_display_type = column_display_type

    @property
    def column_length(self):
        """Gets the column_length of this GetClientsColumnHeaderData.  # noqa: E501


        :return: The column_length of this GetClientsColumnHeaderData.  # noqa: E501
        :rtype: int
        """
        return self._column_length

    @column_length.setter
    def column_length(self, column_length):
        """Sets the column_length of this GetClientsColumnHeaderData.


        :param column_length: The column_length of this GetClientsColumnHeaderData.  # noqa: E501
        :type: int
        """

        self._column_length = column_length

    @property
    def column_name(self):
        """Gets the column_name of this GetClientsColumnHeaderData.  # noqa: E501


        :return: The column_name of this GetClientsColumnHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this GetClientsColumnHeaderData.


        :param column_name: The column_name of this GetClientsColumnHeaderData.  # noqa: E501
        :type: str
        """

        self._column_name = column_name

    @property
    def column_type(self):
        """Gets the column_type of this GetClientsColumnHeaderData.  # noqa: E501


        :return: The column_type of this GetClientsColumnHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """Sets the column_type of this GetClientsColumnHeaderData.


        :param column_type: The column_type of this GetClientsColumnHeaderData.  # noqa: E501
        :type: str
        """

        self._column_type = column_type

    @property
    def column_values(self):
        """Gets the column_values of this GetClientsColumnHeaderData.  # noqa: E501


        :return: The column_values of this GetClientsColumnHeaderData.  # noqa: E501
        :rtype: list[str]
        """
        return self._column_values

    @column_values.setter
    def column_values(self, column_values):
        """Sets the column_values of this GetClientsColumnHeaderData.


        :param column_values: The column_values of this GetClientsColumnHeaderData.  # noqa: E501
        :type: list[str]
        """

        self._column_values = column_values

    @property
    def is_column_nullable(self):
        """Gets the is_column_nullable of this GetClientsColumnHeaderData.  # noqa: E501


        :return: The is_column_nullable of this GetClientsColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._is_column_nullable

    @is_column_nullable.setter
    def is_column_nullable(self, is_column_nullable):
        """Sets the is_column_nullable of this GetClientsColumnHeaderData.


        :param is_column_nullable: The is_column_nullable of this GetClientsColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._is_column_nullable = is_column_nullable

    @property
    def is_column_primary_key(self):
        """Gets the is_column_primary_key of this GetClientsColumnHeaderData.  # noqa: E501


        :return: The is_column_primary_key of this GetClientsColumnHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._is_column_primary_key

    @is_column_primary_key.setter
    def is_column_primary_key(self, is_column_primary_key):
        """Sets the is_column_primary_key of this GetClientsColumnHeaderData.


        :param is_column_primary_key: The is_column_primary_key of this GetClientsColumnHeaderData.  # noqa: E501
        :type: bool
        """

        self._is_column_primary_key = is_column_primary_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetClientsColumnHeaderData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetClientsColumnHeaderData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
