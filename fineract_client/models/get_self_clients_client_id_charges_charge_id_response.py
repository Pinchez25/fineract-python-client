# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetSelfClientsClientIdChargesChargeIdResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'amount_outstanding': 'float',
        'amount_paid': 'float',
        'amount_waived': 'float',
        'amount_written_off': 'float',
        'charge_calculation_type': 'GetSelfClientsChargeCalculationType',
        'charge_id': 'int',
        'charge_time_type': 'GetSelfClientsChargeTimeType',
        'client_id': 'int',
        'currency': 'GetSelfClientsSavingsAccountsCurrency',
        'due_date': 'date',
        'id': 'int',
        'is_active': 'bool',
        'is_paid': 'bool',
        'is_waived': 'bool',
        'name': 'str',
        'penalty': 'bool'
    }

    attribute_map = {
        'amount': 'amount',
        'amount_outstanding': 'amountOutstanding',
        'amount_paid': 'amountPaid',
        'amount_waived': 'amountWaived',
        'amount_written_off': 'amountWrittenOff',
        'charge_calculation_type': 'chargeCalculationType',
        'charge_id': 'chargeId',
        'charge_time_type': 'chargeTimeType',
        'client_id': 'clientId',
        'currency': 'currency',
        'due_date': 'dueDate',
        'id': 'id',
        'is_active': 'isActive',
        'is_paid': 'isPaid',
        'is_waived': 'isWaived',
        'name': 'name',
        'penalty': 'penalty'
    }

    def __init__(self, amount=None, amount_outstanding=None, amount_paid=None, amount_waived=None, amount_written_off=None, charge_calculation_type=None, charge_id=None, charge_time_type=None, client_id=None, currency=None, due_date=None, id=None, is_active=None, is_paid=None, is_waived=None, name=None, penalty=None):  # noqa: E501
        """GetSelfClientsClientIdChargesChargeIdResponse - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._amount_outstanding = None
        self._amount_paid = None
        self._amount_waived = None
        self._amount_written_off = None
        self._charge_calculation_type = None
        self._charge_id = None
        self._charge_time_type = None
        self._client_id = None
        self._currency = None
        self._due_date = None
        self._id = None
        self._is_active = None
        self._is_paid = None
        self._is_waived = None
        self._name = None
        self._penalty = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if amount_outstanding is not None:
            self.amount_outstanding = amount_outstanding
        if amount_paid is not None:
            self.amount_paid = amount_paid
        if amount_waived is not None:
            self.amount_waived = amount_waived
        if amount_written_off is not None:
            self.amount_written_off = amount_written_off
        if charge_calculation_type is not None:
            self.charge_calculation_type = charge_calculation_type
        if charge_id is not None:
            self.charge_id = charge_id
        if charge_time_type is not None:
            self.charge_time_type = charge_time_type
        if client_id is not None:
            self.client_id = client_id
        if currency is not None:
            self.currency = currency
        if due_date is not None:
            self.due_date = due_date
        if id is not None:
            self.id = id
        if is_active is not None:
            self.is_active = is_active
        if is_paid is not None:
            self.is_paid = is_paid
        if is_waived is not None:
            self.is_waived = is_waived
        if name is not None:
            self.name = name
        if penalty is not None:
            self.penalty = penalty

    @property
    def amount(self):
        """Gets the amount of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The amount of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param amount: The amount of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_outstanding(self):
        """Gets the amount_outstanding of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The amount_outstanding of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount_outstanding

    @amount_outstanding.setter
    def amount_outstanding(self, amount_outstanding):
        """Sets the amount_outstanding of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param amount_outstanding: The amount_outstanding of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: float
        """

        self._amount_outstanding = amount_outstanding

    @property
    def amount_paid(self):
        """Gets the amount_paid of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The amount_paid of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param amount_paid: The amount_paid of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: float
        """

        self._amount_paid = amount_paid

    @property
    def amount_waived(self):
        """Gets the amount_waived of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The amount_waived of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount_waived

    @amount_waived.setter
    def amount_waived(self, amount_waived):
        """Sets the amount_waived of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param amount_waived: The amount_waived of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: float
        """

        self._amount_waived = amount_waived

    @property
    def amount_written_off(self):
        """Gets the amount_written_off of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The amount_written_off of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount_written_off

    @amount_written_off.setter
    def amount_written_off(self, amount_written_off):
        """Sets the amount_written_off of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param amount_written_off: The amount_written_off of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: float
        """

        self._amount_written_off = amount_written_off

    @property
    def charge_calculation_type(self):
        """Gets the charge_calculation_type of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The charge_calculation_type of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: GetSelfClientsChargeCalculationType
        """
        return self._charge_calculation_type

    @charge_calculation_type.setter
    def charge_calculation_type(self, charge_calculation_type):
        """Sets the charge_calculation_type of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param charge_calculation_type: The charge_calculation_type of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: GetSelfClientsChargeCalculationType
        """

        self._charge_calculation_type = charge_calculation_type

    @property
    def charge_id(self):
        """Gets the charge_id of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The charge_id of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._charge_id

    @charge_id.setter
    def charge_id(self, charge_id):
        """Sets the charge_id of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param charge_id: The charge_id of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: int
        """

        self._charge_id = charge_id

    @property
    def charge_time_type(self):
        """Gets the charge_time_type of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The charge_time_type of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: GetSelfClientsChargeTimeType
        """
        return self._charge_time_type

    @charge_time_type.setter
    def charge_time_type(self, charge_time_type):
        """Sets the charge_time_type of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param charge_time_type: The charge_time_type of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: GetSelfClientsChargeTimeType
        """

        self._charge_time_type = charge_time_type

    @property
    def client_id(self):
        """Gets the client_id of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The client_id of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param client_id: The client_id of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def currency(self):
        """Gets the currency of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The currency of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: GetSelfClientsSavingsAccountsCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param currency: The currency of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: GetSelfClientsSavingsAccountsCurrency
        """

        self._currency = currency

    @property
    def due_date(self):
        """Gets the due_date of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The due_date of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param due_date: The due_date of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def id(self):
        """Gets the id of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The id of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param id: The id of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The is_active of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param is_active: The is_active of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_paid(self):
        """Gets the is_paid of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The is_paid of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_paid

    @is_paid.setter
    def is_paid(self, is_paid):
        """Sets the is_paid of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param is_paid: The is_paid of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: bool
        """

        self._is_paid = is_paid

    @property
    def is_waived(self):
        """Gets the is_waived of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The is_waived of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_waived

    @is_waived.setter
    def is_waived(self, is_waived):
        """Sets the is_waived of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param is_waived: The is_waived of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: bool
        """

        self._is_waived = is_waived

    @property
    def name(self):
        """Gets the name of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The name of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param name: The name of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def penalty(self):
        """Gets the penalty of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501


        :return: The penalty of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this GetSelfClientsClientIdChargesChargeIdResponse.


        :param penalty: The penalty of this GetSelfClientsClientIdChargesChargeIdResponse.  # noqa: E501
        :type: bool
        """

        self._penalty = penalty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSelfClientsClientIdChargesChargeIdResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSelfClientsClientIdChargesChargeIdResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
