# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetLoansLoanIdDelinquencySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_disbursement_amount': 'float',
        'delinquency_pause_periods': 'list[GetLoansLoanIdDelinquencyPausePeriod]',
        'delinquent_amount': 'float',
        'delinquent_date': 'date',
        'delinquent_days': 'int',
        'delinquent_fee': 'float',
        'delinquent_interest': 'float',
        'delinquent_penalty': 'float',
        'delinquent_principal': 'float',
        'installment_level_delinquency': 'list[GetLoansLoanIdLoanInstallmentLevelDelinquency]',
        'last_payment_amount': 'float',
        'last_payment_date': 'date',
        'last_repayment_amount': 'float',
        'last_repayment_date': 'date',
        'next_payment_due_date': 'date',
        'past_due_days': 'int'
    }

    attribute_map = {
        'available_disbursement_amount': 'availableDisbursementAmount',
        'delinquency_pause_periods': 'delinquencyPausePeriods',
        'delinquent_amount': 'delinquentAmount',
        'delinquent_date': 'delinquentDate',
        'delinquent_days': 'delinquentDays',
        'delinquent_fee': 'delinquentFee',
        'delinquent_interest': 'delinquentInterest',
        'delinquent_penalty': 'delinquentPenalty',
        'delinquent_principal': 'delinquentPrincipal',
        'installment_level_delinquency': 'installmentLevelDelinquency',
        'last_payment_amount': 'lastPaymentAmount',
        'last_payment_date': 'lastPaymentDate',
        'last_repayment_amount': 'lastRepaymentAmount',
        'last_repayment_date': 'lastRepaymentDate',
        'next_payment_due_date': 'nextPaymentDueDate',
        'past_due_days': 'pastDueDays'
    }

    def __init__(self, available_disbursement_amount=None, delinquency_pause_periods=None, delinquent_amount=None, delinquent_date=None, delinquent_days=None, delinquent_fee=None, delinquent_interest=None, delinquent_penalty=None, delinquent_principal=None, installment_level_delinquency=None, last_payment_amount=None, last_payment_date=None, last_repayment_amount=None, last_repayment_date=None, next_payment_due_date=None, past_due_days=None):  # noqa: E501
        """GetLoansLoanIdDelinquencySummary - a model defined in Swagger"""  # noqa: E501
        self._available_disbursement_amount = None
        self._delinquency_pause_periods = None
        self._delinquent_amount = None
        self._delinquent_date = None
        self._delinquent_days = None
        self._delinquent_fee = None
        self._delinquent_interest = None
        self._delinquent_penalty = None
        self._delinquent_principal = None
        self._installment_level_delinquency = None
        self._last_payment_amount = None
        self._last_payment_date = None
        self._last_repayment_amount = None
        self._last_repayment_date = None
        self._next_payment_due_date = None
        self._past_due_days = None
        self.discriminator = None
        if available_disbursement_amount is not None:
            self.available_disbursement_amount = available_disbursement_amount
        if delinquency_pause_periods is not None:
            self.delinquency_pause_periods = delinquency_pause_periods
        if delinquent_amount is not None:
            self.delinquent_amount = delinquent_amount
        if delinquent_date is not None:
            self.delinquent_date = delinquent_date
        if delinquent_days is not None:
            self.delinquent_days = delinquent_days
        if delinquent_fee is not None:
            self.delinquent_fee = delinquent_fee
        if delinquent_interest is not None:
            self.delinquent_interest = delinquent_interest
        if delinquent_penalty is not None:
            self.delinquent_penalty = delinquent_penalty
        if delinquent_principal is not None:
            self.delinquent_principal = delinquent_principal
        if installment_level_delinquency is not None:
            self.installment_level_delinquency = installment_level_delinquency
        if last_payment_amount is not None:
            self.last_payment_amount = last_payment_amount
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if last_repayment_amount is not None:
            self.last_repayment_amount = last_repayment_amount
        if last_repayment_date is not None:
            self.last_repayment_date = last_repayment_date
        if next_payment_due_date is not None:
            self.next_payment_due_date = next_payment_due_date
        if past_due_days is not None:
            self.past_due_days = past_due_days

    @property
    def available_disbursement_amount(self):
        """Gets the available_disbursement_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The available_disbursement_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: float
        """
        return self._available_disbursement_amount

    @available_disbursement_amount.setter
    def available_disbursement_amount(self, available_disbursement_amount):
        """Sets the available_disbursement_amount of this GetLoansLoanIdDelinquencySummary.


        :param available_disbursement_amount: The available_disbursement_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: float
        """

        self._available_disbursement_amount = available_disbursement_amount

    @property
    def delinquency_pause_periods(self):
        """Gets the delinquency_pause_periods of this GetLoansLoanIdDelinquencySummary.  # noqa: E501

        List of GetLoansLoanIdDelinquencyPausePeriod  # noqa: E501

        :return: The delinquency_pause_periods of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: list[GetLoansLoanIdDelinquencyPausePeriod]
        """
        return self._delinquency_pause_periods

    @delinquency_pause_periods.setter
    def delinquency_pause_periods(self, delinquency_pause_periods):
        """Sets the delinquency_pause_periods of this GetLoansLoanIdDelinquencySummary.

        List of GetLoansLoanIdDelinquencyPausePeriod  # noqa: E501

        :param delinquency_pause_periods: The delinquency_pause_periods of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: list[GetLoansLoanIdDelinquencyPausePeriod]
        """

        self._delinquency_pause_periods = delinquency_pause_periods

    @property
    def delinquent_amount(self):
        """Gets the delinquent_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The delinquent_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: float
        """
        return self._delinquent_amount

    @delinquent_amount.setter
    def delinquent_amount(self, delinquent_amount):
        """Sets the delinquent_amount of this GetLoansLoanIdDelinquencySummary.


        :param delinquent_amount: The delinquent_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: float
        """

        self._delinquent_amount = delinquent_amount

    @property
    def delinquent_date(self):
        """Gets the delinquent_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The delinquent_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: date
        """
        return self._delinquent_date

    @delinquent_date.setter
    def delinquent_date(self, delinquent_date):
        """Sets the delinquent_date of this GetLoansLoanIdDelinquencySummary.


        :param delinquent_date: The delinquent_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: date
        """

        self._delinquent_date = delinquent_date

    @property
    def delinquent_days(self):
        """Gets the delinquent_days of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The delinquent_days of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: int
        """
        return self._delinquent_days

    @delinquent_days.setter
    def delinquent_days(self, delinquent_days):
        """Sets the delinquent_days of this GetLoansLoanIdDelinquencySummary.


        :param delinquent_days: The delinquent_days of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: int
        """

        self._delinquent_days = delinquent_days

    @property
    def delinquent_fee(self):
        """Gets the delinquent_fee of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The delinquent_fee of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: float
        """
        return self._delinquent_fee

    @delinquent_fee.setter
    def delinquent_fee(self, delinquent_fee):
        """Sets the delinquent_fee of this GetLoansLoanIdDelinquencySummary.


        :param delinquent_fee: The delinquent_fee of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: float
        """

        self._delinquent_fee = delinquent_fee

    @property
    def delinquent_interest(self):
        """Gets the delinquent_interest of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The delinquent_interest of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: float
        """
        return self._delinquent_interest

    @delinquent_interest.setter
    def delinquent_interest(self, delinquent_interest):
        """Sets the delinquent_interest of this GetLoansLoanIdDelinquencySummary.


        :param delinquent_interest: The delinquent_interest of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: float
        """

        self._delinquent_interest = delinquent_interest

    @property
    def delinquent_penalty(self):
        """Gets the delinquent_penalty of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The delinquent_penalty of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: float
        """
        return self._delinquent_penalty

    @delinquent_penalty.setter
    def delinquent_penalty(self, delinquent_penalty):
        """Sets the delinquent_penalty of this GetLoansLoanIdDelinquencySummary.


        :param delinquent_penalty: The delinquent_penalty of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: float
        """

        self._delinquent_penalty = delinquent_penalty

    @property
    def delinquent_principal(self):
        """Gets the delinquent_principal of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The delinquent_principal of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: float
        """
        return self._delinquent_principal

    @delinquent_principal.setter
    def delinquent_principal(self, delinquent_principal):
        """Sets the delinquent_principal of this GetLoansLoanIdDelinquencySummary.


        :param delinquent_principal: The delinquent_principal of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: float
        """

        self._delinquent_principal = delinquent_principal

    @property
    def installment_level_delinquency(self):
        """Gets the installment_level_delinquency of this GetLoansLoanIdDelinquencySummary.  # noqa: E501

        List of GetLoansLoanIdLoanInstallmentLevelDelinquency  # noqa: E501

        :return: The installment_level_delinquency of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: list[GetLoansLoanIdLoanInstallmentLevelDelinquency]
        """
        return self._installment_level_delinquency

    @installment_level_delinquency.setter
    def installment_level_delinquency(self, installment_level_delinquency):
        """Sets the installment_level_delinquency of this GetLoansLoanIdDelinquencySummary.

        List of GetLoansLoanIdLoanInstallmentLevelDelinquency  # noqa: E501

        :param installment_level_delinquency: The installment_level_delinquency of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: list[GetLoansLoanIdLoanInstallmentLevelDelinquency]
        """

        self._installment_level_delinquency = installment_level_delinquency

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The last_payment_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: float
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this GetLoansLoanIdDelinquencySummary.


        :param last_payment_amount: The last_payment_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: float
        """

        self._last_payment_amount = last_payment_amount

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The last_payment_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: date
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this GetLoansLoanIdDelinquencySummary.


        :param last_payment_date: The last_payment_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: date
        """

        self._last_payment_date = last_payment_date

    @property
    def last_repayment_amount(self):
        """Gets the last_repayment_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The last_repayment_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: float
        """
        return self._last_repayment_amount

    @last_repayment_amount.setter
    def last_repayment_amount(self, last_repayment_amount):
        """Sets the last_repayment_amount of this GetLoansLoanIdDelinquencySummary.


        :param last_repayment_amount: The last_repayment_amount of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: float
        """

        self._last_repayment_amount = last_repayment_amount

    @property
    def last_repayment_date(self):
        """Gets the last_repayment_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The last_repayment_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: date
        """
        return self._last_repayment_date

    @last_repayment_date.setter
    def last_repayment_date(self, last_repayment_date):
        """Sets the last_repayment_date of this GetLoansLoanIdDelinquencySummary.


        :param last_repayment_date: The last_repayment_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: date
        """

        self._last_repayment_date = last_repayment_date

    @property
    def next_payment_due_date(self):
        """Gets the next_payment_due_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The next_payment_due_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: date
        """
        return self._next_payment_due_date

    @next_payment_due_date.setter
    def next_payment_due_date(self, next_payment_due_date):
        """Sets the next_payment_due_date of this GetLoansLoanIdDelinquencySummary.


        :param next_payment_due_date: The next_payment_due_date of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: date
        """

        self._next_payment_due_date = next_payment_due_date

    @property
    def past_due_days(self):
        """Gets the past_due_days of this GetLoansLoanIdDelinquencySummary.  # noqa: E501


        :return: The past_due_days of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :rtype: int
        """
        return self._past_due_days

    @past_due_days.setter
    def past_due_days(self, past_due_days):
        """Sets the past_due_days of this GetLoansLoanIdDelinquencySummary.


        :param past_due_days: The past_due_days of this GetLoansLoanIdDelinquencySummary.  # noqa: E501
        :type: int
        """

        self._past_due_days = past_due_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLoansLoanIdDelinquencySummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoansLoanIdDelinquencySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
