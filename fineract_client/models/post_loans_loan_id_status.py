# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostLoansLoanIdStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'closed': 'bool',
        'closed_obligations_met': 'bool',
        'closed_rescheduled': 'bool',
        'closed_written_off': 'bool',
        'code': 'str',
        'id': 'int',
        'overpaid': 'bool',
        'pending_approval': 'bool',
        'value': 'str',
        'waiting_for_disbursal': 'bool'
    }

    attribute_map = {
        'active': 'active',
        'closed': 'closed',
        'closed_obligations_met': 'closedObligationsMet',
        'closed_rescheduled': 'closedRescheduled',
        'closed_written_off': 'closedWrittenOff',
        'code': 'code',
        'id': 'id',
        'overpaid': 'overpaid',
        'pending_approval': 'pendingApproval',
        'value': 'value',
        'waiting_for_disbursal': 'waitingForDisbursal'
    }

    def __init__(self, active=None, closed=None, closed_obligations_met=None, closed_rescheduled=None, closed_written_off=None, code=None, id=None, overpaid=None, pending_approval=None, value=None, waiting_for_disbursal=None):  # noqa: E501
        """PostLoansLoanIdStatus - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._closed = None
        self._closed_obligations_met = None
        self._closed_rescheduled = None
        self._closed_written_off = None
        self._code = None
        self._id = None
        self._overpaid = None
        self._pending_approval = None
        self._value = None
        self._waiting_for_disbursal = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if closed is not None:
            self.closed = closed
        if closed_obligations_met is not None:
            self.closed_obligations_met = closed_obligations_met
        if closed_rescheduled is not None:
            self.closed_rescheduled = closed_rescheduled
        if closed_written_off is not None:
            self.closed_written_off = closed_written_off
        if code is not None:
            self.code = code
        if id is not None:
            self.id = id
        if overpaid is not None:
            self.overpaid = overpaid
        if pending_approval is not None:
            self.pending_approval = pending_approval
        if value is not None:
            self.value = value
        if waiting_for_disbursal is not None:
            self.waiting_for_disbursal = waiting_for_disbursal

    @property
    def active(self):
        """Gets the active of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The active of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PostLoansLoanIdStatus.


        :param active: The active of this PostLoansLoanIdStatus.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def closed(self):
        """Gets the closed of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The closed of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this PostLoansLoanIdStatus.


        :param closed: The closed of this PostLoansLoanIdStatus.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def closed_obligations_met(self):
        """Gets the closed_obligations_met of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The closed_obligations_met of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: bool
        """
        return self._closed_obligations_met

    @closed_obligations_met.setter
    def closed_obligations_met(self, closed_obligations_met):
        """Sets the closed_obligations_met of this PostLoansLoanIdStatus.


        :param closed_obligations_met: The closed_obligations_met of this PostLoansLoanIdStatus.  # noqa: E501
        :type: bool
        """

        self._closed_obligations_met = closed_obligations_met

    @property
    def closed_rescheduled(self):
        """Gets the closed_rescheduled of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The closed_rescheduled of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: bool
        """
        return self._closed_rescheduled

    @closed_rescheduled.setter
    def closed_rescheduled(self, closed_rescheduled):
        """Sets the closed_rescheduled of this PostLoansLoanIdStatus.


        :param closed_rescheduled: The closed_rescheduled of this PostLoansLoanIdStatus.  # noqa: E501
        :type: bool
        """

        self._closed_rescheduled = closed_rescheduled

    @property
    def closed_written_off(self):
        """Gets the closed_written_off of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The closed_written_off of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: bool
        """
        return self._closed_written_off

    @closed_written_off.setter
    def closed_written_off(self, closed_written_off):
        """Sets the closed_written_off of this PostLoansLoanIdStatus.


        :param closed_written_off: The closed_written_off of this PostLoansLoanIdStatus.  # noqa: E501
        :type: bool
        """

        self._closed_written_off = closed_written_off

    @property
    def code(self):
        """Gets the code of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The code of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PostLoansLoanIdStatus.


        :param code: The code of this PostLoansLoanIdStatus.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def id(self):
        """Gets the id of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The id of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostLoansLoanIdStatus.


        :param id: The id of this PostLoansLoanIdStatus.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def overpaid(self):
        """Gets the overpaid of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The overpaid of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: bool
        """
        return self._overpaid

    @overpaid.setter
    def overpaid(self, overpaid):
        """Sets the overpaid of this PostLoansLoanIdStatus.


        :param overpaid: The overpaid of this PostLoansLoanIdStatus.  # noqa: E501
        :type: bool
        """

        self._overpaid = overpaid

    @property
    def pending_approval(self):
        """Gets the pending_approval of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The pending_approval of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: bool
        """
        return self._pending_approval

    @pending_approval.setter
    def pending_approval(self, pending_approval):
        """Sets the pending_approval of this PostLoansLoanIdStatus.


        :param pending_approval: The pending_approval of this PostLoansLoanIdStatus.  # noqa: E501
        :type: bool
        """

        self._pending_approval = pending_approval

    @property
    def value(self):
        """Gets the value of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The value of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PostLoansLoanIdStatus.


        :param value: The value of this PostLoansLoanIdStatus.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def waiting_for_disbursal(self):
        """Gets the waiting_for_disbursal of this PostLoansLoanIdStatus.  # noqa: E501


        :return: The waiting_for_disbursal of this PostLoansLoanIdStatus.  # noqa: E501
        :rtype: bool
        """
        return self._waiting_for_disbursal

    @waiting_for_disbursal.setter
    def waiting_for_disbursal(self, waiting_for_disbursal):
        """Sets the waiting_for_disbursal of this PostLoansLoanIdStatus.


        :param waiting_for_disbursal: The waiting_for_disbursal of this PostLoansLoanIdStatus.  # noqa: E501
        :type: bool
        """

        self._waiting_for_disbursal = waiting_for_disbursal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostLoansLoanIdStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostLoansLoanIdStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
