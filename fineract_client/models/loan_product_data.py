# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanProductData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moves_out_of_npa_only_on_arrears_completion': 'bool',
        'accounting_mapping_options': 'dict(str, list[GLAccountData])',
        'accounting_mappings': 'dict(str, object)',
        'accounting_rule': 'EnumOptionData',
        'accounting_rule_options': 'list[EnumOptionData]',
        'advanced_payment_allocation_future_installment_allocation_rules': 'list[EnumOptionData]',
        'advanced_payment_allocation_transaction_types': 'list[EnumOptionData]',
        'advanced_payment_allocation_types': 'list[EnumOptionData]',
        'allow_approved_disbursed_amounts_over_applied': 'bool',
        'allow_attribute_overrides': 'LoanProductConfigurableAttributes',
        'allow_partial_period_interest_calculation': 'bool',
        'allow_variable_installments': 'bool',
        'amortization_type': 'EnumOptionData',
        'amortization_type_options': 'list[EnumOptionData]',
        'annual_interest_rate': 'float',
        'can_define_installment_amount': 'bool',
        'can_use_for_topup': 'bool',
        'charge_options': 'list[ChargeData]',
        'charges': 'list[ChargeData]',
        'close_date': 'date',
        'compounding_to_be_posted_as_transaction': 'bool',
        'credit_allocation': 'list[CreditAllocationData]',
        'credit_allocation_allocation_types': 'list[EnumOptionData]',
        'credit_allocation_transaction_types': 'list[EnumOptionData]',
        'currency': 'CurrencyData',
        'currency_options': 'list[CurrencyData]',
        'days_in_month_type': 'EnumOptionData',
        'days_in_month_type_options': 'list[EnumOptionData]',
        'days_in_year_type': 'EnumOptionData',
        'days_in_year_type_options': 'list[EnumOptionData]',
        'default_differential_lending_rate': 'float',
        'delinquency_bucket': 'DelinquencyBucketData',
        'delinquency_bucket_options': 'list[DelinquencyBucketData]',
        'description': 'str',
        'disallow_expected_disbursements': 'bool',
        'disbursed_amount_percentage_for_down_payment': 'float',
        'due_days_for_repayment_event': 'int',
        'enable_accrual_activity_posting': 'bool',
        'enable_auto_repayment_for_down_payment': 'bool',
        'enable_down_payment': 'bool',
        'enable_installment_level_delinquency': 'bool',
        'equal_amortization': 'bool',
        'external_id': 'str',
        'fee_to_income_account_mappings': 'list[ChargeToGLAccountMapper]',
        'fixed_length': 'int',
        'fixed_principal_percentage_per_installment': 'float',
        'floating_interest_rate_calculation_allowed': 'bool',
        'floating_rate_id': 'int',
        'floating_rate_name': 'str',
        'floating_rate_options': 'list[FloatingRateData]',
        'fund_id': 'int',
        'fund_name': 'str',
        'fund_options': 'list[FundData]',
        'grace_on_arrears_ageing': 'int',
        'grace_on_interest_charged': 'int',
        'grace_on_interest_payment': 'int',
        'grace_on_principal_payment': 'int',
        'hold_guarantee_funds': 'bool',
        'id': 'int',
        'in_arrears_tolerance': 'float',
        'include_in_borrower_cycle': 'bool',
        'installment_amount_in_multiples_of': 'int',
        'interest_calculation_period_type': 'EnumOptionData',
        'interest_calculation_period_type_options': 'list[EnumOptionData]',
        'interest_rate_differential': 'float',
        'interest_rate_frequency_type': 'EnumOptionData',
        'interest_rate_frequency_type_options': 'list[EnumOptionData]',
        'interest_rate_per_period': 'float',
        'interest_rate_variations_for_borrower_cycle': 'list[LoanProductBorrowerCycleVariationData]',
        'interest_recalculation_compounding_type_options': 'list[EnumOptionData]',
        'interest_recalculation_data': 'LoanProductInterestRecalculationData',
        'interest_recalculation_day_of_week_type_options': 'list[EnumOptionData]',
        'interest_recalculation_enabled': 'bool',
        'interest_recalculation_frequency_type_options': 'list[EnumOptionData]',
        'interest_recalculation_nth_day_type_options': 'list[EnumOptionData]',
        'interest_type': 'EnumOptionData',
        'interest_type_options': 'list[EnumOptionData]',
        'is_allow_partial_period_interest_calculation': 'bool',
        'is_equal_amortization': 'bool',
        'is_floating_interest_rate_calculation_allowed': 'bool',
        'is_interest_recalculation_enabled': 'bool',
        'is_linked_to_floating_interest_rates': 'bool',
        'is_rates_enabled': 'bool',
        'linked_to_floating_interest_rates': 'bool',
        'loan_product_configurable_attributes': 'LoanProductConfigurableAttributes',
        'loan_schedule_processing_type': 'EnumOptionData',
        'loan_schedule_processing_type_options': 'list[EnumOptionData]',
        'loan_schedule_type': 'EnumOptionData',
        'loan_schedule_type_options': 'list[EnumOptionData]',
        'max_differential_lending_rate': 'float',
        'max_interest_rate_per_period': 'float',
        'max_number_of_repayments': 'int',
        'max_principal': 'float',
        'max_tranche_count': 'int',
        'maximum_gap': 'int',
        'min_differential_lending_rate': 'float',
        'min_interest_rate_per_period': 'float',
        'min_number_of_repayments': 'int',
        'min_principal': 'float',
        'minimum_days_between_disbursal_and_first_repayment': 'int',
        'minimum_gap': 'int',
        'multi_disburse_loan': 'bool',
        'name': 'str',
        'number_of_repayment_variations_for_borrower_cycle': 'list[LoanProductBorrowerCycleVariationData]',
        'number_of_repayments': 'int',
        'outstanding_loan_balance': 'float',
        'over_applied_calculation_type': 'str',
        'over_applied_number': 'int',
        'over_due_days_for_repayment_event': 'int',
        'overdue_days_for_npa': 'int',
        'payment_allocation': 'list[AdvancedPaymentData]',
        'payment_channel_to_fund_source_mappings': 'list[PaymentTypeToGLAccountMapper]',
        'payment_type_options': 'list[PaymentTypeData]',
        'penalty_options': 'list[ChargeData]',
        'penalty_to_income_account_mappings': 'list[ChargeToGLAccountMapper]',
        'pre_closure_interest_calculation_strategy_options': 'list[EnumOptionData]',
        'principal': 'float',
        'principal_threshold_for_last_installment': 'float',
        'principal_variations_for_borrower_cycle': 'list[LoanProductBorrowerCycleVariationData]',
        'product_guarantee_data': 'LoanProductGuaranteeData',
        'rate_options': 'list[RateData]',
        'rates': 'list[RateData]',
        'rates_enabled': 'bool',
        'recurring_moratorium_on_principal_periods': 'int',
        'repayment_every': 'int',
        'repayment_frequency_type': 'EnumOptionData',
        'repayment_frequency_type_options': 'list[EnumOptionData]',
        'repayment_start_date_type': 'EnumOptionData',
        'repayment_start_date_type_options': 'list[EnumOptionData]',
        'reschedule_strategy_type_options': 'list[EnumOptionData]',
        'short_name': 'str',
        'start_date': 'date',
        'status': 'str',
        'supported_interest_refund_types': 'list[StringEnumOptionData]',
        'supported_interest_refund_types_options': 'list[StringEnumOptionData]',
        'sync_expected_with_disbursement_date': 'bool',
        'transaction_processing_strategy_code': 'str',
        'transaction_processing_strategy_name': 'str',
        'transaction_processing_strategy_options': 'list[TransactionProcessingStrategyData]',
        'use_borrower_cycle': 'bool',
        'value_condition_type_options': 'list[EnumOptionData]'
    }

    attribute_map = {
        'account_moves_out_of_npa_only_on_arrears_completion': 'accountMovesOutOfNPAOnlyOnArrearsCompletion',
        'accounting_mapping_options': 'accountingMappingOptions',
        'accounting_mappings': 'accountingMappings',
        'accounting_rule': 'accountingRule',
        'accounting_rule_options': 'accountingRuleOptions',
        'advanced_payment_allocation_future_installment_allocation_rules': 'advancedPaymentAllocationFutureInstallmentAllocationRules',
        'advanced_payment_allocation_transaction_types': 'advancedPaymentAllocationTransactionTypes',
        'advanced_payment_allocation_types': 'advancedPaymentAllocationTypes',
        'allow_approved_disbursed_amounts_over_applied': 'allowApprovedDisbursedAmountsOverApplied',
        'allow_attribute_overrides': 'allowAttributeOverrides',
        'allow_partial_period_interest_calculation': 'allowPartialPeriodInterestCalculation',
        'allow_variable_installments': 'allowVariableInstallments',
        'amortization_type': 'amortizationType',
        'amortization_type_options': 'amortizationTypeOptions',
        'annual_interest_rate': 'annualInterestRate',
        'can_define_installment_amount': 'canDefineInstallmentAmount',
        'can_use_for_topup': 'canUseForTopup',
        'charge_options': 'chargeOptions',
        'charges': 'charges',
        'close_date': 'closeDate',
        'compounding_to_be_posted_as_transaction': 'compoundingToBePostedAsTransaction',
        'credit_allocation': 'creditAllocation',
        'credit_allocation_allocation_types': 'creditAllocationAllocationTypes',
        'credit_allocation_transaction_types': 'creditAllocationTransactionTypes',
        'currency': 'currency',
        'currency_options': 'currencyOptions',
        'days_in_month_type': 'daysInMonthType',
        'days_in_month_type_options': 'daysInMonthTypeOptions',
        'days_in_year_type': 'daysInYearType',
        'days_in_year_type_options': 'daysInYearTypeOptions',
        'default_differential_lending_rate': 'defaultDifferentialLendingRate',
        'delinquency_bucket': 'delinquencyBucket',
        'delinquency_bucket_options': 'delinquencyBucketOptions',
        'description': 'description',
        'disallow_expected_disbursements': 'disallowExpectedDisbursements',
        'disbursed_amount_percentage_for_down_payment': 'disbursedAmountPercentageForDownPayment',
        'due_days_for_repayment_event': 'dueDaysForRepaymentEvent',
        'enable_accrual_activity_posting': 'enableAccrualActivityPosting',
        'enable_auto_repayment_for_down_payment': 'enableAutoRepaymentForDownPayment',
        'enable_down_payment': 'enableDownPayment',
        'enable_installment_level_delinquency': 'enableInstallmentLevelDelinquency',
        'equal_amortization': 'equalAmortization',
        'external_id': 'externalId',
        'fee_to_income_account_mappings': 'feeToIncomeAccountMappings',
        'fixed_length': 'fixedLength',
        'fixed_principal_percentage_per_installment': 'fixedPrincipalPercentagePerInstallment',
        'floating_interest_rate_calculation_allowed': 'floatingInterestRateCalculationAllowed',
        'floating_rate_id': 'floatingRateId',
        'floating_rate_name': 'floatingRateName',
        'floating_rate_options': 'floatingRateOptions',
        'fund_id': 'fundId',
        'fund_name': 'fundName',
        'fund_options': 'fundOptions',
        'grace_on_arrears_ageing': 'graceOnArrearsAgeing',
        'grace_on_interest_charged': 'graceOnInterestCharged',
        'grace_on_interest_payment': 'graceOnInterestPayment',
        'grace_on_principal_payment': 'graceOnPrincipalPayment',
        'hold_guarantee_funds': 'holdGuaranteeFunds',
        'id': 'id',
        'in_arrears_tolerance': 'inArrearsTolerance',
        'include_in_borrower_cycle': 'includeInBorrowerCycle',
        'installment_amount_in_multiples_of': 'installmentAmountInMultiplesOf',
        'interest_calculation_period_type': 'interestCalculationPeriodType',
        'interest_calculation_period_type_options': 'interestCalculationPeriodTypeOptions',
        'interest_rate_differential': 'interestRateDifferential',
        'interest_rate_frequency_type': 'interestRateFrequencyType',
        'interest_rate_frequency_type_options': 'interestRateFrequencyTypeOptions',
        'interest_rate_per_period': 'interestRatePerPeriod',
        'interest_rate_variations_for_borrower_cycle': 'interestRateVariationsForBorrowerCycle',
        'interest_recalculation_compounding_type_options': 'interestRecalculationCompoundingTypeOptions',
        'interest_recalculation_data': 'interestRecalculationData',
        'interest_recalculation_day_of_week_type_options': 'interestRecalculationDayOfWeekTypeOptions',
        'interest_recalculation_enabled': 'interestRecalculationEnabled',
        'interest_recalculation_frequency_type_options': 'interestRecalculationFrequencyTypeOptions',
        'interest_recalculation_nth_day_type_options': 'interestRecalculationNthDayTypeOptions',
        'interest_type': 'interestType',
        'interest_type_options': 'interestTypeOptions',
        'is_allow_partial_period_interest_calculation': 'isAllowPartialPeriodInterestCalculation',
        'is_equal_amortization': 'isEqualAmortization',
        'is_floating_interest_rate_calculation_allowed': 'isFloatingInterestRateCalculationAllowed',
        'is_interest_recalculation_enabled': 'isInterestRecalculationEnabled',
        'is_linked_to_floating_interest_rates': 'isLinkedToFloatingInterestRates',
        'is_rates_enabled': 'isRatesEnabled',
        'linked_to_floating_interest_rates': 'linkedToFloatingInterestRates',
        'loan_product_configurable_attributes': 'loanProductConfigurableAttributes',
        'loan_schedule_processing_type': 'loanScheduleProcessingType',
        'loan_schedule_processing_type_options': 'loanScheduleProcessingTypeOptions',
        'loan_schedule_type': 'loanScheduleType',
        'loan_schedule_type_options': 'loanScheduleTypeOptions',
        'max_differential_lending_rate': 'maxDifferentialLendingRate',
        'max_interest_rate_per_period': 'maxInterestRatePerPeriod',
        'max_number_of_repayments': 'maxNumberOfRepayments',
        'max_principal': 'maxPrincipal',
        'max_tranche_count': 'maxTrancheCount',
        'maximum_gap': 'maximumGap',
        'min_differential_lending_rate': 'minDifferentialLendingRate',
        'min_interest_rate_per_period': 'minInterestRatePerPeriod',
        'min_number_of_repayments': 'minNumberOfRepayments',
        'min_principal': 'minPrincipal',
        'minimum_days_between_disbursal_and_first_repayment': 'minimumDaysBetweenDisbursalAndFirstRepayment',
        'minimum_gap': 'minimumGap',
        'multi_disburse_loan': 'multiDisburseLoan',
        'name': 'name',
        'number_of_repayment_variations_for_borrower_cycle': 'numberOfRepaymentVariationsForBorrowerCycle',
        'number_of_repayments': 'numberOfRepayments',
        'outstanding_loan_balance': 'outstandingLoanBalance',
        'over_applied_calculation_type': 'overAppliedCalculationType',
        'over_applied_number': 'overAppliedNumber',
        'over_due_days_for_repayment_event': 'overDueDaysForRepaymentEvent',
        'overdue_days_for_npa': 'overdueDaysForNPA',
        'payment_allocation': 'paymentAllocation',
        'payment_channel_to_fund_source_mappings': 'paymentChannelToFundSourceMappings',
        'payment_type_options': 'paymentTypeOptions',
        'penalty_options': 'penaltyOptions',
        'penalty_to_income_account_mappings': 'penaltyToIncomeAccountMappings',
        'pre_closure_interest_calculation_strategy_options': 'preClosureInterestCalculationStrategyOptions',
        'principal': 'principal',
        'principal_threshold_for_last_installment': 'principalThresholdForLastInstallment',
        'principal_variations_for_borrower_cycle': 'principalVariationsForBorrowerCycle',
        'product_guarantee_data': 'productGuaranteeData',
        'rate_options': 'rateOptions',
        'rates': 'rates',
        'rates_enabled': 'ratesEnabled',
        'recurring_moratorium_on_principal_periods': 'recurringMoratoriumOnPrincipalPeriods',
        'repayment_every': 'repaymentEvery',
        'repayment_frequency_type': 'repaymentFrequencyType',
        'repayment_frequency_type_options': 'repaymentFrequencyTypeOptions',
        'repayment_start_date_type': 'repaymentStartDateType',
        'repayment_start_date_type_options': 'repaymentStartDateTypeOptions',
        'reschedule_strategy_type_options': 'rescheduleStrategyTypeOptions',
        'short_name': 'shortName',
        'start_date': 'startDate',
        'status': 'status',
        'supported_interest_refund_types': 'supportedInterestRefundTypes',
        'supported_interest_refund_types_options': 'supportedInterestRefundTypesOptions',
        'sync_expected_with_disbursement_date': 'syncExpectedWithDisbursementDate',
        'transaction_processing_strategy_code': 'transactionProcessingStrategyCode',
        'transaction_processing_strategy_name': 'transactionProcessingStrategyName',
        'transaction_processing_strategy_options': 'transactionProcessingStrategyOptions',
        'use_borrower_cycle': 'useBorrowerCycle',
        'value_condition_type_options': 'valueConditionTypeOptions'
    }

    def __init__(self, account_moves_out_of_npa_only_on_arrears_completion=None, accounting_mapping_options=None, accounting_mappings=None, accounting_rule=None, accounting_rule_options=None, advanced_payment_allocation_future_installment_allocation_rules=None, advanced_payment_allocation_transaction_types=None, advanced_payment_allocation_types=None, allow_approved_disbursed_amounts_over_applied=None, allow_attribute_overrides=None, allow_partial_period_interest_calculation=None, allow_variable_installments=None, amortization_type=None, amortization_type_options=None, annual_interest_rate=None, can_define_installment_amount=None, can_use_for_topup=None, charge_options=None, charges=None, close_date=None, compounding_to_be_posted_as_transaction=None, credit_allocation=None, credit_allocation_allocation_types=None, credit_allocation_transaction_types=None, currency=None, currency_options=None, days_in_month_type=None, days_in_month_type_options=None, days_in_year_type=None, days_in_year_type_options=None, default_differential_lending_rate=None, delinquency_bucket=None, delinquency_bucket_options=None, description=None, disallow_expected_disbursements=None, disbursed_amount_percentage_for_down_payment=None, due_days_for_repayment_event=None, enable_accrual_activity_posting=None, enable_auto_repayment_for_down_payment=None, enable_down_payment=None, enable_installment_level_delinquency=None, equal_amortization=None, external_id=None, fee_to_income_account_mappings=None, fixed_length=None, fixed_principal_percentage_per_installment=None, floating_interest_rate_calculation_allowed=None, floating_rate_id=None, floating_rate_name=None, floating_rate_options=None, fund_id=None, fund_name=None, fund_options=None, grace_on_arrears_ageing=None, grace_on_interest_charged=None, grace_on_interest_payment=None, grace_on_principal_payment=None, hold_guarantee_funds=None, id=None, in_arrears_tolerance=None, include_in_borrower_cycle=None, installment_amount_in_multiples_of=None, interest_calculation_period_type=None, interest_calculation_period_type_options=None, interest_rate_differential=None, interest_rate_frequency_type=None, interest_rate_frequency_type_options=None, interest_rate_per_period=None, interest_rate_variations_for_borrower_cycle=None, interest_recalculation_compounding_type_options=None, interest_recalculation_data=None, interest_recalculation_day_of_week_type_options=None, interest_recalculation_enabled=None, interest_recalculation_frequency_type_options=None, interest_recalculation_nth_day_type_options=None, interest_type=None, interest_type_options=None, is_allow_partial_period_interest_calculation=None, is_equal_amortization=None, is_floating_interest_rate_calculation_allowed=None, is_interest_recalculation_enabled=None, is_linked_to_floating_interest_rates=None, is_rates_enabled=None, linked_to_floating_interest_rates=None, loan_product_configurable_attributes=None, loan_schedule_processing_type=None, loan_schedule_processing_type_options=None, loan_schedule_type=None, loan_schedule_type_options=None, max_differential_lending_rate=None, max_interest_rate_per_period=None, max_number_of_repayments=None, max_principal=None, max_tranche_count=None, maximum_gap=None, min_differential_lending_rate=None, min_interest_rate_per_period=None, min_number_of_repayments=None, min_principal=None, minimum_days_between_disbursal_and_first_repayment=None, minimum_gap=None, multi_disburse_loan=None, name=None, number_of_repayment_variations_for_borrower_cycle=None, number_of_repayments=None, outstanding_loan_balance=None, over_applied_calculation_type=None, over_applied_number=None, over_due_days_for_repayment_event=None, overdue_days_for_npa=None, payment_allocation=None, payment_channel_to_fund_source_mappings=None, payment_type_options=None, penalty_options=None, penalty_to_income_account_mappings=None, pre_closure_interest_calculation_strategy_options=None, principal=None, principal_threshold_for_last_installment=None, principal_variations_for_borrower_cycle=None, product_guarantee_data=None, rate_options=None, rates=None, rates_enabled=None, recurring_moratorium_on_principal_periods=None, repayment_every=None, repayment_frequency_type=None, repayment_frequency_type_options=None, repayment_start_date_type=None, repayment_start_date_type_options=None, reschedule_strategy_type_options=None, short_name=None, start_date=None, status=None, supported_interest_refund_types=None, supported_interest_refund_types_options=None, sync_expected_with_disbursement_date=None, transaction_processing_strategy_code=None, transaction_processing_strategy_name=None, transaction_processing_strategy_options=None, use_borrower_cycle=None, value_condition_type_options=None):  # noqa: E501
        """LoanProductData - a model defined in Swagger"""  # noqa: E501
        self._account_moves_out_of_npa_only_on_arrears_completion = None
        self._accounting_mapping_options = None
        self._accounting_mappings = None
        self._accounting_rule = None
        self._accounting_rule_options = None
        self._advanced_payment_allocation_future_installment_allocation_rules = None
        self._advanced_payment_allocation_transaction_types = None
        self._advanced_payment_allocation_types = None
        self._allow_approved_disbursed_amounts_over_applied = None
        self._allow_attribute_overrides = None
        self._allow_partial_period_interest_calculation = None
        self._allow_variable_installments = None
        self._amortization_type = None
        self._amortization_type_options = None
        self._annual_interest_rate = None
        self._can_define_installment_amount = None
        self._can_use_for_topup = None
        self._charge_options = None
        self._charges = None
        self._close_date = None
        self._compounding_to_be_posted_as_transaction = None
        self._credit_allocation = None
        self._credit_allocation_allocation_types = None
        self._credit_allocation_transaction_types = None
        self._currency = None
        self._currency_options = None
        self._days_in_month_type = None
        self._days_in_month_type_options = None
        self._days_in_year_type = None
        self._days_in_year_type_options = None
        self._default_differential_lending_rate = None
        self._delinquency_bucket = None
        self._delinquency_bucket_options = None
        self._description = None
        self._disallow_expected_disbursements = None
        self._disbursed_amount_percentage_for_down_payment = None
        self._due_days_for_repayment_event = None
        self._enable_accrual_activity_posting = None
        self._enable_auto_repayment_for_down_payment = None
        self._enable_down_payment = None
        self._enable_installment_level_delinquency = None
        self._equal_amortization = None
        self._external_id = None
        self._fee_to_income_account_mappings = None
        self._fixed_length = None
        self._fixed_principal_percentage_per_installment = None
        self._floating_interest_rate_calculation_allowed = None
        self._floating_rate_id = None
        self._floating_rate_name = None
        self._floating_rate_options = None
        self._fund_id = None
        self._fund_name = None
        self._fund_options = None
        self._grace_on_arrears_ageing = None
        self._grace_on_interest_charged = None
        self._grace_on_interest_payment = None
        self._grace_on_principal_payment = None
        self._hold_guarantee_funds = None
        self._id = None
        self._in_arrears_tolerance = None
        self._include_in_borrower_cycle = None
        self._installment_amount_in_multiples_of = None
        self._interest_calculation_period_type = None
        self._interest_calculation_period_type_options = None
        self._interest_rate_differential = None
        self._interest_rate_frequency_type = None
        self._interest_rate_frequency_type_options = None
        self._interest_rate_per_period = None
        self._interest_rate_variations_for_borrower_cycle = None
        self._interest_recalculation_compounding_type_options = None
        self._interest_recalculation_data = None
        self._interest_recalculation_day_of_week_type_options = None
        self._interest_recalculation_enabled = None
        self._interest_recalculation_frequency_type_options = None
        self._interest_recalculation_nth_day_type_options = None
        self._interest_type = None
        self._interest_type_options = None
        self._is_allow_partial_period_interest_calculation = None
        self._is_equal_amortization = None
        self._is_floating_interest_rate_calculation_allowed = None
        self._is_interest_recalculation_enabled = None
        self._is_linked_to_floating_interest_rates = None
        self._is_rates_enabled = None
        self._linked_to_floating_interest_rates = None
        self._loan_product_configurable_attributes = None
        self._loan_schedule_processing_type = None
        self._loan_schedule_processing_type_options = None
        self._loan_schedule_type = None
        self._loan_schedule_type_options = None
        self._max_differential_lending_rate = None
        self._max_interest_rate_per_period = None
        self._max_number_of_repayments = None
        self._max_principal = None
        self._max_tranche_count = None
        self._maximum_gap = None
        self._min_differential_lending_rate = None
        self._min_interest_rate_per_period = None
        self._min_number_of_repayments = None
        self._min_principal = None
        self._minimum_days_between_disbursal_and_first_repayment = None
        self._minimum_gap = None
        self._multi_disburse_loan = None
        self._name = None
        self._number_of_repayment_variations_for_borrower_cycle = None
        self._number_of_repayments = None
        self._outstanding_loan_balance = None
        self._over_applied_calculation_type = None
        self._over_applied_number = None
        self._over_due_days_for_repayment_event = None
        self._overdue_days_for_npa = None
        self._payment_allocation = None
        self._payment_channel_to_fund_source_mappings = None
        self._payment_type_options = None
        self._penalty_options = None
        self._penalty_to_income_account_mappings = None
        self._pre_closure_interest_calculation_strategy_options = None
        self._principal = None
        self._principal_threshold_for_last_installment = None
        self._principal_variations_for_borrower_cycle = None
        self._product_guarantee_data = None
        self._rate_options = None
        self._rates = None
        self._rates_enabled = None
        self._recurring_moratorium_on_principal_periods = None
        self._repayment_every = None
        self._repayment_frequency_type = None
        self._repayment_frequency_type_options = None
        self._repayment_start_date_type = None
        self._repayment_start_date_type_options = None
        self._reschedule_strategy_type_options = None
        self._short_name = None
        self._start_date = None
        self._status = None
        self._supported_interest_refund_types = None
        self._supported_interest_refund_types_options = None
        self._sync_expected_with_disbursement_date = None
        self._transaction_processing_strategy_code = None
        self._transaction_processing_strategy_name = None
        self._transaction_processing_strategy_options = None
        self._use_borrower_cycle = None
        self._value_condition_type_options = None
        self.discriminator = None
        if account_moves_out_of_npa_only_on_arrears_completion is not None:
            self.account_moves_out_of_npa_only_on_arrears_completion = account_moves_out_of_npa_only_on_arrears_completion
        if accounting_mapping_options is not None:
            self.accounting_mapping_options = accounting_mapping_options
        if accounting_mappings is not None:
            self.accounting_mappings = accounting_mappings
        if accounting_rule is not None:
            self.accounting_rule = accounting_rule
        if accounting_rule_options is not None:
            self.accounting_rule_options = accounting_rule_options
        if advanced_payment_allocation_future_installment_allocation_rules is not None:
            self.advanced_payment_allocation_future_installment_allocation_rules = advanced_payment_allocation_future_installment_allocation_rules
        if advanced_payment_allocation_transaction_types is not None:
            self.advanced_payment_allocation_transaction_types = advanced_payment_allocation_transaction_types
        if advanced_payment_allocation_types is not None:
            self.advanced_payment_allocation_types = advanced_payment_allocation_types
        if allow_approved_disbursed_amounts_over_applied is not None:
            self.allow_approved_disbursed_amounts_over_applied = allow_approved_disbursed_amounts_over_applied
        if allow_attribute_overrides is not None:
            self.allow_attribute_overrides = allow_attribute_overrides
        if allow_partial_period_interest_calculation is not None:
            self.allow_partial_period_interest_calculation = allow_partial_period_interest_calculation
        if allow_variable_installments is not None:
            self.allow_variable_installments = allow_variable_installments
        if amortization_type is not None:
            self.amortization_type = amortization_type
        if amortization_type_options is not None:
            self.amortization_type_options = amortization_type_options
        if annual_interest_rate is not None:
            self.annual_interest_rate = annual_interest_rate
        if can_define_installment_amount is not None:
            self.can_define_installment_amount = can_define_installment_amount
        if can_use_for_topup is not None:
            self.can_use_for_topup = can_use_for_topup
        if charge_options is not None:
            self.charge_options = charge_options
        if charges is not None:
            self.charges = charges
        if close_date is not None:
            self.close_date = close_date
        if compounding_to_be_posted_as_transaction is not None:
            self.compounding_to_be_posted_as_transaction = compounding_to_be_posted_as_transaction
        if credit_allocation is not None:
            self.credit_allocation = credit_allocation
        if credit_allocation_allocation_types is not None:
            self.credit_allocation_allocation_types = credit_allocation_allocation_types
        if credit_allocation_transaction_types is not None:
            self.credit_allocation_transaction_types = credit_allocation_transaction_types
        if currency is not None:
            self.currency = currency
        if currency_options is not None:
            self.currency_options = currency_options
        if days_in_month_type is not None:
            self.days_in_month_type = days_in_month_type
        if days_in_month_type_options is not None:
            self.days_in_month_type_options = days_in_month_type_options
        if days_in_year_type is not None:
            self.days_in_year_type = days_in_year_type
        if days_in_year_type_options is not None:
            self.days_in_year_type_options = days_in_year_type_options
        if default_differential_lending_rate is not None:
            self.default_differential_lending_rate = default_differential_lending_rate
        if delinquency_bucket is not None:
            self.delinquency_bucket = delinquency_bucket
        if delinquency_bucket_options is not None:
            self.delinquency_bucket_options = delinquency_bucket_options
        if description is not None:
            self.description = description
        if disallow_expected_disbursements is not None:
            self.disallow_expected_disbursements = disallow_expected_disbursements
        if disbursed_amount_percentage_for_down_payment is not None:
            self.disbursed_amount_percentage_for_down_payment = disbursed_amount_percentage_for_down_payment
        if due_days_for_repayment_event is not None:
            self.due_days_for_repayment_event = due_days_for_repayment_event
        if enable_accrual_activity_posting is not None:
            self.enable_accrual_activity_posting = enable_accrual_activity_posting
        if enable_auto_repayment_for_down_payment is not None:
            self.enable_auto_repayment_for_down_payment = enable_auto_repayment_for_down_payment
        if enable_down_payment is not None:
            self.enable_down_payment = enable_down_payment
        if enable_installment_level_delinquency is not None:
            self.enable_installment_level_delinquency = enable_installment_level_delinquency
        if equal_amortization is not None:
            self.equal_amortization = equal_amortization
        if external_id is not None:
            self.external_id = external_id
        if fee_to_income_account_mappings is not None:
            self.fee_to_income_account_mappings = fee_to_income_account_mappings
        if fixed_length is not None:
            self.fixed_length = fixed_length
        if fixed_principal_percentage_per_installment is not None:
            self.fixed_principal_percentage_per_installment = fixed_principal_percentage_per_installment
        if floating_interest_rate_calculation_allowed is not None:
            self.floating_interest_rate_calculation_allowed = floating_interest_rate_calculation_allowed
        if floating_rate_id is not None:
            self.floating_rate_id = floating_rate_id
        if floating_rate_name is not None:
            self.floating_rate_name = floating_rate_name
        if floating_rate_options is not None:
            self.floating_rate_options = floating_rate_options
        if fund_id is not None:
            self.fund_id = fund_id
        if fund_name is not None:
            self.fund_name = fund_name
        if fund_options is not None:
            self.fund_options = fund_options
        if grace_on_arrears_ageing is not None:
            self.grace_on_arrears_ageing = grace_on_arrears_ageing
        if grace_on_interest_charged is not None:
            self.grace_on_interest_charged = grace_on_interest_charged
        if grace_on_interest_payment is not None:
            self.grace_on_interest_payment = grace_on_interest_payment
        if grace_on_principal_payment is not None:
            self.grace_on_principal_payment = grace_on_principal_payment
        if hold_guarantee_funds is not None:
            self.hold_guarantee_funds = hold_guarantee_funds
        if id is not None:
            self.id = id
        if in_arrears_tolerance is not None:
            self.in_arrears_tolerance = in_arrears_tolerance
        if include_in_borrower_cycle is not None:
            self.include_in_borrower_cycle = include_in_borrower_cycle
        if installment_amount_in_multiples_of is not None:
            self.installment_amount_in_multiples_of = installment_amount_in_multiples_of
        if interest_calculation_period_type is not None:
            self.interest_calculation_period_type = interest_calculation_period_type
        if interest_calculation_period_type_options is not None:
            self.interest_calculation_period_type_options = interest_calculation_period_type_options
        if interest_rate_differential is not None:
            self.interest_rate_differential = interest_rate_differential
        if interest_rate_frequency_type is not None:
            self.interest_rate_frequency_type = interest_rate_frequency_type
        if interest_rate_frequency_type_options is not None:
            self.interest_rate_frequency_type_options = interest_rate_frequency_type_options
        if interest_rate_per_period is not None:
            self.interest_rate_per_period = interest_rate_per_period
        if interest_rate_variations_for_borrower_cycle is not None:
            self.interest_rate_variations_for_borrower_cycle = interest_rate_variations_for_borrower_cycle
        if interest_recalculation_compounding_type_options is not None:
            self.interest_recalculation_compounding_type_options = interest_recalculation_compounding_type_options
        if interest_recalculation_data is not None:
            self.interest_recalculation_data = interest_recalculation_data
        if interest_recalculation_day_of_week_type_options is not None:
            self.interest_recalculation_day_of_week_type_options = interest_recalculation_day_of_week_type_options
        if interest_recalculation_enabled is not None:
            self.interest_recalculation_enabled = interest_recalculation_enabled
        if interest_recalculation_frequency_type_options is not None:
            self.interest_recalculation_frequency_type_options = interest_recalculation_frequency_type_options
        if interest_recalculation_nth_day_type_options is not None:
            self.interest_recalculation_nth_day_type_options = interest_recalculation_nth_day_type_options
        if interest_type is not None:
            self.interest_type = interest_type
        if interest_type_options is not None:
            self.interest_type_options = interest_type_options
        if is_allow_partial_period_interest_calculation is not None:
            self.is_allow_partial_period_interest_calculation = is_allow_partial_period_interest_calculation
        if is_equal_amortization is not None:
            self.is_equal_amortization = is_equal_amortization
        if is_floating_interest_rate_calculation_allowed is not None:
            self.is_floating_interest_rate_calculation_allowed = is_floating_interest_rate_calculation_allowed
        if is_interest_recalculation_enabled is not None:
            self.is_interest_recalculation_enabled = is_interest_recalculation_enabled
        if is_linked_to_floating_interest_rates is not None:
            self.is_linked_to_floating_interest_rates = is_linked_to_floating_interest_rates
        if is_rates_enabled is not None:
            self.is_rates_enabled = is_rates_enabled
        if linked_to_floating_interest_rates is not None:
            self.linked_to_floating_interest_rates = linked_to_floating_interest_rates
        if loan_product_configurable_attributes is not None:
            self.loan_product_configurable_attributes = loan_product_configurable_attributes
        if loan_schedule_processing_type is not None:
            self.loan_schedule_processing_type = loan_schedule_processing_type
        if loan_schedule_processing_type_options is not None:
            self.loan_schedule_processing_type_options = loan_schedule_processing_type_options
        if loan_schedule_type is not None:
            self.loan_schedule_type = loan_schedule_type
        if loan_schedule_type_options is not None:
            self.loan_schedule_type_options = loan_schedule_type_options
        if max_differential_lending_rate is not None:
            self.max_differential_lending_rate = max_differential_lending_rate
        if max_interest_rate_per_period is not None:
            self.max_interest_rate_per_period = max_interest_rate_per_period
        if max_number_of_repayments is not None:
            self.max_number_of_repayments = max_number_of_repayments
        if max_principal is not None:
            self.max_principal = max_principal
        if max_tranche_count is not None:
            self.max_tranche_count = max_tranche_count
        if maximum_gap is not None:
            self.maximum_gap = maximum_gap
        if min_differential_lending_rate is not None:
            self.min_differential_lending_rate = min_differential_lending_rate
        if min_interest_rate_per_period is not None:
            self.min_interest_rate_per_period = min_interest_rate_per_period
        if min_number_of_repayments is not None:
            self.min_number_of_repayments = min_number_of_repayments
        if min_principal is not None:
            self.min_principal = min_principal
        if minimum_days_between_disbursal_and_first_repayment is not None:
            self.minimum_days_between_disbursal_and_first_repayment = minimum_days_between_disbursal_and_first_repayment
        if minimum_gap is not None:
            self.minimum_gap = minimum_gap
        if multi_disburse_loan is not None:
            self.multi_disburse_loan = multi_disburse_loan
        if name is not None:
            self.name = name
        if number_of_repayment_variations_for_borrower_cycle is not None:
            self.number_of_repayment_variations_for_borrower_cycle = number_of_repayment_variations_for_borrower_cycle
        if number_of_repayments is not None:
            self.number_of_repayments = number_of_repayments
        if outstanding_loan_balance is not None:
            self.outstanding_loan_balance = outstanding_loan_balance
        if over_applied_calculation_type is not None:
            self.over_applied_calculation_type = over_applied_calculation_type
        if over_applied_number is not None:
            self.over_applied_number = over_applied_number
        if over_due_days_for_repayment_event is not None:
            self.over_due_days_for_repayment_event = over_due_days_for_repayment_event
        if overdue_days_for_npa is not None:
            self.overdue_days_for_npa = overdue_days_for_npa
        if payment_allocation is not None:
            self.payment_allocation = payment_allocation
        if payment_channel_to_fund_source_mappings is not None:
            self.payment_channel_to_fund_source_mappings = payment_channel_to_fund_source_mappings
        if payment_type_options is not None:
            self.payment_type_options = payment_type_options
        if penalty_options is not None:
            self.penalty_options = penalty_options
        if penalty_to_income_account_mappings is not None:
            self.penalty_to_income_account_mappings = penalty_to_income_account_mappings
        if pre_closure_interest_calculation_strategy_options is not None:
            self.pre_closure_interest_calculation_strategy_options = pre_closure_interest_calculation_strategy_options
        if principal is not None:
            self.principal = principal
        if principal_threshold_for_last_installment is not None:
            self.principal_threshold_for_last_installment = principal_threshold_for_last_installment
        if principal_variations_for_borrower_cycle is not None:
            self.principal_variations_for_borrower_cycle = principal_variations_for_borrower_cycle
        if product_guarantee_data is not None:
            self.product_guarantee_data = product_guarantee_data
        if rate_options is not None:
            self.rate_options = rate_options
        if rates is not None:
            self.rates = rates
        if rates_enabled is not None:
            self.rates_enabled = rates_enabled
        if recurring_moratorium_on_principal_periods is not None:
            self.recurring_moratorium_on_principal_periods = recurring_moratorium_on_principal_periods
        if repayment_every is not None:
            self.repayment_every = repayment_every
        if repayment_frequency_type is not None:
            self.repayment_frequency_type = repayment_frequency_type
        if repayment_frequency_type_options is not None:
            self.repayment_frequency_type_options = repayment_frequency_type_options
        if repayment_start_date_type is not None:
            self.repayment_start_date_type = repayment_start_date_type
        if repayment_start_date_type_options is not None:
            self.repayment_start_date_type_options = repayment_start_date_type_options
        if reschedule_strategy_type_options is not None:
            self.reschedule_strategy_type_options = reschedule_strategy_type_options
        if short_name is not None:
            self.short_name = short_name
        if start_date is not None:
            self.start_date = start_date
        if status is not None:
            self.status = status
        if supported_interest_refund_types is not None:
            self.supported_interest_refund_types = supported_interest_refund_types
        if supported_interest_refund_types_options is not None:
            self.supported_interest_refund_types_options = supported_interest_refund_types_options
        if sync_expected_with_disbursement_date is not None:
            self.sync_expected_with_disbursement_date = sync_expected_with_disbursement_date
        if transaction_processing_strategy_code is not None:
            self.transaction_processing_strategy_code = transaction_processing_strategy_code
        if transaction_processing_strategy_name is not None:
            self.transaction_processing_strategy_name = transaction_processing_strategy_name
        if transaction_processing_strategy_options is not None:
            self.transaction_processing_strategy_options = transaction_processing_strategy_options
        if use_borrower_cycle is not None:
            self.use_borrower_cycle = use_borrower_cycle
        if value_condition_type_options is not None:
            self.value_condition_type_options = value_condition_type_options

    @property
    def account_moves_out_of_npa_only_on_arrears_completion(self):
        """Gets the account_moves_out_of_npa_only_on_arrears_completion of this LoanProductData.  # noqa: E501


        :return: The account_moves_out_of_npa_only_on_arrears_completion of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._account_moves_out_of_npa_only_on_arrears_completion

    @account_moves_out_of_npa_only_on_arrears_completion.setter
    def account_moves_out_of_npa_only_on_arrears_completion(self, account_moves_out_of_npa_only_on_arrears_completion):
        """Sets the account_moves_out_of_npa_only_on_arrears_completion of this LoanProductData.


        :param account_moves_out_of_npa_only_on_arrears_completion: The account_moves_out_of_npa_only_on_arrears_completion of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._account_moves_out_of_npa_only_on_arrears_completion = account_moves_out_of_npa_only_on_arrears_completion

    @property
    def accounting_mapping_options(self):
        """Gets the accounting_mapping_options of this LoanProductData.  # noqa: E501


        :return: The accounting_mapping_options of this LoanProductData.  # noqa: E501
        :rtype: dict(str, list[GLAccountData])
        """
        return self._accounting_mapping_options

    @accounting_mapping_options.setter
    def accounting_mapping_options(self, accounting_mapping_options):
        """Sets the accounting_mapping_options of this LoanProductData.


        :param accounting_mapping_options: The accounting_mapping_options of this LoanProductData.  # noqa: E501
        :type: dict(str, list[GLAccountData])
        """

        self._accounting_mapping_options = accounting_mapping_options

    @property
    def accounting_mappings(self):
        """Gets the accounting_mappings of this LoanProductData.  # noqa: E501


        :return: The accounting_mappings of this LoanProductData.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._accounting_mappings

    @accounting_mappings.setter
    def accounting_mappings(self, accounting_mappings):
        """Sets the accounting_mappings of this LoanProductData.


        :param accounting_mappings: The accounting_mappings of this LoanProductData.  # noqa: E501
        :type: dict(str, object)
        """

        self._accounting_mappings = accounting_mappings

    @property
    def accounting_rule(self):
        """Gets the accounting_rule of this LoanProductData.  # noqa: E501


        :return: The accounting_rule of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._accounting_rule

    @accounting_rule.setter
    def accounting_rule(self, accounting_rule):
        """Sets the accounting_rule of this LoanProductData.


        :param accounting_rule: The accounting_rule of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._accounting_rule = accounting_rule

    @property
    def accounting_rule_options(self):
        """Gets the accounting_rule_options of this LoanProductData.  # noqa: E501


        :return: The accounting_rule_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._accounting_rule_options

    @accounting_rule_options.setter
    def accounting_rule_options(self, accounting_rule_options):
        """Sets the accounting_rule_options of this LoanProductData.


        :param accounting_rule_options: The accounting_rule_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._accounting_rule_options = accounting_rule_options

    @property
    def advanced_payment_allocation_future_installment_allocation_rules(self):
        """Gets the advanced_payment_allocation_future_installment_allocation_rules of this LoanProductData.  # noqa: E501


        :return: The advanced_payment_allocation_future_installment_allocation_rules of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._advanced_payment_allocation_future_installment_allocation_rules

    @advanced_payment_allocation_future_installment_allocation_rules.setter
    def advanced_payment_allocation_future_installment_allocation_rules(self, advanced_payment_allocation_future_installment_allocation_rules):
        """Sets the advanced_payment_allocation_future_installment_allocation_rules of this LoanProductData.


        :param advanced_payment_allocation_future_installment_allocation_rules: The advanced_payment_allocation_future_installment_allocation_rules of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._advanced_payment_allocation_future_installment_allocation_rules = advanced_payment_allocation_future_installment_allocation_rules

    @property
    def advanced_payment_allocation_transaction_types(self):
        """Gets the advanced_payment_allocation_transaction_types of this LoanProductData.  # noqa: E501


        :return: The advanced_payment_allocation_transaction_types of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._advanced_payment_allocation_transaction_types

    @advanced_payment_allocation_transaction_types.setter
    def advanced_payment_allocation_transaction_types(self, advanced_payment_allocation_transaction_types):
        """Sets the advanced_payment_allocation_transaction_types of this LoanProductData.


        :param advanced_payment_allocation_transaction_types: The advanced_payment_allocation_transaction_types of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._advanced_payment_allocation_transaction_types = advanced_payment_allocation_transaction_types

    @property
    def advanced_payment_allocation_types(self):
        """Gets the advanced_payment_allocation_types of this LoanProductData.  # noqa: E501


        :return: The advanced_payment_allocation_types of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._advanced_payment_allocation_types

    @advanced_payment_allocation_types.setter
    def advanced_payment_allocation_types(self, advanced_payment_allocation_types):
        """Sets the advanced_payment_allocation_types of this LoanProductData.


        :param advanced_payment_allocation_types: The advanced_payment_allocation_types of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._advanced_payment_allocation_types = advanced_payment_allocation_types

    @property
    def allow_approved_disbursed_amounts_over_applied(self):
        """Gets the allow_approved_disbursed_amounts_over_applied of this LoanProductData.  # noqa: E501


        :return: The allow_approved_disbursed_amounts_over_applied of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._allow_approved_disbursed_amounts_over_applied

    @allow_approved_disbursed_amounts_over_applied.setter
    def allow_approved_disbursed_amounts_over_applied(self, allow_approved_disbursed_amounts_over_applied):
        """Sets the allow_approved_disbursed_amounts_over_applied of this LoanProductData.


        :param allow_approved_disbursed_amounts_over_applied: The allow_approved_disbursed_amounts_over_applied of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._allow_approved_disbursed_amounts_over_applied = allow_approved_disbursed_amounts_over_applied

    @property
    def allow_attribute_overrides(self):
        """Gets the allow_attribute_overrides of this LoanProductData.  # noqa: E501


        :return: The allow_attribute_overrides of this LoanProductData.  # noqa: E501
        :rtype: LoanProductConfigurableAttributes
        """
        return self._allow_attribute_overrides

    @allow_attribute_overrides.setter
    def allow_attribute_overrides(self, allow_attribute_overrides):
        """Sets the allow_attribute_overrides of this LoanProductData.


        :param allow_attribute_overrides: The allow_attribute_overrides of this LoanProductData.  # noqa: E501
        :type: LoanProductConfigurableAttributes
        """

        self._allow_attribute_overrides = allow_attribute_overrides

    @property
    def allow_partial_period_interest_calculation(self):
        """Gets the allow_partial_period_interest_calculation of this LoanProductData.  # noqa: E501


        :return: The allow_partial_period_interest_calculation of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._allow_partial_period_interest_calculation

    @allow_partial_period_interest_calculation.setter
    def allow_partial_period_interest_calculation(self, allow_partial_period_interest_calculation):
        """Sets the allow_partial_period_interest_calculation of this LoanProductData.


        :param allow_partial_period_interest_calculation: The allow_partial_period_interest_calculation of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._allow_partial_period_interest_calculation = allow_partial_period_interest_calculation

    @property
    def allow_variable_installments(self):
        """Gets the allow_variable_installments of this LoanProductData.  # noqa: E501


        :return: The allow_variable_installments of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._allow_variable_installments

    @allow_variable_installments.setter
    def allow_variable_installments(self, allow_variable_installments):
        """Sets the allow_variable_installments of this LoanProductData.


        :param allow_variable_installments: The allow_variable_installments of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._allow_variable_installments = allow_variable_installments

    @property
    def amortization_type(self):
        """Gets the amortization_type of this LoanProductData.  # noqa: E501


        :return: The amortization_type of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._amortization_type

    @amortization_type.setter
    def amortization_type(self, amortization_type):
        """Sets the amortization_type of this LoanProductData.


        :param amortization_type: The amortization_type of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._amortization_type = amortization_type

    @property
    def amortization_type_options(self):
        """Gets the amortization_type_options of this LoanProductData.  # noqa: E501


        :return: The amortization_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._amortization_type_options

    @amortization_type_options.setter
    def amortization_type_options(self, amortization_type_options):
        """Sets the amortization_type_options of this LoanProductData.


        :param amortization_type_options: The amortization_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._amortization_type_options = amortization_type_options

    @property
    def annual_interest_rate(self):
        """Gets the annual_interest_rate of this LoanProductData.  # noqa: E501


        :return: The annual_interest_rate of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._annual_interest_rate

    @annual_interest_rate.setter
    def annual_interest_rate(self, annual_interest_rate):
        """Sets the annual_interest_rate of this LoanProductData.


        :param annual_interest_rate: The annual_interest_rate of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._annual_interest_rate = annual_interest_rate

    @property
    def can_define_installment_amount(self):
        """Gets the can_define_installment_amount of this LoanProductData.  # noqa: E501


        :return: The can_define_installment_amount of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._can_define_installment_amount

    @can_define_installment_amount.setter
    def can_define_installment_amount(self, can_define_installment_amount):
        """Sets the can_define_installment_amount of this LoanProductData.


        :param can_define_installment_amount: The can_define_installment_amount of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._can_define_installment_amount = can_define_installment_amount

    @property
    def can_use_for_topup(self):
        """Gets the can_use_for_topup of this LoanProductData.  # noqa: E501


        :return: The can_use_for_topup of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._can_use_for_topup

    @can_use_for_topup.setter
    def can_use_for_topup(self, can_use_for_topup):
        """Sets the can_use_for_topup of this LoanProductData.


        :param can_use_for_topup: The can_use_for_topup of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._can_use_for_topup = can_use_for_topup

    @property
    def charge_options(self):
        """Gets the charge_options of this LoanProductData.  # noqa: E501


        :return: The charge_options of this LoanProductData.  # noqa: E501
        :rtype: list[ChargeData]
        """
        return self._charge_options

    @charge_options.setter
    def charge_options(self, charge_options):
        """Sets the charge_options of this LoanProductData.


        :param charge_options: The charge_options of this LoanProductData.  # noqa: E501
        :type: list[ChargeData]
        """

        self._charge_options = charge_options

    @property
    def charges(self):
        """Gets the charges of this LoanProductData.  # noqa: E501


        :return: The charges of this LoanProductData.  # noqa: E501
        :rtype: list[ChargeData]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this LoanProductData.


        :param charges: The charges of this LoanProductData.  # noqa: E501
        :type: list[ChargeData]
        """

        self._charges = charges

    @property
    def close_date(self):
        """Gets the close_date of this LoanProductData.  # noqa: E501


        :return: The close_date of this LoanProductData.  # noqa: E501
        :rtype: date
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this LoanProductData.


        :param close_date: The close_date of this LoanProductData.  # noqa: E501
        :type: date
        """

        self._close_date = close_date

    @property
    def compounding_to_be_posted_as_transaction(self):
        """Gets the compounding_to_be_posted_as_transaction of this LoanProductData.  # noqa: E501


        :return: The compounding_to_be_posted_as_transaction of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._compounding_to_be_posted_as_transaction

    @compounding_to_be_posted_as_transaction.setter
    def compounding_to_be_posted_as_transaction(self, compounding_to_be_posted_as_transaction):
        """Sets the compounding_to_be_posted_as_transaction of this LoanProductData.


        :param compounding_to_be_posted_as_transaction: The compounding_to_be_posted_as_transaction of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._compounding_to_be_posted_as_transaction = compounding_to_be_posted_as_transaction

    @property
    def credit_allocation(self):
        """Gets the credit_allocation of this LoanProductData.  # noqa: E501


        :return: The credit_allocation of this LoanProductData.  # noqa: E501
        :rtype: list[CreditAllocationData]
        """
        return self._credit_allocation

    @credit_allocation.setter
    def credit_allocation(self, credit_allocation):
        """Sets the credit_allocation of this LoanProductData.


        :param credit_allocation: The credit_allocation of this LoanProductData.  # noqa: E501
        :type: list[CreditAllocationData]
        """

        self._credit_allocation = credit_allocation

    @property
    def credit_allocation_allocation_types(self):
        """Gets the credit_allocation_allocation_types of this LoanProductData.  # noqa: E501


        :return: The credit_allocation_allocation_types of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._credit_allocation_allocation_types

    @credit_allocation_allocation_types.setter
    def credit_allocation_allocation_types(self, credit_allocation_allocation_types):
        """Sets the credit_allocation_allocation_types of this LoanProductData.


        :param credit_allocation_allocation_types: The credit_allocation_allocation_types of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._credit_allocation_allocation_types = credit_allocation_allocation_types

    @property
    def credit_allocation_transaction_types(self):
        """Gets the credit_allocation_transaction_types of this LoanProductData.  # noqa: E501


        :return: The credit_allocation_transaction_types of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._credit_allocation_transaction_types

    @credit_allocation_transaction_types.setter
    def credit_allocation_transaction_types(self, credit_allocation_transaction_types):
        """Sets the credit_allocation_transaction_types of this LoanProductData.


        :param credit_allocation_transaction_types: The credit_allocation_transaction_types of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._credit_allocation_transaction_types = credit_allocation_transaction_types

    @property
    def currency(self):
        """Gets the currency of this LoanProductData.  # noqa: E501


        :return: The currency of this LoanProductData.  # noqa: E501
        :rtype: CurrencyData
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LoanProductData.


        :param currency: The currency of this LoanProductData.  # noqa: E501
        :type: CurrencyData
        """

        self._currency = currency

    @property
    def currency_options(self):
        """Gets the currency_options of this LoanProductData.  # noqa: E501


        :return: The currency_options of this LoanProductData.  # noqa: E501
        :rtype: list[CurrencyData]
        """
        return self._currency_options

    @currency_options.setter
    def currency_options(self, currency_options):
        """Sets the currency_options of this LoanProductData.


        :param currency_options: The currency_options of this LoanProductData.  # noqa: E501
        :type: list[CurrencyData]
        """

        self._currency_options = currency_options

    @property
    def days_in_month_type(self):
        """Gets the days_in_month_type of this LoanProductData.  # noqa: E501


        :return: The days_in_month_type of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._days_in_month_type

    @days_in_month_type.setter
    def days_in_month_type(self, days_in_month_type):
        """Sets the days_in_month_type of this LoanProductData.


        :param days_in_month_type: The days_in_month_type of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._days_in_month_type = days_in_month_type

    @property
    def days_in_month_type_options(self):
        """Gets the days_in_month_type_options of this LoanProductData.  # noqa: E501


        :return: The days_in_month_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._days_in_month_type_options

    @days_in_month_type_options.setter
    def days_in_month_type_options(self, days_in_month_type_options):
        """Sets the days_in_month_type_options of this LoanProductData.


        :param days_in_month_type_options: The days_in_month_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._days_in_month_type_options = days_in_month_type_options

    @property
    def days_in_year_type(self):
        """Gets the days_in_year_type of this LoanProductData.  # noqa: E501


        :return: The days_in_year_type of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._days_in_year_type

    @days_in_year_type.setter
    def days_in_year_type(self, days_in_year_type):
        """Sets the days_in_year_type of this LoanProductData.


        :param days_in_year_type: The days_in_year_type of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._days_in_year_type = days_in_year_type

    @property
    def days_in_year_type_options(self):
        """Gets the days_in_year_type_options of this LoanProductData.  # noqa: E501


        :return: The days_in_year_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._days_in_year_type_options

    @days_in_year_type_options.setter
    def days_in_year_type_options(self, days_in_year_type_options):
        """Sets the days_in_year_type_options of this LoanProductData.


        :param days_in_year_type_options: The days_in_year_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._days_in_year_type_options = days_in_year_type_options

    @property
    def default_differential_lending_rate(self):
        """Gets the default_differential_lending_rate of this LoanProductData.  # noqa: E501


        :return: The default_differential_lending_rate of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._default_differential_lending_rate

    @default_differential_lending_rate.setter
    def default_differential_lending_rate(self, default_differential_lending_rate):
        """Sets the default_differential_lending_rate of this LoanProductData.


        :param default_differential_lending_rate: The default_differential_lending_rate of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._default_differential_lending_rate = default_differential_lending_rate

    @property
    def delinquency_bucket(self):
        """Gets the delinquency_bucket of this LoanProductData.  # noqa: E501


        :return: The delinquency_bucket of this LoanProductData.  # noqa: E501
        :rtype: DelinquencyBucketData
        """
        return self._delinquency_bucket

    @delinquency_bucket.setter
    def delinquency_bucket(self, delinquency_bucket):
        """Sets the delinquency_bucket of this LoanProductData.


        :param delinquency_bucket: The delinquency_bucket of this LoanProductData.  # noqa: E501
        :type: DelinquencyBucketData
        """

        self._delinquency_bucket = delinquency_bucket

    @property
    def delinquency_bucket_options(self):
        """Gets the delinquency_bucket_options of this LoanProductData.  # noqa: E501


        :return: The delinquency_bucket_options of this LoanProductData.  # noqa: E501
        :rtype: list[DelinquencyBucketData]
        """
        return self._delinquency_bucket_options

    @delinquency_bucket_options.setter
    def delinquency_bucket_options(self, delinquency_bucket_options):
        """Sets the delinquency_bucket_options of this LoanProductData.


        :param delinquency_bucket_options: The delinquency_bucket_options of this LoanProductData.  # noqa: E501
        :type: list[DelinquencyBucketData]
        """

        self._delinquency_bucket_options = delinquency_bucket_options

    @property
    def description(self):
        """Gets the description of this LoanProductData.  # noqa: E501


        :return: The description of this LoanProductData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LoanProductData.


        :param description: The description of this LoanProductData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disallow_expected_disbursements(self):
        """Gets the disallow_expected_disbursements of this LoanProductData.  # noqa: E501


        :return: The disallow_expected_disbursements of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_expected_disbursements

    @disallow_expected_disbursements.setter
    def disallow_expected_disbursements(self, disallow_expected_disbursements):
        """Sets the disallow_expected_disbursements of this LoanProductData.


        :param disallow_expected_disbursements: The disallow_expected_disbursements of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._disallow_expected_disbursements = disallow_expected_disbursements

    @property
    def disbursed_amount_percentage_for_down_payment(self):
        """Gets the disbursed_amount_percentage_for_down_payment of this LoanProductData.  # noqa: E501


        :return: The disbursed_amount_percentage_for_down_payment of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._disbursed_amount_percentage_for_down_payment

    @disbursed_amount_percentage_for_down_payment.setter
    def disbursed_amount_percentage_for_down_payment(self, disbursed_amount_percentage_for_down_payment):
        """Sets the disbursed_amount_percentage_for_down_payment of this LoanProductData.


        :param disbursed_amount_percentage_for_down_payment: The disbursed_amount_percentage_for_down_payment of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._disbursed_amount_percentage_for_down_payment = disbursed_amount_percentage_for_down_payment

    @property
    def due_days_for_repayment_event(self):
        """Gets the due_days_for_repayment_event of this LoanProductData.  # noqa: E501


        :return: The due_days_for_repayment_event of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._due_days_for_repayment_event

    @due_days_for_repayment_event.setter
    def due_days_for_repayment_event(self, due_days_for_repayment_event):
        """Sets the due_days_for_repayment_event of this LoanProductData.


        :param due_days_for_repayment_event: The due_days_for_repayment_event of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._due_days_for_repayment_event = due_days_for_repayment_event

    @property
    def enable_accrual_activity_posting(self):
        """Gets the enable_accrual_activity_posting of this LoanProductData.  # noqa: E501


        :return: The enable_accrual_activity_posting of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._enable_accrual_activity_posting

    @enable_accrual_activity_posting.setter
    def enable_accrual_activity_posting(self, enable_accrual_activity_posting):
        """Sets the enable_accrual_activity_posting of this LoanProductData.


        :param enable_accrual_activity_posting: The enable_accrual_activity_posting of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._enable_accrual_activity_posting = enable_accrual_activity_posting

    @property
    def enable_auto_repayment_for_down_payment(self):
        """Gets the enable_auto_repayment_for_down_payment of this LoanProductData.  # noqa: E501


        :return: The enable_auto_repayment_for_down_payment of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auto_repayment_for_down_payment

    @enable_auto_repayment_for_down_payment.setter
    def enable_auto_repayment_for_down_payment(self, enable_auto_repayment_for_down_payment):
        """Sets the enable_auto_repayment_for_down_payment of this LoanProductData.


        :param enable_auto_repayment_for_down_payment: The enable_auto_repayment_for_down_payment of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._enable_auto_repayment_for_down_payment = enable_auto_repayment_for_down_payment

    @property
    def enable_down_payment(self):
        """Gets the enable_down_payment of this LoanProductData.  # noqa: E501


        :return: The enable_down_payment of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._enable_down_payment

    @enable_down_payment.setter
    def enable_down_payment(self, enable_down_payment):
        """Sets the enable_down_payment of this LoanProductData.


        :param enable_down_payment: The enable_down_payment of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._enable_down_payment = enable_down_payment

    @property
    def enable_installment_level_delinquency(self):
        """Gets the enable_installment_level_delinquency of this LoanProductData.  # noqa: E501


        :return: The enable_installment_level_delinquency of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._enable_installment_level_delinquency

    @enable_installment_level_delinquency.setter
    def enable_installment_level_delinquency(self, enable_installment_level_delinquency):
        """Sets the enable_installment_level_delinquency of this LoanProductData.


        :param enable_installment_level_delinquency: The enable_installment_level_delinquency of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._enable_installment_level_delinquency = enable_installment_level_delinquency

    @property
    def equal_amortization(self):
        """Gets the equal_amortization of this LoanProductData.  # noqa: E501


        :return: The equal_amortization of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._equal_amortization

    @equal_amortization.setter
    def equal_amortization(self, equal_amortization):
        """Sets the equal_amortization of this LoanProductData.


        :param equal_amortization: The equal_amortization of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._equal_amortization = equal_amortization

    @property
    def external_id(self):
        """Gets the external_id of this LoanProductData.  # noqa: E501


        :return: The external_id of this LoanProductData.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this LoanProductData.


        :param external_id: The external_id of this LoanProductData.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def fee_to_income_account_mappings(self):
        """Gets the fee_to_income_account_mappings of this LoanProductData.  # noqa: E501


        :return: The fee_to_income_account_mappings of this LoanProductData.  # noqa: E501
        :rtype: list[ChargeToGLAccountMapper]
        """
        return self._fee_to_income_account_mappings

    @fee_to_income_account_mappings.setter
    def fee_to_income_account_mappings(self, fee_to_income_account_mappings):
        """Sets the fee_to_income_account_mappings of this LoanProductData.


        :param fee_to_income_account_mappings: The fee_to_income_account_mappings of this LoanProductData.  # noqa: E501
        :type: list[ChargeToGLAccountMapper]
        """

        self._fee_to_income_account_mappings = fee_to_income_account_mappings

    @property
    def fixed_length(self):
        """Gets the fixed_length of this LoanProductData.  # noqa: E501


        :return: The fixed_length of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._fixed_length

    @fixed_length.setter
    def fixed_length(self, fixed_length):
        """Sets the fixed_length of this LoanProductData.


        :param fixed_length: The fixed_length of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._fixed_length = fixed_length

    @property
    def fixed_principal_percentage_per_installment(self):
        """Gets the fixed_principal_percentage_per_installment of this LoanProductData.  # noqa: E501


        :return: The fixed_principal_percentage_per_installment of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._fixed_principal_percentage_per_installment

    @fixed_principal_percentage_per_installment.setter
    def fixed_principal_percentage_per_installment(self, fixed_principal_percentage_per_installment):
        """Sets the fixed_principal_percentage_per_installment of this LoanProductData.


        :param fixed_principal_percentage_per_installment: The fixed_principal_percentage_per_installment of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._fixed_principal_percentage_per_installment = fixed_principal_percentage_per_installment

    @property
    def floating_interest_rate_calculation_allowed(self):
        """Gets the floating_interest_rate_calculation_allowed of this LoanProductData.  # noqa: E501


        :return: The floating_interest_rate_calculation_allowed of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._floating_interest_rate_calculation_allowed

    @floating_interest_rate_calculation_allowed.setter
    def floating_interest_rate_calculation_allowed(self, floating_interest_rate_calculation_allowed):
        """Sets the floating_interest_rate_calculation_allowed of this LoanProductData.


        :param floating_interest_rate_calculation_allowed: The floating_interest_rate_calculation_allowed of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._floating_interest_rate_calculation_allowed = floating_interest_rate_calculation_allowed

    @property
    def floating_rate_id(self):
        """Gets the floating_rate_id of this LoanProductData.  # noqa: E501


        :return: The floating_rate_id of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._floating_rate_id

    @floating_rate_id.setter
    def floating_rate_id(self, floating_rate_id):
        """Sets the floating_rate_id of this LoanProductData.


        :param floating_rate_id: The floating_rate_id of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._floating_rate_id = floating_rate_id

    @property
    def floating_rate_name(self):
        """Gets the floating_rate_name of this LoanProductData.  # noqa: E501


        :return: The floating_rate_name of this LoanProductData.  # noqa: E501
        :rtype: str
        """
        return self._floating_rate_name

    @floating_rate_name.setter
    def floating_rate_name(self, floating_rate_name):
        """Sets the floating_rate_name of this LoanProductData.


        :param floating_rate_name: The floating_rate_name of this LoanProductData.  # noqa: E501
        :type: str
        """

        self._floating_rate_name = floating_rate_name

    @property
    def floating_rate_options(self):
        """Gets the floating_rate_options of this LoanProductData.  # noqa: E501


        :return: The floating_rate_options of this LoanProductData.  # noqa: E501
        :rtype: list[FloatingRateData]
        """
        return self._floating_rate_options

    @floating_rate_options.setter
    def floating_rate_options(self, floating_rate_options):
        """Sets the floating_rate_options of this LoanProductData.


        :param floating_rate_options: The floating_rate_options of this LoanProductData.  # noqa: E501
        :type: list[FloatingRateData]
        """

        self._floating_rate_options = floating_rate_options

    @property
    def fund_id(self):
        """Gets the fund_id of this LoanProductData.  # noqa: E501


        :return: The fund_id of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._fund_id

    @fund_id.setter
    def fund_id(self, fund_id):
        """Sets the fund_id of this LoanProductData.


        :param fund_id: The fund_id of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._fund_id = fund_id

    @property
    def fund_name(self):
        """Gets the fund_name of this LoanProductData.  # noqa: E501


        :return: The fund_name of this LoanProductData.  # noqa: E501
        :rtype: str
        """
        return self._fund_name

    @fund_name.setter
    def fund_name(self, fund_name):
        """Sets the fund_name of this LoanProductData.


        :param fund_name: The fund_name of this LoanProductData.  # noqa: E501
        :type: str
        """

        self._fund_name = fund_name

    @property
    def fund_options(self):
        """Gets the fund_options of this LoanProductData.  # noqa: E501


        :return: The fund_options of this LoanProductData.  # noqa: E501
        :rtype: list[FundData]
        """
        return self._fund_options

    @fund_options.setter
    def fund_options(self, fund_options):
        """Sets the fund_options of this LoanProductData.


        :param fund_options: The fund_options of this LoanProductData.  # noqa: E501
        :type: list[FundData]
        """

        self._fund_options = fund_options

    @property
    def grace_on_arrears_ageing(self):
        """Gets the grace_on_arrears_ageing of this LoanProductData.  # noqa: E501


        :return: The grace_on_arrears_ageing of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._grace_on_arrears_ageing

    @grace_on_arrears_ageing.setter
    def grace_on_arrears_ageing(self, grace_on_arrears_ageing):
        """Sets the grace_on_arrears_ageing of this LoanProductData.


        :param grace_on_arrears_ageing: The grace_on_arrears_ageing of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._grace_on_arrears_ageing = grace_on_arrears_ageing

    @property
    def grace_on_interest_charged(self):
        """Gets the grace_on_interest_charged of this LoanProductData.  # noqa: E501


        :return: The grace_on_interest_charged of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._grace_on_interest_charged

    @grace_on_interest_charged.setter
    def grace_on_interest_charged(self, grace_on_interest_charged):
        """Sets the grace_on_interest_charged of this LoanProductData.


        :param grace_on_interest_charged: The grace_on_interest_charged of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._grace_on_interest_charged = grace_on_interest_charged

    @property
    def grace_on_interest_payment(self):
        """Gets the grace_on_interest_payment of this LoanProductData.  # noqa: E501


        :return: The grace_on_interest_payment of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._grace_on_interest_payment

    @grace_on_interest_payment.setter
    def grace_on_interest_payment(self, grace_on_interest_payment):
        """Sets the grace_on_interest_payment of this LoanProductData.


        :param grace_on_interest_payment: The grace_on_interest_payment of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._grace_on_interest_payment = grace_on_interest_payment

    @property
    def grace_on_principal_payment(self):
        """Gets the grace_on_principal_payment of this LoanProductData.  # noqa: E501


        :return: The grace_on_principal_payment of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._grace_on_principal_payment

    @grace_on_principal_payment.setter
    def grace_on_principal_payment(self, grace_on_principal_payment):
        """Sets the grace_on_principal_payment of this LoanProductData.


        :param grace_on_principal_payment: The grace_on_principal_payment of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._grace_on_principal_payment = grace_on_principal_payment

    @property
    def hold_guarantee_funds(self):
        """Gets the hold_guarantee_funds of this LoanProductData.  # noqa: E501


        :return: The hold_guarantee_funds of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._hold_guarantee_funds

    @hold_guarantee_funds.setter
    def hold_guarantee_funds(self, hold_guarantee_funds):
        """Sets the hold_guarantee_funds of this LoanProductData.


        :param hold_guarantee_funds: The hold_guarantee_funds of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._hold_guarantee_funds = hold_guarantee_funds

    @property
    def id(self):
        """Gets the id of this LoanProductData.  # noqa: E501


        :return: The id of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoanProductData.


        :param id: The id of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def in_arrears_tolerance(self):
        """Gets the in_arrears_tolerance of this LoanProductData.  # noqa: E501


        :return: The in_arrears_tolerance of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._in_arrears_tolerance

    @in_arrears_tolerance.setter
    def in_arrears_tolerance(self, in_arrears_tolerance):
        """Sets the in_arrears_tolerance of this LoanProductData.


        :param in_arrears_tolerance: The in_arrears_tolerance of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._in_arrears_tolerance = in_arrears_tolerance

    @property
    def include_in_borrower_cycle(self):
        """Gets the include_in_borrower_cycle of this LoanProductData.  # noqa: E501


        :return: The include_in_borrower_cycle of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_borrower_cycle

    @include_in_borrower_cycle.setter
    def include_in_borrower_cycle(self, include_in_borrower_cycle):
        """Sets the include_in_borrower_cycle of this LoanProductData.


        :param include_in_borrower_cycle: The include_in_borrower_cycle of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._include_in_borrower_cycle = include_in_borrower_cycle

    @property
    def installment_amount_in_multiples_of(self):
        """Gets the installment_amount_in_multiples_of of this LoanProductData.  # noqa: E501


        :return: The installment_amount_in_multiples_of of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._installment_amount_in_multiples_of

    @installment_amount_in_multiples_of.setter
    def installment_amount_in_multiples_of(self, installment_amount_in_multiples_of):
        """Sets the installment_amount_in_multiples_of of this LoanProductData.


        :param installment_amount_in_multiples_of: The installment_amount_in_multiples_of of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._installment_amount_in_multiples_of = installment_amount_in_multiples_of

    @property
    def interest_calculation_period_type(self):
        """Gets the interest_calculation_period_type of this LoanProductData.  # noqa: E501


        :return: The interest_calculation_period_type of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_calculation_period_type

    @interest_calculation_period_type.setter
    def interest_calculation_period_type(self, interest_calculation_period_type):
        """Sets the interest_calculation_period_type of this LoanProductData.


        :param interest_calculation_period_type: The interest_calculation_period_type of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_calculation_period_type = interest_calculation_period_type

    @property
    def interest_calculation_period_type_options(self):
        """Gets the interest_calculation_period_type_options of this LoanProductData.  # noqa: E501


        :return: The interest_calculation_period_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_calculation_period_type_options

    @interest_calculation_period_type_options.setter
    def interest_calculation_period_type_options(self, interest_calculation_period_type_options):
        """Sets the interest_calculation_period_type_options of this LoanProductData.


        :param interest_calculation_period_type_options: The interest_calculation_period_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_calculation_period_type_options = interest_calculation_period_type_options

    @property
    def interest_rate_differential(self):
        """Gets the interest_rate_differential of this LoanProductData.  # noqa: E501


        :return: The interest_rate_differential of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate_differential

    @interest_rate_differential.setter
    def interest_rate_differential(self, interest_rate_differential):
        """Sets the interest_rate_differential of this LoanProductData.


        :param interest_rate_differential: The interest_rate_differential of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._interest_rate_differential = interest_rate_differential

    @property
    def interest_rate_frequency_type(self):
        """Gets the interest_rate_frequency_type of this LoanProductData.  # noqa: E501


        :return: The interest_rate_frequency_type of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_rate_frequency_type

    @interest_rate_frequency_type.setter
    def interest_rate_frequency_type(self, interest_rate_frequency_type):
        """Sets the interest_rate_frequency_type of this LoanProductData.


        :param interest_rate_frequency_type: The interest_rate_frequency_type of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_rate_frequency_type = interest_rate_frequency_type

    @property
    def interest_rate_frequency_type_options(self):
        """Gets the interest_rate_frequency_type_options of this LoanProductData.  # noqa: E501


        :return: The interest_rate_frequency_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_rate_frequency_type_options

    @interest_rate_frequency_type_options.setter
    def interest_rate_frequency_type_options(self, interest_rate_frequency_type_options):
        """Sets the interest_rate_frequency_type_options of this LoanProductData.


        :param interest_rate_frequency_type_options: The interest_rate_frequency_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_rate_frequency_type_options = interest_rate_frequency_type_options

    @property
    def interest_rate_per_period(self):
        """Gets the interest_rate_per_period of this LoanProductData.  # noqa: E501


        :return: The interest_rate_per_period of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate_per_period

    @interest_rate_per_period.setter
    def interest_rate_per_period(self, interest_rate_per_period):
        """Sets the interest_rate_per_period of this LoanProductData.


        :param interest_rate_per_period: The interest_rate_per_period of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._interest_rate_per_period = interest_rate_per_period

    @property
    def interest_rate_variations_for_borrower_cycle(self):
        """Gets the interest_rate_variations_for_borrower_cycle of this LoanProductData.  # noqa: E501


        :return: The interest_rate_variations_for_borrower_cycle of this LoanProductData.  # noqa: E501
        :rtype: list[LoanProductBorrowerCycleVariationData]
        """
        return self._interest_rate_variations_for_borrower_cycle

    @interest_rate_variations_for_borrower_cycle.setter
    def interest_rate_variations_for_borrower_cycle(self, interest_rate_variations_for_borrower_cycle):
        """Sets the interest_rate_variations_for_borrower_cycle of this LoanProductData.


        :param interest_rate_variations_for_borrower_cycle: The interest_rate_variations_for_borrower_cycle of this LoanProductData.  # noqa: E501
        :type: list[LoanProductBorrowerCycleVariationData]
        """

        self._interest_rate_variations_for_borrower_cycle = interest_rate_variations_for_borrower_cycle

    @property
    def interest_recalculation_compounding_type_options(self):
        """Gets the interest_recalculation_compounding_type_options of this LoanProductData.  # noqa: E501


        :return: The interest_recalculation_compounding_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_recalculation_compounding_type_options

    @interest_recalculation_compounding_type_options.setter
    def interest_recalculation_compounding_type_options(self, interest_recalculation_compounding_type_options):
        """Sets the interest_recalculation_compounding_type_options of this LoanProductData.


        :param interest_recalculation_compounding_type_options: The interest_recalculation_compounding_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_recalculation_compounding_type_options = interest_recalculation_compounding_type_options

    @property
    def interest_recalculation_data(self):
        """Gets the interest_recalculation_data of this LoanProductData.  # noqa: E501


        :return: The interest_recalculation_data of this LoanProductData.  # noqa: E501
        :rtype: LoanProductInterestRecalculationData
        """
        return self._interest_recalculation_data

    @interest_recalculation_data.setter
    def interest_recalculation_data(self, interest_recalculation_data):
        """Sets the interest_recalculation_data of this LoanProductData.


        :param interest_recalculation_data: The interest_recalculation_data of this LoanProductData.  # noqa: E501
        :type: LoanProductInterestRecalculationData
        """

        self._interest_recalculation_data = interest_recalculation_data

    @property
    def interest_recalculation_day_of_week_type_options(self):
        """Gets the interest_recalculation_day_of_week_type_options of this LoanProductData.  # noqa: E501


        :return: The interest_recalculation_day_of_week_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_recalculation_day_of_week_type_options

    @interest_recalculation_day_of_week_type_options.setter
    def interest_recalculation_day_of_week_type_options(self, interest_recalculation_day_of_week_type_options):
        """Sets the interest_recalculation_day_of_week_type_options of this LoanProductData.


        :param interest_recalculation_day_of_week_type_options: The interest_recalculation_day_of_week_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_recalculation_day_of_week_type_options = interest_recalculation_day_of_week_type_options

    @property
    def interest_recalculation_enabled(self):
        """Gets the interest_recalculation_enabled of this LoanProductData.  # noqa: E501


        :return: The interest_recalculation_enabled of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._interest_recalculation_enabled

    @interest_recalculation_enabled.setter
    def interest_recalculation_enabled(self, interest_recalculation_enabled):
        """Sets the interest_recalculation_enabled of this LoanProductData.


        :param interest_recalculation_enabled: The interest_recalculation_enabled of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._interest_recalculation_enabled = interest_recalculation_enabled

    @property
    def interest_recalculation_frequency_type_options(self):
        """Gets the interest_recalculation_frequency_type_options of this LoanProductData.  # noqa: E501


        :return: The interest_recalculation_frequency_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_recalculation_frequency_type_options

    @interest_recalculation_frequency_type_options.setter
    def interest_recalculation_frequency_type_options(self, interest_recalculation_frequency_type_options):
        """Sets the interest_recalculation_frequency_type_options of this LoanProductData.


        :param interest_recalculation_frequency_type_options: The interest_recalculation_frequency_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_recalculation_frequency_type_options = interest_recalculation_frequency_type_options

    @property
    def interest_recalculation_nth_day_type_options(self):
        """Gets the interest_recalculation_nth_day_type_options of this LoanProductData.  # noqa: E501


        :return: The interest_recalculation_nth_day_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_recalculation_nth_day_type_options

    @interest_recalculation_nth_day_type_options.setter
    def interest_recalculation_nth_day_type_options(self, interest_recalculation_nth_day_type_options):
        """Sets the interest_recalculation_nth_day_type_options of this LoanProductData.


        :param interest_recalculation_nth_day_type_options: The interest_recalculation_nth_day_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_recalculation_nth_day_type_options = interest_recalculation_nth_day_type_options

    @property
    def interest_type(self):
        """Gets the interest_type of this LoanProductData.  # noqa: E501


        :return: The interest_type of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._interest_type

    @interest_type.setter
    def interest_type(self, interest_type):
        """Sets the interest_type of this LoanProductData.


        :param interest_type: The interest_type of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._interest_type = interest_type

    @property
    def interest_type_options(self):
        """Gets the interest_type_options of this LoanProductData.  # noqa: E501


        :return: The interest_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._interest_type_options

    @interest_type_options.setter
    def interest_type_options(self, interest_type_options):
        """Sets the interest_type_options of this LoanProductData.


        :param interest_type_options: The interest_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._interest_type_options = interest_type_options

    @property
    def is_allow_partial_period_interest_calculation(self):
        """Gets the is_allow_partial_period_interest_calculation of this LoanProductData.  # noqa: E501


        :return: The is_allow_partial_period_interest_calculation of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_partial_period_interest_calculation

    @is_allow_partial_period_interest_calculation.setter
    def is_allow_partial_period_interest_calculation(self, is_allow_partial_period_interest_calculation):
        """Sets the is_allow_partial_period_interest_calculation of this LoanProductData.


        :param is_allow_partial_period_interest_calculation: The is_allow_partial_period_interest_calculation of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._is_allow_partial_period_interest_calculation = is_allow_partial_period_interest_calculation

    @property
    def is_equal_amortization(self):
        """Gets the is_equal_amortization of this LoanProductData.  # noqa: E501


        :return: The is_equal_amortization of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._is_equal_amortization

    @is_equal_amortization.setter
    def is_equal_amortization(self, is_equal_amortization):
        """Sets the is_equal_amortization of this LoanProductData.


        :param is_equal_amortization: The is_equal_amortization of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._is_equal_amortization = is_equal_amortization

    @property
    def is_floating_interest_rate_calculation_allowed(self):
        """Gets the is_floating_interest_rate_calculation_allowed of this LoanProductData.  # noqa: E501


        :return: The is_floating_interest_rate_calculation_allowed of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._is_floating_interest_rate_calculation_allowed

    @is_floating_interest_rate_calculation_allowed.setter
    def is_floating_interest_rate_calculation_allowed(self, is_floating_interest_rate_calculation_allowed):
        """Sets the is_floating_interest_rate_calculation_allowed of this LoanProductData.


        :param is_floating_interest_rate_calculation_allowed: The is_floating_interest_rate_calculation_allowed of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._is_floating_interest_rate_calculation_allowed = is_floating_interest_rate_calculation_allowed

    @property
    def is_interest_recalculation_enabled(self):
        """Gets the is_interest_recalculation_enabled of this LoanProductData.  # noqa: E501


        :return: The is_interest_recalculation_enabled of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._is_interest_recalculation_enabled

    @is_interest_recalculation_enabled.setter
    def is_interest_recalculation_enabled(self, is_interest_recalculation_enabled):
        """Sets the is_interest_recalculation_enabled of this LoanProductData.


        :param is_interest_recalculation_enabled: The is_interest_recalculation_enabled of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._is_interest_recalculation_enabled = is_interest_recalculation_enabled

    @property
    def is_linked_to_floating_interest_rates(self):
        """Gets the is_linked_to_floating_interest_rates of this LoanProductData.  # noqa: E501


        :return: The is_linked_to_floating_interest_rates of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._is_linked_to_floating_interest_rates

    @is_linked_to_floating_interest_rates.setter
    def is_linked_to_floating_interest_rates(self, is_linked_to_floating_interest_rates):
        """Sets the is_linked_to_floating_interest_rates of this LoanProductData.


        :param is_linked_to_floating_interest_rates: The is_linked_to_floating_interest_rates of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._is_linked_to_floating_interest_rates = is_linked_to_floating_interest_rates

    @property
    def is_rates_enabled(self):
        """Gets the is_rates_enabled of this LoanProductData.  # noqa: E501


        :return: The is_rates_enabled of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._is_rates_enabled

    @is_rates_enabled.setter
    def is_rates_enabled(self, is_rates_enabled):
        """Sets the is_rates_enabled of this LoanProductData.


        :param is_rates_enabled: The is_rates_enabled of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._is_rates_enabled = is_rates_enabled

    @property
    def linked_to_floating_interest_rates(self):
        """Gets the linked_to_floating_interest_rates of this LoanProductData.  # noqa: E501


        :return: The linked_to_floating_interest_rates of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._linked_to_floating_interest_rates

    @linked_to_floating_interest_rates.setter
    def linked_to_floating_interest_rates(self, linked_to_floating_interest_rates):
        """Sets the linked_to_floating_interest_rates of this LoanProductData.


        :param linked_to_floating_interest_rates: The linked_to_floating_interest_rates of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._linked_to_floating_interest_rates = linked_to_floating_interest_rates

    @property
    def loan_product_configurable_attributes(self):
        """Gets the loan_product_configurable_attributes of this LoanProductData.  # noqa: E501


        :return: The loan_product_configurable_attributes of this LoanProductData.  # noqa: E501
        :rtype: LoanProductConfigurableAttributes
        """
        return self._loan_product_configurable_attributes

    @loan_product_configurable_attributes.setter
    def loan_product_configurable_attributes(self, loan_product_configurable_attributes):
        """Sets the loan_product_configurable_attributes of this LoanProductData.


        :param loan_product_configurable_attributes: The loan_product_configurable_attributes of this LoanProductData.  # noqa: E501
        :type: LoanProductConfigurableAttributes
        """

        self._loan_product_configurable_attributes = loan_product_configurable_attributes

    @property
    def loan_schedule_processing_type(self):
        """Gets the loan_schedule_processing_type of this LoanProductData.  # noqa: E501


        :return: The loan_schedule_processing_type of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._loan_schedule_processing_type

    @loan_schedule_processing_type.setter
    def loan_schedule_processing_type(self, loan_schedule_processing_type):
        """Sets the loan_schedule_processing_type of this LoanProductData.


        :param loan_schedule_processing_type: The loan_schedule_processing_type of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._loan_schedule_processing_type = loan_schedule_processing_type

    @property
    def loan_schedule_processing_type_options(self):
        """Gets the loan_schedule_processing_type_options of this LoanProductData.  # noqa: E501


        :return: The loan_schedule_processing_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._loan_schedule_processing_type_options

    @loan_schedule_processing_type_options.setter
    def loan_schedule_processing_type_options(self, loan_schedule_processing_type_options):
        """Sets the loan_schedule_processing_type_options of this LoanProductData.


        :param loan_schedule_processing_type_options: The loan_schedule_processing_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._loan_schedule_processing_type_options = loan_schedule_processing_type_options

    @property
    def loan_schedule_type(self):
        """Gets the loan_schedule_type of this LoanProductData.  # noqa: E501


        :return: The loan_schedule_type of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._loan_schedule_type

    @loan_schedule_type.setter
    def loan_schedule_type(self, loan_schedule_type):
        """Sets the loan_schedule_type of this LoanProductData.


        :param loan_schedule_type: The loan_schedule_type of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._loan_schedule_type = loan_schedule_type

    @property
    def loan_schedule_type_options(self):
        """Gets the loan_schedule_type_options of this LoanProductData.  # noqa: E501


        :return: The loan_schedule_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._loan_schedule_type_options

    @loan_schedule_type_options.setter
    def loan_schedule_type_options(self, loan_schedule_type_options):
        """Sets the loan_schedule_type_options of this LoanProductData.


        :param loan_schedule_type_options: The loan_schedule_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._loan_schedule_type_options = loan_schedule_type_options

    @property
    def max_differential_lending_rate(self):
        """Gets the max_differential_lending_rate of this LoanProductData.  # noqa: E501


        :return: The max_differential_lending_rate of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._max_differential_lending_rate

    @max_differential_lending_rate.setter
    def max_differential_lending_rate(self, max_differential_lending_rate):
        """Sets the max_differential_lending_rate of this LoanProductData.


        :param max_differential_lending_rate: The max_differential_lending_rate of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._max_differential_lending_rate = max_differential_lending_rate

    @property
    def max_interest_rate_per_period(self):
        """Gets the max_interest_rate_per_period of this LoanProductData.  # noqa: E501


        :return: The max_interest_rate_per_period of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._max_interest_rate_per_period

    @max_interest_rate_per_period.setter
    def max_interest_rate_per_period(self, max_interest_rate_per_period):
        """Sets the max_interest_rate_per_period of this LoanProductData.


        :param max_interest_rate_per_period: The max_interest_rate_per_period of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._max_interest_rate_per_period = max_interest_rate_per_period

    @property
    def max_number_of_repayments(self):
        """Gets the max_number_of_repayments of this LoanProductData.  # noqa: E501


        :return: The max_number_of_repayments of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_repayments

    @max_number_of_repayments.setter
    def max_number_of_repayments(self, max_number_of_repayments):
        """Sets the max_number_of_repayments of this LoanProductData.


        :param max_number_of_repayments: The max_number_of_repayments of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._max_number_of_repayments = max_number_of_repayments

    @property
    def max_principal(self):
        """Gets the max_principal of this LoanProductData.  # noqa: E501


        :return: The max_principal of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._max_principal

    @max_principal.setter
    def max_principal(self, max_principal):
        """Sets the max_principal of this LoanProductData.


        :param max_principal: The max_principal of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._max_principal = max_principal

    @property
    def max_tranche_count(self):
        """Gets the max_tranche_count of this LoanProductData.  # noqa: E501


        :return: The max_tranche_count of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._max_tranche_count

    @max_tranche_count.setter
    def max_tranche_count(self, max_tranche_count):
        """Sets the max_tranche_count of this LoanProductData.


        :param max_tranche_count: The max_tranche_count of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._max_tranche_count = max_tranche_count

    @property
    def maximum_gap(self):
        """Gets the maximum_gap of this LoanProductData.  # noqa: E501


        :return: The maximum_gap of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._maximum_gap

    @maximum_gap.setter
    def maximum_gap(self, maximum_gap):
        """Sets the maximum_gap of this LoanProductData.


        :param maximum_gap: The maximum_gap of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._maximum_gap = maximum_gap

    @property
    def min_differential_lending_rate(self):
        """Gets the min_differential_lending_rate of this LoanProductData.  # noqa: E501


        :return: The min_differential_lending_rate of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._min_differential_lending_rate

    @min_differential_lending_rate.setter
    def min_differential_lending_rate(self, min_differential_lending_rate):
        """Sets the min_differential_lending_rate of this LoanProductData.


        :param min_differential_lending_rate: The min_differential_lending_rate of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._min_differential_lending_rate = min_differential_lending_rate

    @property
    def min_interest_rate_per_period(self):
        """Gets the min_interest_rate_per_period of this LoanProductData.  # noqa: E501


        :return: The min_interest_rate_per_period of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._min_interest_rate_per_period

    @min_interest_rate_per_period.setter
    def min_interest_rate_per_period(self, min_interest_rate_per_period):
        """Sets the min_interest_rate_per_period of this LoanProductData.


        :param min_interest_rate_per_period: The min_interest_rate_per_period of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._min_interest_rate_per_period = min_interest_rate_per_period

    @property
    def min_number_of_repayments(self):
        """Gets the min_number_of_repayments of this LoanProductData.  # noqa: E501


        :return: The min_number_of_repayments of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._min_number_of_repayments

    @min_number_of_repayments.setter
    def min_number_of_repayments(self, min_number_of_repayments):
        """Sets the min_number_of_repayments of this LoanProductData.


        :param min_number_of_repayments: The min_number_of_repayments of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._min_number_of_repayments = min_number_of_repayments

    @property
    def min_principal(self):
        """Gets the min_principal of this LoanProductData.  # noqa: E501


        :return: The min_principal of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._min_principal

    @min_principal.setter
    def min_principal(self, min_principal):
        """Sets the min_principal of this LoanProductData.


        :param min_principal: The min_principal of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._min_principal = min_principal

    @property
    def minimum_days_between_disbursal_and_first_repayment(self):
        """Gets the minimum_days_between_disbursal_and_first_repayment of this LoanProductData.  # noqa: E501


        :return: The minimum_days_between_disbursal_and_first_repayment of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._minimum_days_between_disbursal_and_first_repayment

    @minimum_days_between_disbursal_and_first_repayment.setter
    def minimum_days_between_disbursal_and_first_repayment(self, minimum_days_between_disbursal_and_first_repayment):
        """Sets the minimum_days_between_disbursal_and_first_repayment of this LoanProductData.


        :param minimum_days_between_disbursal_and_first_repayment: The minimum_days_between_disbursal_and_first_repayment of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._minimum_days_between_disbursal_and_first_repayment = minimum_days_between_disbursal_and_first_repayment

    @property
    def minimum_gap(self):
        """Gets the minimum_gap of this LoanProductData.  # noqa: E501


        :return: The minimum_gap of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._minimum_gap

    @minimum_gap.setter
    def minimum_gap(self, minimum_gap):
        """Sets the minimum_gap of this LoanProductData.


        :param minimum_gap: The minimum_gap of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._minimum_gap = minimum_gap

    @property
    def multi_disburse_loan(self):
        """Gets the multi_disburse_loan of this LoanProductData.  # noqa: E501


        :return: The multi_disburse_loan of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._multi_disburse_loan

    @multi_disburse_loan.setter
    def multi_disburse_loan(self, multi_disburse_loan):
        """Sets the multi_disburse_loan of this LoanProductData.


        :param multi_disburse_loan: The multi_disburse_loan of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._multi_disburse_loan = multi_disburse_loan

    @property
    def name(self):
        """Gets the name of this LoanProductData.  # noqa: E501


        :return: The name of this LoanProductData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoanProductData.


        :param name: The name of this LoanProductData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_repayment_variations_for_borrower_cycle(self):
        """Gets the number_of_repayment_variations_for_borrower_cycle of this LoanProductData.  # noqa: E501


        :return: The number_of_repayment_variations_for_borrower_cycle of this LoanProductData.  # noqa: E501
        :rtype: list[LoanProductBorrowerCycleVariationData]
        """
        return self._number_of_repayment_variations_for_borrower_cycle

    @number_of_repayment_variations_for_borrower_cycle.setter
    def number_of_repayment_variations_for_borrower_cycle(self, number_of_repayment_variations_for_borrower_cycle):
        """Sets the number_of_repayment_variations_for_borrower_cycle of this LoanProductData.


        :param number_of_repayment_variations_for_borrower_cycle: The number_of_repayment_variations_for_borrower_cycle of this LoanProductData.  # noqa: E501
        :type: list[LoanProductBorrowerCycleVariationData]
        """

        self._number_of_repayment_variations_for_borrower_cycle = number_of_repayment_variations_for_borrower_cycle

    @property
    def number_of_repayments(self):
        """Gets the number_of_repayments of this LoanProductData.  # noqa: E501


        :return: The number_of_repayments of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._number_of_repayments

    @number_of_repayments.setter
    def number_of_repayments(self, number_of_repayments):
        """Sets the number_of_repayments of this LoanProductData.


        :param number_of_repayments: The number_of_repayments of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._number_of_repayments = number_of_repayments

    @property
    def outstanding_loan_balance(self):
        """Gets the outstanding_loan_balance of this LoanProductData.  # noqa: E501


        :return: The outstanding_loan_balance of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_loan_balance

    @outstanding_loan_balance.setter
    def outstanding_loan_balance(self, outstanding_loan_balance):
        """Sets the outstanding_loan_balance of this LoanProductData.


        :param outstanding_loan_balance: The outstanding_loan_balance of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._outstanding_loan_balance = outstanding_loan_balance

    @property
    def over_applied_calculation_type(self):
        """Gets the over_applied_calculation_type of this LoanProductData.  # noqa: E501


        :return: The over_applied_calculation_type of this LoanProductData.  # noqa: E501
        :rtype: str
        """
        return self._over_applied_calculation_type

    @over_applied_calculation_type.setter
    def over_applied_calculation_type(self, over_applied_calculation_type):
        """Sets the over_applied_calculation_type of this LoanProductData.


        :param over_applied_calculation_type: The over_applied_calculation_type of this LoanProductData.  # noqa: E501
        :type: str
        """

        self._over_applied_calculation_type = over_applied_calculation_type

    @property
    def over_applied_number(self):
        """Gets the over_applied_number of this LoanProductData.  # noqa: E501


        :return: The over_applied_number of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._over_applied_number

    @over_applied_number.setter
    def over_applied_number(self, over_applied_number):
        """Sets the over_applied_number of this LoanProductData.


        :param over_applied_number: The over_applied_number of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._over_applied_number = over_applied_number

    @property
    def over_due_days_for_repayment_event(self):
        """Gets the over_due_days_for_repayment_event of this LoanProductData.  # noqa: E501


        :return: The over_due_days_for_repayment_event of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._over_due_days_for_repayment_event

    @over_due_days_for_repayment_event.setter
    def over_due_days_for_repayment_event(self, over_due_days_for_repayment_event):
        """Sets the over_due_days_for_repayment_event of this LoanProductData.


        :param over_due_days_for_repayment_event: The over_due_days_for_repayment_event of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._over_due_days_for_repayment_event = over_due_days_for_repayment_event

    @property
    def overdue_days_for_npa(self):
        """Gets the overdue_days_for_npa of this LoanProductData.  # noqa: E501


        :return: The overdue_days_for_npa of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._overdue_days_for_npa

    @overdue_days_for_npa.setter
    def overdue_days_for_npa(self, overdue_days_for_npa):
        """Sets the overdue_days_for_npa of this LoanProductData.


        :param overdue_days_for_npa: The overdue_days_for_npa of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._overdue_days_for_npa = overdue_days_for_npa

    @property
    def payment_allocation(self):
        """Gets the payment_allocation of this LoanProductData.  # noqa: E501


        :return: The payment_allocation of this LoanProductData.  # noqa: E501
        :rtype: list[AdvancedPaymentData]
        """
        return self._payment_allocation

    @payment_allocation.setter
    def payment_allocation(self, payment_allocation):
        """Sets the payment_allocation of this LoanProductData.


        :param payment_allocation: The payment_allocation of this LoanProductData.  # noqa: E501
        :type: list[AdvancedPaymentData]
        """

        self._payment_allocation = payment_allocation

    @property
    def payment_channel_to_fund_source_mappings(self):
        """Gets the payment_channel_to_fund_source_mappings of this LoanProductData.  # noqa: E501


        :return: The payment_channel_to_fund_source_mappings of this LoanProductData.  # noqa: E501
        :rtype: list[PaymentTypeToGLAccountMapper]
        """
        return self._payment_channel_to_fund_source_mappings

    @payment_channel_to_fund_source_mappings.setter
    def payment_channel_to_fund_source_mappings(self, payment_channel_to_fund_source_mappings):
        """Sets the payment_channel_to_fund_source_mappings of this LoanProductData.


        :param payment_channel_to_fund_source_mappings: The payment_channel_to_fund_source_mappings of this LoanProductData.  # noqa: E501
        :type: list[PaymentTypeToGLAccountMapper]
        """

        self._payment_channel_to_fund_source_mappings = payment_channel_to_fund_source_mappings

    @property
    def payment_type_options(self):
        """Gets the payment_type_options of this LoanProductData.  # noqa: E501


        :return: The payment_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[PaymentTypeData]
        """
        return self._payment_type_options

    @payment_type_options.setter
    def payment_type_options(self, payment_type_options):
        """Sets the payment_type_options of this LoanProductData.


        :param payment_type_options: The payment_type_options of this LoanProductData.  # noqa: E501
        :type: list[PaymentTypeData]
        """

        self._payment_type_options = payment_type_options

    @property
    def penalty_options(self):
        """Gets the penalty_options of this LoanProductData.  # noqa: E501


        :return: The penalty_options of this LoanProductData.  # noqa: E501
        :rtype: list[ChargeData]
        """
        return self._penalty_options

    @penalty_options.setter
    def penalty_options(self, penalty_options):
        """Sets the penalty_options of this LoanProductData.


        :param penalty_options: The penalty_options of this LoanProductData.  # noqa: E501
        :type: list[ChargeData]
        """

        self._penalty_options = penalty_options

    @property
    def penalty_to_income_account_mappings(self):
        """Gets the penalty_to_income_account_mappings of this LoanProductData.  # noqa: E501


        :return: The penalty_to_income_account_mappings of this LoanProductData.  # noqa: E501
        :rtype: list[ChargeToGLAccountMapper]
        """
        return self._penalty_to_income_account_mappings

    @penalty_to_income_account_mappings.setter
    def penalty_to_income_account_mappings(self, penalty_to_income_account_mappings):
        """Sets the penalty_to_income_account_mappings of this LoanProductData.


        :param penalty_to_income_account_mappings: The penalty_to_income_account_mappings of this LoanProductData.  # noqa: E501
        :type: list[ChargeToGLAccountMapper]
        """

        self._penalty_to_income_account_mappings = penalty_to_income_account_mappings

    @property
    def pre_closure_interest_calculation_strategy_options(self):
        """Gets the pre_closure_interest_calculation_strategy_options of this LoanProductData.  # noqa: E501


        :return: The pre_closure_interest_calculation_strategy_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._pre_closure_interest_calculation_strategy_options

    @pre_closure_interest_calculation_strategy_options.setter
    def pre_closure_interest_calculation_strategy_options(self, pre_closure_interest_calculation_strategy_options):
        """Sets the pre_closure_interest_calculation_strategy_options of this LoanProductData.


        :param pre_closure_interest_calculation_strategy_options: The pre_closure_interest_calculation_strategy_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._pre_closure_interest_calculation_strategy_options = pre_closure_interest_calculation_strategy_options

    @property
    def principal(self):
        """Gets the principal of this LoanProductData.  # noqa: E501


        :return: The principal of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this LoanProductData.


        :param principal: The principal of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._principal = principal

    @property
    def principal_threshold_for_last_installment(self):
        """Gets the principal_threshold_for_last_installment of this LoanProductData.  # noqa: E501


        :return: The principal_threshold_for_last_installment of this LoanProductData.  # noqa: E501
        :rtype: float
        """
        return self._principal_threshold_for_last_installment

    @principal_threshold_for_last_installment.setter
    def principal_threshold_for_last_installment(self, principal_threshold_for_last_installment):
        """Sets the principal_threshold_for_last_installment of this LoanProductData.


        :param principal_threshold_for_last_installment: The principal_threshold_for_last_installment of this LoanProductData.  # noqa: E501
        :type: float
        """

        self._principal_threshold_for_last_installment = principal_threshold_for_last_installment

    @property
    def principal_variations_for_borrower_cycle(self):
        """Gets the principal_variations_for_borrower_cycle of this LoanProductData.  # noqa: E501


        :return: The principal_variations_for_borrower_cycle of this LoanProductData.  # noqa: E501
        :rtype: list[LoanProductBorrowerCycleVariationData]
        """
        return self._principal_variations_for_borrower_cycle

    @principal_variations_for_borrower_cycle.setter
    def principal_variations_for_borrower_cycle(self, principal_variations_for_borrower_cycle):
        """Sets the principal_variations_for_borrower_cycle of this LoanProductData.


        :param principal_variations_for_borrower_cycle: The principal_variations_for_borrower_cycle of this LoanProductData.  # noqa: E501
        :type: list[LoanProductBorrowerCycleVariationData]
        """

        self._principal_variations_for_borrower_cycle = principal_variations_for_borrower_cycle

    @property
    def product_guarantee_data(self):
        """Gets the product_guarantee_data of this LoanProductData.  # noqa: E501


        :return: The product_guarantee_data of this LoanProductData.  # noqa: E501
        :rtype: LoanProductGuaranteeData
        """
        return self._product_guarantee_data

    @product_guarantee_data.setter
    def product_guarantee_data(self, product_guarantee_data):
        """Sets the product_guarantee_data of this LoanProductData.


        :param product_guarantee_data: The product_guarantee_data of this LoanProductData.  # noqa: E501
        :type: LoanProductGuaranteeData
        """

        self._product_guarantee_data = product_guarantee_data

    @property
    def rate_options(self):
        """Gets the rate_options of this LoanProductData.  # noqa: E501


        :return: The rate_options of this LoanProductData.  # noqa: E501
        :rtype: list[RateData]
        """
        return self._rate_options

    @rate_options.setter
    def rate_options(self, rate_options):
        """Sets the rate_options of this LoanProductData.


        :param rate_options: The rate_options of this LoanProductData.  # noqa: E501
        :type: list[RateData]
        """

        self._rate_options = rate_options

    @property
    def rates(self):
        """Gets the rates of this LoanProductData.  # noqa: E501


        :return: The rates of this LoanProductData.  # noqa: E501
        :rtype: list[RateData]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this LoanProductData.


        :param rates: The rates of this LoanProductData.  # noqa: E501
        :type: list[RateData]
        """

        self._rates = rates

    @property
    def rates_enabled(self):
        """Gets the rates_enabled of this LoanProductData.  # noqa: E501


        :return: The rates_enabled of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._rates_enabled

    @rates_enabled.setter
    def rates_enabled(self, rates_enabled):
        """Sets the rates_enabled of this LoanProductData.


        :param rates_enabled: The rates_enabled of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._rates_enabled = rates_enabled

    @property
    def recurring_moratorium_on_principal_periods(self):
        """Gets the recurring_moratorium_on_principal_periods of this LoanProductData.  # noqa: E501


        :return: The recurring_moratorium_on_principal_periods of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._recurring_moratorium_on_principal_periods

    @recurring_moratorium_on_principal_periods.setter
    def recurring_moratorium_on_principal_periods(self, recurring_moratorium_on_principal_periods):
        """Sets the recurring_moratorium_on_principal_periods of this LoanProductData.


        :param recurring_moratorium_on_principal_periods: The recurring_moratorium_on_principal_periods of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._recurring_moratorium_on_principal_periods = recurring_moratorium_on_principal_periods

    @property
    def repayment_every(self):
        """Gets the repayment_every of this LoanProductData.  # noqa: E501


        :return: The repayment_every of this LoanProductData.  # noqa: E501
        :rtype: int
        """
        return self._repayment_every

    @repayment_every.setter
    def repayment_every(self, repayment_every):
        """Sets the repayment_every of this LoanProductData.


        :param repayment_every: The repayment_every of this LoanProductData.  # noqa: E501
        :type: int
        """

        self._repayment_every = repayment_every

    @property
    def repayment_frequency_type(self):
        """Gets the repayment_frequency_type of this LoanProductData.  # noqa: E501


        :return: The repayment_frequency_type of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._repayment_frequency_type

    @repayment_frequency_type.setter
    def repayment_frequency_type(self, repayment_frequency_type):
        """Sets the repayment_frequency_type of this LoanProductData.


        :param repayment_frequency_type: The repayment_frequency_type of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._repayment_frequency_type = repayment_frequency_type

    @property
    def repayment_frequency_type_options(self):
        """Gets the repayment_frequency_type_options of this LoanProductData.  # noqa: E501


        :return: The repayment_frequency_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._repayment_frequency_type_options

    @repayment_frequency_type_options.setter
    def repayment_frequency_type_options(self, repayment_frequency_type_options):
        """Sets the repayment_frequency_type_options of this LoanProductData.


        :param repayment_frequency_type_options: The repayment_frequency_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._repayment_frequency_type_options = repayment_frequency_type_options

    @property
    def repayment_start_date_type(self):
        """Gets the repayment_start_date_type of this LoanProductData.  # noqa: E501


        :return: The repayment_start_date_type of this LoanProductData.  # noqa: E501
        :rtype: EnumOptionData
        """
        return self._repayment_start_date_type

    @repayment_start_date_type.setter
    def repayment_start_date_type(self, repayment_start_date_type):
        """Sets the repayment_start_date_type of this LoanProductData.


        :param repayment_start_date_type: The repayment_start_date_type of this LoanProductData.  # noqa: E501
        :type: EnumOptionData
        """

        self._repayment_start_date_type = repayment_start_date_type

    @property
    def repayment_start_date_type_options(self):
        """Gets the repayment_start_date_type_options of this LoanProductData.  # noqa: E501


        :return: The repayment_start_date_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._repayment_start_date_type_options

    @repayment_start_date_type_options.setter
    def repayment_start_date_type_options(self, repayment_start_date_type_options):
        """Sets the repayment_start_date_type_options of this LoanProductData.


        :param repayment_start_date_type_options: The repayment_start_date_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._repayment_start_date_type_options = repayment_start_date_type_options

    @property
    def reschedule_strategy_type_options(self):
        """Gets the reschedule_strategy_type_options of this LoanProductData.  # noqa: E501


        :return: The reschedule_strategy_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._reschedule_strategy_type_options

    @reschedule_strategy_type_options.setter
    def reschedule_strategy_type_options(self, reschedule_strategy_type_options):
        """Sets the reschedule_strategy_type_options of this LoanProductData.


        :param reschedule_strategy_type_options: The reschedule_strategy_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._reschedule_strategy_type_options = reschedule_strategy_type_options

    @property
    def short_name(self):
        """Gets the short_name of this LoanProductData.  # noqa: E501


        :return: The short_name of this LoanProductData.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this LoanProductData.


        :param short_name: The short_name of this LoanProductData.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def start_date(self):
        """Gets the start_date of this LoanProductData.  # noqa: E501


        :return: The start_date of this LoanProductData.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this LoanProductData.


        :param start_date: The start_date of this LoanProductData.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this LoanProductData.  # noqa: E501


        :return: The status of this LoanProductData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LoanProductData.


        :param status: The status of this LoanProductData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def supported_interest_refund_types(self):
        """Gets the supported_interest_refund_types of this LoanProductData.  # noqa: E501


        :return: The supported_interest_refund_types of this LoanProductData.  # noqa: E501
        :rtype: list[StringEnumOptionData]
        """
        return self._supported_interest_refund_types

    @supported_interest_refund_types.setter
    def supported_interest_refund_types(self, supported_interest_refund_types):
        """Sets the supported_interest_refund_types of this LoanProductData.


        :param supported_interest_refund_types: The supported_interest_refund_types of this LoanProductData.  # noqa: E501
        :type: list[StringEnumOptionData]
        """

        self._supported_interest_refund_types = supported_interest_refund_types

    @property
    def supported_interest_refund_types_options(self):
        """Gets the supported_interest_refund_types_options of this LoanProductData.  # noqa: E501


        :return: The supported_interest_refund_types_options of this LoanProductData.  # noqa: E501
        :rtype: list[StringEnumOptionData]
        """
        return self._supported_interest_refund_types_options

    @supported_interest_refund_types_options.setter
    def supported_interest_refund_types_options(self, supported_interest_refund_types_options):
        """Sets the supported_interest_refund_types_options of this LoanProductData.


        :param supported_interest_refund_types_options: The supported_interest_refund_types_options of this LoanProductData.  # noqa: E501
        :type: list[StringEnumOptionData]
        """

        self._supported_interest_refund_types_options = supported_interest_refund_types_options

    @property
    def sync_expected_with_disbursement_date(self):
        """Gets the sync_expected_with_disbursement_date of this LoanProductData.  # noqa: E501


        :return: The sync_expected_with_disbursement_date of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._sync_expected_with_disbursement_date

    @sync_expected_with_disbursement_date.setter
    def sync_expected_with_disbursement_date(self, sync_expected_with_disbursement_date):
        """Sets the sync_expected_with_disbursement_date of this LoanProductData.


        :param sync_expected_with_disbursement_date: The sync_expected_with_disbursement_date of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._sync_expected_with_disbursement_date = sync_expected_with_disbursement_date

    @property
    def transaction_processing_strategy_code(self):
        """Gets the transaction_processing_strategy_code of this LoanProductData.  # noqa: E501


        :return: The transaction_processing_strategy_code of this LoanProductData.  # noqa: E501
        :rtype: str
        """
        return self._transaction_processing_strategy_code

    @transaction_processing_strategy_code.setter
    def transaction_processing_strategy_code(self, transaction_processing_strategy_code):
        """Sets the transaction_processing_strategy_code of this LoanProductData.


        :param transaction_processing_strategy_code: The transaction_processing_strategy_code of this LoanProductData.  # noqa: E501
        :type: str
        """

        self._transaction_processing_strategy_code = transaction_processing_strategy_code

    @property
    def transaction_processing_strategy_name(self):
        """Gets the transaction_processing_strategy_name of this LoanProductData.  # noqa: E501


        :return: The transaction_processing_strategy_name of this LoanProductData.  # noqa: E501
        :rtype: str
        """
        return self._transaction_processing_strategy_name

    @transaction_processing_strategy_name.setter
    def transaction_processing_strategy_name(self, transaction_processing_strategy_name):
        """Sets the transaction_processing_strategy_name of this LoanProductData.


        :param transaction_processing_strategy_name: The transaction_processing_strategy_name of this LoanProductData.  # noqa: E501
        :type: str
        """

        self._transaction_processing_strategy_name = transaction_processing_strategy_name

    @property
    def transaction_processing_strategy_options(self):
        """Gets the transaction_processing_strategy_options of this LoanProductData.  # noqa: E501


        :return: The transaction_processing_strategy_options of this LoanProductData.  # noqa: E501
        :rtype: list[TransactionProcessingStrategyData]
        """
        return self._transaction_processing_strategy_options

    @transaction_processing_strategy_options.setter
    def transaction_processing_strategy_options(self, transaction_processing_strategy_options):
        """Sets the transaction_processing_strategy_options of this LoanProductData.


        :param transaction_processing_strategy_options: The transaction_processing_strategy_options of this LoanProductData.  # noqa: E501
        :type: list[TransactionProcessingStrategyData]
        """

        self._transaction_processing_strategy_options = transaction_processing_strategy_options

    @property
    def use_borrower_cycle(self):
        """Gets the use_borrower_cycle of this LoanProductData.  # noqa: E501


        :return: The use_borrower_cycle of this LoanProductData.  # noqa: E501
        :rtype: bool
        """
        return self._use_borrower_cycle

    @use_borrower_cycle.setter
    def use_borrower_cycle(self, use_borrower_cycle):
        """Sets the use_borrower_cycle of this LoanProductData.


        :param use_borrower_cycle: The use_borrower_cycle of this LoanProductData.  # noqa: E501
        :type: bool
        """

        self._use_borrower_cycle = use_borrower_cycle

    @property
    def value_condition_type_options(self):
        """Gets the value_condition_type_options of this LoanProductData.  # noqa: E501


        :return: The value_condition_type_options of this LoanProductData.  # noqa: E501
        :rtype: list[EnumOptionData]
        """
        return self._value_condition_type_options

    @value_condition_type_options.setter
    def value_condition_type_options(self, value_condition_type_options):
        """Sets the value_condition_type_options of this LoanProductData.


        :param value_condition_type_options: The value_condition_type_options of this LoanProductData.  # noqa: E501
        :type: list[EnumOptionData]
        """

        self._value_condition_type_options = value_condition_type_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanProductData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanProductData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
