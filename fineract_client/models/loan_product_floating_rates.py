# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanProductFloatingRates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_differential_lending_rate': 'float',
        'floating_interest_rate_calculation_allowed': 'bool',
        'floating_rate': 'FloatingRate',
        'id': 'int',
        'interest_rate_differential': 'float',
        'loan_product': 'LoanProduct',
        'max_differential_lending_rate': 'float',
        'min_differential_lending_rate': 'float',
        'new': 'bool'
    }

    attribute_map = {
        'default_differential_lending_rate': 'defaultDifferentialLendingRate',
        'floating_interest_rate_calculation_allowed': 'floatingInterestRateCalculationAllowed',
        'floating_rate': 'floatingRate',
        'id': 'id',
        'interest_rate_differential': 'interestRateDifferential',
        'loan_product': 'loanProduct',
        'max_differential_lending_rate': 'maxDifferentialLendingRate',
        'min_differential_lending_rate': 'minDifferentialLendingRate',
        'new': 'new'
    }

    def __init__(self, default_differential_lending_rate=None, floating_interest_rate_calculation_allowed=None, floating_rate=None, id=None, interest_rate_differential=None, loan_product=None, max_differential_lending_rate=None, min_differential_lending_rate=None, new=None):  # noqa: E501
        """LoanProductFloatingRates - a model defined in Swagger"""  # noqa: E501
        self._default_differential_lending_rate = None
        self._floating_interest_rate_calculation_allowed = None
        self._floating_rate = None
        self._id = None
        self._interest_rate_differential = None
        self._loan_product = None
        self._max_differential_lending_rate = None
        self._min_differential_lending_rate = None
        self._new = None
        self.discriminator = None
        if default_differential_lending_rate is not None:
            self.default_differential_lending_rate = default_differential_lending_rate
        if floating_interest_rate_calculation_allowed is not None:
            self.floating_interest_rate_calculation_allowed = floating_interest_rate_calculation_allowed
        if floating_rate is not None:
            self.floating_rate = floating_rate
        if id is not None:
            self.id = id
        if interest_rate_differential is not None:
            self.interest_rate_differential = interest_rate_differential
        if loan_product is not None:
            self.loan_product = loan_product
        if max_differential_lending_rate is not None:
            self.max_differential_lending_rate = max_differential_lending_rate
        if min_differential_lending_rate is not None:
            self.min_differential_lending_rate = min_differential_lending_rate
        if new is not None:
            self.new = new

    @property
    def default_differential_lending_rate(self):
        """Gets the default_differential_lending_rate of this LoanProductFloatingRates.  # noqa: E501


        :return: The default_differential_lending_rate of this LoanProductFloatingRates.  # noqa: E501
        :rtype: float
        """
        return self._default_differential_lending_rate

    @default_differential_lending_rate.setter
    def default_differential_lending_rate(self, default_differential_lending_rate):
        """Sets the default_differential_lending_rate of this LoanProductFloatingRates.


        :param default_differential_lending_rate: The default_differential_lending_rate of this LoanProductFloatingRates.  # noqa: E501
        :type: float
        """

        self._default_differential_lending_rate = default_differential_lending_rate

    @property
    def floating_interest_rate_calculation_allowed(self):
        """Gets the floating_interest_rate_calculation_allowed of this LoanProductFloatingRates.  # noqa: E501


        :return: The floating_interest_rate_calculation_allowed of this LoanProductFloatingRates.  # noqa: E501
        :rtype: bool
        """
        return self._floating_interest_rate_calculation_allowed

    @floating_interest_rate_calculation_allowed.setter
    def floating_interest_rate_calculation_allowed(self, floating_interest_rate_calculation_allowed):
        """Sets the floating_interest_rate_calculation_allowed of this LoanProductFloatingRates.


        :param floating_interest_rate_calculation_allowed: The floating_interest_rate_calculation_allowed of this LoanProductFloatingRates.  # noqa: E501
        :type: bool
        """

        self._floating_interest_rate_calculation_allowed = floating_interest_rate_calculation_allowed

    @property
    def floating_rate(self):
        """Gets the floating_rate of this LoanProductFloatingRates.  # noqa: E501


        :return: The floating_rate of this LoanProductFloatingRates.  # noqa: E501
        :rtype: FloatingRate
        """
        return self._floating_rate

    @floating_rate.setter
    def floating_rate(self, floating_rate):
        """Sets the floating_rate of this LoanProductFloatingRates.


        :param floating_rate: The floating_rate of this LoanProductFloatingRates.  # noqa: E501
        :type: FloatingRate
        """

        self._floating_rate = floating_rate

    @property
    def id(self):
        """Gets the id of this LoanProductFloatingRates.  # noqa: E501


        :return: The id of this LoanProductFloatingRates.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoanProductFloatingRates.


        :param id: The id of this LoanProductFloatingRates.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interest_rate_differential(self):
        """Gets the interest_rate_differential of this LoanProductFloatingRates.  # noqa: E501


        :return: The interest_rate_differential of this LoanProductFloatingRates.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate_differential

    @interest_rate_differential.setter
    def interest_rate_differential(self, interest_rate_differential):
        """Sets the interest_rate_differential of this LoanProductFloatingRates.


        :param interest_rate_differential: The interest_rate_differential of this LoanProductFloatingRates.  # noqa: E501
        :type: float
        """

        self._interest_rate_differential = interest_rate_differential

    @property
    def loan_product(self):
        """Gets the loan_product of this LoanProductFloatingRates.  # noqa: E501


        :return: The loan_product of this LoanProductFloatingRates.  # noqa: E501
        :rtype: LoanProduct
        """
        return self._loan_product

    @loan_product.setter
    def loan_product(self, loan_product):
        """Sets the loan_product of this LoanProductFloatingRates.


        :param loan_product: The loan_product of this LoanProductFloatingRates.  # noqa: E501
        :type: LoanProduct
        """

        self._loan_product = loan_product

    @property
    def max_differential_lending_rate(self):
        """Gets the max_differential_lending_rate of this LoanProductFloatingRates.  # noqa: E501


        :return: The max_differential_lending_rate of this LoanProductFloatingRates.  # noqa: E501
        :rtype: float
        """
        return self._max_differential_lending_rate

    @max_differential_lending_rate.setter
    def max_differential_lending_rate(self, max_differential_lending_rate):
        """Sets the max_differential_lending_rate of this LoanProductFloatingRates.


        :param max_differential_lending_rate: The max_differential_lending_rate of this LoanProductFloatingRates.  # noqa: E501
        :type: float
        """

        self._max_differential_lending_rate = max_differential_lending_rate

    @property
    def min_differential_lending_rate(self):
        """Gets the min_differential_lending_rate of this LoanProductFloatingRates.  # noqa: E501


        :return: The min_differential_lending_rate of this LoanProductFloatingRates.  # noqa: E501
        :rtype: float
        """
        return self._min_differential_lending_rate

    @min_differential_lending_rate.setter
    def min_differential_lending_rate(self, min_differential_lending_rate):
        """Sets the min_differential_lending_rate of this LoanProductFloatingRates.


        :param min_differential_lending_rate: The min_differential_lending_rate of this LoanProductFloatingRates.  # noqa: E501
        :type: float
        """

        self._min_differential_lending_rate = min_differential_lending_rate

    @property
    def new(self):
        """Gets the new of this LoanProductFloatingRates.  # noqa: E501


        :return: The new of this LoanProductFloatingRates.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this LoanProductFloatingRates.


        :param new: The new of this LoanProductFloatingRates.  # noqa: E501
        :type: bool
        """

        self._new = new

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanProductFloatingRates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanProductFloatingRates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
