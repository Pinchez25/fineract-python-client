# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SavingsAccountSubStatusEnumData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block': 'bool',
        'block_credit': 'bool',
        'block_debit': 'bool',
        'code': 'str',
        'dormant': 'bool',
        'escheat': 'bool',
        'id': 'int',
        'inactive': 'bool',
        '_none': 'bool',
        'value': 'str'
    }

    attribute_map = {
        'block': 'block',
        'block_credit': 'blockCredit',
        'block_debit': 'blockDebit',
        'code': 'code',
        'dormant': 'dormant',
        'escheat': 'escheat',
        'id': 'id',
        'inactive': 'inactive',
        '_none': 'none',
        'value': 'value'
    }

    def __init__(self, block=None, block_credit=None, block_debit=None, code=None, dormant=None, escheat=None, id=None, inactive=None, _none=None, value=None):  # noqa: E501
        """SavingsAccountSubStatusEnumData - a model defined in Swagger"""  # noqa: E501
        self._block = None
        self._block_credit = None
        self._block_debit = None
        self._code = None
        self._dormant = None
        self._escheat = None
        self._id = None
        self._inactive = None
        self.__none = None
        self._value = None
        self.discriminator = None
        if block is not None:
            self.block = block
        if block_credit is not None:
            self.block_credit = block_credit
        if block_debit is not None:
            self.block_debit = block_debit
        if code is not None:
            self.code = code
        if dormant is not None:
            self.dormant = dormant
        if escheat is not None:
            self.escheat = escheat
        if id is not None:
            self.id = id
        if inactive is not None:
            self.inactive = inactive
        if _none is not None:
            self._none = _none
        if value is not None:
            self.value = value

    @property
    def block(self):
        """Gets the block of this SavingsAccountSubStatusEnumData.  # noqa: E501


        :return: The block of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this SavingsAccountSubStatusEnumData.


        :param block: The block of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :type: bool
        """

        self._block = block

    @property
    def block_credit(self):
        """Gets the block_credit of this SavingsAccountSubStatusEnumData.  # noqa: E501


        :return: The block_credit of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._block_credit

    @block_credit.setter
    def block_credit(self, block_credit):
        """Sets the block_credit of this SavingsAccountSubStatusEnumData.


        :param block_credit: The block_credit of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :type: bool
        """

        self._block_credit = block_credit

    @property
    def block_debit(self):
        """Gets the block_debit of this SavingsAccountSubStatusEnumData.  # noqa: E501


        :return: The block_debit of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._block_debit

    @block_debit.setter
    def block_debit(self, block_debit):
        """Sets the block_debit of this SavingsAccountSubStatusEnumData.


        :param block_debit: The block_debit of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :type: bool
        """

        self._block_debit = block_debit

    @property
    def code(self):
        """Gets the code of this SavingsAccountSubStatusEnumData.  # noqa: E501


        :return: The code of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SavingsAccountSubStatusEnumData.


        :param code: The code of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def dormant(self):
        """Gets the dormant of this SavingsAccountSubStatusEnumData.  # noqa: E501


        :return: The dormant of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._dormant

    @dormant.setter
    def dormant(self, dormant):
        """Sets the dormant of this SavingsAccountSubStatusEnumData.


        :param dormant: The dormant of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :type: bool
        """

        self._dormant = dormant

    @property
    def escheat(self):
        """Gets the escheat of this SavingsAccountSubStatusEnumData.  # noqa: E501


        :return: The escheat of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._escheat

    @escheat.setter
    def escheat(self, escheat):
        """Sets the escheat of this SavingsAccountSubStatusEnumData.


        :param escheat: The escheat of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :type: bool
        """

        self._escheat = escheat

    @property
    def id(self):
        """Gets the id of this SavingsAccountSubStatusEnumData.  # noqa: E501


        :return: The id of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavingsAccountSubStatusEnumData.


        :param id: The id of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def inactive(self):
        """Gets the inactive of this SavingsAccountSubStatusEnumData.  # noqa: E501


        :return: The inactive of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this SavingsAccountSubStatusEnumData.


        :param inactive: The inactive of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def _none(self):
        """Gets the _none of this SavingsAccountSubStatusEnumData.  # noqa: E501


        :return: The _none of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :rtype: bool
        """
        return self.__none

    @_none.setter
    def _none(self, _none):
        """Sets the _none of this SavingsAccountSubStatusEnumData.


        :param _none: The _none of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :type: bool
        """

        self.__none = _none

    @property
    def value(self):
        """Gets the value of this SavingsAccountSubStatusEnumData.  # noqa: E501


        :return: The value of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SavingsAccountSubStatusEnumData.


        :param value: The value of this SavingsAccountSubStatusEnumData.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavingsAccountSubStatusEnumData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavingsAccountSubStatusEnumData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
