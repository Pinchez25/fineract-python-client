# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostProductsTypeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_rule': 'int',
        'allow_dividend_calculation_for_inactive_clients': 'bool',
        'charges_selected': 'list[PostProductsChargesSelected]',
        'currency_code': 'str',
        'description': 'str',
        'digits_after_decimal': 'int',
        'in_multiples_of': 'int',
        'locale': 'str',
        'lockin_period_frequency': 'int',
        'lockin_period_frequency_type': 'int',
        'market_price_periods': 'list[PostProductsMarketPricePeriods]',
        'maximum_shares': 'int',
        'minimum_active_period_for_dividends': 'int',
        'minimum_shares': 'int',
        'minimumactiveperiod_frequency_type': 'int',
        'name': 'str',
        'nominal_shares': 'int',
        'shares_issued': 'int',
        'short_name': 'str',
        'total_shares': 'int',
        'unit_price': 'int'
    }

    attribute_map = {
        'accounting_rule': 'accountingRule',
        'allow_dividend_calculation_for_inactive_clients': 'allowDividendCalculationForInactiveClients',
        'charges_selected': 'chargesSelected',
        'currency_code': 'currencyCode',
        'description': 'description',
        'digits_after_decimal': 'digitsAfterDecimal',
        'in_multiples_of': 'inMultiplesOf',
        'locale': 'locale',
        'lockin_period_frequency': 'lockinPeriodFrequency',
        'lockin_period_frequency_type': 'lockinPeriodFrequencyType',
        'market_price_periods': 'marketPricePeriods',
        'maximum_shares': 'maximumShares',
        'minimum_active_period_for_dividends': 'minimumActivePeriodForDividends',
        'minimum_shares': 'minimumShares',
        'minimumactiveperiod_frequency_type': 'minimumactiveperiodFrequencyType',
        'name': 'name',
        'nominal_shares': 'nominalShares',
        'shares_issued': 'sharesIssued',
        'short_name': 'shortName',
        'total_shares': 'totalShares',
        'unit_price': 'unitPrice'
    }

    def __init__(self, accounting_rule=None, allow_dividend_calculation_for_inactive_clients=None, charges_selected=None, currency_code=None, description=None, digits_after_decimal=None, in_multiples_of=None, locale=None, lockin_period_frequency=None, lockin_period_frequency_type=None, market_price_periods=None, maximum_shares=None, minimum_active_period_for_dividends=None, minimum_shares=None, minimumactiveperiod_frequency_type=None, name=None, nominal_shares=None, shares_issued=None, short_name=None, total_shares=None, unit_price=None):  # noqa: E501
        """PostProductsTypeRequest - a model defined in Swagger"""  # noqa: E501
        self._accounting_rule = None
        self._allow_dividend_calculation_for_inactive_clients = None
        self._charges_selected = None
        self._currency_code = None
        self._description = None
        self._digits_after_decimal = None
        self._in_multiples_of = None
        self._locale = None
        self._lockin_period_frequency = None
        self._lockin_period_frequency_type = None
        self._market_price_periods = None
        self._maximum_shares = None
        self._minimum_active_period_for_dividends = None
        self._minimum_shares = None
        self._minimumactiveperiod_frequency_type = None
        self._name = None
        self._nominal_shares = None
        self._shares_issued = None
        self._short_name = None
        self._total_shares = None
        self._unit_price = None
        self.discriminator = None
        if accounting_rule is not None:
            self.accounting_rule = accounting_rule
        if allow_dividend_calculation_for_inactive_clients is not None:
            self.allow_dividend_calculation_for_inactive_clients = allow_dividend_calculation_for_inactive_clients
        if charges_selected is not None:
            self.charges_selected = charges_selected
        if currency_code is not None:
            self.currency_code = currency_code
        if description is not None:
            self.description = description
        if digits_after_decimal is not None:
            self.digits_after_decimal = digits_after_decimal
        if in_multiples_of is not None:
            self.in_multiples_of = in_multiples_of
        if locale is not None:
            self.locale = locale
        if lockin_period_frequency is not None:
            self.lockin_period_frequency = lockin_period_frequency
        if lockin_period_frequency_type is not None:
            self.lockin_period_frequency_type = lockin_period_frequency_type
        if market_price_periods is not None:
            self.market_price_periods = market_price_periods
        if maximum_shares is not None:
            self.maximum_shares = maximum_shares
        if minimum_active_period_for_dividends is not None:
            self.minimum_active_period_for_dividends = minimum_active_period_for_dividends
        if minimum_shares is not None:
            self.minimum_shares = minimum_shares
        if minimumactiveperiod_frequency_type is not None:
            self.minimumactiveperiod_frequency_type = minimumactiveperiod_frequency_type
        if name is not None:
            self.name = name
        if nominal_shares is not None:
            self.nominal_shares = nominal_shares
        if shares_issued is not None:
            self.shares_issued = shares_issued
        if short_name is not None:
            self.short_name = short_name
        if total_shares is not None:
            self.total_shares = total_shares
        if unit_price is not None:
            self.unit_price = unit_price

    @property
    def accounting_rule(self):
        """Gets the accounting_rule of this PostProductsTypeRequest.  # noqa: E501


        :return: The accounting_rule of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._accounting_rule

    @accounting_rule.setter
    def accounting_rule(self, accounting_rule):
        """Sets the accounting_rule of this PostProductsTypeRequest.


        :param accounting_rule: The accounting_rule of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._accounting_rule = accounting_rule

    @property
    def allow_dividend_calculation_for_inactive_clients(self):
        """Gets the allow_dividend_calculation_for_inactive_clients of this PostProductsTypeRequest.  # noqa: E501


        :return: The allow_dividend_calculation_for_inactive_clients of this PostProductsTypeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_dividend_calculation_for_inactive_clients

    @allow_dividend_calculation_for_inactive_clients.setter
    def allow_dividend_calculation_for_inactive_clients(self, allow_dividend_calculation_for_inactive_clients):
        """Sets the allow_dividend_calculation_for_inactive_clients of this PostProductsTypeRequest.


        :param allow_dividend_calculation_for_inactive_clients: The allow_dividend_calculation_for_inactive_clients of this PostProductsTypeRequest.  # noqa: E501
        :type: bool
        """

        self._allow_dividend_calculation_for_inactive_clients = allow_dividend_calculation_for_inactive_clients

    @property
    def charges_selected(self):
        """Gets the charges_selected of this PostProductsTypeRequest.  # noqa: E501


        :return: The charges_selected of this PostProductsTypeRequest.  # noqa: E501
        :rtype: list[PostProductsChargesSelected]
        """
        return self._charges_selected

    @charges_selected.setter
    def charges_selected(self, charges_selected):
        """Sets the charges_selected of this PostProductsTypeRequest.


        :param charges_selected: The charges_selected of this PostProductsTypeRequest.  # noqa: E501
        :type: list[PostProductsChargesSelected]
        """

        self._charges_selected = charges_selected

    @property
    def currency_code(self):
        """Gets the currency_code of this PostProductsTypeRequest.  # noqa: E501


        :return: The currency_code of this PostProductsTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PostProductsTypeRequest.


        :param currency_code: The currency_code of this PostProductsTypeRequest.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def description(self):
        """Gets the description of this PostProductsTypeRequest.  # noqa: E501


        :return: The description of this PostProductsTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostProductsTypeRequest.


        :param description: The description of this PostProductsTypeRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def digits_after_decimal(self):
        """Gets the digits_after_decimal of this PostProductsTypeRequest.  # noqa: E501


        :return: The digits_after_decimal of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._digits_after_decimal

    @digits_after_decimal.setter
    def digits_after_decimal(self, digits_after_decimal):
        """Sets the digits_after_decimal of this PostProductsTypeRequest.


        :param digits_after_decimal: The digits_after_decimal of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._digits_after_decimal = digits_after_decimal

    @property
    def in_multiples_of(self):
        """Gets the in_multiples_of of this PostProductsTypeRequest.  # noqa: E501


        :return: The in_multiples_of of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._in_multiples_of

    @in_multiples_of.setter
    def in_multiples_of(self, in_multiples_of):
        """Sets the in_multiples_of of this PostProductsTypeRequest.


        :param in_multiples_of: The in_multiples_of of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._in_multiples_of = in_multiples_of

    @property
    def locale(self):
        """Gets the locale of this PostProductsTypeRequest.  # noqa: E501


        :return: The locale of this PostProductsTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PostProductsTypeRequest.


        :param locale: The locale of this PostProductsTypeRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def lockin_period_frequency(self):
        """Gets the lockin_period_frequency of this PostProductsTypeRequest.  # noqa: E501


        :return: The lockin_period_frequency of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._lockin_period_frequency

    @lockin_period_frequency.setter
    def lockin_period_frequency(self, lockin_period_frequency):
        """Sets the lockin_period_frequency of this PostProductsTypeRequest.


        :param lockin_period_frequency: The lockin_period_frequency of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._lockin_period_frequency = lockin_period_frequency

    @property
    def lockin_period_frequency_type(self):
        """Gets the lockin_period_frequency_type of this PostProductsTypeRequest.  # noqa: E501


        :return: The lockin_period_frequency_type of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._lockin_period_frequency_type

    @lockin_period_frequency_type.setter
    def lockin_period_frequency_type(self, lockin_period_frequency_type):
        """Sets the lockin_period_frequency_type of this PostProductsTypeRequest.


        :param lockin_period_frequency_type: The lockin_period_frequency_type of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._lockin_period_frequency_type = lockin_period_frequency_type

    @property
    def market_price_periods(self):
        """Gets the market_price_periods of this PostProductsTypeRequest.  # noqa: E501


        :return: The market_price_periods of this PostProductsTypeRequest.  # noqa: E501
        :rtype: list[PostProductsMarketPricePeriods]
        """
        return self._market_price_periods

    @market_price_periods.setter
    def market_price_periods(self, market_price_periods):
        """Sets the market_price_periods of this PostProductsTypeRequest.


        :param market_price_periods: The market_price_periods of this PostProductsTypeRequest.  # noqa: E501
        :type: list[PostProductsMarketPricePeriods]
        """

        self._market_price_periods = market_price_periods

    @property
    def maximum_shares(self):
        """Gets the maximum_shares of this PostProductsTypeRequest.  # noqa: E501


        :return: The maximum_shares of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._maximum_shares

    @maximum_shares.setter
    def maximum_shares(self, maximum_shares):
        """Sets the maximum_shares of this PostProductsTypeRequest.


        :param maximum_shares: The maximum_shares of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._maximum_shares = maximum_shares

    @property
    def minimum_active_period_for_dividends(self):
        """Gets the minimum_active_period_for_dividends of this PostProductsTypeRequest.  # noqa: E501


        :return: The minimum_active_period_for_dividends of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._minimum_active_period_for_dividends

    @minimum_active_period_for_dividends.setter
    def minimum_active_period_for_dividends(self, minimum_active_period_for_dividends):
        """Sets the minimum_active_period_for_dividends of this PostProductsTypeRequest.


        :param minimum_active_period_for_dividends: The minimum_active_period_for_dividends of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._minimum_active_period_for_dividends = minimum_active_period_for_dividends

    @property
    def minimum_shares(self):
        """Gets the minimum_shares of this PostProductsTypeRequest.  # noqa: E501


        :return: The minimum_shares of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._minimum_shares

    @minimum_shares.setter
    def minimum_shares(self, minimum_shares):
        """Sets the minimum_shares of this PostProductsTypeRequest.


        :param minimum_shares: The minimum_shares of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._minimum_shares = minimum_shares

    @property
    def minimumactiveperiod_frequency_type(self):
        """Gets the minimumactiveperiod_frequency_type of this PostProductsTypeRequest.  # noqa: E501


        :return: The minimumactiveperiod_frequency_type of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._minimumactiveperiod_frequency_type

    @minimumactiveperiod_frequency_type.setter
    def minimumactiveperiod_frequency_type(self, minimumactiveperiod_frequency_type):
        """Sets the minimumactiveperiod_frequency_type of this PostProductsTypeRequest.


        :param minimumactiveperiod_frequency_type: The minimumactiveperiod_frequency_type of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._minimumactiveperiod_frequency_type = minimumactiveperiod_frequency_type

    @property
    def name(self):
        """Gets the name of this PostProductsTypeRequest.  # noqa: E501


        :return: The name of this PostProductsTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostProductsTypeRequest.


        :param name: The name of this PostProductsTypeRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nominal_shares(self):
        """Gets the nominal_shares of this PostProductsTypeRequest.  # noqa: E501


        :return: The nominal_shares of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._nominal_shares

    @nominal_shares.setter
    def nominal_shares(self, nominal_shares):
        """Sets the nominal_shares of this PostProductsTypeRequest.


        :param nominal_shares: The nominal_shares of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._nominal_shares = nominal_shares

    @property
    def shares_issued(self):
        """Gets the shares_issued of this PostProductsTypeRequest.  # noqa: E501


        :return: The shares_issued of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._shares_issued

    @shares_issued.setter
    def shares_issued(self, shares_issued):
        """Sets the shares_issued of this PostProductsTypeRequest.


        :param shares_issued: The shares_issued of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._shares_issued = shares_issued

    @property
    def short_name(self):
        """Gets the short_name of this PostProductsTypeRequest.  # noqa: E501


        :return: The short_name of this PostProductsTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this PostProductsTypeRequest.


        :param short_name: The short_name of this PostProductsTypeRequest.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def total_shares(self):
        """Gets the total_shares of this PostProductsTypeRequest.  # noqa: E501


        :return: The total_shares of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._total_shares

    @total_shares.setter
    def total_shares(self, total_shares):
        """Sets the total_shares of this PostProductsTypeRequest.


        :param total_shares: The total_shares of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._total_shares = total_shares

    @property
    def unit_price(self):
        """Gets the unit_price of this PostProductsTypeRequest.  # noqa: E501


        :return: The unit_price of this PostProductsTypeRequest.  # noqa: E501
        :rtype: int
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this PostProductsTypeRequest.


        :param unit_price: The unit_price of this PostProductsTypeRequest.  # noqa: E501
        :type: int
        """

        self._unit_price = unit_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostProductsTypeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostProductsTypeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
