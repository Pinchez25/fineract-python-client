# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostAccountTransfersRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_format': 'str',
        'from_account_id': 'int',
        'from_account_type': 'int',
        'from_client_id': 'int',
        'from_office_id': 'int',
        'locale': 'str',
        'to_account_id': 'int',
        'to_account_type': 'int',
        'to_client_id': 'int',
        'to_office_id': 'int',
        'transfer_amount': 'float',
        'transfer_date': 'str',
        'transfer_description': 'str'
    }

    attribute_map = {
        'date_format': 'dateFormat',
        'from_account_id': 'fromAccountId',
        'from_account_type': 'fromAccountType',
        'from_client_id': 'fromClientId',
        'from_office_id': 'fromOfficeId',
        'locale': 'locale',
        'to_account_id': 'toAccountId',
        'to_account_type': 'toAccountType',
        'to_client_id': 'toClientId',
        'to_office_id': 'toOfficeId',
        'transfer_amount': 'transferAmount',
        'transfer_date': 'transferDate',
        'transfer_description': 'transferDescription'
    }

    def __init__(self, date_format=None, from_account_id=None, from_account_type=None, from_client_id=None, from_office_id=None, locale=None, to_account_id=None, to_account_type=None, to_client_id=None, to_office_id=None, transfer_amount=None, transfer_date=None, transfer_description=None):  # noqa: E501
        """PostAccountTransfersRequest - a model defined in Swagger"""  # noqa: E501
        self._date_format = None
        self._from_account_id = None
        self._from_account_type = None
        self._from_client_id = None
        self._from_office_id = None
        self._locale = None
        self._to_account_id = None
        self._to_account_type = None
        self._to_client_id = None
        self._to_office_id = None
        self._transfer_amount = None
        self._transfer_date = None
        self._transfer_description = None
        self.discriminator = None
        if date_format is not None:
            self.date_format = date_format
        if from_account_id is not None:
            self.from_account_id = from_account_id
        if from_account_type is not None:
            self.from_account_type = from_account_type
        if from_client_id is not None:
            self.from_client_id = from_client_id
        if from_office_id is not None:
            self.from_office_id = from_office_id
        if locale is not None:
            self.locale = locale
        if to_account_id is not None:
            self.to_account_id = to_account_id
        if to_account_type is not None:
            self.to_account_type = to_account_type
        if to_client_id is not None:
            self.to_client_id = to_client_id
        if to_office_id is not None:
            self.to_office_id = to_office_id
        if transfer_amount is not None:
            self.transfer_amount = transfer_amount
        if transfer_date is not None:
            self.transfer_date = transfer_date
        if transfer_description is not None:
            self.transfer_description = transfer_description

    @property
    def date_format(self):
        """Gets the date_format of this PostAccountTransfersRequest.  # noqa: E501


        :return: The date_format of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this PostAccountTransfersRequest.


        :param date_format: The date_format of this PostAccountTransfersRequest.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def from_account_id(self):
        """Gets the from_account_id of this PostAccountTransfersRequest.  # noqa: E501


        :return: The from_account_id of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: int
        """
        return self._from_account_id

    @from_account_id.setter
    def from_account_id(self, from_account_id):
        """Sets the from_account_id of this PostAccountTransfersRequest.


        :param from_account_id: The from_account_id of this PostAccountTransfersRequest.  # noqa: E501
        :type: int
        """

        self._from_account_id = from_account_id

    @property
    def from_account_type(self):
        """Gets the from_account_type of this PostAccountTransfersRequest.  # noqa: E501


        :return: The from_account_type of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: int
        """
        return self._from_account_type

    @from_account_type.setter
    def from_account_type(self, from_account_type):
        """Sets the from_account_type of this PostAccountTransfersRequest.


        :param from_account_type: The from_account_type of this PostAccountTransfersRequest.  # noqa: E501
        :type: int
        """

        self._from_account_type = from_account_type

    @property
    def from_client_id(self):
        """Gets the from_client_id of this PostAccountTransfersRequest.  # noqa: E501


        :return: The from_client_id of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: int
        """
        return self._from_client_id

    @from_client_id.setter
    def from_client_id(self, from_client_id):
        """Sets the from_client_id of this PostAccountTransfersRequest.


        :param from_client_id: The from_client_id of this PostAccountTransfersRequest.  # noqa: E501
        :type: int
        """

        self._from_client_id = from_client_id

    @property
    def from_office_id(self):
        """Gets the from_office_id of this PostAccountTransfersRequest.  # noqa: E501


        :return: The from_office_id of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: int
        """
        return self._from_office_id

    @from_office_id.setter
    def from_office_id(self, from_office_id):
        """Sets the from_office_id of this PostAccountTransfersRequest.


        :param from_office_id: The from_office_id of this PostAccountTransfersRequest.  # noqa: E501
        :type: int
        """

        self._from_office_id = from_office_id

    @property
    def locale(self):
        """Gets the locale of this PostAccountTransfersRequest.  # noqa: E501


        :return: The locale of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PostAccountTransfersRequest.


        :param locale: The locale of this PostAccountTransfersRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def to_account_id(self):
        """Gets the to_account_id of this PostAccountTransfersRequest.  # noqa: E501


        :return: The to_account_id of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: int
        """
        return self._to_account_id

    @to_account_id.setter
    def to_account_id(self, to_account_id):
        """Sets the to_account_id of this PostAccountTransfersRequest.


        :param to_account_id: The to_account_id of this PostAccountTransfersRequest.  # noqa: E501
        :type: int
        """

        self._to_account_id = to_account_id

    @property
    def to_account_type(self):
        """Gets the to_account_type of this PostAccountTransfersRequest.  # noqa: E501


        :return: The to_account_type of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: int
        """
        return self._to_account_type

    @to_account_type.setter
    def to_account_type(self, to_account_type):
        """Sets the to_account_type of this PostAccountTransfersRequest.


        :param to_account_type: The to_account_type of this PostAccountTransfersRequest.  # noqa: E501
        :type: int
        """

        self._to_account_type = to_account_type

    @property
    def to_client_id(self):
        """Gets the to_client_id of this PostAccountTransfersRequest.  # noqa: E501


        :return: The to_client_id of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: int
        """
        return self._to_client_id

    @to_client_id.setter
    def to_client_id(self, to_client_id):
        """Sets the to_client_id of this PostAccountTransfersRequest.


        :param to_client_id: The to_client_id of this PostAccountTransfersRequest.  # noqa: E501
        :type: int
        """

        self._to_client_id = to_client_id

    @property
    def to_office_id(self):
        """Gets the to_office_id of this PostAccountTransfersRequest.  # noqa: E501


        :return: The to_office_id of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: int
        """
        return self._to_office_id

    @to_office_id.setter
    def to_office_id(self, to_office_id):
        """Sets the to_office_id of this PostAccountTransfersRequest.


        :param to_office_id: The to_office_id of this PostAccountTransfersRequest.  # noqa: E501
        :type: int
        """

        self._to_office_id = to_office_id

    @property
    def transfer_amount(self):
        """Gets the transfer_amount of this PostAccountTransfersRequest.  # noqa: E501


        :return: The transfer_amount of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: float
        """
        return self._transfer_amount

    @transfer_amount.setter
    def transfer_amount(self, transfer_amount):
        """Sets the transfer_amount of this PostAccountTransfersRequest.


        :param transfer_amount: The transfer_amount of this PostAccountTransfersRequest.  # noqa: E501
        :type: float
        """

        self._transfer_amount = transfer_amount

    @property
    def transfer_date(self):
        """Gets the transfer_date of this PostAccountTransfersRequest.  # noqa: E501


        :return: The transfer_date of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: str
        """
        return self._transfer_date

    @transfer_date.setter
    def transfer_date(self, transfer_date):
        """Sets the transfer_date of this PostAccountTransfersRequest.


        :param transfer_date: The transfer_date of this PostAccountTransfersRequest.  # noqa: E501
        :type: str
        """

        self._transfer_date = transfer_date

    @property
    def transfer_description(self):
        """Gets the transfer_description of this PostAccountTransfersRequest.  # noqa: E501


        :return: The transfer_description of this PostAccountTransfersRequest.  # noqa: E501
        :rtype: str
        """
        return self._transfer_description

    @transfer_description.setter
    def transfer_description(self, transfer_description):
        """Sets the transfer_description of this PostAccountTransfersRequest.


        :param transfer_description: The transfer_description of this PostAccountTransfersRequest.  # noqa: E501
        :type: str
        """

        self._transfer_description = transfer_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostAccountTransfersRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostAccountTransfersRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
