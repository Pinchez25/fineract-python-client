# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaxComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'int',
        'created_date': 'datetime',
        'credit_account_type': 'int',
        'credit_acount': 'GLAccount',
        'debit_account_type': 'int',
        'debit_acount': 'GLAccount',
        'id': 'int',
        'last_modified_by': 'int',
        'last_modified_date': 'datetime',
        'new': 'bool',
        'percentage': 'float',
        'tax_component_histories': 'list[TaxComponentHistory]',
        'tax_group_mappings': 'list[TaxGroupMappings]'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_date': 'createdDate',
        'credit_account_type': 'creditAccountType',
        'credit_acount': 'creditAcount',
        'debit_account_type': 'debitAccountType',
        'debit_acount': 'debitAcount',
        'id': 'id',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_date': 'lastModifiedDate',
        'new': 'new',
        'percentage': 'percentage',
        'tax_component_histories': 'taxComponentHistories',
        'tax_group_mappings': 'taxGroupMappings'
    }

    def __init__(self, created_by=None, created_date=None, credit_account_type=None, credit_acount=None, debit_account_type=None, debit_acount=None, id=None, last_modified_by=None, last_modified_date=None, new=None, percentage=None, tax_component_histories=None, tax_group_mappings=None):  # noqa: E501
        """TaxComponent - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._created_date = None
        self._credit_account_type = None
        self._credit_acount = None
        self._debit_account_type = None
        self._debit_acount = None
        self._id = None
        self._last_modified_by = None
        self._last_modified_date = None
        self._new = None
        self._percentage = None
        self._tax_component_histories = None
        self._tax_group_mappings = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date
        if credit_account_type is not None:
            self.credit_account_type = credit_account_type
        if credit_acount is not None:
            self.credit_acount = credit_acount
        if debit_account_type is not None:
            self.debit_account_type = debit_account_type
        if debit_acount is not None:
            self.debit_acount = debit_acount
        if id is not None:
            self.id = id
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if new is not None:
            self.new = new
        if percentage is not None:
            self.percentage = percentage
        if tax_component_histories is not None:
            self.tax_component_histories = tax_component_histories
        if tax_group_mappings is not None:
            self.tax_group_mappings = tax_group_mappings

    @property
    def created_by(self):
        """Gets the created_by of this TaxComponent.  # noqa: E501


        :return: The created_by of this TaxComponent.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TaxComponent.


        :param created_by: The created_by of this TaxComponent.  # noqa: E501
        :type: int
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this TaxComponent.  # noqa: E501


        :return: The created_date of this TaxComponent.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this TaxComponent.


        :param created_date: The created_date of this TaxComponent.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def credit_account_type(self):
        """Gets the credit_account_type of this TaxComponent.  # noqa: E501


        :return: The credit_account_type of this TaxComponent.  # noqa: E501
        :rtype: int
        """
        return self._credit_account_type

    @credit_account_type.setter
    def credit_account_type(self, credit_account_type):
        """Sets the credit_account_type of this TaxComponent.


        :param credit_account_type: The credit_account_type of this TaxComponent.  # noqa: E501
        :type: int
        """

        self._credit_account_type = credit_account_type

    @property
    def credit_acount(self):
        """Gets the credit_acount of this TaxComponent.  # noqa: E501


        :return: The credit_acount of this TaxComponent.  # noqa: E501
        :rtype: GLAccount
        """
        return self._credit_acount

    @credit_acount.setter
    def credit_acount(self, credit_acount):
        """Sets the credit_acount of this TaxComponent.


        :param credit_acount: The credit_acount of this TaxComponent.  # noqa: E501
        :type: GLAccount
        """

        self._credit_acount = credit_acount

    @property
    def debit_account_type(self):
        """Gets the debit_account_type of this TaxComponent.  # noqa: E501


        :return: The debit_account_type of this TaxComponent.  # noqa: E501
        :rtype: int
        """
        return self._debit_account_type

    @debit_account_type.setter
    def debit_account_type(self, debit_account_type):
        """Sets the debit_account_type of this TaxComponent.


        :param debit_account_type: The debit_account_type of this TaxComponent.  # noqa: E501
        :type: int
        """

        self._debit_account_type = debit_account_type

    @property
    def debit_acount(self):
        """Gets the debit_acount of this TaxComponent.  # noqa: E501


        :return: The debit_acount of this TaxComponent.  # noqa: E501
        :rtype: GLAccount
        """
        return self._debit_acount

    @debit_acount.setter
    def debit_acount(self, debit_acount):
        """Sets the debit_acount of this TaxComponent.


        :param debit_acount: The debit_acount of this TaxComponent.  # noqa: E501
        :type: GLAccount
        """

        self._debit_acount = debit_acount

    @property
    def id(self):
        """Gets the id of this TaxComponent.  # noqa: E501


        :return: The id of this TaxComponent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxComponent.


        :param id: The id of this TaxComponent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this TaxComponent.  # noqa: E501


        :return: The last_modified_by of this TaxComponent.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this TaxComponent.


        :param last_modified_by: The last_modified_by of this TaxComponent.  # noqa: E501
        :type: int
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this TaxComponent.  # noqa: E501


        :return: The last_modified_date of this TaxComponent.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this TaxComponent.


        :param last_modified_date: The last_modified_date of this TaxComponent.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def new(self):
        """Gets the new of this TaxComponent.  # noqa: E501


        :return: The new of this TaxComponent.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this TaxComponent.


        :param new: The new of this TaxComponent.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def percentage(self):
        """Gets the percentage of this TaxComponent.  # noqa: E501


        :return: The percentage of this TaxComponent.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this TaxComponent.


        :param percentage: The percentage of this TaxComponent.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def tax_component_histories(self):
        """Gets the tax_component_histories of this TaxComponent.  # noqa: E501


        :return: The tax_component_histories of this TaxComponent.  # noqa: E501
        :rtype: list[TaxComponentHistory]
        """
        return self._tax_component_histories

    @tax_component_histories.setter
    def tax_component_histories(self, tax_component_histories):
        """Sets the tax_component_histories of this TaxComponent.


        :param tax_component_histories: The tax_component_histories of this TaxComponent.  # noqa: E501
        :type: list[TaxComponentHistory]
        """

        self._tax_component_histories = tax_component_histories

    @property
    def tax_group_mappings(self):
        """Gets the tax_group_mappings of this TaxComponent.  # noqa: E501


        :return: The tax_group_mappings of this TaxComponent.  # noqa: E501
        :rtype: list[TaxGroupMappings]
        """
        return self._tax_group_mappings

    @tax_group_mappings.setter
    def tax_group_mappings(self, tax_group_mappings):
        """Sets the tax_group_mappings of this TaxComponent.


        :param tax_group_mappings: The tax_group_mappings of this TaxComponent.  # noqa: E501
        :type: list[TaxGroupMappings]
        """

        self._tax_group_mappings = tax_group_mappings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
