# coding: utf-8

"""
    Apache Fineract REST API

    Apache Fineract is a secure, multi-tenanted microfinance platform. The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The https://cui.fineract.dev[reference app] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation. Until we complete the new REST API documentation you still have the legacy documentation available https://fineract.apache.org/legacy-docs/apiLive.htm[here]. Please check https://fineract.apache.org/docs/current[the Fineract documentation] for more information.  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: dev@fineract.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SavingsAccountTransactionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'account_no': 'str',
        'account_number': 'str',
        'amount': 'float',
        'amount_on_hold': 'bool',
        'amount_release': 'bool',
        'annual_fee': 'bool',
        'annual_fee_and_not_reversed': 'bool',
        'balance_end_date': 'date',
        'balance_number_of_days': 'int',
        'bank_number': 'str',
        'charge_transaction': 'bool',
        'charge_transaction_and_not_reversed': 'bool',
        'charges_paid_by_data': 'list[SavingsAccountChargesPaidByData]',
        'check_number': 'str',
        'credit': 'bool',
        'cumulative_balance': 'float',
        'currency': 'CurrencyData',
        '_date': 'date',
        'date_format': 'str',
        'debit': 'bool',
        'deposit': 'bool',
        'deposit_and_not_reversed': 'bool',
        'dividend_payout_and_not_reversed': 'bool',
        'end_of_balance_local_date': 'date',
        'entry_type': 'str',
        'fee_charge': 'bool',
        'fee_charge_and_not_reversed': 'bool',
        'id': 'int',
        'interest_posting': 'bool',
        'interest_posting_and_not_reversed': 'bool',
        'interested_posted_as_on': 'bool',
        'is_manual_transaction': 'bool',
        'is_reversal': 'bool',
        'lien_transaction': 'bool',
        'locale': 'str',
        'manual_transaction': 'bool',
        'modified_id': 'int',
        'not_reversed': 'bool',
        'note': 'str',
        'original_transaction_id': 'int',
        'outstanding_charge_amount': 'float',
        'overdraft_amount': 'float',
        'overdraft_interest_and_not_reversed': 'bool',
        'pay_charge': 'bool',
        'payment_detail_data': 'PaymentDetailData',
        'payment_type_id': 'int',
        'payment_type_options': 'list[PaymentTypeData]',
        'penalty_charge': 'bool',
        'penalty_charge_and_not_reversed': 'bool',
        'reason_for_block': 'str',
        'receipt_number': 'str',
        'ref_no': 'str',
        'release_transaction_id': 'int',
        'reversal_transaction': 'bool',
        'reversed': 'bool',
        'routing_code': 'str',
        'row_index': 'int',
        'running_balance': 'float',
        'savings_account_charges_paid': 'list[SavingsAccountChargesPaidByData]',
        'savings_account_id': 'int',
        'submitted_by_username': 'str',
        'submitted_on_date': 'date',
        'tax_details': 'list[TaxDetailsData]',
        'transaction_amount': 'float',
        'transaction_date': 'date',
        'transaction_type': 'SavingsAccountTransactionEnumData',
        'transfer': 'AccountTransferData',
        'waive_charge': 'bool',
        'waive_fee_charge': 'bool',
        'waive_fee_charge_and_not_reversed': 'bool',
        'waive_penalty_charge': 'bool',
        'waive_penalty_charge_and_not_reversed': 'bool',
        'with_hold_tax_and_not_reversed': 'bool',
        'withdrawal': 'bool',
        'withdrawal_fee_and_not_reversed': 'bool'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_no': 'accountNo',
        'account_number': 'accountNumber',
        'amount': 'amount',
        'amount_on_hold': 'amountOnHold',
        'amount_release': 'amountRelease',
        'annual_fee': 'annualFee',
        'annual_fee_and_not_reversed': 'annualFeeAndNotReversed',
        'balance_end_date': 'balanceEndDate',
        'balance_number_of_days': 'balanceNumberOfDays',
        'bank_number': 'bankNumber',
        'charge_transaction': 'chargeTransaction',
        'charge_transaction_and_not_reversed': 'chargeTransactionAndNotReversed',
        'charges_paid_by_data': 'chargesPaidByData',
        'check_number': 'checkNumber',
        'credit': 'credit',
        'cumulative_balance': 'cumulativeBalance',
        'currency': 'currency',
        '_date': 'date',
        'date_format': 'dateFormat',
        'debit': 'debit',
        'deposit': 'deposit',
        'deposit_and_not_reversed': 'depositAndNotReversed',
        'dividend_payout_and_not_reversed': 'dividendPayoutAndNotReversed',
        'end_of_balance_local_date': 'endOfBalanceLocalDate',
        'entry_type': 'entryType',
        'fee_charge': 'feeCharge',
        'fee_charge_and_not_reversed': 'feeChargeAndNotReversed',
        'id': 'id',
        'interest_posting': 'interestPosting',
        'interest_posting_and_not_reversed': 'interestPostingAndNotReversed',
        'interested_posted_as_on': 'interestedPostedAsOn',
        'is_manual_transaction': 'isManualTransaction',
        'is_reversal': 'isReversal',
        'lien_transaction': 'lienTransaction',
        'locale': 'locale',
        'manual_transaction': 'manualTransaction',
        'modified_id': 'modifiedId',
        'not_reversed': 'notReversed',
        'note': 'note',
        'original_transaction_id': 'originalTransactionId',
        'outstanding_charge_amount': 'outstandingChargeAmount',
        'overdraft_amount': 'overdraftAmount',
        'overdraft_interest_and_not_reversed': 'overdraftInterestAndNotReversed',
        'pay_charge': 'payCharge',
        'payment_detail_data': 'paymentDetailData',
        'payment_type_id': 'paymentTypeId',
        'payment_type_options': 'paymentTypeOptions',
        'penalty_charge': 'penaltyCharge',
        'penalty_charge_and_not_reversed': 'penaltyChargeAndNotReversed',
        'reason_for_block': 'reasonForBlock',
        'receipt_number': 'receiptNumber',
        'ref_no': 'refNo',
        'release_transaction_id': 'releaseTransactionId',
        'reversal_transaction': 'reversalTransaction',
        'reversed': 'reversed',
        'routing_code': 'routingCode',
        'row_index': 'rowIndex',
        'running_balance': 'runningBalance',
        'savings_account_charges_paid': 'savingsAccountChargesPaid',
        'savings_account_id': 'savingsAccountId',
        'submitted_by_username': 'submittedByUsername',
        'submitted_on_date': 'submittedOnDate',
        'tax_details': 'taxDetails',
        'transaction_amount': 'transactionAmount',
        'transaction_date': 'transactionDate',
        'transaction_type': 'transactionType',
        'transfer': 'transfer',
        'waive_charge': 'waiveCharge',
        'waive_fee_charge': 'waiveFeeCharge',
        'waive_fee_charge_and_not_reversed': 'waiveFeeChargeAndNotReversed',
        'waive_penalty_charge': 'waivePenaltyCharge',
        'waive_penalty_charge_and_not_reversed': 'waivePenaltyChargeAndNotReversed',
        'with_hold_tax_and_not_reversed': 'withHoldTaxAndNotReversed',
        'withdrawal': 'withdrawal',
        'withdrawal_fee_and_not_reversed': 'withdrawalFeeAndNotReversed'
    }

    def __init__(self, account_id=None, account_no=None, account_number=None, amount=None, amount_on_hold=None, amount_release=None, annual_fee=None, annual_fee_and_not_reversed=None, balance_end_date=None, balance_number_of_days=None, bank_number=None, charge_transaction=None, charge_transaction_and_not_reversed=None, charges_paid_by_data=None, check_number=None, credit=None, cumulative_balance=None, currency=None, _date=None, date_format=None, debit=None, deposit=None, deposit_and_not_reversed=None, dividend_payout_and_not_reversed=None, end_of_balance_local_date=None, entry_type=None, fee_charge=None, fee_charge_and_not_reversed=None, id=None, interest_posting=None, interest_posting_and_not_reversed=None, interested_posted_as_on=None, is_manual_transaction=None, is_reversal=None, lien_transaction=None, locale=None, manual_transaction=None, modified_id=None, not_reversed=None, note=None, original_transaction_id=None, outstanding_charge_amount=None, overdraft_amount=None, overdraft_interest_and_not_reversed=None, pay_charge=None, payment_detail_data=None, payment_type_id=None, payment_type_options=None, penalty_charge=None, penalty_charge_and_not_reversed=None, reason_for_block=None, receipt_number=None, ref_no=None, release_transaction_id=None, reversal_transaction=None, reversed=None, routing_code=None, row_index=None, running_balance=None, savings_account_charges_paid=None, savings_account_id=None, submitted_by_username=None, submitted_on_date=None, tax_details=None, transaction_amount=None, transaction_date=None, transaction_type=None, transfer=None, waive_charge=None, waive_fee_charge=None, waive_fee_charge_and_not_reversed=None, waive_penalty_charge=None, waive_penalty_charge_and_not_reversed=None, with_hold_tax_and_not_reversed=None, withdrawal=None, withdrawal_fee_and_not_reversed=None):  # noqa: E501
        """SavingsAccountTransactionData - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_no = None
        self._account_number = None
        self._amount = None
        self._amount_on_hold = None
        self._amount_release = None
        self._annual_fee = None
        self._annual_fee_and_not_reversed = None
        self._balance_end_date = None
        self._balance_number_of_days = None
        self._bank_number = None
        self._charge_transaction = None
        self._charge_transaction_and_not_reversed = None
        self._charges_paid_by_data = None
        self._check_number = None
        self._credit = None
        self._cumulative_balance = None
        self._currency = None
        self.__date = None
        self._date_format = None
        self._debit = None
        self._deposit = None
        self._deposit_and_not_reversed = None
        self._dividend_payout_and_not_reversed = None
        self._end_of_balance_local_date = None
        self._entry_type = None
        self._fee_charge = None
        self._fee_charge_and_not_reversed = None
        self._id = None
        self._interest_posting = None
        self._interest_posting_and_not_reversed = None
        self._interested_posted_as_on = None
        self._is_manual_transaction = None
        self._is_reversal = None
        self._lien_transaction = None
        self._locale = None
        self._manual_transaction = None
        self._modified_id = None
        self._not_reversed = None
        self._note = None
        self._original_transaction_id = None
        self._outstanding_charge_amount = None
        self._overdraft_amount = None
        self._overdraft_interest_and_not_reversed = None
        self._pay_charge = None
        self._payment_detail_data = None
        self._payment_type_id = None
        self._payment_type_options = None
        self._penalty_charge = None
        self._penalty_charge_and_not_reversed = None
        self._reason_for_block = None
        self._receipt_number = None
        self._ref_no = None
        self._release_transaction_id = None
        self._reversal_transaction = None
        self._reversed = None
        self._routing_code = None
        self._row_index = None
        self._running_balance = None
        self._savings_account_charges_paid = None
        self._savings_account_id = None
        self._submitted_by_username = None
        self._submitted_on_date = None
        self._tax_details = None
        self._transaction_amount = None
        self._transaction_date = None
        self._transaction_type = None
        self._transfer = None
        self._waive_charge = None
        self._waive_fee_charge = None
        self._waive_fee_charge_and_not_reversed = None
        self._waive_penalty_charge = None
        self._waive_penalty_charge_and_not_reversed = None
        self._with_hold_tax_and_not_reversed = None
        self._withdrawal = None
        self._withdrawal_fee_and_not_reversed = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_no is not None:
            self.account_no = account_no
        if account_number is not None:
            self.account_number = account_number
        if amount is not None:
            self.amount = amount
        if amount_on_hold is not None:
            self.amount_on_hold = amount_on_hold
        if amount_release is not None:
            self.amount_release = amount_release
        if annual_fee is not None:
            self.annual_fee = annual_fee
        if annual_fee_and_not_reversed is not None:
            self.annual_fee_and_not_reversed = annual_fee_and_not_reversed
        if balance_end_date is not None:
            self.balance_end_date = balance_end_date
        if balance_number_of_days is not None:
            self.balance_number_of_days = balance_number_of_days
        if bank_number is not None:
            self.bank_number = bank_number
        if charge_transaction is not None:
            self.charge_transaction = charge_transaction
        if charge_transaction_and_not_reversed is not None:
            self.charge_transaction_and_not_reversed = charge_transaction_and_not_reversed
        if charges_paid_by_data is not None:
            self.charges_paid_by_data = charges_paid_by_data
        if check_number is not None:
            self.check_number = check_number
        if credit is not None:
            self.credit = credit
        if cumulative_balance is not None:
            self.cumulative_balance = cumulative_balance
        if currency is not None:
            self.currency = currency
        if _date is not None:
            self._date = _date
        if date_format is not None:
            self.date_format = date_format
        if debit is not None:
            self.debit = debit
        if deposit is not None:
            self.deposit = deposit
        if deposit_and_not_reversed is not None:
            self.deposit_and_not_reversed = deposit_and_not_reversed
        if dividend_payout_and_not_reversed is not None:
            self.dividend_payout_and_not_reversed = dividend_payout_and_not_reversed
        if end_of_balance_local_date is not None:
            self.end_of_balance_local_date = end_of_balance_local_date
        if entry_type is not None:
            self.entry_type = entry_type
        if fee_charge is not None:
            self.fee_charge = fee_charge
        if fee_charge_and_not_reversed is not None:
            self.fee_charge_and_not_reversed = fee_charge_and_not_reversed
        if id is not None:
            self.id = id
        if interest_posting is not None:
            self.interest_posting = interest_posting
        if interest_posting_and_not_reversed is not None:
            self.interest_posting_and_not_reversed = interest_posting_and_not_reversed
        if interested_posted_as_on is not None:
            self.interested_posted_as_on = interested_posted_as_on
        if is_manual_transaction is not None:
            self.is_manual_transaction = is_manual_transaction
        if is_reversal is not None:
            self.is_reversal = is_reversal
        if lien_transaction is not None:
            self.lien_transaction = lien_transaction
        if locale is not None:
            self.locale = locale
        if manual_transaction is not None:
            self.manual_transaction = manual_transaction
        if modified_id is not None:
            self.modified_id = modified_id
        if not_reversed is not None:
            self.not_reversed = not_reversed
        if note is not None:
            self.note = note
        if original_transaction_id is not None:
            self.original_transaction_id = original_transaction_id
        if outstanding_charge_amount is not None:
            self.outstanding_charge_amount = outstanding_charge_amount
        if overdraft_amount is not None:
            self.overdraft_amount = overdraft_amount
        if overdraft_interest_and_not_reversed is not None:
            self.overdraft_interest_and_not_reversed = overdraft_interest_and_not_reversed
        if pay_charge is not None:
            self.pay_charge = pay_charge
        if payment_detail_data is not None:
            self.payment_detail_data = payment_detail_data
        if payment_type_id is not None:
            self.payment_type_id = payment_type_id
        if payment_type_options is not None:
            self.payment_type_options = payment_type_options
        if penalty_charge is not None:
            self.penalty_charge = penalty_charge
        if penalty_charge_and_not_reversed is not None:
            self.penalty_charge_and_not_reversed = penalty_charge_and_not_reversed
        if reason_for_block is not None:
            self.reason_for_block = reason_for_block
        if receipt_number is not None:
            self.receipt_number = receipt_number
        if ref_no is not None:
            self.ref_no = ref_no
        if release_transaction_id is not None:
            self.release_transaction_id = release_transaction_id
        if reversal_transaction is not None:
            self.reversal_transaction = reversal_transaction
        if reversed is not None:
            self.reversed = reversed
        if routing_code is not None:
            self.routing_code = routing_code
        if row_index is not None:
            self.row_index = row_index
        if running_balance is not None:
            self.running_balance = running_balance
        if savings_account_charges_paid is not None:
            self.savings_account_charges_paid = savings_account_charges_paid
        if savings_account_id is not None:
            self.savings_account_id = savings_account_id
        if submitted_by_username is not None:
            self.submitted_by_username = submitted_by_username
        if submitted_on_date is not None:
            self.submitted_on_date = submitted_on_date
        if tax_details is not None:
            self.tax_details = tax_details
        if transaction_amount is not None:
            self.transaction_amount = transaction_amount
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if transfer is not None:
            self.transfer = transfer
        if waive_charge is not None:
            self.waive_charge = waive_charge
        if waive_fee_charge is not None:
            self.waive_fee_charge = waive_fee_charge
        if waive_fee_charge_and_not_reversed is not None:
            self.waive_fee_charge_and_not_reversed = waive_fee_charge_and_not_reversed
        if waive_penalty_charge is not None:
            self.waive_penalty_charge = waive_penalty_charge
        if waive_penalty_charge_and_not_reversed is not None:
            self.waive_penalty_charge_and_not_reversed = waive_penalty_charge_and_not_reversed
        if with_hold_tax_and_not_reversed is not None:
            self.with_hold_tax_and_not_reversed = with_hold_tax_and_not_reversed
        if withdrawal is not None:
            self.withdrawal = withdrawal
        if withdrawal_fee_and_not_reversed is not None:
            self.withdrawal_fee_and_not_reversed = withdrawal_fee_and_not_reversed

    @property
    def account_id(self):
        """Gets the account_id of this SavingsAccountTransactionData.  # noqa: E501


        :return: The account_id of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SavingsAccountTransactionData.


        :param account_id: The account_id of this SavingsAccountTransactionData.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def account_no(self):
        """Gets the account_no of this SavingsAccountTransactionData.  # noqa: E501


        :return: The account_no of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._account_no

    @account_no.setter
    def account_no(self, account_no):
        """Sets the account_no of this SavingsAccountTransactionData.


        :param account_no: The account_no of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._account_no = account_no

    @property
    def account_number(self):
        """Gets the account_number of this SavingsAccountTransactionData.  # noqa: E501


        :return: The account_number of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this SavingsAccountTransactionData.


        :param account_number: The account_number of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def amount(self):
        """Gets the amount of this SavingsAccountTransactionData.  # noqa: E501


        :return: The amount of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SavingsAccountTransactionData.


        :param amount: The amount of this SavingsAccountTransactionData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_on_hold(self):
        """Gets the amount_on_hold of this SavingsAccountTransactionData.  # noqa: E501


        :return: The amount_on_hold of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._amount_on_hold

    @amount_on_hold.setter
    def amount_on_hold(self, amount_on_hold):
        """Sets the amount_on_hold of this SavingsAccountTransactionData.


        :param amount_on_hold: The amount_on_hold of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._amount_on_hold = amount_on_hold

    @property
    def amount_release(self):
        """Gets the amount_release of this SavingsAccountTransactionData.  # noqa: E501


        :return: The amount_release of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._amount_release

    @amount_release.setter
    def amount_release(self, amount_release):
        """Sets the amount_release of this SavingsAccountTransactionData.


        :param amount_release: The amount_release of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._amount_release = amount_release

    @property
    def annual_fee(self):
        """Gets the annual_fee of this SavingsAccountTransactionData.  # noqa: E501


        :return: The annual_fee of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._annual_fee

    @annual_fee.setter
    def annual_fee(self, annual_fee):
        """Sets the annual_fee of this SavingsAccountTransactionData.


        :param annual_fee: The annual_fee of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._annual_fee = annual_fee

    @property
    def annual_fee_and_not_reversed(self):
        """Gets the annual_fee_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The annual_fee_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._annual_fee_and_not_reversed

    @annual_fee_and_not_reversed.setter
    def annual_fee_and_not_reversed(self, annual_fee_and_not_reversed):
        """Sets the annual_fee_and_not_reversed of this SavingsAccountTransactionData.


        :param annual_fee_and_not_reversed: The annual_fee_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._annual_fee_and_not_reversed = annual_fee_and_not_reversed

    @property
    def balance_end_date(self):
        """Gets the balance_end_date of this SavingsAccountTransactionData.  # noqa: E501


        :return: The balance_end_date of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: date
        """
        return self._balance_end_date

    @balance_end_date.setter
    def balance_end_date(self, balance_end_date):
        """Sets the balance_end_date of this SavingsAccountTransactionData.


        :param balance_end_date: The balance_end_date of this SavingsAccountTransactionData.  # noqa: E501
        :type: date
        """

        self._balance_end_date = balance_end_date

    @property
    def balance_number_of_days(self):
        """Gets the balance_number_of_days of this SavingsAccountTransactionData.  # noqa: E501


        :return: The balance_number_of_days of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._balance_number_of_days

    @balance_number_of_days.setter
    def balance_number_of_days(self, balance_number_of_days):
        """Sets the balance_number_of_days of this SavingsAccountTransactionData.


        :param balance_number_of_days: The balance_number_of_days of this SavingsAccountTransactionData.  # noqa: E501
        :type: int
        """

        self._balance_number_of_days = balance_number_of_days

    @property
    def bank_number(self):
        """Gets the bank_number of this SavingsAccountTransactionData.  # noqa: E501


        :return: The bank_number of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._bank_number

    @bank_number.setter
    def bank_number(self, bank_number):
        """Sets the bank_number of this SavingsAccountTransactionData.


        :param bank_number: The bank_number of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._bank_number = bank_number

    @property
    def charge_transaction(self):
        """Gets the charge_transaction of this SavingsAccountTransactionData.  # noqa: E501


        :return: The charge_transaction of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._charge_transaction

    @charge_transaction.setter
    def charge_transaction(self, charge_transaction):
        """Sets the charge_transaction of this SavingsAccountTransactionData.


        :param charge_transaction: The charge_transaction of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._charge_transaction = charge_transaction

    @property
    def charge_transaction_and_not_reversed(self):
        """Gets the charge_transaction_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The charge_transaction_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._charge_transaction_and_not_reversed

    @charge_transaction_and_not_reversed.setter
    def charge_transaction_and_not_reversed(self, charge_transaction_and_not_reversed):
        """Sets the charge_transaction_and_not_reversed of this SavingsAccountTransactionData.


        :param charge_transaction_and_not_reversed: The charge_transaction_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._charge_transaction_and_not_reversed = charge_transaction_and_not_reversed

    @property
    def charges_paid_by_data(self):
        """Gets the charges_paid_by_data of this SavingsAccountTransactionData.  # noqa: E501


        :return: The charges_paid_by_data of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: list[SavingsAccountChargesPaidByData]
        """
        return self._charges_paid_by_data

    @charges_paid_by_data.setter
    def charges_paid_by_data(self, charges_paid_by_data):
        """Sets the charges_paid_by_data of this SavingsAccountTransactionData.


        :param charges_paid_by_data: The charges_paid_by_data of this SavingsAccountTransactionData.  # noqa: E501
        :type: list[SavingsAccountChargesPaidByData]
        """

        self._charges_paid_by_data = charges_paid_by_data

    @property
    def check_number(self):
        """Gets the check_number of this SavingsAccountTransactionData.  # noqa: E501


        :return: The check_number of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this SavingsAccountTransactionData.


        :param check_number: The check_number of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._check_number = check_number

    @property
    def credit(self):
        """Gets the credit of this SavingsAccountTransactionData.  # noqa: E501


        :return: The credit of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this SavingsAccountTransactionData.


        :param credit: The credit of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._credit = credit

    @property
    def cumulative_balance(self):
        """Gets the cumulative_balance of this SavingsAccountTransactionData.  # noqa: E501


        :return: The cumulative_balance of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_balance

    @cumulative_balance.setter
    def cumulative_balance(self, cumulative_balance):
        """Sets the cumulative_balance of this SavingsAccountTransactionData.


        :param cumulative_balance: The cumulative_balance of this SavingsAccountTransactionData.  # noqa: E501
        :type: float
        """

        self._cumulative_balance = cumulative_balance

    @property
    def currency(self):
        """Gets the currency of this SavingsAccountTransactionData.  # noqa: E501


        :return: The currency of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: CurrencyData
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SavingsAccountTransactionData.


        :param currency: The currency of this SavingsAccountTransactionData.  # noqa: E501
        :type: CurrencyData
        """

        self._currency = currency

    @property
    def _date(self):
        """Gets the _date of this SavingsAccountTransactionData.  # noqa: E501


        :return: The _date of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SavingsAccountTransactionData.


        :param _date: The _date of this SavingsAccountTransactionData.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def date_format(self):
        """Gets the date_format of this SavingsAccountTransactionData.  # noqa: E501


        :return: The date_format of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this SavingsAccountTransactionData.


        :param date_format: The date_format of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def debit(self):
        """Gets the debit of this SavingsAccountTransactionData.  # noqa: E501


        :return: The debit of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._debit

    @debit.setter
    def debit(self, debit):
        """Sets the debit of this SavingsAccountTransactionData.


        :param debit: The debit of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._debit = debit

    @property
    def deposit(self):
        """Gets the deposit of this SavingsAccountTransactionData.  # noqa: E501


        :return: The deposit of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this SavingsAccountTransactionData.


        :param deposit: The deposit of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._deposit = deposit

    @property
    def deposit_and_not_reversed(self):
        """Gets the deposit_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The deposit_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._deposit_and_not_reversed

    @deposit_and_not_reversed.setter
    def deposit_and_not_reversed(self, deposit_and_not_reversed):
        """Sets the deposit_and_not_reversed of this SavingsAccountTransactionData.


        :param deposit_and_not_reversed: The deposit_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._deposit_and_not_reversed = deposit_and_not_reversed

    @property
    def dividend_payout_and_not_reversed(self):
        """Gets the dividend_payout_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The dividend_payout_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._dividend_payout_and_not_reversed

    @dividend_payout_and_not_reversed.setter
    def dividend_payout_and_not_reversed(self, dividend_payout_and_not_reversed):
        """Sets the dividend_payout_and_not_reversed of this SavingsAccountTransactionData.


        :param dividend_payout_and_not_reversed: The dividend_payout_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._dividend_payout_and_not_reversed = dividend_payout_and_not_reversed

    @property
    def end_of_balance_local_date(self):
        """Gets the end_of_balance_local_date of this SavingsAccountTransactionData.  # noqa: E501


        :return: The end_of_balance_local_date of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: date
        """
        return self._end_of_balance_local_date

    @end_of_balance_local_date.setter
    def end_of_balance_local_date(self, end_of_balance_local_date):
        """Sets the end_of_balance_local_date of this SavingsAccountTransactionData.


        :param end_of_balance_local_date: The end_of_balance_local_date of this SavingsAccountTransactionData.  # noqa: E501
        :type: date
        """

        self._end_of_balance_local_date = end_of_balance_local_date

    @property
    def entry_type(self):
        """Gets the entry_type of this SavingsAccountTransactionData.  # noqa: E501


        :return: The entry_type of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this SavingsAccountTransactionData.


        :param entry_type: The entry_type of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREDIT", "DEBIT"]  # noqa: E501
        if entry_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entry_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entry_type, allowed_values)
            )

        self._entry_type = entry_type

    @property
    def fee_charge(self):
        """Gets the fee_charge of this SavingsAccountTransactionData.  # noqa: E501


        :return: The fee_charge of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._fee_charge

    @fee_charge.setter
    def fee_charge(self, fee_charge):
        """Sets the fee_charge of this SavingsAccountTransactionData.


        :param fee_charge: The fee_charge of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._fee_charge = fee_charge

    @property
    def fee_charge_and_not_reversed(self):
        """Gets the fee_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The fee_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._fee_charge_and_not_reversed

    @fee_charge_and_not_reversed.setter
    def fee_charge_and_not_reversed(self, fee_charge_and_not_reversed):
        """Sets the fee_charge_and_not_reversed of this SavingsAccountTransactionData.


        :param fee_charge_and_not_reversed: The fee_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._fee_charge_and_not_reversed = fee_charge_and_not_reversed

    @property
    def id(self):
        """Gets the id of this SavingsAccountTransactionData.  # noqa: E501


        :return: The id of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavingsAccountTransactionData.


        :param id: The id of this SavingsAccountTransactionData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interest_posting(self):
        """Gets the interest_posting of this SavingsAccountTransactionData.  # noqa: E501


        :return: The interest_posting of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._interest_posting

    @interest_posting.setter
    def interest_posting(self, interest_posting):
        """Sets the interest_posting of this SavingsAccountTransactionData.


        :param interest_posting: The interest_posting of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._interest_posting = interest_posting

    @property
    def interest_posting_and_not_reversed(self):
        """Gets the interest_posting_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The interest_posting_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._interest_posting_and_not_reversed

    @interest_posting_and_not_reversed.setter
    def interest_posting_and_not_reversed(self, interest_posting_and_not_reversed):
        """Sets the interest_posting_and_not_reversed of this SavingsAccountTransactionData.


        :param interest_posting_and_not_reversed: The interest_posting_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._interest_posting_and_not_reversed = interest_posting_and_not_reversed

    @property
    def interested_posted_as_on(self):
        """Gets the interested_posted_as_on of this SavingsAccountTransactionData.  # noqa: E501


        :return: The interested_posted_as_on of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._interested_posted_as_on

    @interested_posted_as_on.setter
    def interested_posted_as_on(self, interested_posted_as_on):
        """Sets the interested_posted_as_on of this SavingsAccountTransactionData.


        :param interested_posted_as_on: The interested_posted_as_on of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._interested_posted_as_on = interested_posted_as_on

    @property
    def is_manual_transaction(self):
        """Gets the is_manual_transaction of this SavingsAccountTransactionData.  # noqa: E501


        :return: The is_manual_transaction of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual_transaction

    @is_manual_transaction.setter
    def is_manual_transaction(self, is_manual_transaction):
        """Sets the is_manual_transaction of this SavingsAccountTransactionData.


        :param is_manual_transaction: The is_manual_transaction of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._is_manual_transaction = is_manual_transaction

    @property
    def is_reversal(self):
        """Gets the is_reversal of this SavingsAccountTransactionData.  # noqa: E501


        :return: The is_reversal of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._is_reversal

    @is_reversal.setter
    def is_reversal(self, is_reversal):
        """Sets the is_reversal of this SavingsAccountTransactionData.


        :param is_reversal: The is_reversal of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._is_reversal = is_reversal

    @property
    def lien_transaction(self):
        """Gets the lien_transaction of this SavingsAccountTransactionData.  # noqa: E501


        :return: The lien_transaction of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._lien_transaction

    @lien_transaction.setter
    def lien_transaction(self, lien_transaction):
        """Sets the lien_transaction of this SavingsAccountTransactionData.


        :param lien_transaction: The lien_transaction of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._lien_transaction = lien_transaction

    @property
    def locale(self):
        """Gets the locale of this SavingsAccountTransactionData.  # noqa: E501


        :return: The locale of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this SavingsAccountTransactionData.


        :param locale: The locale of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def manual_transaction(self):
        """Gets the manual_transaction of this SavingsAccountTransactionData.  # noqa: E501


        :return: The manual_transaction of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._manual_transaction

    @manual_transaction.setter
    def manual_transaction(self, manual_transaction):
        """Sets the manual_transaction of this SavingsAccountTransactionData.


        :param manual_transaction: The manual_transaction of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._manual_transaction = manual_transaction

    @property
    def modified_id(self):
        """Gets the modified_id of this SavingsAccountTransactionData.  # noqa: E501


        :return: The modified_id of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._modified_id

    @modified_id.setter
    def modified_id(self, modified_id):
        """Sets the modified_id of this SavingsAccountTransactionData.


        :param modified_id: The modified_id of this SavingsAccountTransactionData.  # noqa: E501
        :type: int
        """

        self._modified_id = modified_id

    @property
    def not_reversed(self):
        """Gets the not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._not_reversed

    @not_reversed.setter
    def not_reversed(self, not_reversed):
        """Sets the not_reversed of this SavingsAccountTransactionData.


        :param not_reversed: The not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._not_reversed = not_reversed

    @property
    def note(self):
        """Gets the note of this SavingsAccountTransactionData.  # noqa: E501


        :return: The note of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this SavingsAccountTransactionData.


        :param note: The note of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def original_transaction_id(self):
        """Gets the original_transaction_id of this SavingsAccountTransactionData.  # noqa: E501


        :return: The original_transaction_id of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._original_transaction_id

    @original_transaction_id.setter
    def original_transaction_id(self, original_transaction_id):
        """Sets the original_transaction_id of this SavingsAccountTransactionData.


        :param original_transaction_id: The original_transaction_id of this SavingsAccountTransactionData.  # noqa: E501
        :type: int
        """

        self._original_transaction_id = original_transaction_id

    @property
    def outstanding_charge_amount(self):
        """Gets the outstanding_charge_amount of this SavingsAccountTransactionData.  # noqa: E501


        :return: The outstanding_charge_amount of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_charge_amount

    @outstanding_charge_amount.setter
    def outstanding_charge_amount(self, outstanding_charge_amount):
        """Sets the outstanding_charge_amount of this SavingsAccountTransactionData.


        :param outstanding_charge_amount: The outstanding_charge_amount of this SavingsAccountTransactionData.  # noqa: E501
        :type: float
        """

        self._outstanding_charge_amount = outstanding_charge_amount

    @property
    def overdraft_amount(self):
        """Gets the overdraft_amount of this SavingsAccountTransactionData.  # noqa: E501


        :return: The overdraft_amount of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: float
        """
        return self._overdraft_amount

    @overdraft_amount.setter
    def overdraft_amount(self, overdraft_amount):
        """Sets the overdraft_amount of this SavingsAccountTransactionData.


        :param overdraft_amount: The overdraft_amount of this SavingsAccountTransactionData.  # noqa: E501
        :type: float
        """

        self._overdraft_amount = overdraft_amount

    @property
    def overdraft_interest_and_not_reversed(self):
        """Gets the overdraft_interest_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The overdraft_interest_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._overdraft_interest_and_not_reversed

    @overdraft_interest_and_not_reversed.setter
    def overdraft_interest_and_not_reversed(self, overdraft_interest_and_not_reversed):
        """Sets the overdraft_interest_and_not_reversed of this SavingsAccountTransactionData.


        :param overdraft_interest_and_not_reversed: The overdraft_interest_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._overdraft_interest_and_not_reversed = overdraft_interest_and_not_reversed

    @property
    def pay_charge(self):
        """Gets the pay_charge of this SavingsAccountTransactionData.  # noqa: E501


        :return: The pay_charge of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._pay_charge

    @pay_charge.setter
    def pay_charge(self, pay_charge):
        """Sets the pay_charge of this SavingsAccountTransactionData.


        :param pay_charge: The pay_charge of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._pay_charge = pay_charge

    @property
    def payment_detail_data(self):
        """Gets the payment_detail_data of this SavingsAccountTransactionData.  # noqa: E501


        :return: The payment_detail_data of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: PaymentDetailData
        """
        return self._payment_detail_data

    @payment_detail_data.setter
    def payment_detail_data(self, payment_detail_data):
        """Sets the payment_detail_data of this SavingsAccountTransactionData.


        :param payment_detail_data: The payment_detail_data of this SavingsAccountTransactionData.  # noqa: E501
        :type: PaymentDetailData
        """

        self._payment_detail_data = payment_detail_data

    @property
    def payment_type_id(self):
        """Gets the payment_type_id of this SavingsAccountTransactionData.  # noqa: E501


        :return: The payment_type_id of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._payment_type_id

    @payment_type_id.setter
    def payment_type_id(self, payment_type_id):
        """Sets the payment_type_id of this SavingsAccountTransactionData.


        :param payment_type_id: The payment_type_id of this SavingsAccountTransactionData.  # noqa: E501
        :type: int
        """

        self._payment_type_id = payment_type_id

    @property
    def payment_type_options(self):
        """Gets the payment_type_options of this SavingsAccountTransactionData.  # noqa: E501


        :return: The payment_type_options of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: list[PaymentTypeData]
        """
        return self._payment_type_options

    @payment_type_options.setter
    def payment_type_options(self, payment_type_options):
        """Sets the payment_type_options of this SavingsAccountTransactionData.


        :param payment_type_options: The payment_type_options of this SavingsAccountTransactionData.  # noqa: E501
        :type: list[PaymentTypeData]
        """

        self._payment_type_options = payment_type_options

    @property
    def penalty_charge(self):
        """Gets the penalty_charge of this SavingsAccountTransactionData.  # noqa: E501


        :return: The penalty_charge of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._penalty_charge

    @penalty_charge.setter
    def penalty_charge(self, penalty_charge):
        """Sets the penalty_charge of this SavingsAccountTransactionData.


        :param penalty_charge: The penalty_charge of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._penalty_charge = penalty_charge

    @property
    def penalty_charge_and_not_reversed(self):
        """Gets the penalty_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The penalty_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._penalty_charge_and_not_reversed

    @penalty_charge_and_not_reversed.setter
    def penalty_charge_and_not_reversed(self, penalty_charge_and_not_reversed):
        """Sets the penalty_charge_and_not_reversed of this SavingsAccountTransactionData.


        :param penalty_charge_and_not_reversed: The penalty_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._penalty_charge_and_not_reversed = penalty_charge_and_not_reversed

    @property
    def reason_for_block(self):
        """Gets the reason_for_block of this SavingsAccountTransactionData.  # noqa: E501


        :return: The reason_for_block of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_block

    @reason_for_block.setter
    def reason_for_block(self, reason_for_block):
        """Sets the reason_for_block of this SavingsAccountTransactionData.


        :param reason_for_block: The reason_for_block of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._reason_for_block = reason_for_block

    @property
    def receipt_number(self):
        """Gets the receipt_number of this SavingsAccountTransactionData.  # noqa: E501


        :return: The receipt_number of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._receipt_number

    @receipt_number.setter
    def receipt_number(self, receipt_number):
        """Sets the receipt_number of this SavingsAccountTransactionData.


        :param receipt_number: The receipt_number of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._receipt_number = receipt_number

    @property
    def ref_no(self):
        """Gets the ref_no of this SavingsAccountTransactionData.  # noqa: E501


        :return: The ref_no of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._ref_no

    @ref_no.setter
    def ref_no(self, ref_no):
        """Sets the ref_no of this SavingsAccountTransactionData.


        :param ref_no: The ref_no of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._ref_no = ref_no

    @property
    def release_transaction_id(self):
        """Gets the release_transaction_id of this SavingsAccountTransactionData.  # noqa: E501


        :return: The release_transaction_id of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._release_transaction_id

    @release_transaction_id.setter
    def release_transaction_id(self, release_transaction_id):
        """Sets the release_transaction_id of this SavingsAccountTransactionData.


        :param release_transaction_id: The release_transaction_id of this SavingsAccountTransactionData.  # noqa: E501
        :type: int
        """

        self._release_transaction_id = release_transaction_id

    @property
    def reversal_transaction(self):
        """Gets the reversal_transaction of this SavingsAccountTransactionData.  # noqa: E501


        :return: The reversal_transaction of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._reversal_transaction

    @reversal_transaction.setter
    def reversal_transaction(self, reversal_transaction):
        """Sets the reversal_transaction of this SavingsAccountTransactionData.


        :param reversal_transaction: The reversal_transaction of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._reversal_transaction = reversal_transaction

    @property
    def reversed(self):
        """Gets the reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._reversed

    @reversed.setter
    def reversed(self, reversed):
        """Sets the reversed of this SavingsAccountTransactionData.


        :param reversed: The reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._reversed = reversed

    @property
    def routing_code(self):
        """Gets the routing_code of this SavingsAccountTransactionData.  # noqa: E501


        :return: The routing_code of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._routing_code

    @routing_code.setter
    def routing_code(self, routing_code):
        """Sets the routing_code of this SavingsAccountTransactionData.


        :param routing_code: The routing_code of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._routing_code = routing_code

    @property
    def row_index(self):
        """Gets the row_index of this SavingsAccountTransactionData.  # noqa: E501


        :return: The row_index of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._row_index

    @row_index.setter
    def row_index(self, row_index):
        """Sets the row_index of this SavingsAccountTransactionData.


        :param row_index: The row_index of this SavingsAccountTransactionData.  # noqa: E501
        :type: int
        """

        self._row_index = row_index

    @property
    def running_balance(self):
        """Gets the running_balance of this SavingsAccountTransactionData.  # noqa: E501


        :return: The running_balance of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: float
        """
        return self._running_balance

    @running_balance.setter
    def running_balance(self, running_balance):
        """Sets the running_balance of this SavingsAccountTransactionData.


        :param running_balance: The running_balance of this SavingsAccountTransactionData.  # noqa: E501
        :type: float
        """

        self._running_balance = running_balance

    @property
    def savings_account_charges_paid(self):
        """Gets the savings_account_charges_paid of this SavingsAccountTransactionData.  # noqa: E501


        :return: The savings_account_charges_paid of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: list[SavingsAccountChargesPaidByData]
        """
        return self._savings_account_charges_paid

    @savings_account_charges_paid.setter
    def savings_account_charges_paid(self, savings_account_charges_paid):
        """Sets the savings_account_charges_paid of this SavingsAccountTransactionData.


        :param savings_account_charges_paid: The savings_account_charges_paid of this SavingsAccountTransactionData.  # noqa: E501
        :type: list[SavingsAccountChargesPaidByData]
        """

        self._savings_account_charges_paid = savings_account_charges_paid

    @property
    def savings_account_id(self):
        """Gets the savings_account_id of this SavingsAccountTransactionData.  # noqa: E501


        :return: The savings_account_id of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: int
        """
        return self._savings_account_id

    @savings_account_id.setter
    def savings_account_id(self, savings_account_id):
        """Sets the savings_account_id of this SavingsAccountTransactionData.


        :param savings_account_id: The savings_account_id of this SavingsAccountTransactionData.  # noqa: E501
        :type: int
        """

        self._savings_account_id = savings_account_id

    @property
    def submitted_by_username(self):
        """Gets the submitted_by_username of this SavingsAccountTransactionData.  # noqa: E501


        :return: The submitted_by_username of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._submitted_by_username

    @submitted_by_username.setter
    def submitted_by_username(self, submitted_by_username):
        """Sets the submitted_by_username of this SavingsAccountTransactionData.


        :param submitted_by_username: The submitted_by_username of this SavingsAccountTransactionData.  # noqa: E501
        :type: str
        """

        self._submitted_by_username = submitted_by_username

    @property
    def submitted_on_date(self):
        """Gets the submitted_on_date of this SavingsAccountTransactionData.  # noqa: E501


        :return: The submitted_on_date of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: date
        """
        return self._submitted_on_date

    @submitted_on_date.setter
    def submitted_on_date(self, submitted_on_date):
        """Sets the submitted_on_date of this SavingsAccountTransactionData.


        :param submitted_on_date: The submitted_on_date of this SavingsAccountTransactionData.  # noqa: E501
        :type: date
        """

        self._submitted_on_date = submitted_on_date

    @property
    def tax_details(self):
        """Gets the tax_details of this SavingsAccountTransactionData.  # noqa: E501


        :return: The tax_details of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: list[TaxDetailsData]
        """
        return self._tax_details

    @tax_details.setter
    def tax_details(self, tax_details):
        """Sets the tax_details of this SavingsAccountTransactionData.


        :param tax_details: The tax_details of this SavingsAccountTransactionData.  # noqa: E501
        :type: list[TaxDetailsData]
        """

        self._tax_details = tax_details

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this SavingsAccountTransactionData.  # noqa: E501


        :return: The transaction_amount of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this SavingsAccountTransactionData.


        :param transaction_amount: The transaction_amount of this SavingsAccountTransactionData.  # noqa: E501
        :type: float
        """

        self._transaction_amount = transaction_amount

    @property
    def transaction_date(self):
        """Gets the transaction_date of this SavingsAccountTransactionData.  # noqa: E501


        :return: The transaction_date of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: date
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this SavingsAccountTransactionData.


        :param transaction_date: The transaction_date of this SavingsAccountTransactionData.  # noqa: E501
        :type: date
        """

        self._transaction_date = transaction_date

    @property
    def transaction_type(self):
        """Gets the transaction_type of this SavingsAccountTransactionData.  # noqa: E501


        :return: The transaction_type of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: SavingsAccountTransactionEnumData
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this SavingsAccountTransactionData.


        :param transaction_type: The transaction_type of this SavingsAccountTransactionData.  # noqa: E501
        :type: SavingsAccountTransactionEnumData
        """

        self._transaction_type = transaction_type

    @property
    def transfer(self):
        """Gets the transfer of this SavingsAccountTransactionData.  # noqa: E501


        :return: The transfer of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: AccountTransferData
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this SavingsAccountTransactionData.


        :param transfer: The transfer of this SavingsAccountTransactionData.  # noqa: E501
        :type: AccountTransferData
        """

        self._transfer = transfer

    @property
    def waive_charge(self):
        """Gets the waive_charge of this SavingsAccountTransactionData.  # noqa: E501


        :return: The waive_charge of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._waive_charge

    @waive_charge.setter
    def waive_charge(self, waive_charge):
        """Sets the waive_charge of this SavingsAccountTransactionData.


        :param waive_charge: The waive_charge of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._waive_charge = waive_charge

    @property
    def waive_fee_charge(self):
        """Gets the waive_fee_charge of this SavingsAccountTransactionData.  # noqa: E501


        :return: The waive_fee_charge of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._waive_fee_charge

    @waive_fee_charge.setter
    def waive_fee_charge(self, waive_fee_charge):
        """Sets the waive_fee_charge of this SavingsAccountTransactionData.


        :param waive_fee_charge: The waive_fee_charge of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._waive_fee_charge = waive_fee_charge

    @property
    def waive_fee_charge_and_not_reversed(self):
        """Gets the waive_fee_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The waive_fee_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._waive_fee_charge_and_not_reversed

    @waive_fee_charge_and_not_reversed.setter
    def waive_fee_charge_and_not_reversed(self, waive_fee_charge_and_not_reversed):
        """Sets the waive_fee_charge_and_not_reversed of this SavingsAccountTransactionData.


        :param waive_fee_charge_and_not_reversed: The waive_fee_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._waive_fee_charge_and_not_reversed = waive_fee_charge_and_not_reversed

    @property
    def waive_penalty_charge(self):
        """Gets the waive_penalty_charge of this SavingsAccountTransactionData.  # noqa: E501


        :return: The waive_penalty_charge of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._waive_penalty_charge

    @waive_penalty_charge.setter
    def waive_penalty_charge(self, waive_penalty_charge):
        """Sets the waive_penalty_charge of this SavingsAccountTransactionData.


        :param waive_penalty_charge: The waive_penalty_charge of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._waive_penalty_charge = waive_penalty_charge

    @property
    def waive_penalty_charge_and_not_reversed(self):
        """Gets the waive_penalty_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The waive_penalty_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._waive_penalty_charge_and_not_reversed

    @waive_penalty_charge_and_not_reversed.setter
    def waive_penalty_charge_and_not_reversed(self, waive_penalty_charge_and_not_reversed):
        """Sets the waive_penalty_charge_and_not_reversed of this SavingsAccountTransactionData.


        :param waive_penalty_charge_and_not_reversed: The waive_penalty_charge_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._waive_penalty_charge_and_not_reversed = waive_penalty_charge_and_not_reversed

    @property
    def with_hold_tax_and_not_reversed(self):
        """Gets the with_hold_tax_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The with_hold_tax_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._with_hold_tax_and_not_reversed

    @with_hold_tax_and_not_reversed.setter
    def with_hold_tax_and_not_reversed(self, with_hold_tax_and_not_reversed):
        """Sets the with_hold_tax_and_not_reversed of this SavingsAccountTransactionData.


        :param with_hold_tax_and_not_reversed: The with_hold_tax_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._with_hold_tax_and_not_reversed = with_hold_tax_and_not_reversed

    @property
    def withdrawal(self):
        """Gets the withdrawal of this SavingsAccountTransactionData.  # noqa: E501


        :return: The withdrawal of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._withdrawal

    @withdrawal.setter
    def withdrawal(self, withdrawal):
        """Sets the withdrawal of this SavingsAccountTransactionData.


        :param withdrawal: The withdrawal of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._withdrawal = withdrawal

    @property
    def withdrawal_fee_and_not_reversed(self):
        """Gets the withdrawal_fee_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501


        :return: The withdrawal_fee_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._withdrawal_fee_and_not_reversed

    @withdrawal_fee_and_not_reversed.setter
    def withdrawal_fee_and_not_reversed(self, withdrawal_fee_and_not_reversed):
        """Sets the withdrawal_fee_and_not_reversed of this SavingsAccountTransactionData.


        :param withdrawal_fee_and_not_reversed: The withdrawal_fee_and_not_reversed of this SavingsAccountTransactionData.  # noqa: E501
        :type: bool
        """

        self._withdrawal_fee_and_not_reversed = withdrawal_fee_and_not_reversed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavingsAccountTransactionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavingsAccountTransactionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
